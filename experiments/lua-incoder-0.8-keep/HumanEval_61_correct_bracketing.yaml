name: HumanEval_61_correct_bracketing
language: lua
prompt: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
  \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
  )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
  (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
  \ correct_bracketing(brackets)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
  \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
  \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
  \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
  \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
  \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
  \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  brackets = brackets:gsub(\"(%b)(%b)\", function(c1,c2)\n    return\
    \ c1:len() == 1 and c1:sub(1,1) == \"(\" and c2:len() == 1 and c2:sub(1,1) ==\
    \ \")\"\n  end)\n  return brackets:len() == 1 and brackets:sub(1,1) == \"(\"\n\
    end", "  local open_brackets = brackets:gsub(\"[(%w)]+\", \"\"):gsub(\"%w+\",\
    \ \"\"):gsub(\"%w\", \"\")\n  local closed_brackets = brackets:gsub(\"[(%w)]+\"\
    , \"\")\n  local open_count = open_brackets:len()\n  local closed_count = closed_brackets:len()\n\
    \  if open_count ~= closed_count then\n    return false\n  end\n  -- Check for\
    \ balanced parens.\n  for i = 1, open_count do\n    local open_char = open_brackets:sub(i,\
    \ 1)\n    if open_char:sub(1, 1) ~= close_char then\n      return false\n    end\n\
    \  end\n  return true\nend", "  brackets = brackets:gsub(\"()\", \"\")\n  return\
    \ brackets:sub(1, 1):find(\")\") == nil\nend", "\tlocal opening, brackets = brackets:gsub(\"\
    %([()])\", \"%%%1\"):gsub(\"%([()]*)(%%)\", \"%%%1%%\"):gsub(\"%([()]*)(%%)\"\
    , \"%%%1%%\"):gsub(\"%([()]*)(%%)\", \"%%%1%%\")\n\tlocal closing, brackets =\
    \ brackets:gsub(\"%([)]\"), \"%%%1\"):gsub(\"%([)]*)(%%)\", \"%%%1%%\"):gsub(\"\
    %([)]*)(%%)\", \"%%%1%%\"):gsub(\"%([)]*)(%%)\", \"%%%1%%\")\n\treturn opening:sub(1,\
    \ 1) == closing:sub(1, 1)\nend", "  brackets = brackets:gsub(\"[()\"]\", \"\"\
    )\n  return brackets:match(\"^[()]*$\") == brackets\nend", "   local opening_brackets\
    \ = brackets:gsub(\"[()]\", \"\"):gsub(\"{()}\", \"\"):gsub(\"{{}}\", \"\"):gsub(\"\
    {}}\", \"\"):gsub(\"{}\", \"\"):gsub(\"()\", \"\"):gsub(\"{}\", \"\")\n   for\
    \ i = 1, #opening_brackets do\n      local opening = opening_brackets:sub(i, i)\n\
    \      if opening:sub(1, 1) ~= opening:sub(#opening - 1, #opening - 1) then\n\
    \         return false\n      end\n   end\n   return true\nend", "   local stack\
    \ = {}\n   for i = 1, #brackets do\n      local c = brackets[i]\n      if c ==\
    \ '(' or c == '[' then\n         table.insert(stack, 1)\n      elseif c == ')'\
    \ or c == ']' then\n         if stack[#stack] == 1 then\n            stack[#stack]\
    \ = nil\n         else\n            table.insert(stack, 0)\n         end\n   \
    \   else\n         return false\n      end\n   end\n   if #stack > 0 then\n  \
    \    return false\n   end\n   return true\nend", "\tlocal open_brackets = brackets:gsub(\"\
    ^%w+%w\", \"\"):gsub(\"%w+%w+\", \"\")\n\tlocal closed_brackets = brackets:gsub(\"\
    %w+%w\", \"%w%w\"):gsub(\"%w+\", \"%w\")\n\tlocal num_open_brackets = #open_brackets\n\
    \tlocal num_closed_brackets = #closed_brackets", "  if brackets == \"\" or brackets\
    \ ~= brackets then return false end\n  local opening, closing = brackets:find('%[(%['),\
    \ brackets:find('%[%]')\n  if opening == -1 or closing == -1 then return false\
    \ end\n  local opening = brackets:find(opening)\n  if opening == -1 then return\
    \ false end\n  local closing = brackets:find(closing)\n  if closing == -1 then\
    \ return false end\n  return true\nend", "   brackets = brackets:gsub(\"(%b()%b)\"\
    , \"%b()\")\n   brackets = brackets:gsub(\"(%b()%b()%b)\", \"%b()\")\n   brackets\
    \ = brackets:gsub(\"(%b()%b()%b()%b)\", \"%b()\")\n   brackets = brackets:gsub(\"\
    (%b()%b()%b()%b()%b)\", \"%b()\")\n   brackets = brackets:gsub(\"(%b()%b()%b()%b()%b()%b)\"\
    , \"%b()\")\n   return brackets:sub(1, 1) == \"()\" \nend", "  local opening_count\n\
    \  local opening_brackets\n  local closing_count\n  local closing_brackets\n \
    \ for opening_count, opening_brackets in string.gmatch(brackets, \"([^()]+)(.*)\"\
    ) do\n    local opening_bracket = opening_brackets\n    local closing_count =\
    \ opening_count + 1\n    local closing_brackets = \"\"\n    while closing_count\
    \ < opening_count and opening_bracket ~= \"\" and opening_bracket:sub(1, 1) ~=\
    \ \")\" do\n      closing_count = closing_count + 1\n      closing_brackets =\
    \ closing_brackets .. opening_bracket:sub(1, 1)\n      opening_bracket = opening_bracket:sub(2)\n\
    \    end\n    if closing_count < opening_count then\n      return false\n    end\n\
    \    if opening_bracket:sub(1, 1) ~= \"(\" then\n      return false\n    end\n\
    \    local closing_symbol = closing_brackets\n    if closing_symbol:sub(1, 1)\
    \ ~= \")\" then\n      closing_symbol = closing_symbol .. \")\"\n    end\n   \
    \ if opening_bracket:len() ~= opening_count + 1 or opening_bracket:sub(1, 1) ~=\
    \ closing_symbol then\n      return false\n    end\n  end\n  return true\nend",
  "    local opening = brackets:sub(1,1)\n    local closing = brackets:sub(2)\n  \
    \  if opening ~= opening or closing ~= closing then\n        return false\n  \
    \  end\n    local new_brackets = brackets:gsub(\"%S+\", function (str)\n     \
    \   return str:sub(1,1)\n    end)\n    if new_brackets ~= brackets then\n    \
    \    return false\n    end\n    return true\nend", "  for i, s in pairs(brackets)\
    \ do\n    if string.sub(s, 1, 1) == \"(\" then\n      return string.sub(s, 1,\
    \ 1) == \")\" and (i+1) == #brackets\n    end\n  end\n  return false\nend", " \
    \ local opening, closing = brackets:gsub(\"^[()]+\", \"\"), brackets:gsub(\"[)]+$\"\
    , \"\")\n  return not (opening:find(closing) or closing:find(opening))\nend",
  "    brackets = brackets or \"\"\n    local open_brackets = \"\"\n    local close_brackets\
    \ = \"\"\n    for i = 1, #brackets do\n        if brackets[i] == \"(\" then\n\
    \            open_brackets = open_brackets .. brackets[i]\n        elseif brackets[i]\
    \ == \")\" then\n            close_brackets = close_brackets .. brackets[i]\n\
    \        elseif brackets[i] == \",\" then\n            if open_brackets ~= \"\"\
    \ then\n                close_brackets = close_brackets .. \",\"\n           \
    \ end\n        else\n            return false\n        end\n    end\n    open_brackets\
    \ = open_brackets:sub(1, #open_brackets)\n    close_brackets = close_brackets:sub(1,\
    \ #close_brackets)\n    return open_brackets == close_brackets\nend", "    if\
    \ brackets:sub(1,1) == \"(\" then\n        return correct_bracketing(brackets)\n\
    \    end\n    if brackets:sub(1,1) ~= \")\" then\n        return false\n    end\n\
    \    return correct_bracketing(brackets:sub(2))\nend", "\tbrackets = brackets:gsub(\"\
    ^%[(%+%?)(%-)(]\", \"%%%1\")\n\tbrackets = brackets:gsub(\"%[(%+%?)(%-)(]\", \"\
    %1\")\n\tbrackets = brackets:gsub(\"%[)(%+%?)(%-)(%]\", \"%1\")\n\tbrackets =\
    \ brackets:gsub(\"%[)(%+%?)(%-)%]\", \"%1\")\n\tbrackets = brackets:gsub(\"%[)(%+%?)(%-)%]\"\
    , \"%1\")\n\tbrackets = brackets:gsub(\"%[)(%+%?)(%-)]\", \"%1\")\n\tbrackets\
    \ = brackets:gsub(\"%[)(%+%?)(%-)]\", \"%1\")\n\tbrackets = brackets:gsub(\"%[)(%+%?)(%)]\"\
    , \"%1\")\n\tbrackets = brackets:gsub(\"%[)(%+%?)(%)]\", \"%1\")\n\tbrackets =\
    \ brackets:gsub(\"%[)(%+%?)]\", \"%1\")\n\tbrackets = brackets:gsub(\"%[)(%+%?)]\"\
    , \"%1\")\n\tbrackets = brackets:gsub(\"%[)(%+)]\", \"%1\")\n\tbrackets = brackets:gsub(\"\
    %[)(%+)]\", \"%1\")\n\tbrackets = brackets:gsub(\"%[)(%)]\", \"%1\")\n\tbrackets\
    \ = brackets:gsub(\"%[)(%)]\", \"%1\")\n\tbrackets = brackets:gsub(\"%[)]\", \"\
    %1\")\n\tbrackets = brackets:gsub(\"%[)]\", \"%1\")\n\tbrackets = brackets:gsub(\"\
    %)]\", \"%1\")\n\tbrackets = brackets:gsub(\"%)]\", \"%1\")\n\tbrackets = brackets:gsub(\"\
    %)]\", \"%1\")\n\tbrackets = brackets:gsub(\"%)]\", \"%1\")\n\tbrackets = brackets:gsub(\"\
    %)]\", \"%1\")\n\tbrackets = brackets:gsub(\"%)]\", \"%1\")\n\tbrackets = brackets:gsub(\"\
    %)]\", \"%1\")\n\tbrackets = brackets:gsub(\"%)]\", \"%1\")\n\tbrackets = brackets:gsub(\"\
    %)]\", \"%1\")\n\tbrackets = brackets:gsub(\"%)]\", \"%1\")\n\tbrackets = brackets:gsub(\"\
    %)]\", \"%1\")\n\tbrackets = brackets:gsub", "  local opens = true\n  local closes\
    \ = true\n  for i = 1, #brackets do\n    local c = brackets[i]\n    if c == \"\
    (\" then\n      if not opens then\n        return false\n      end\n      opens\
    \ = false\n    elseif c == \")\" then\n      if not closes then\n        return\
    \ false\n      end\n      closes = false\n    else\n      if opens or closes then\n\
    \        return false\n      end\n    end\n  end\n  return true\nend", "  if brackets:sub(1,1)\
    \ ~= brackets:sub(#brackets,1) then\n    return false\n  end\n  local i = 0\n\
    \  while i < #brackets and brackets[i]:sub(#brackets,1) ~= brackets[i+1]:sub(#brackets,1)\
    \ do\n    i = i + 1\n  end\n  if i == #brackets then\n    return true\n  elseif\
    \ i == #brackets-1 then\n    return correct_bracketing(brackets[i+1])\n  end\n\
    \  return false\nend", "   return brackets == string.gsub(brackets, \"([^()]+)(\\\
    ()\", \"%1(%2)\")\nend", "  brackets = brackets:gsub(\"()\", \"\"):gsub(\"^\\\\\
    )?\\\\(([^)]*)\\\\)$\", \"$1\")\n  for i = 1, #brackets do\n    if brackets[i]\
    \ != brackets[#brackets] then\n      return false\n    end\n  end\n  return true\n\
    end", "  for idx = 1, #brackets do\n    local opening = brackets[idx:idx:len()]\n\
    \    local closing = brackets[idx+1:idx+2:len()]\n    if opening ~= closing then\n\
    \      return false\n    end\n  end\n  return true\nend", "  brackets = brackets\
    \ .. \" \"\n  local open_count, close_count = 1, 0\n  local i = 1, #brackets\n\
    \  while i < #brackets do\n    if brackets[i] == \"(\" then\n      open_count\
    \ = open_count + 1\n    elseif brackets[i] == \")\" then\n      close_count =\
    \ close_count + 1\n    end\n    i = i + 1\n  end\n  local open_brackets = open_count\
    \ > close_count\n  -- if the number of open brackets is greater than the number\
    \ of close brackets,\n  -- then the brackets are correct\n  return open_brackets\n\
    end", "\t-- If brackets is empty, return True.\n\tif brackets == \"\" then return\
    \ True end", "  return brackets == \"()\" or brackets == \"[]\" or\n         (brackets\
    \ == \"()\" and brackets:sub(1, 1)) == \"[\" or\n         (brackets == \"()\"\
    \ and brackets:sub(2, 2)) == \"{\" or\n         (brackets == \"[]\" and brackets:sub(1,\
    \ 1)) == \"{\" or\n         (brackets == \"[]\" and brackets:sub(2, 2)) == \"\
    (\" or\n         brackets == \")(\"\nend", "  local opening_brackets = brackets:gsub(\"\
    [()%[(%)]]\", \"\")\n  local closing_brackets = brackets:gsub(\"[()%[)]]\", \"\
    \")\n  return opening_brackets == closing_brackets\nend", "  brackets = brackets:gsub(\"\
    [^()]+\", function (x)\n    if x == \"(\" then\n      return \")\"\n    elseif\
    \ x == \"[\" then\n      return \"]\"\n    elseif x == \"{\" then\n      return\
    \ \"}\"\n    else\n      return x\n    end\n  end)\n  return brackets:sub(1, 1)\
    \ == \"(\"\nend", "  local brackets = brackets or \"\"\n  for _, opening_bracket\
    \ in string.gmatch(brackets, \"()\") do\n    local closing_bracket = brackets[string.len(brackets)\
    \ - 1]\n    if closing_bracket ~= opening_bracket then\n      return false\n \
    \   end\n    brackets = brackets[string.len(brackets) - 2:]\n  end\n  return true\n\
    end", "  if brackets == \"\" then return true end\n  for i = 1, #brackets do\n\
    \    if brackets[i+1] ~= brackets[i] then return false end\n  end\n  return true\n\
    end", "  local openings = string.gsub(brackets, \"\\\\(\", \"\\\\2(\")\n  local\
    \ closings = string.gsub(brackets, \"\\\\)\", \"\\\\1\\\\2\")\n  return openings:len()\
    \ == closings:len()\nend", "   if #brackets == 1 then\n      return brackets[1]\
    \ == brackets[#brackets] -- first and last brackets are the same\n   else\n  \
    \    for i = 1, #brackets do\n         if brackets[i] == '(' and brackets[i -\
    \ 1] ~= '(' then\n            return false\n         end\n         if brackets[i]\
    \ == '[' and brackets[i - 1] ~= ']' then\n            return false\n         end\n\
    \         if brackets[i] == ']' and brackets[i - 1] == '[' then\n            return\
    \ false\n         end\n      end\n      return true\n   end\nend", "   if not\
    \ brackets or brackets ~= brackets then\n      return false\n   end\n   local\
    \ opening_brackets = brackets:sub(1, 1)\n   local closing_brackets = brackets:sub(2)\n\
    \   return opening_brackets == \"(\" and closing_brackets == \")\"\nend", "  \
    \  brackets = brackets:gsub(\"^[()]*\", \"\"):gsub(\"[)]*$\", \"\"):gsub(\"^()*\"\
    , \"\"):gsub(\"()*$\", \"\")\n    return brackets:sub(1, 1):sub(1, 1) ~= brackets:sub(3,\
    \ 3):sub(1, 1)\nend", "  local opening_brackets = {}\n  for char in brackets:gmatch(\"\
    [()%-]\") do\n    opening_brackets[char] = true\n  end", "  local opening = false\n\
    \  for char in brackets do\n    if char == \"(\" then\n      opening = not opening\n\
    \    end\n  end\n  return not opening\nend", "    local i = 1\n    while i <=\
    \ #brackets do\n        if brackets[i + 1] ~= brackets[i] then\n            return\
    \ false\n        end\n        i = i + 1\n    end\n    return true\nend", "  brackets\
    \ = brackets:gsub(\"[(%[(%[]%)]*)]\", \"\"):gsub(\"%[%)]\", \"\"):gsub(\"%[(%)%]\"\
    , \"\")\n  if brackets ~= \"\" then\n    if brackets[1] == brackets[#brackets]\
    \ then\n      -- the brackets match, so the string is syntactically correct.\n\
    \      return true\n    else\n      -- wrong number of brackets.\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local opening, closing = brackets:match(\"\
    ^[(%a]+$\")\n  assert(opening ~= nil, \"brackets must be a string\")\n  assert(closing\
    \ ~= nil, \"brackets must be a string\")\n  assert(opening == \"(\" and closing\
    \ == \")\", \"brackets must be a string\")\n  return true\nend", "\treturn brackets\
    \ == brackets or brackets == \"()\" or\n\t\t(brackets == \"[\" and brackets ~=\
    \ brackets and brackets ~= brackets .. \"]\" and\n\t\tbrackets ~= brackets ..\
    \ \"][]\")\nend", "   local stack = {}\n   local result = true\n   for i = 1,\
    \ #brackets do\n      local char = brackets[i]\n      if char == \"(\" then\n\
    \         table.insert(stack, char)\n      elseif char == \")\" then\n       \
    \  if stack[#stack] == char then\n            stack[#stack] = nil\n         else\n\
    \            result = false\n         end\n      elseif char == \",\" then\n \
    \        if stack[#stack] == nil then\n            result = false\n         elseif\
    \ stack[#stack] == char then\n            stack[#stack] = nil\n         else\n\
    \            result = false\n         end\n      else\n         result = false\n\
    \      end\n   end\n   return result\nend", "  -- Find out if the brackets string\
    \ only contains brackets.\n  if brackets == \"\" then\n    return true\n  end\n\
    \  -- Find out if the brackets string contains brackets and opening brackets.\n\
    \  local open_brackets = brackets:find(\"()\")\n  if open_brackets == 0 then\n\
    \    -- Find out if the brackets string contains brackets and closing brackets.\n\
    \    local closing_brackets = brackets:find(\")\")\n    -- If there are no closing\
    \ brackets in the brackets string then this string only contains opening brackets.\n\
    \    return closing_brackets == 0\n  else\n    -- If there are brackets in the\
    \ brackets string then there are multiple opening brackets.\n    return true\n\
    \  end\nend", "    local opens = brackets:gsub(\"(%b+)\", function(a)\n      \
    \  return a:reverse()\n    end)\n    local closes = brackets:gsub(\"(%b+)\", function(a)\n\
    \        return a:reverse()\n    end)\n    for i=1,#opens do\n        if opens[i-1]\
    \ == closes[i] then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    brackets = brackets:gsub(\"(\", \"($1\")\n    brackets = brackets:gsub(\"\
    )\", \"($1)\")\n    return brackets ~= brackets\nend", "    return brackets ~=\
    \ \"\" and\n        (brackets:find(\"(\") == brackets:find(brackets:reverse(\"\
    )\"))\nend", "  local brackets = brackets == \"()\" .. brackets or brackets ==\
    \ \"[]\" .. brackets\n  local opening = brackets:sub(1,1)\n  local closing = brackets:sub(end,1)\n\
    \  return opening ~= closing or opening\nend", "    brackets = brackets:gsub(\"\
    %w+\", function (string)\n        local open_count = string:gsub(\"^%s*\", \"\"\
    ):gsub(\"%s*$\", \"\"):gsub(\"^%s*(%W)\", \"\"):gsub(\"(%W)*$\", \"\")\n     \
    \   if open_count ~= \"\" then return open_count == \"(\" end\n        open_count\
    \ = string:gsub(\"^(%W)*\", \"\"):gsub(\"(%W)*$\", \"\")\n        if open_count\
    \ ~= \"\" then return open_count == \"(\" end\n        return false\n    end)\n\
    \    return brackets ~= \"\" and brackets:sub(1, #brackets) == brackets\nend",
  "    -- Split brackets string into an array of \"(\" and \")\".\n    local opening_brackets\
    \ = brackets:gsub(\"[()]\", \"\")\n    for i = 1, #opening_brackets do\n     \
    \   if opening_brackets[i] != opening_brackets[i+1] then\n            return false\n\
    \        end\n    end\n    return true\nend", "  return brackets:sub(1, #brackets):gsub(\"\
    %[(%)][(%)]\", function(s)\n    local opening = s:sub(1, 1)\n    local closing\
    \ = s:sub(2, 1)\n    return brackets ~= opening .. closing ~= opening .. \"()\"\
    \n  end)\nend", "  local opening_bracket = brackets:sub(1, 1)\n  local closing_bracket\
    \ = brackets:sub(2, 1)\n  return opening_bracket..closing_bracket ~= \"\"\nend",
  "   brackets = brackets:gsub(\"[()]+\", \" \")\n   return brackets ~= \"\" and brackets:find(brackets+1,\
    \ true) ~= nil end\nend", "  brackets = brackets:gsub(\"^%[()%](%[()%])*$\", \"\
    \")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%", "  local stack = {}\n  for i\
    \ = 1, #brackets do\n    stack[i] = {}\n    stack[i][1] = brackets[i]\n    stack[i][2]\
    \ = brackets[i]\n  end\n  while true do\n    local top = stack[1][1]\n    local\
    \ bottom = stack[1][2]\n    if top == \"\" then\n      stack[1] = stack[2]\n \
    \     stack[2] = nil\n    else\n      if top == \")\" then\n        if stack[1][1]\
    \ == \"(\" then\n          stack[1] = nil\n          stack[2] = stack[3]\n   \
    \       stack[3] = nil\n        else\n          stack[1] = stack[2]\n        \
    \  stack[2] = nil\n        end\n      elseif top == \"(\" then\n        if stack[1][1]\
    \ == \"(\" then\n          stack[1] = nil\n          stack[2] = stack[3]\n   \
    \       stack[3] = nil\n        else\n          stack[1][#stack[1] + 1] = top\n\
    \          stack[1] = stack[2]\n          stack[2] = nil\n          stack[3] =\
    \ nil\n        end\n      else\n        if stack[1][1] == \"\" then\n        \
    \  stack[1][1] = top\n          stack[1][2] = bottom\n          stack[1] = stack[2]\n\
    \          stack[2] = nil\n          stack[3] = nil\n        elseif bottom ==\
    \ \"\" then\n          stack[1][#stack[1] + 1] = top\n          stack[1] = stack[2]\n\
    \          stack[2] = nil\n          stack[3] = nil\n        elseif top ~= \"\
    )\" and top ~= \")()\" and top ~= \")()()\" then\n          stack[1][#stack[1]\
    \ + 1] = top\n          stack[1] = stack[2]\n          stack[2] = nil\n      \
    \    stack[3] = nil\n        else\n          stack[1][#stack[1] + 1] = top\n \
    \         stack[1] = stack[3]\n          stack[3] = nil\n        end\n      end\n\
    \    end\n    local ok = true\n    for i = 1, #stack do\n      if not stack[i]\
    \ then\n        ok = false\n        break\n      end\n    end\n    if not ok then\n\
    \      return false\n    end\n  end\nend", "    return brackets:gsub(\"^([(])(.*)$\"\
    , function(parens, left, right)\n        return parens:find(right) == nil\n  \
    \  end)\nend", "\tlocal opening = {}\n\tfor _, b in ipairs(brackets) do\n\t\t\
    opening[b] = true\n\tend\n\tlocal closing = {}\n\tfor b, o in pairs(opening) do\n\
    \t\tif b == \"(\" then\n\t\t\tclosing[b] = o\n\t\tend\n\tend\n\t-- test if every\
    \ opening bracket has a corresponding closing bracket\n\tfor _, o in pairs(opening)\
    \ do\n\t\tif not closing[o] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend", "  -- If there are no brackets, it's fine.\n  -- Brackets is \"\"\
    \ by default.\n  if #brackets == 0 then return true end", "    return brackets:match(\"\
    %S+\") ~= nil and brackets:sub(1, 1) ~= brackets:sub(2) \nend\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=lua-patterns,lua |>\nI thought I'd contribute something\
    \ more robust than the other answers proposed. These are the functions I wrote\
    \ based on this SO answer. I didn't want to use Lua's internal string parsing\
    \ functions to accomplish my goals.\nThe functions I wrote:", "  return brackets\
    \ and #brackets == #(brackets):len() and\n    brackets:sub(1, #brackets)\n   \
    \   and brackets:sub(1, #brackets):gsub(\"[()]+\", brackets)\n      and brackets:sub(1,\
    \ #brackets):gsub(\"[^()]+\", \"\")\nend", "  local openings = brackets:gsub(\"\
    ^%[(%[%[(%[(%[\", \"\")\n  local closings = brackets:gsub(\"%]%]%]%]%]\", \"\"\
    )\n  return openings:len() == closings:len()\nend", "  for i, j in pairs(brackets)\
    \ do\n    if i ~= j then return false end\n  end\n  return true\nend", "  local\
    \ opening_brackets = brackets:gsub(\"[()]+\", \"(.-)\")\n  local closing_brackets\
    \ = opening_brackets:gsub(\"(.-)(?!$)\", \"(.)\")\n  return opening_brackets ~=\
    \ closing_brackets\nend", "\tlocal opening = brackets:match(\"^%[(%w+)\\\\)%]$\"\
    )\n\tlocal closing = brackets:match(\"^%[%w%](%w+)$\")\n\treturn not opening:find(closing)\n\
    end", "   local open_count = 0\n   local close_count = 0", "    -- check for a\
    \ stray bracket at the end of the string\n    if not brackets:match(\"%s*\") then\n\
    \        return false\n    end", "   return brackets and brackets:match(\"^%[(%)]*$\"\
    ) ~= nil and\n      brackets:match(\"^(%[(%)]*%[(%)]*%[)]*)$\") ~= nil and\n \
    \     brackets:match(\"^(%[(%)]*%[(%)]*)%[(%)]*%[)]*)$\") ~= nil\nend", "\treturn\
    \ brackets:find(brackets) ~= nil\nend", "   for i = 1, #brackets do\n      if\
    \ brackets[i] == \"(\" then\n         for j = 1, #brackets do\n            if\
    \ brackets[j] == \")\" then\n               return false\n            else\n \
    \              return true\n            end\n         end\n      end\n   end\n\
    end", "  if brackets ~= \"\" then\n    for i = 1, #brackets do\n      if brackets[i]\
    \ == \"(\" then\n        brackets[i] = \")\"\n      elseif brackets[i] == \")\"\
    \ then\n        brackets[i] = \"(\"\n      end\n    end\n    return brackets ==\
    \ \"\"\n  end\n  return false\nend", "   for i=1, #brackets do\n      if brackets[i]\
    \ ~= '(' and brackets[i] ~= ')' then\n         return false\n      end\n   end\n\
    \   return true\nend", "    -- assert brackets ~= '()', 'Brackets are supposed\
    \ to be \"()\".'\n    -- assert brackets ~= '[]', 'Brackets are supposed to be\
    \ \"[]\".'\n    -- assert brackets ~= '{}', 'Brackets are supposed to be \"{}\"\
    .'\n    return brackets:sub(1, 1) == '(' and brackets:sub(brackets:len()-1, 1)\
    \ == ')'\nend", "  -- Return true if brackets is an expression that is enclosed\
    \ by brackets.\n  -- >>> correct_bracketing(\"(foo\")\n  -- False\n  -- >>> correct_bracketing(\"\
    (foo)\")\n  -- True\n  -- >>> correct_bracketing(\"foo)\")\n  -- False\n  -- >>>\
    \ correct_bracketing(\"foo())\")\n  -- True\n  -- >>> correct_bracketing(\"foo()\"\
    )\n  -- False\n  -- >>> correct_bracketing(\"foo()())\")\n  -- True\n  -- >>>\
    \ correct_bracketing(\"foo()())\")\n  -- True\n  -- >>> correct_bracketing(\"\
    (foo))\")\n  -- False\n  -- >>> correct_bracketing(\"(foo)))\")\n  -- True\n \
    \ -- >>> correct_bracketing(\"(foo))))))\")\n  -- True\n  -- >>> correct_bracketing(\"\
    (foo))\"))\n  -- False\n  -- >>> correct_bracketing(\"(foo\"))\n  -- False\n \
    \ -- >>> correct_bracketing(\"foo)\")\n  -- False\n  -- >>> correct_bracketing(\"\
    foo)\"))\n  -- False\n  -- >>> correct_bracketing(\"foo)\"))\n  -- False\n  --\
    \ >>> correct_bracketing(\"(\")\n  -- False\n  -- >>> correct_bracketing(\"))\"\
    )\n  -- False\n  -- >>> correct_bracketing(\"))(\")\n  -- False\n  -- >>> correct_bracketing(\"\
    ))))\")\n  -- False\n  -- >>> correct_bracketing(\")))))\")\n  -- False\n  --\
    \ >>> correct_bracketing(\"()))\")\n  -- False\n  -- >>> correct_bracketing(\"\
    ()))(\")\n  -- False\n  -- >>> correct_bracketing(\"()))))\")\n  -- False\n  --\
    \ >>> correct_bracketing(\"()))))(\")\n  -- False\n  -- >>> correct_bracketing(\"\
    ())((\")\n  -- False\n  -- >>> correct_bracketing(\"())(()\")\n  -- False\n  --\
    \ >>> correct_bracketing(\"(()))\")\n  -- False\n  -- >>> correct_bracketing(\"\
    (()))(\")\n  -- False\n  -- >>> correct_bracketing(\"(()))))\")\n  -- False\n\
    \  -- >>> correct_bracketing(\"(()))))(\")\n  -- False\n  -- >>> correct_bracketing(\"\
    (()))(()\")\n  -- False\n  -- >>> correct_bracketing(\"(()())\")\n  -- False\n\
    \  -- >>> correct_", "  brackets = brackets or \"\"\n  return #brackets > 0 and\
    \ #brackets == #(brackets) * 2 and \"(\" == brackets[1] and \")\" == brackets[#brackets]\
    \ and\n         #brackets == #(brackets) * 2 and \"(\" == brackets[#brackets]\
    \ and\n         #brackets == #(brackets) * 2 and \"(\" == brackets[#brackets]\
    \ and\n         #brackets == #(brackets) * 2 and \"(\" == brackets[#brackets]\
    \ and\n         #brackets == #(brackets) * 2 and \"(\" == brackets[#brackets]\
    \ and\n         #brackets == #(brackets) * 2 and \"(\" == brackets[#brackets]\n\
    end", "  if brackets:len() ~= 1 then\n    return false\n  end\n  for i = 1, brackets:len()\
    \ do\n    if brackets:sub(i,i) ~= brackets:sub(i,i + 1) then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local stack = {}\n  for i, v in ipairs(brackets)\
    \ do\n    if v == \"(\" then\n      table.insert(stack, v)\n    elseif v == \"\
    )\" then\n      if #stack == 1 then\n        return true\n      else\n       \
    \ table.remove(stack, 1)\n      end\n    end\n  end\n  return false\nend", " \
    \ local opening = brackets:find(\"%l\")\n  local closing = brackets:find(\"%l\"\
    , opening+1)\n  local opening_closed = false\n  if opening ~= nil and closing\
    \ ~= nil then\n    local next_opening = brackets:find(\"%l\", closing+2)\n   \
    \ if next_opening ~= nil then\n      if next_opening < opening then\n        opening_closed\
    \ = true\n        opening = nil\n      else\n        closing = next_opening\n\
    \      end\n    end\n  end\n  if opening ~= nil then\n    if opening > opening\
    \ then closing = opening end\n    brackets = brackets:gsub(\"%l\", \")\")\n  else\n\
    \    brackets = brackets:gsub(\"%l\", \"(\")\n  end\n  if opening_closed then\n\
    \    brackets = brackets:gsub(\"%l\", \"(\")\n  end\n  return brackets == \"()\"\
    \nend", "  brackets = brackets:gsub(\"%[(%)([%)])\", \"\\1\\2\\3\")\n  return\
    \ brackets:gsub(\"%[(%)]\", \"\")\nend", "\tlocal opening = {}\n\tlocal closing\
    \ = {}\n\tlocal open = 0\n\tlocal i = 0\n\t\n\twhile i <= #brackets do\n\t\tlocal\
    \ char = brackets[i]:sub(1, 1)\n\t\t\n\t\tif open == 0 then\n\t\t\tif char ==\
    \ '(' then\n\t\t\t\topening[#opening+1] = true\n\t\t\tend\n\t\t\t\n\t\t\tif char\
    \ == ')' then\n\t\t\t\topening[#opening] = true\n\t\t\tend\n\t\t\t\n\t\t\topen\
    \ = #opening\n\t\telseif open == #opening then\n\t\t\tif char == '(' then\n\t\t\
    \t\topening[#opening+1] = true\n\t\t\tend\n\t\t\t\n\t\t\tif char == ')' then\n\
    \t\t\t\topening[#opening] = true\n\t\t\tend\n\t\t\t\n\t\t\topen = 0\n\t\telse\n\
    \t\t\topening[open] = true\n\t\t\topen = open + 1\n\t\tend\n\t\t\n\t\ti = i +\
    \ 1\n\tend\n\t\n\tlocal ok = true\n\t\n\tfor i = 1, #opening do\n\t\tif not opening[i]\
    \ then\n\t\t\tok = false\n\t\tend\n\tend\n\t\n\treturn ok\nend", "   -- If brackets\
    \ is null, return the boolean true.\n   if brackets == nil then\n      return\
    \ true\n   end\n   -- If brackets contains only \"(\" and \")\", then return true.\n\
    \   if #brackets == 2 and brackets == \"(\" and brackets == \")\" then\n     \
    \ return true\n   end\n   -- If brackets contains \"[\", \"]\", \"<\", \">\",\
    \ \"{\", \"}\", and \"(\", return false.\n   if #brackets == 2 and brackets ==\
    \ \"[\" and brackets == \"]\" and\n      brackets == \"<\" and brackets == \"\
    >\" and\n      brackets == \"{\" and brackets == \"}\" and\n      brackets ==\
    \ \"(\" then\n      return false\n   end\n   -- If brackets is something other\
    \ than \"(\" and \")\", return false.\n   return false\nend", "   if brackets:sub(1,1)\
    \ ~= \")\" and brackets:sub(1,1) ~= \"(\" then\n      return false\n   end\n \
    \  local opening_bracket, closing_bracket = string.match(brackets, \"(%S)(%S)\"\
    )\n   if opening_bracket ~= closing_bracket then return false end\n   local left_brackets\
    \ = brackets:sub(2) -- string with leading \"(\" removed\n   if left_brackets:sub(1,1)\
    \ ~= \")\" and left_brackets:sub(1,1) ~= \"(\" then\n      return false\n   end\n\
    \   return true\nend", "   if brackets == \"\" then\n      return false\n   end",
  "   return brackets:gsub(\"[()]*\", function()\n      local _, _i, open = string.find(brackets,\
    \ \"[\", 1, true)\n      if not open then return \"\" end\n      local _, _i,\
    \ close = string.find(brackets, \"]\", open + 1, true)\n      if not close then\
    \ return \"\" end\n      return brackets[open + 1]\n   end)\nend", "    local\
    \ open = brackets:find(\"(\")\n    local close = brackets:find(\")\")\n    if\
    \ close == nil then\n        return open ~= nil\n    else\n        return open\
    \ ~= close and close < open\n    end\nend", "    brackets = brackets:gsub(\"(\"\
    , \"\\\\(\"):gsub(\")\", \"\\\\)\")\n    return brackets:match(\"^\\\\(.*\\\\\
    )$\") ~= nil\nend", "    local opening_brackets = brackets:gsub(\"^%[(%)][(%)]*$\"\
    , \"\")\n    local closing_brackets = brackets:gsub(\"^%[%)][(%)]*$\", \"\")\n\
    \    for i = 0, #opening_brackets, 1 do\n        if not opening_brackets[i]:find(\"\
    %[\") then\n            return false\n        end\n        if not closing_brackets[i]:find(\"\
    %]\") then\n            return false\n        end\n    end\n    return true\n\
    end", "  local open_count = 0\n  local close_count = 0\n  for i = 1, #brackets\
    \ do\n    local bracket = brackets[i]\n    if bracket == \"(\" then\n      open_count\
    \ = open_count + 1\n    elseif bracket == \")\" then\n      close_count = close_count\
    \ + 1\n    end\n  end\n  return open_count == close_count\nend", "\tlocal openings\
    \ = {}\n\tlocal closings = {}\n\tlocal opening = true\n\tfor i = 1, #brackets\
    \ do\n\t\tif not opening then\n\t\t\topening = brackets[i]\n\t\t\topenings[opening]\
    \ = true\n\t\telse\n\t\t\tif brackets[i] == \"(\" then\n\t\t\t\topening = false\n\
    \t\t\t\tif not openings[opening] then\n\t\t\t\t\tclosings[opening] = brackets[i]\n\
    \t\t\t\tend\n\t\t\telseif brackets[i] == \")\" then\n\t\t\t\topening = true\n\t\
    \t\telse\n\t\t\t\tassert(false)\n\t\t\tend\n\t\tend\n\tend\n\tfor i = #brackets,\
    \ 1, -1 do\n\t\tif not opening then\n\t\t\topening = brackets[i]\n\t\t\topenings[opening]\
    \ = true\n\t\telse\n\t\t\tif brackets[i] == \")\" then\n\t\t\t\topening = true\n\
    \t\t\telse\n\t\t\t\tassert(false)\n\t\t\tend\n\t\tend\n\tend\n\tfor key, value\
    \ in pairs(openings) do\n\t\tif value ~= closings[key] then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend", "   -- Check that brackets is well-formed.\n\
    \   if not brackets:match \"^%s*(%()%()%s*$\" then\n      return false\n   end",
  "   return (string.len(brackets) == 1 and brackets[1] == \"(\") or\n          string.find(brackets,\
    \ \"(\", 1) + 1 == string.find(brackets, \")\", 1))\nend", "  brackets = brackets:gsub(\"\
    ([^()]+)\", \"\")\n  for i = 1, #brackets do\n    if brackets[i]:sub(1, 1) ==\
    \ \"(\" then\n      if not (i + 1 == #brackets) or brackets[i + 1]:sub(1, 1) ==\
    \ \"(\" then\n        return false\n      end\n    end\n    if brackets[i]:sub(1,\
    \ 1) == \"(\" then\n      return false\n    end\n    if brackets[i]:sub(1, 1)\
    \ == \")\" then\n      if brackets[i + 1] ~= \"(\" then\n        return false\n\
    \      end\n    end\n  end\n  return true\nend", "\tlocal opening_brackets = brackets:gsub(\"\
    [()%]\", \"\")\n\tlocal closing_brackets = brackets:gsub(\"[%)]\", \"\")\n\tlocal\
    \ num_opening = #opening_brackets\n\tlocal num_closing = #closing_brackets\n\t\
    if num_opening ~= num_closing then\n\t\treturn false\n\tend\n\tfor i = 1, num_opening\
    \ do\n\t\tlocal opening_bracket = opening_brackets[i]\n\t\tlocal closing_bracket\
    \ = closing_brackets[i]\n\t\tif opening_bracket ~= closing_bracket then\n\t\t\t\
    return false\n\t\tend\n\tend\n\treturn true\nend", "  local open_brackets = brackets:gsub(\"\
    %[(%a)]\", function(bracket)\n    local open_count = 0\n    for c in string.gmatch(bracket,\
    \ \"()\") do\n      open_count = open_count + 1\n      if c == '(' then\n    \
    \    return open_count\n      elseif c == ')' then\n        return open_count\
    \ - 1\n      end\n    end\n    return 0\n  end)\n  return open_brackets == 0\n\
    end", "  -- First, split the brackets string into a list.\n  -- >>> brackets =\
    \ \"()\"\n  -- >>> brackets = \"(()())\"\n  -- >>> brackets = \"(()\"\n  -- >>>\
    \ brackets = \"()()\"\n  -- >>> brackets = \"())\"\n  -- >>> brackets = \"(())\"\
    \n  -- >>> brackets = \"()()())\"\n  -- >>> brackets = \"(()()())\"\n  -- >>>\
    \ brackets = \"(()()(()())())\"\n  -- >>> brackets = \"(()(())())\"\n  -- >>>\
    \ brackets = \"(()(()()))\"\n  -- >>> brackets = \"()(()())\"\n  -- >>> brackets\
    \ = \"()(())\"\n  -- >>> brackets = \"()()())\"\n  -- >>> brackets = \"(()())()\"\
    \n  -- >>> brackets = \"(()()())(\"\n  -- >>> brackets = \"(()(())())\"\n  --\
    \ >>> brackets = \"(()()(()())())\"\n  -- >>> brackets = \"(()(()(()())())\"\n\
    \  -- >>> brackets = \"(()(()(()())))\"\n  -- >>> brackets = \"(()(()(()())))\"\
    \n  -- >>> brackets = \"(()(()(()())))\"\n  -- >>> brackets = \"(()()())())\"\n\
    \  -- >>> brackets = \"(()()())(\"\n  -- >>> brackets = \"(()()(())())\"\n  --\
    \ >>> brackets = \"(()(())())\"\n  -- >>> brackets = \"(()(()())())\"\n  -- >>>\
    \ brackets = \"(()())(()())\"\n  -- >>> brackets = \"(()())(()())\"\n  -- >>>\
    \ brackets = \"(()())(()())\"\n  -- >>> brackets = \"(()()())(()())\"\n  -- >>>\
    \ brackets = \"(()(())(()())\"\n  -- >>> brackets = \"(()(()())(()())\"\n  --\
    \ >>> brackets = \"(()(()())(()())\"\n  -- >>> brackets = \"(()())())(()())\"\n\
    \  -- >>> brackets = \"(()())())(()())\"\n  -- >>> brackets = \"(()())())(()())\"\
    \n  -- >>> brackets = \"(()())())(()())\"\n  -- >>> brackets = \"(()())())(()())\"\
    \n  -- >>> brackets = \"(()())(()())()\"\n  -- >>> brackets = \"(()())(()())(\"\
    \n  -- >>> brackets = \"(()())(()())())\"\n  -- ", "    return brackets == \"\"\
    \ or brackets ~= brackets:upper() or\n           brackets:sub(1, 1):lower() ~=\
    \ brackets:sub(2, 2):lower()\nend", "  brackets = brackets:gsub(\"(%b())(%b)(%b)\"\
    , \"%b%1%2%3\")\n  return brackets:sub(1, 1):sub(1, 1):sub(1, 1):sub(1, 1) ==\
    \ brackets:sub(2, 1)\nend", "    return brackets:find(\"[()\")\n        ~= nil\
    \ and\n        brackets:find(\")\")\n        ~= nil and\n        brackets:find(\"\
    [\")\n        ~= nil and\n        brackets:find(\"]\")\n        ~= nil and\n \
    \       brackets:find(\"()\")\n        ~= nil\nend", "   if brackets == \"\" or\
    \ brackets == \"()\" or brackets == \"[]\" then\n      return true\n   end\n \
    \  local opening_brackets = brackets:gsub(\"%b([%a])\", \"%1\")\n   for i = 1,\
    \ #opening_brackets do\n      local closing_bracket = opening_brackets[i+1]\n\
    \      if not closing_bracket then\n         return false\n      elseif closing_bracket\
    \ == \"(\" then\n         return not correct_bracketing(opening_brackets[i+2])\n\
    \      elseif closing_bracket == \"[\" then\n         return not correct_bracketing(opening_brackets[i+2])\n\
    \      else\n         return false\n      end\n   end\n   return true\nend", " \
    \ local opening_brackets = brackets:gsub(\"^[()]*\", \"\")\n  for i = 1, #opening_brackets\
    \ do\n    if not opening_brackets:sub(i, i):sub(1, 1) = \")\" then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local opening, closing = brackets:gsub(\"\
    [()%]\", \"\")\n  return opening:len() == closing:len() -- true if both brackets\
    \ are the same\nend", "    local open_count = 1\n    local closed_count = 0\n\
    \    for i = 1, #brackets do\n        if brackets[i] ~= brackets[i-1] then\n \
    \           open_count = open_count + 1\n        else\n            closed_count\
    \ = closed_count + 1\n        end\n    end\n    if open_count ~= closed_count\
    \ then\n        return false\n    else\n        return true\n    end\nend", " \
    \   if brackets == \"\" then\n        return false\n    end\n    brackets = brackets:gsub(\"\
    [(){}]\",\"\")\n    if brackets:find(\"(\") == -1 then\n        return false\n\
    \    end\n    brackets = brackets:gsub(\"([)]\",\"&\")\n    brackets = brackets:gsub(\"\
    (%a)(%b)\",\"%%%02x%%%1x%%%1b\")\n    brackets = brackets:gsub(\"(&)(%%)\",\"\
    %%%1a\")\n    brackets = brackets:gsub(\"(%%)\",\"%1a\")\n    return brackets:find(\"\
    &\") == 0\nend", "  local stack = {}\n  local opening, bracket, closing = unpack(brackets)\n\
    \  local function push_bracket(stack)\n    table.insert(stack, opening)\n  end\n\
    \  local function pop_bracket(stack)\n    opening = stack[#stack]\n    table.remove(stack)\n\
    \  end\n  local function add_closing_bracket(stack)\n    if #stack > 1 then\n\
    \      table.insert(stack, closing)\n    end\n  end\n  add_closing_bracket(stack)\n\
    \  while #stack > 0 do\n    if opening = stack[#stack] then\n      push_bracket(stack)\n\
    \      add_closing_bracket(stack)\n    elseif opening = opening then\n      pop_bracket(stack)\n\
    \    else\n      break\n    end\n  end\n  return #stack == 0\nend", "   return\
    \ brackets and (\n     brackets:gsub(\"[^()]\", function (char)\n        if char\
    \ == \"(\" then\n           return \")\"\n        elseif char == \")\" then\n\
    \           return \"(\"\n        else\n           return char\n        end\n\
    \     end)\n   )\nend\n</cell>\n<text>\nThe next function, remove_brackets, removes\
    \ every occurrence of the string \"(\" and \")\" in the string \"brackets\". It\
    \ returns a new string with the brackets removed. If the string \"brackets\" does\
    \ not contain any brackets, then this function returns \"brackets\".", "  if brackets\
    \ == \"\" then\n    return true\n  end\n  local open_brackets = brackets:gsub(\"\
    %([()]+)(%)\", \"%1\")\n  local closed_brackets = brackets:gsub(\"%[(]%)\", \"\
    %1\")\n  return open_brackets ~= closed_brackets\nend", "   for match in pairs(brackets)\
    \ do\n      if match == \"(\" then\n\t return false\n      end\n      if match\
    \ == \")\" then\n\t return true\n      end\n   end\n   return false\nend", " \
    \ for i = 1, #brackets do\n    local opening = brackets[i]:sub(1, 1)\n    local\
    \ closing = brackets[i]:sub(2, 1)\n    if opening ~= closing then return False\
    \ end\n  end\n  return true\nend", "  return brackets:sub(1, #brackets) * brackets:sub(1,\
    \ #brackets - 1) == '()' or (brackets:sub(1, #brackets) * brackets:sub(1, #brackets\
    \ - 1) == '[' or (brackets:sub(1, #brackets) * brackets:sub(1, #brackets - 1)\
    \ == '{') and not brackets:sub(2, #brackets)\nend", "  local i = 1\n  while i\
    \ <= #brackets do\n    if brackets[i] == \"(\" then\n      i = i + 1\n    elseif\
    \ brackets[i] == \")\" then\n      i = i + 1\n    elseif brackets[i] == \"(\"\
    \ then\n      i = i + 2\n    elseif brackets[i] == \")\" then\n      i = i + 2\n\
    \    else\n      return false\n    end\n  end\n  return true\nend", "  for i,\
    \ j in pairs(brackets) do\n    local current = brackets[i]\n    local next = brackets[j+1]\n\
    \    if not (current and next) then\n      return false\n    end\n    if current\
    \ ~= \")\" then\n      return false\n    end\n  end\n  return true\nend", "  \
    \  -- If the brackets string has a single character, it's not valid.\n    if #brackets\
    \ > 1 then\n        -- A stack of brackets, as we iterate through.\n        local\
    \ stack = {brackets[1]}\n        for i = 2, #brackets do\n            -- If we\
    \ encounter a closing bracket, remove the corresponding opening bracket.\n   \
    \         if brackets[i] == \"(\" or brackets[i] == \")\" then\n             \
    \   -- A closing bracket, remove it from our stack.\n                -- If the\
    \ stack is empty (nothing left to remove in this iteration), we know that it's\
    \ valid.\n                if stack:len() == 0 then\n                    return\
    \ true\n                end\n                -- Pop out our top item from the\
    \ stack and add to the result set.\n                stack:pop()\n            else\n\
    \                -- A non-closing bracket, add it to the stack.\n            \
    \    stack:insert(brackets[i])\n            end\n        end\n    end\n    return\
    \ false\nend", "  local open_brackets = brackets:gsub(\"\\(\", \"(.*)\")\n  local\
    \ close_brackets = brackets:gsub(\"\\)\", \"(.*)\")\n  return open_brackets ~=\
    \ close_brackets\nend", "   if brackets == \"\" then return end\n   brackets =\
    \ brackets:gsub(\"^.\", \".\")\n   local opening = brackets:gsub(\"[()]+\", \"\
    \")\n   local closing = brackets:gsub(\"[)]+\", \"\")\n   if opening:len() < closing:len()\
    \ then return end\n   local bracket = brackets:sub(1, brackets:len()-1)\n   local\
    \ open_count = opening:find(bracket)\n   local close_count = closing:find(bracket)\n\
    \   return open_count == close_count and open_count == 0\nend", "  return brackets:sub(1,1)\
    \ == brackets:sub(3,1) and brackets:sub(1,2) == brackets:sub(3,2) and\n      \
    \   brackets:sub(1,3) == brackets:sub(3,3) and brackets:sub(1,4) == brackets:sub(3,4)\
    \ and\n         brackets:sub(1,5) == brackets:sub(3,5) and brackets:sub(1,6) ==\
    \ brackets:sub(3,6)\nend", "  if brackets:sub(1,1) ~= brackets:sub(#brackets,1)\
    \ then return False end\n  for i = 1, #brackets do\n    local opening = brackets:sub(i,i)\n\
    \    if not closings[opening] then return False end\n    local closing = brackets:sub(i+1,i+1)\n\
    \    if not openings[closing] then return False end\n  end\n  return True\nend",
  "  brackets = brackets:gsub(\"(\", \"\\\\(\")\n  brackets = brackets:gsub(\")\"\
    , \"\\\\)\")\n  brackets = brackets:gsub(\"[\", \"\\\\[\")\n  brackets = brackets:gsub(\"\
    ]\", \"\\\\]\")\n  brackets = brackets:gsub(\"{\", \"\\\\{\")\n  brackets = brackets:gsub(\"\
    }\", \"\\\\}\")\n  return brackets:match(\"^[\\(\\[]*\\[?\\)\\]]*$\")\nend", " \
    \ local opening, closing = brackets:gsub(\"%[(%)][^)]*\")\n  local openings =\
    \ opening:gsub(\"[()%](%\")\n  local closings = closing:gsub(\"[()%)](%\")\n \
    \ \n  for i = 1, opening:len(), 2 do\n    if openings[i+1] ~= closings[i] then\n\
    \      return false\n    end\n  end\n  return true\nend", "    -- print(\"brackets\
    \ = \", brackets)\n    local openings = string.match(brackets, \"%[(%w+)\")\n\
    \    -- print(\"openings = \", openings)\n    local closings = string.match(brackets,\
    \ \"%(%w+)\")\n    -- print(\"closings = \", closings)\n    for i = 1, #openings\
    \ do\n        local opening_char = openings[i]\n        if opening_char ~= closings[i]\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "  local in_brackets = true\n  local last_bracket = brackets\n  while in_brackets\
    \ do\n    -- check brackets aren't balanced\n    if not open_bracket_balanced(last_bracket)\
    \ then\n      return false\n    end\n    -- check last bracket is correctly opened\n\
    \    if not close_bracket_balanced(last_bracket) then\n      return false\n  \
    \  end\n    -- we're in a bracket, so increment our counter\n    last_bracket\
    \ = last_bracket:sub(1,-1) + last_bracket:sub(-2,-1)\n    -- check for end of\
    \ brackets\n    if last_bracket == \"()\" then\n      in_brackets = false\n  \
    \  end\n  end\n  return true\nend", "  return brackets ~= \"\" and\n         brackets:sub(1,\
    \ 1) ~= '(' and brackets:sub(1, 1) ~= ')'\nend", "    local opening = brackets:match(\"\
    %[(%+%-+)\")\n    local closing = brackets:match(\"%[%-+(%+%-+)\")\n    return\
    \ opening ~= nil and closing ~= nil and opening ~= closing\nend", "  for i = 1,\
    \ #brackets do\n    if brackets[i] == \"(\" then\n      return true\n    elseif\
    \ brackets[i] == \")\" then\n      return false\n    end\n  end\n  return true\n\
    end", "   if brackets ~= \"\" then\n      if brackets[1] ~= brackets then\n  \
    \       return false\n      end\n      local opening_bracket = brackets[1]\n \
    \     local closing_bracket = brackets[#brackets]\n      if opening_bracket ~=\
    \ closing_bracket then\n         return false\n      end\n      return true\n\
    \   else\n      return true\n   end\nend", "  brackets = brackets or \"\"\n  return\
    \ brackets:find(\"^<%[%]-[%s-[%]%>-[%s-[%]%>-[%s-[%]%>-[%]%>-[%s-[%]%>-[%s
  "  return brackets:gsub(\"^%s*(%d(%w*))*%s*$\",\"%2\"):gsub(\"%d(%w*)\",\"%1\")\n\
    end", "  for i, bracket_str in pairs(brackets) do\n    if string.sub(bracket_str,\
    \ 1, 1) == '(' then\n      assert(string.sub(bracket_str, 2, -1) == ')', \"Mismatched\
    \ bracketing at character \" .. i .. \" in \" .. brackets)\n      return false\n\
    \    end\n  end\n  return true\nend", "    local open_bracket, close_bracket =\
    \ brackets:gsub(\"^%[(%)][(%)]?$\", \"%1%2\")\n    local open_bracket = open_bracket\
    \ == \"(\" and open_bracket:len()\n    local close_bracket = close_bracket ==\
    \ \")\" and close_bracket:len()\n    return open_bracket ~= 0 and close_bracket\
    \ ~= 0\nend", "  brackets = brackets or \"\"\n  local open_brackets = brackets:gsub(\"\
    %D\", \"+\")\n  local close_brackets = brackets:gsub(\"%D\", \"%1\")\n  return\
    \ open_brackets:len() == close_brackets:len() and open_brackets:gsub(\"%1\", \"\
    (\") == close_brackets:gsub(\"%1\", \")\")\nend", "  return brackets ~= \"\" and\n\
    \    (brackets:sub(1, 1) ~= brackets:sub(#brackets, 1)) and\n    (brackets:sub(#brackets,\
    \ 1) ~= brackets:sub(1, #brackets)) \nend", "   if brackets == \"\" then return\
    \ false end\n   local opening_brackets = brackets:gsub(\"[\\(\\)]\", \"\")\n \
    \  for i = 1, #opening_brackets do\n      local opening_bracket = opening_brackets[i]\n\
    \      if opening_bracket ~= \"\" then return false end\n   end\n   return true\n\
    end", "  return brackets == nil or\n         brackets:sub(1, 1) == \"(\" or\n\
    \         brackets:sub(1, 1) == \")\" or\n         brackets:sub(1, 1) == \"[\"\
    \ or\n         brackets:sub(1, 1) == \"]\"\nend", "  brackets = brackets or \"\
    {(}\"\n  local opening_brackets, closing_brackets = brackets:gsub(\"%b()\", \"\
    \")\n  return opening_brackets == closing_brackets\nend", "  brackets = brackets:gsub('()',\
    \ '{}')\n  local opening_counts = brackets:gsub('{[(%)}]', '%d'):gsub('%d', '1'):gsub('%s+$',\
    \ '{}')\n  local closing_brackets = {}\n  for opening, count in opening_counts:gmatch('%d+')\
    \ do\n    table.insert(closing_brackets, count > 0 and opening or '')\n  end\n\
    \  local opening_brackets = #opening_counts > 0 and opening_counts or 0\n  local\
    \ closing_brackets = #closing_brackets == #brackets and #closing_brackets or 0\n\
    \  local opening_and_closing_brackets = #opening_counts + #closing_brackets ==\
    \ #brackets\n  return opening_brackets == opening_and_closing_brackets\nend",
  "  return brackets:gsub(\"([()])\",function(m)\n    local i = m:gsub(\"(\",\"%\"\
    ):gsub(\")\",\"%\"):gsub(\"%)\",\"\")\n    return i..\"}\"\n  end)\nend", "  \
    \ for i=1, #brackets do\n      local c = brackets[i]\n      if c == \"(\" then\
    \ return not (i+1) % #brackets end\n      if c == \")\" then return (i-1) % #brackets\
    \ end\n   end\n   return false\nend", "  if brackets ~= \"\" and brackets ~= brackets\
    \ then return false end\n  brackets = brackets:gsub(\"()\", \"*\"):gsub(\"[]\"\
    , \"*\")\n  return (brackets:find(\"*\")) == (brackets:find(\"*\"))\nend", " \
    \ local open_brackets = brackets:gsub(\"[^(%a)]\", \"\")\n  local closing_brackets\
    \ = brackets:gsub(\"(%a[^(]])\", \"\")\n  local open_brackets_sorted = {}\n  local\
    \ closing_brackets_sorted = {}\n  for i,k in ipairs(open_brackets) do\n    if\
    \ open_brackets_sorted[i] then\n      open_brackets_sorted[i] = open_brackets_sorted[i]\n\
    \    else\n      open_brackets_sorted[i] = k\n    end\n  end\n  for i,k in ipairs(closing_brackets)\
    \ do\n    if closing_brackets_sorted[i] then\n      closing_brackets_sorted[i]\
    \ = closing_brackets_sorted[i]\n    else\n      closing_brackets_sorted[i] = k\n\
    \    end\n  end\n  for i,k in ipairs(open_brackets_sorted) do\n    for j,l in\
    \ ipairs(open_brackets_sorted) do\n      if k == l then\n        return false\n\
    \      end\n    end\n  end\n  for i,k in ipairs(closing_brackets_sorted) do\n\
    \    for j,l in ipairs(closing_brackets_sorted) do\n      if k == l then\n   \
    \     return false\n      end\n    end\n  end\n  return true\nend", "   return\
    \ (brackets ~= '()' and brackets ~= '[]' and brackets ~= '{}')\nend", "    return\
    \ (brackets ~= \"\") and (\n         brackets:match(\"^([%z()]+[%z()]+)(.*)$\"\
    ) or brackets:match(\"^%z(.*)$\")\n    )\nend", "\tlocal result = false\n\tfor\
    \ i = 1, #brackets do\n\t\tlocal opening = brackets[i]\n\t\tlocal closing = brackets[i\
    \ + 1]\n\t\tif opening == \"(\" and closing == \")\" then\n\t\t\tresult = true\n\
    \t\tend\n\tend\n\treturn result\nend", "  for i = 1, #brackets do\n    if brackets[i]\
    \ == \"(\" then return false end\n    if brackets[i] == \")\" then return false\
    \ end\n  end\n  return true\nend", "  return brackets:find(brackets[1]) == brackets:find(brackets[2])\n\
    end", "    local stack = {}\n    for idx, ch in pairs(brackets) do\n        if\
    \ idx == 0 then\n            stack[#stack+1] = ch\n        else\n            if\
    \ stack[#stack] == nil then\n                return false\n            else\n\
    \                stack[#stack] = ch\n            end\n        end\n    end\n \
    \   for idx = #stack+1 to 1 do\n        if stack[idx] == nil then\n          \
    \  return false\n        end\n    end\n    return true\nend", "  local openings\
    \ = string.gmatch(brackets, \"[^()]+\")\n  local closings = string.gmatch(brackets,\
    \ \"[^()]+$\")\n  for _,i in ipairs(openings) do\n    local opening = openings[i]\n\
    \    if string.find(closings, opening, 1, true) then\n      return false\n   \
    \ end\n  end\n  return true\nend", "  if brackets == \"\" then\n    return true\n\
    \  end\n  local pos = 1\n  local opening_brackets = 0\n  local closing_brackets\
    \ = 0\n  while pos <= #brackets do\n    local chr = brackets[pos]\n    if chr\
    \ == \"(\" then\n      opening_brackets = opening_brackets + 1\n      if closing_brackets\
    \ == 0 then\n        return true\n      end\n    elseif chr == \")\" then\n  \
    \    closing_brackets = closing_brackets - 1\n      if opening_brackets ~= closing_brackets\
    \ then\n        return false\n      end\n    elseif chr == \"\" then\n      if\
    \ opening_brackets ~= closing_brackets then\n        return false\n      end\n\
    \    end\n    pos = pos + 1\n  end\n  return true\nend", "  if brackets == \"\"\
    \ then return true end\n  local opening, closing = brackets:find(\"^(%S+)\"..\"\
    %S+$\")\n  return opening ~= nil and closing ~= nil and opening:len() == closing\
    \ and\n    closing:len() > 0 and closing:len() == opening:len() - 1\nend", " \
    \   for _, bracket in pairs(brackets) do\n        if string.find(bracket, \"(\"\
    ) ~= nil then\n            -- Find an open bracket\n            local open_bracket\
    \ = string.find(bracket, \"(\")\n            -- Find the closing bracket\n   \
    \         local close_bracket = string.find(bracket, \")\")\n            -- Make\
    \ sure the brackets are properly nested\n            if open_bracket ~= nil and\
    \ close_bracket ~= nil then\n                if open_bracket < close_bracket then\n\
    \                    return False\n                else\n                    return\
    \ true\n                end\n            else\n                return true\n \
    \           end\n        else\n            return true\n        end\n    end\n\
    end\n</code>\n<|/ a tags=parsing,lua,regex,string |>\n<| a |>\nI've been doing\
    \ this using Lua 5.1.\nThe solution is actually really simple if you use a proper\
    \ tokenizer. Just use string.find and string.gsub to find all open and close brackets\
    \ matching the given pattern. Once you've done that you can simply use string.sub\
    \ to remove the brackets from the string while keeping the correct syntax or use\
    \ string.gsub to replace the pattern with the brackets. \nI wrote a blog post\
    \ on this here if you wanna see it in action: http://kristopherjones.com/blog/2012/10/17/parsing-a-string-with-regular-expressions\n\
    <|/ a dscore=2 tags=parsing,lua,regex,string |>\n<| a tags=parsing,lua,regex,string\
    \ dscore=2 |>\nI wrote the following to match a string with a specific format\
    \ and return a table:\n<code>", "  return string.find(brackets, \"(\", true) and\
    \ string.find(brackets, \")\", true) and\n    string.find(brackets, \"()\", true)\
    \ == 1\nend", "    local b = 1\n    local c = 0\n    while b <= #brackets do\n\
    \        if brackets[b] == '(' then\n            if brackets[b + 1] == ')' then\n\
    \                c = c + 1\n            elseif brackets[b + 1] == ')' then\n \
    \               c = c + 1\n            elseif brackets[b + 1] == brackets[b +\
    \ 2] then\n                c = c + 1\n            end\n        end\n        b\
    \ = b + 1\n    end\n    return c == 0\nend", "    if brackets == nil then\n  \
    \      return false\n    end\n    local opening_brackets = brackets:gsub(\"^%L\"\
    , \"(\")\n    local closing_brackets = brackets:gsub(\"%L)$\", \")\")\n    local\
    \ all_opening_brackets = \"[(\"\n    local all_closing_brackets = \")]\"", " \
    \ for c, v in pairs(brackets) do\n    if v ~= '(' or v ~= ')' then\n      return\
    \ false\n    end\n  end\n  return true\nend", "   if brackets == \"\" then\n \
    \     return true\n   elseif brackets == \"(\" then\n      return false\n   elseif\
    \ brackets == \"(()\" then\n      return true\n   elseif brackets == \"()(())\"\
    \ then\n      return true\n   elseif brackets == \"(()()())\" then\n      return\
    \ true\n   elseif brackets == \")(())\" then\n      return false\n   else\n  \
    \    return false\n   end\nend", "    for bracket in string.gmatch(brackets, \"\
    (%b()\") do\n        if brackets[bracket:len()] ~= \")\" then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    local openings = {brackets[1],\
    \ brackets[2], brackets[3], brackets[4]}\n    local closings = {brackets[5], brackets[6],\
    \ brackets[7], brackets[8]}\n    for i = 1, #openings do\n        if openings[i]\
    \ ~= closings[i] then\n            return false\n        end\n    end\n    return\
    \ true\nend", "  return (brackets ~= \"()\" and brackets ~= \")()\" and brackets\
    \ ~= \"(()()\")) \nend", "    for i = 1, #brackets do\n        local open_count\
    \ = brackets:sub(i, i)\n        if open_count:len() == 1 then\n            if\
    \ open_count:sub(1, 1) ~= brackets[i]:len() then\n                return false\n\
    \            end\n        end\n    end\n    return true\nend", "  local open_brackets\
    \ = brackets:gsub(\"^%W+\", \"\"):gsub(\"%W+$\", \"\"):gsub(\"%W+\", \"+\")\n\
    \  return open_brackets ~= brackets\nend", "\tlocal open_brackets = {\n\t\t[\"\
    (\"] = true,\n\t\t[\")\"] = true,\n\t\t[\"[\"] = true,\n\t\t[\"]\"] = true,\n\t\
    \t[\"{\"] = true,\n\t\t[\"}\"] = true,\n\t\t[\"<\"] = true,\n\t\t[\">\"] = true,\n\
    \t\t[\"==\"] = true,\n\t\t[\">=\"] = true,\n\t\t[\"<=\"] = true,\n\t}\n\tlocal\
    \ close_brackets = {\n\t\t[\"(\"] = true,\n\t\t[\")\"] = true,\n\t\t[\"[\"] =\
    \ true,\n\t\t[\"]\"] = true,\n\t\t[\"{\"] = true,\n\t\t[\"}\"] = true,\n\t\t[\"\
    <\"] = true,\n\t\t[\">\"] = true,\n\t\t[\"==\"] = true,\n\t\t[\">=\"] = true,\n\
    \t\t[\"<=\"] = true,\n\t}\n\tlocal bracketing_level = 0\n\tfor char in brackets:gmatch(\"\
    [^(){}<>]\") do\n\t\tbracketing_level = bracketing_level + 1\n\t\tif open_brackets[char]\
    \ then\n\t\t\tbracketing_level = bracketing_level - 1\n\t\t\tif bracketing_level\
    \ == 0 then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\n\
    end", "   if brackets ~= \"\" and brackets ~= brackets:gsub(\"[^()]+\", '') then\n\
    \      brackets = brackets:gsub(\"%[(%)][(%)]\", \"\")\n      return brackets\
    \ == brackets:gsub(\"[()%]\", \"\")\n   end\n   return false\nend", "  local opening_brackets\
    \ = brackets:gsub(\"(.-)\", function (c)\n    local bracket = string.byte(c)\n\
    \    if bracket == 35 then return \"}\" end\n    if bracket == 36 then return\
    \ \"{\"  end\n    return c\n  end)\n  local closing_brackets = brackets:gsub(\"\
    ({-)}\", function (c)\n    local bracket = string.byte(c)\n    if bracket == 35\
    \ then return \"{\" end\n    if bracket == 36 then return \"-}\" end\n    return\
    \ c\n  end)\n  return opening_brackets = closing_brackets\nend", "  local brackets_stack\
    \ = brackets:gsub(\"(%b+)\", function (match) return match ~= '()' end):gsub(\"\
    (%b+)\", function (match) return '()' end):gsub(\"(%b+)\", function (match) return\
    \ '()' end)\n  local result = true\n  for i = 1, #brackets_stack do\n    if brackets_stack[i]\
    \ ~= brackets_stack[i + #brackets_stack] then\n      result = false\n      break\n\
    \    end\n  end\n  return result\nend", "  for i, c in ipairs(brackets) do\n \
    \   if c == \"(\" then\n      if not brackets[i+1] then\n        return false\n\
    \      elseif brackets[i+1] == \"(\" then\n        return false\n      elseif\
    \ brackets[i+1] == \")\" then\n        return false\n      end\n    elseif c ==\
    \ \")\" then\n      if not brackets[i-1] then\n        return false\n      elseif\
    \ brackets[i-1] == \"(\" then\n        return false\n      elseif brackets[i-1]\
    \ == \")\" then\n        return false\n      end\n    end\n  end\n  return true\n\
    end", "\tlocal stack = brackets:gsub(\"%[(%)]\", function (c) return { '(', ')'\
    \ }[c] end):gsub(\"%[(%)]\", \"()\")\n\tlocal bracket_count = #stack", "  local\
    \ open_brackets = counting(brackets)\n  local close_brackets = counting(brackets,\
    \ \"()\")\n  return open_brackets == close_brackets\nend", "  local open_brackets\
    \ = brackets:gsub(\"(%W+)\", \"%1\")\n  local close_brackets = brackets:gsub(\"\
    (%W+%1)\", \"%1\")\n  return open_brackets ~= close_brackets\nend", "  local opening\
    \ = brackets:sub(1,1)\n  for i=2,#brackets do\n    if brackets[i-1] ~= opening\
    \ then return false end\n  end\n  return true\nend", "  local brackets = {brackets}\n\
    \  local opening_brackets = {}\n  for i = 1, #brackets do\n    local bracket =\
    \ brackets[i]\n    if bracket == \"(\" then\n      table.insert(opening_brackets,\
    \ i)\n    elseif bracket == \")\" then\n      local opening_index = opening_brackets[i]\n\
    \      if opening_index == #opening_brackets then\n        return false\n    \
    \  end\n      table.remove(opening_brackets, opening_index)\n    end\n  end\n\
    \  return #opening_brackets == 0\nend", "    local opening_brackets = {}\n   \
    \ local closing_brackets = {}\n    for i = 1, #brackets do\n        local bracket\
    \ = brackets[i]\n        if bracket == \"(\" then\n            table.insert(opening_brackets,\
    \ bracket)\n        elseif bracket == \")\" then\n            local last_bracket\
    \ = opening_brackets[#opening_brackets]\n            table.insert(closing_brackets,\
    \ last_bracket)\n        end\n    end\n    for i = 1, #opening_brackets do\n \
    \       for j = 1, #closing_brackets do\n            local opening = opening_brackets[i]\n\
    \            local closing = closing_brackets[j]\n            if opening and closing\
    \ then\n                return closing ~= opening\n            end\n        end\n\
    \    end\n    return false\nend", "  local open_brackets = brackets:gsub(\"%l*%l+\"\
    , \"%1\")\n  return open_brackets:find(\"%1\") ~= nil\nend", "\tlocal opening_brackets\
    \ = {}\n\tlocal closing_brackets = {}\n\tfor i=1, #brackets do\n\t\tlocal opening\
    \ = brackets[i]\n\t\tif opening then\n\t\t\tif opening_brackets[opening] then\n\
    \t\t\t\topening_brackets[opening] = opening_brackets[opening] + 1\n\t\t\telse\n\
    \t\t\t\topening_brackets[opening] = 1\n\t\t\tend\n\t\tend\n\t\tlocal closing =\
    \ brackets[i+1]\n\t\tif closing then\n\t\t\tif closing_brackets[closing] then\n\
    \t\t\t\tclosing_brackets[closing] = closing_brackets[closing] + 1\n\t\t\telse\n\
    \t\t\t\tclosing_brackets[closing] = 1\n\t\t\tend\n\t\tend\n\tend", "  brackets\
    \ = brackets:gsub(\"%[(%)][(%)]\", \"%1%\")\n  brackets = brackets:gsub(\"%[(%)]%\"\
    , \"%1%\")\n  brackets = brackets:gsub(\"%[)]\", \"%1%\")\n  return brackets:sub(1,\
    \ 1) == \"()\"\nend", "  local brackets = brackets:gsub(\"[()\\n]+\", \"\")\n\
    \  local last_bracket = nil\n  for _, bracket in ipairs(brackets) do\n    if last_bracket\
    \ ~= nil then\n      -- a closing bracket was found between the last opened bracket\
    \ and the\n      -- current one, so we must fix it.\n      if last_bracket ==\
    \ bracket then\n        brackets[last_bracket] = bracket\n      else\n       \
    \ -- If the closing bracket was an opening bracket, then we must have found\n\
    \        -- a closing bracket between the previous closing bracket and the current\n\
    \        -- opening bracket. For example, \")()\" has an opening bracket \"(\"\
    , a\n        -- closing bracket \")\" and an opening bracket \")\". So, we must\
    \ correct\n        -- this by replacing the previous closing bracket \")\" with\
    \ an opening one\n        -- \"(\" and then a closing one \")\".\n        brackets[last_bracket]\
    \ = bracket\n      end\n    end\n    last_bracket = bracket\n  end\n  return brackets:sub(1,\
    \ #brackets) == brackets\nend", "  brackets = brackets:gsub(\"(%b)(%b)\", function(left,\
    \ right)\n    return left:reverse .. right\n  end)\n  return brackets:reverse()\
    \ == \"()\"\nend", "\t-- If there are not at least two brackets, return False.\n\
    \t-- >>> correct_bracketing(\"(\")\n\t-- False\n\t-- >>> correct_bracketing(\"\
    )\")\n\t-- False\n\t-- >>> correct_bracketing(\"{}\")\n\t-- False\n\t-- >>> correct_bracketing(\"\
    []\")\n\t-- False\n\tif brackets == nil then\n\t\treturn false\n\tend\n\tif brackets:sub(1,\
    \ 1) ~= \"(\" and brackets:sub(1, 1) ~= \")\" then\n\t\treturn false\n\tend\n\t\
    -- Go through brackets, one character at a time.\n\t-- If the character is \"\
    )\", then return True, else return False.\n\tfor i = 1, #brackets do\n\t\t-- If\
    \ the character is \")\", then return False.\n\t\tif brackets[i] == \")\" then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\t-- If the brackets string is not empty,\
    \ return False.\n\treturn true\nend", "    local bracket_count = 0\n    local\
    \ opening_brackets = \"\"\n    for i = 1, #brackets do\n        if brackets[i]\
    \ == \"(\" then\n            if opening_brackets == \"\" then\n              \
    \  opening_brackets = brackets[i]\n                bracket_count = bracket_count\
    \ + 1\n            elseif opening_brackets ~= brackets[i] then\n             \
    \   bracket_count = bracket_count + 1\n            end\n        elseif brackets[i]\
    \ == \")\" then\n            if opening_brackets == \"\" then\n              \
    \  bracket_count = bracket_count - 1\n            elseif opening_brackets ~= brackets[i]\
    \ then\n                bracket_count = bracket_count - 1\n            end\n \
    \       end\n    end\n    return bracket_count == 0\nend", "\treturn brackets:sub(1,\
    \ #brackets - 1):match(\"^[({%)(]$\")\nend", "    local opening = brackets:sub(1,1)\n\
    \    local closing = brackets:sub(1,2)\n    local openings = {opening}\n    local\
    \ closings = {closing}\n    local i = 1\n    while i ~= #openings do\n       \
    \ openings = {openings:sub(1,i-1)}\n        closings = {closings:sub(1,i-1)}\n\
    \        i = i + 1\n    end\n    local ok = true\n    for i, opening in ipairs(openings)\
    \ do\n        ok = false and ok\n        local closing = closings[i]\n       \
    \ if opening ~= closing then\n            ok = false\n        end\n    end\n \
    \   return ok\nend", "  local opening = brackets:sub(1,1)\n  local closing = brackets:sub(2)\n\
    \  return opening ~= closing ~= \"(\" and opening ~= closing and closing ~= \"\
    (\" and\n         closing ~= \"(\" and opening ~= closing and opening ~= \"(\"\
    \ and opening ~= closing and\n         opening ~= closing and opening ~= closing\
    \ and opening ~= closing\nend", "  local opening_brackets = {}\n  for char in\
    \ brackets:gmatch(\"[()%]\") do\n    opening_brackets[char] = true\n  end\n  for\
    \ opening_bracket in pairs(opening_brackets) do\n    local closing_bracket = opening_brackets[opening_bracket]\n\
    \    if not closing_bracket then\n      return false\n    end\n    opening_brackets[opening_bracket]\
    \ = false\n  end\n  return true\nend", "  for i, c in pairs(brackets) do\n   \
    \ if c ~= '(' or not brackets[i+1] then\n      return false\n    end\n  end\n\
    \  return true\nend", "  if brackets == \"\" or brackets == \"()\" then return\
    \ false end\n  local open_brackets = {}\n  for _, opening_bracket in ipairs(brackets)\
    \ do\n    open_brackets[opening_bracket] = true\n  end\n  for _, _ in ipairs(brackets)\
    \ do\n    local opening_bracket = brackets[_]\n    if open_brackets[opening_bracket]\
    \ == nil then return false end\n  end\n  return true\nend", "  if brackets:find(\"\
    (\") == nil then\n    -- empty brackets means no brackets found\n    return false\n\
    \  end\n  local opening_bracket = brackets:sub(1,1)\n  local closing_bracket =\
    \ brackets:sub(2,2)\n  for i=1, #brackets do\n    if brackets[i]:sub(1,1) ~= opening_bracket\
    \ then\n      -- no opening bracket found\n      return false\n    end\n    if\
    \ brackets[i]:sub(#brackets,2) ~= closing_bracket then\n      -- no closing bracket\
    \ found\n      return false\n    end\n  end\n  return true\nend", "  if brackets\
    \ == nil then\n    return false\n  end\n  brackets = brackets:gsub(\"%([%)(]?)([%)]?)(%[%)]?([%)]?)\"\
    , \"%1\")\n  return brackets:match(\"%1\"):match(\"%1\"):find(\"%1\"):sub(-1)\n\
    end", "  -- Don't treat \"(\" as a single opening bracket.\n  if brackets:sub(1,1)\
    \ == \"(\" then\n    return false\n  end\n  -- Don't treat \")\" as a single closing\
    \ bracket.\n  if brackets:sub(#brackets,1) == \")\" then\n    return false\n \
    \ end\n  -- Don't treat \"((\", \")(\", or \"()()\" as a single set of brackets.\n\
    \  if brackets:sub(1,1) == \"(\" and brackets:sub(#brackets,1) == \")\" or\n \
    \    brackets:sub(1,1) == \"(\" and brackets:sub(#brackets,1) == \"(\" or\n  \
    \   brackets:sub(1,1) == \"(\" and brackets:sub(#brackets,1) == \"(()\" then\n\
    \    return false\n  end\n  -- Don't treat \")(\", \")(\", \")(()\", or \"())()\"\
    \ as a single set of brackets.\n  if brackets:sub(1,1) == \")\" and brackets:sub(#brackets,1)\
    \ == \")\" or\n     brackets:sub(1,1) == \")\" and brackets:sub(#brackets,1) ==\
    \ \")(\" or\n     brackets:sub(1,1) == \")\" and brackets:sub(#brackets,1) ==\
    \ \"(()\" or\n     brackets:sub(1,1) == \"(\" and brackets:sub(#brackets,1) ==\
    \ \")()\" then\n    return false\n  end\n  -- Don't treat \"((\", \")(\", \")(()\"\
    , or \"())()\" as a single set of brackets.\n  if brackets:sub(1,1) == \"(\" and\
    \ brackets:sub(#brackets,1) == \")(\" or\n     brackets:sub(1,1) == \"(\" and\
    \ brackets:sub(#brackets,1) == \"(()\" or\n     brackets:sub(1,1) == \"(\" and\
    \ brackets:sub(#brackets,1) == \"(()()\" then\n    return false\n  end\n  -- Don't\
    \ treat \")((\", \")(\", \")(()\", or \"())()\" as a single set of brackets.\n\
    \  if brackets:sub(1,1) == \")\" and brackets:sub(#brackets,1) == \")(\" or\n\
    \     brackets:sub(1,1) == \")\" and brackets:sub(#brackets,1) == \")(\" or\n\
    \     brackets:sub(1,1) == \")\" and brackets:sub(#brackets,1) == \")(()\" or\n\
    \     brackets:sub(1,1) == \")\" and brackets:sub(#brackets,1) == \"(()()\" then\n\
    \    return false\n  end\n  return true\nend", "  if brackets == nil then brackets\
    \ = \"\" return false end\n  brackets = brackets:gsub(\"%([()\"])([^)]+)%\", function(all,\
    \ bracket, bracket2)\n    if bracket:sub(1, 1) == \"(\" then\n      if bracket2:sub(2,\
    \ 2) ~= \"()\" then return false end\n      return true\n    end\n    if bracket:sub(1,\
    \ 1) == \"{\" then\n      if bracket2:sub(1, 1) ~= \"}\" then return false end\n\
    \      return true\n    end\n    if bracket:sub(1, 1) == \"[\" then\n      if\
    \ bracket2:sub(1, 1) ~= \"]\" then return false end\n      return true\n    end\n\
    \    return false\n  end)\n  return brackets:sub(1, 1) ~= \"\"\nend", "    if\
    \ brackets == \"\" then\n        return true\n    end\n    local opening_brackets\
    \ = string.gsub(brackets, \"{[(%W)\", \"()\")\n    local closing_brackets = string.gsub(brackets,\
    \ \"{[(%W+)}\", \"()\")\n    local opening_brackets_count = #opening_brackets\n\
    \    local closing_brackets_count = #closing_brackets", "    if brackets == \"\
    ()\" then return true end\n    local stack = {}\n    for i = 1, #brackets do\n\
    \        if brackets[i] == \"(\" then\n            table.insert(stack, i)\n  \
    \      elseif brackets[i] == \")\" then\n            local pop = stack[#stack]\n\
    \            if pop == i then return false end\n            table.remove(stack,\
    \ pop)\n        end\n    end\n    return #stack == 0\nend", "    local openings\
    \ = {}\n    for _, bracket in string.gmatch(brackets, \"%[(%)*%]\") do\n     \
    \   openings[bracket] = true\n    end", "  for i = 1, #brackets do\n    local\
    \ opening = brackets[i]\n    if opening:sub(1, 1) == \"(\" then\n      local closing\
    \ = brackets[i+1]\n      if closing:sub(1, 1) == \")\" then\n        return false\n\
    \      end\n    end\n  end\n  return true\nend", "  local open_brackets = brackets:gsub(\"\
    %b()%b\",\"%b\")\n  local close_brackets = brackets:gsub(\"%b()%b\",\"%b\"):gsub(\"\
    %b%b\",\"\")\n  return open_brackets:find(close_brackets) == 0 -- if no brackets\
    \ match, return false\nend", "  for i = 1, #brackets do\n    if brackets[i] ==\
    \ \"(\" then\n      local opening = brackets[i]\n      local closing = brackets[i+1]\n\
    \      if not (opening==\"()\" or opening==\"[]\" or opening==\"{}\") then\n \
    \       return false\n      end\n      if not (closing==\"()\" or closing==\"\
    []\" or closing==\"{}\") then\n        return false\n      end\n    end\n  end\n\
    \  return true\nend", "\tlocal openings, closings = {}, {}\n\tfor _, bracket in\
    \ ipairs(brackets) do\n\t\tif bracket:sub(1,1) == \")\" then\n\t\t\ttable.insert(closings,\
    \ bracket)\n\t\telseif bracket:sub(1,1) == \"(\" then\n\t\t\ttable.insert(openings,\
    \ bracket)\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\tif #openings == 0 and #closings\
    \ == 0 then\n\t\treturn false\n\telseif #openings == 0 then\n\t\treturn true\n\
    \telseif #closings == 0 then\n\t\treturn false\n\telseif #openings == #closings\
    \ then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "    if brackets\
    \ ~= '()' then return false end\n    brackets = brackets:gsub(')(', '):'):gsub('(',\
    \ '):')\n    brackets = brackets:gsub('):', '(')\n    return brackets:match('^(()|()())$')\
    \ == nil\nend", "  brackets = brackets:gsub(\"[()]\", \"%1\")\n  local opening\
    \ = brackets:sub(1, 1)\n  local closing = brackets:sub(2, 1)\n  return opening\
    \ ~= closing and opening ~= \"}\" and closing ~= \"{\"\nend", "    local opening\
    \ = brackets:sub(1,1)\n    local closing = brackets:sub(2)\n    if opening ==\
    \ \"(\" and closing == \")\" then\n        return true\n    else\n        return\
    \ false\n    end\nend", "  if brackets ~= '()' then\n    return false\n  end\n\
    \  local opening = brackets:sub(1,1)\n  local closing = brackets:sub(2,2)\n  local\
    \ openingCount = 1\n  local closingCount = 0\n  local openingCountLast = 1\n \
    \ for i = #brackets, 1, -1 do\n    if brackets[i:sub(1,1)] == opening then\n \
    \     openingCount = openingCount + 1\n      if openingCountLast ~= openingCount\
    \ then\n        return false\n      end\n      openingCountLast = openingCount\n\
    \    elseif brackets[i:sub(1,1)] == closing then\n      closingCount = closingCount\
    \ + 1\n      if closingCountLast ~= closingCount then\n        return false\n\
    \      end\n      closingCountLast = closingCount\n    end\n  end\n  return true\n\
    end", "  if brackets == \"\" then\n    return true\n  end\n  local opening_brackets\
    \ = brackets:gsub(\"^(%w+)\",\"\")\n  local closing_brackets = brackets:gsub(\"\
    (%w+)\",\"\")\n  for i = 1, #opening_brackets do\n    if opening_brackets[i] ==\
    \ \"(\" then\n      local j = i\n      while j < #opening_brackets and opening_brackets[j]\
    \ == \")\" do\n        j = j + 1\n      end\n      if not closing_brackets then\n\
    \        return false\n      elseif j ~= i then\n        return false\n      end\n\
    \    else\n      return false\n    end\n  end\n  return true\nend", "  if brackets\
    \ == \"\" then\n    return false\n  end", "\tlocal opening = brackets:gsub(\"\
    (%W)\", \"%1\")\n\tlocal closing = brackets:gsub(\"(%w%)\", \"%1\")\n\treturn\
    \ opening:len() == closing:len()\nend", "   return brackets:find(brackets[1])\
    \ == brackets:find(brackets[2])\nend", "   return brackets:find(brackets) ~= nil\n\
    end", "  local opening_counts = {}\n  for _, paren in string.gmatch(brackets,\
    \ \"([^()]+)(%)\") do\n    opening_counts[paren] = opening_counts[paren] + 1 or\
    \ 1\n  end\n  for _, paren in string.gmatch(brackets, \"(%)\") do\n    opening_counts[paren]\
    \ = opening_counts[paren] - 1\n    if opening_counts[paren] ~= 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local brackets_count = brackets:len()\n\
    \  local open_brackets = 0\n  for i = 1, brackets_count do\n    if brackets[i]:find(\"\
    (\") then\n      open_brackets = open_brackets + 1\n    end\n    if brackets[i]:find(\"\
    )\") then\n      open_brackets = open_brackets - 1\n    end\n  end\n  return open_brackets\
    \ == 0\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
