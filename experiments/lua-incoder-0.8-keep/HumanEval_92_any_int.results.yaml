name: HumanEval_92_any_int
language: lua
results:
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(x)\
    \ ~= 'number' or type(y) ~= 'number' or type(z) ~= 'number' then return false\
    \ end\n  if x == y or x == z or y == z then return true end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps2z3txuh.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmps2z3txuh.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y and x == z and x ~= z then\n    return true\n  elseif x ~= x and x ~= y\
    \ and x ~= z and y ~= z and x ~= z then\n    return true\n  elseif y ~= y and\
    \ y ~= z and y ~= z then\n    return true\n  elseif z ~= z and z ~= z and z ~=\
    \ z then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_sgp8p4x.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_sgp8p4x.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ ~= y then\n    if x ~= z then\n      if y ~= z then\n        return true\n \
    \     else\n        return false\n      end\n    else\n      return false\n  \
    \  end\n  else\n    return true\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mh30wdc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8mh30wdc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ type(x) == type(y) and type(x) == type(z) and type(x) == number then\n     \
    \   if x == y and y == z then\n            return true\n        else\n       \
    \     return false\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4gspqw3.lua:22:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpq4gspqw3.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   -- x\
    \ is our first number; we assume it is an integer\n   -- y is our second number,\
    \ which is our \"sum\"\n   -- z is our third number, which is our \"difference\"\
    \n   -- If any of them are non-integers, return false\n   -- If they're all integers,\
    \ return true\n   if x ~= tonumber(x) or y ~= tonumber(y) or z ~= tonumber(z)\
    \ then return false end\n   if x ~= y or x ~= z then return true end\n   return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6ig3g3a.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy6ig3g3a.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\t-- Check\
    \ that the arguments are integers.\n\tif type(y) ~= 'number' or type(z) ~= 'number'\
    \ then return false end\n\tif y == z or y > z then return false end\n\t-- If the\
    \ values are equal, check all the numbers are integers.\n\treturn true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8opsz_t.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx8opsz_t.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n   \
    \ return x == y + z\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphcxkovdk.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphcxkovdk.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ ~= nil and y ~= nil and z ~= nil then\n    return x == y + z and x:int() ==\
    \ y:int() + z:int() and\n           x:int() == y and x:int() == z:int() and\n\
    \           x:int() ~= nil and y:int() ~= nil and z:int() ~= nil\n  else\n   \
    \ return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfqx00d3f.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfqx00d3f.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ ok, err = pcall(function()\n    return x + y == z\n  end)\n  if err ~= nil then\n\
    \    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1czyhl4y.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1czyhl4y.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n   \
    \ if x == y + z then\n      return true\n    end\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_18a0eh.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw_18a0eh.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ type(x) == number and type(y) == number and type(z) == number then\n       \
    \ return (x < y + z) and (y < x + z) and (x < y + z) and (y < x + z)\n    elseif\
    \ type(x) == number and type(y) == number then\n        return (x < y) and (y\
    \ < x)\n    elseif type(x) == number and type(y) == string then\n        return\
    \ (x < y) and (y < x)\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3rt0w9u.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmph3rt0w9u.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  x = tointeger(x)\n\
    \  y = tointeger(y)\n  z = tointeger(z)\n  if x and y and z then\n    if x ==\
    \ y + z then\n      return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi9_7wuob.lua:10:\
    \ attempt to call a nil value (global 'tointeger')\nstack traceback:\n\t/tmp/tmpi9_7wuob.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpi9_7wuob.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(y)\
    \ ~= 'number' or type(x) ~= 'number' or type(z) ~= 'number' then\n    return false\n\
    \  end\n  -- if y > x then return false because we're trying to compare numbers\
    \ and letters.\n  if y > x then\n    return false\n  end\n  -- if z < 0 then return\
    \ false because we're trying to compare numbers and letters.\n  if z < 0 then\n\
    \    return false\n  end\n  if x > y and x > z then\n    return true\n  end\n\
    \  if y > z and y > x then\n    return true\n  end\n  if z > x and z > y then\n\
    \    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbxcwsf_.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwbxcwsf_.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   if type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n   \
    \   return x ~= nil or y ~= nil or z ~= nil and (x + y + z == nil or x * y * z\
    \ == nil or x * y * z == nil or not (x * y * z % 1))\n   else\n      return false\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4oorqw40.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4oorqw40.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y then\n    return x ~= 0 and x ~= z\n  else\n    return x ~= 0 and y ~=\
    \ 0 and x ~= z\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk1wyr4eu.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpk1wyr4eu.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   if type(y)\
    \ ~= 'number' then\n      return false\n   end\n   if type(x) ~= 'number' then\n\
    \      return false\n   end\n   if type(z) ~= 'number' then\n      return false\n\
    \   end\n   return x == y + z\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp87y8lfqp.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp87y8lfqp.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(y)\
    \ == type(x) and type(x) == type(z) and type(x) == type(y) and type(x) == 'number'\
    \ then\n    if x == y and z == x then return true end\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q8pbl4_.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0q8pbl4_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y then\n    if x == z then\n      return true\n    end\n    return false\n\
    \  end\n  return x < y and y < z\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ho8wpgi.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6ho8wpgi.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ (type(x) == 'number' and type(y) == 'number' and type(z) == 'number' and x +\
    \ y == z)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpitfres0o.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpitfres0o.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  -- If\
    \ the values are all integers then we know we have the correct answer\n  if tonumber(x)\
    \ == x and tonumber(y) == y and tonumber(z) == z then\n    return true\n  end\n\
    \  -- If the values are non-integers but are also non-negative then we have an\
    \ answer\n  if tonumber(x) > 0 and tonumber(y) > 0 and tonumber(z) > 0 then\n\
    \    return true\n  end\n  -- If the values are non-integers and are both negative,\
    \ then we have an answer\n  if tonumber(x) > 0 and tonumber(y) < 0 and tonumber(z)\
    \ > 0 then\n    return true\n  end\n  -- If we didn't return false in any of the\
    \ above cases then return false\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdp96d4y6.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdp96d4y6.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    local\
    \ result = x ~= y or y ~= z\n    return result\nend\n</cell>\n<text>\nExercise\
    \ 7 - Creating a recursive function\nAs a first exercise, let's write a recursive\
    \ function which takes a list as an argument, and returns all non-negative elements\
    \ in the list. Write the function without using any loops or recursion. Try to\
    \ write it in as few lines as possible while being compact.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg2wyp17t.lua:13: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == nil then\n    return y == nil\n  end\n  if y == nil then\n    return z ==\
    \ nil\n  end\n  if z == nil then\n    return x == y\n  end\n  return x == y or\
    \ x == z or y == z\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2q6kvvu4.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2q6kvvu4.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ ~= nil and y ~= nil and z ~= nil then\n    if x ~= y or y ~= z then\n      return\
    \ true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbz7ycdzq.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbz7ycdzq.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y and type(y) == 'number' and type(z) == 'number' then\n    return true\n\
    \  elseif type(x) == 'number' and type(y) == 'number' then\n    return z == x\
    \ + y\n  elseif type(x) == 'number' and type(z) == 'number' then\n    return z\
    \ == x - y\n  elseif type(y) == 'number' and type(z) == 'number' then\n    return\
    \ z == y - x\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5b5bsrgb.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5b5bsrgb.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ type(x) == 'number' and type(y) == 'number' and type(z) == 'number' then\n \
    \       return math.abs(x - y + z) < 0.0001\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpery1e3x6.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpery1e3x6.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ type(y) == \"number\" and type(z) == \"number\" then\n        return x == y\
    \ or x == z or y == z\n    elseif type(x) == \"number\" and type(y) == \"table\"\
    \ then\n        if type(x) == \"table\" and type(y) == \"number\" then\n     \
    \       -- The first number is a table and the second is a number.\n         \
    \   -- Check if all of the numbers in the table are integers.\n            for\
    \ k, v in pairs(y) do\n                if not type(k) == \"number\" or type(v)\
    \ == \"number\" then\n                    return false\n                end\n\
    \            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjg6cask7.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjg6cask7.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    --\
    \ If one argument is an integer, return it\n    if x == x or y == y or z == z\
    \ then\n        return x == y + z\n    end\n    -- If one argument is a number,\
    \ check if it is equal to the sum of other two.\n    return x + y == z\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuscxy_mi.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuscxy_mi.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    local\
    \ function is_int(n)\n        return type(n) == 'number' and math.floor(n) ==\
    \ n\n    end\n    return x ~= nil and\n           y ~= nil and\n           z ~=\
    \ nil and\n           (is_int(x) or is_int(y) or is_int(z)) and\n           x\
    \ ~= y and\n           x ~= z and\n           y ~= z\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hy07mog.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3hy07mog.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ type(y) ~= 'number' then\n        return false\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj7bnyxxs.lua:29: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x==y\
    \ or y==z or z==x then\n    return true\n  else\n    return false\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpklzflrp4.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpklzflrp4.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(z)\
    \ ~= \"number\" or z < 0 then\n    return false\n  end\n  return not (x ~= y and\
    \ x + y ~= z)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvu4a0hd4.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvu4a0hd4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ < 0 or x > z then\n    return false\n  end\n  if y < 0 or y > z then\n    return\
    \ false\n  end\n  if x == y then\n    return true\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kjbfy5j.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_kjbfy5j.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y then\n    if type(z) == 'number' then\n      local n = z\n      if n ==\
    \ x or n == y then\n        return true\n      end\n    end\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaqw6uv5l.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpaqw6uv5l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  -- Check\
    \ if any number is positive\n  if x > y then\n    -- If x is greater than y, then\
    \ check if z is greater\n    if z > y then\n      return true\n    else\n    \
    \  return false\n    end\n  else\n    -- If y is greater than x, then check if\
    \ z is greater\n    if z > x then\n      return true\n    else\n      return false\n\
    \    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pgn_ogh.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2pgn_ogh.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y and x == z and y ~= z then return true end\n  if x == z or y == z then\
    \ return false end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuyooffyd.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuyooffyd.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x == y or y == z or z == x then\n        return true\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9c66jcu6.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9c66jcu6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    --\
    \ Check each case\n    if x == y or x == z or y == z then\n        return true\n\
    \    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjj1dkbti.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjj1dkbti.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  -- We\
    \ do arithmetic with numbers to avoid issues with precision\n  -- by forcing them\
    \ to integers\n  x = math.floor(x)\n  y = math.floor(y)\n  z = math.floor(z)\n\
    \  if x ~= x or y ~= y or z ~= z then return false end\n  if x + y == z then return\
    \ true end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchnm4ag4.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpchnm4ag4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   return\
    \ x ~= nil and y ~= nil and z ~= nil and x~=nil and y~=nil and z~=nil and x~=y\
    \ and x~=z and y~=z and (x~=nil or y~=nil or z~=nil) and #x==#y and #y==#z\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7571mhqf.lua:10:\
    \ attempt to get length of a number value (local 'x')\nstack traceback:\n\t/tmp/tmp7571mhqf.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp7571mhqf.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ a, b, c = unpack({})\n  unpack({\"x,y,z\", x, y, z, a, b, c})\n  return a ==\
    \ x + y and b == z + x and c == x + y and b == z + x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwzjt88zq.lua:10:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpwzjt88zq.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpwzjt88zq.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ (x or 0) == y or (x or 0) == z\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk1xo8zb6.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk1xo8zb6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ type(z) == 'number' and type(y) == 'number' and type(x) == 'number' and x ==\
    \ z and y == z\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxaby7ug.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppxaby7ug.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  assert(type(y)\
    \ == \"number\" and type(z) == \"number\")\n  return (x ~= nil and y ~= nil and\
    \ z ~= nil) and (x ~= y or x ~= z or y ~= z)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5e0xfj4.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg5e0xfj4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y or y == z or z == x then return true end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_ctqriv.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmph_ctqriv.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ not x ~= y or x ~= z or y ~= z\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7xre_sx2.lua:17:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7xre_sx2.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ > z and x < y then\n    return true\n  end\n  if y > z and y < x then\n    return\
    \ true\n  end\n  if x == y and x ~= z then\n    return true\n  end\n  if x ~=\
    \ y and x ~= z then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayia685j.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpayia685j.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ ~= nil and y ~= nil and z ~= nil then\n    return x == y + z\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaadiiwoq.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpaadiiwoq.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ function is_int(x)\n    return x == tonumber(x) or x == math.floor(x)\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptoh34avv.lua:29: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ ~= nil and y ~= nil and z ~= nil then\n    return ((type(x) == 'number' and\
    \ type(y) == 'number' and type(z) == 'number' and x ~= 0 and y ~= 0 and z ~= 0\
    \ and x + y + z == 0) or x == y or x == z or y == z)\n  else\n    return false\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5m88ow3f.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5m88ow3f.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n   \
    \ if x == y and y == z then return true else return false end\n  end\n  if type(x)\
    \ == \"number\" and type(y) == \"number\" then\n    if x == y then return true\
    \ else return false end\n  end\n  if type(x) == \"number\" and type(z) == \"number\"\
    \ then\n    if x == z then return true else return false end\n  end\n  if type(y)\
    \ == \"number\" and type(z) == \"number\" then\n    if y == z then return true\
    \ else return false end\n  end\n  if x == y and y == z then return true else return\
    \ false end\n  if x == y then return true else return false end\n  if x == z then\
    \ return true else return false end\n  if y == z then return true else return\
    \ false end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp12q513_7.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp12q513_7.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(y)\
    \ == 'number' and type(z) == 'number' then\n    if y == z then\n      return true\n\
    \    elseif x < y then\n      if x < z then\n        return any_int(x, y, z)\n\
    \      else\n        return true\n      end\n    elseif x < z then\n      return\
    \ any_int(x, y, z)\n    else\n      return true\n    end\n  else\n    return false\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ n1 = tonumber(x), tonumber(y), tonumber(z)\n  if n1 then\n    return #n1 ==\
    \ 3 and all(map(function(x) return type(x) == 'number' and x ~= 0 end, n1)) and\
    \ n1 ~= nil\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3hjupt4n.lua:12:\
    \ attempt to get length of a number value (local 'n1')\nstack traceback:\n\t/tmp/tmp3hjupt4n.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp3hjupt4n.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == nil then return false end\n  if y == nil then return false end\n  if z ==\
    \ nil then return false end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa7jlo85s.lua:29: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ sum = x + y\n  local t = z\n  -- Make sure that numbers are integers\n  x =\
    \ tonumber(x)\n  y = tonumber(y)\n  z = tonumber(z)\n  if x ~= nil and y ~= nil\
    \ and z ~= nil then\n    -- Return true only if all three numbers are integers\n\
    \    if x == sum and y == t and z ~= z then return true end\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fwij6bx.lua:27:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp9fwij6bx.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ (not (x == y and x == z)) and (not (x == z and y == z)) and (((not x) or x)\
    \ and (not y) and (not z))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpddubp4g5.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpddubp4g5.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(y)\
    \ ~= 'number' or type(z) ~= 'number' then return false end\n  x = tonumber(x)\n\
    \  y = tonumber(y)\n  z = tonumber(z)\n  local r, p, k\n  if x < y and x < z then\n\
    \    return true\n  elseif x > y and x > z then\n    return false\n  elseif y\
    \ < z and y < x then\n    return true\n  elseif y > z and y > x then\n    return\
    \ false\n  else\n    r = x + y\n    k = x + z\n    k = k + y\n    return (r +\
    \ z) == k\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4qn4426a.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4qn4426a.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x < y and y < z and math.floor(x) == math.floor(y) and math.floor(y) == math.floor(z)\
    \ then\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxgcq2rcj.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxgcq2rcj.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n   \
    \ return x == y+z\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpswgc0d1c.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpswgc0d1c.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ sum = x + y + z\n  return ((type(x) == 'number' and type(x) == type(y)) and\
    \ type(x) == type(z)) or\n    (type(x) == 'number' and type(x) == type(sum)) or\n\
    \    (type(x) == 'number' and type(x) == type(z) and type(y) == type(sum))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo8xo3ofq.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo8xo3ofq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ y == z then\n        return true\n    end\n    if y == nil or z == nil then\n\
    \        return false\n    end\n    if x ~= tonumber(x) or y ~= tonumber(y) then\n\
    \        return false\n    end\n    if x ~= y and x ~= z then\n        return\
    \ true\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbjux31p.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwbjux31p.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   return\
    \ ((type(y) == 'number' and type(z) == 'number') and\n       (x == y or x == z\
    \ or y == z)) and math.floor(x) == math.floor(y) and math.floor(x) == math.floor(z)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjafkeqzr.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjafkeqzr.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ x == y + z and type(z) == 'number' and math.floor(x) == math.floor(x + y) and\
    \ math.floor(x) == math.floor(x - y)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xxmhmzx.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1xxmhmzx.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    --\
    \ First, check whether any of the numbers is NaN\n    if math.isnan(x) or math.isnan(y)\
    \ or math.isnan(z) then return false end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj1oc45vq.lua:28: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   if type(y)\
    \ == 'number' and type(z) == 'number' and y ~= z then\n      return math.abs(y\
    \ - z) <= math.max(y, z)\n   elseif type(y) == 'number' and type(z) ~= 'number'\
    \ then\n      return true\n   elseif type(x) == 'number' and type(z) == 'number'\
    \ and x ~= z then\n      return math.abs(x - z) <= math.max(x, y)\n   elseif type(x)\
    \ == 'number' and type(z) ~= 'number' then\n      return true\n   elseif type(x)\
    \ ~= 'number' and type(y) == 'number' and y ~= z then\n      return true\n   elseif\
    \ type(x) ~= 'number' and type(y) ~= 'number' then\n      return true\n   else\n\
    \      return false\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34z_a8sh.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp34z_a8sh.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == nil or y == nil or z == nil then\n    return nil\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphyeu0nr8.lua:29: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   if type(y)\
    \ ~= 'number' then return false end\n   if type(z) ~= 'number' then return false\
    \ end\n   if x < y then return false end\n   if x > z then return false end\n\
    \   if y == z then return true end\n   return any_int(y, z - x, z)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0o4zf2ea.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0o4zf2ea.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   if x\
    \ == y then\n      return z == x\n   elseif x ~= z and z ~= y then\n      return\
    \ false\n   else\n      return true\n   end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0x3atu2.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt0x3atu2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ ~= nil then\n    if y ~= nil then\n      if z ~= nil then\n        return x\
    \ ~= y + z\n      end\n      return true\n    elseif z ~= nil then\n      return\
    \ true\n    else\n      return false\n    end\n  elseif y ~= nil then\n    if\
    \ z ~= nil then\n      return true\n    else\n      return false\n    end\n  elseif\
    \ z ~= nil then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5k6anqql.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5k6anqql.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  -- Check\
    \ for valid inputs.\n  if type(x) == \"number\" then\n    if type(y) == \"number\"\
    \ and type(z) == \"number\" then\n      if x > y and x > z then\n        return\
    \ true\n      elseif y > z and y > x then\n        return true\n      elseif z\
    \ > x and z > y then\n        return true\n      elseif x == y and x == z and\
    \ type(x) == \"number\" then\n        return true\n      else\n        return\
    \ false\n      end\n    elseif type(x) == \"string\" then\n      if y == x and\
    \ type(x) == \"string\" then\n        return true\n      else\n        return\
    \ false\n      end\n    elseif type(x) == \"table\" then\n      if y == x and\
    \ type(x) == \"table\" then\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  elseif type(x) == \"table\"\
    \ then\n    if type(y) == \"number\" and type(z) == \"number\" then\n      if\
    \ x > y and x > z then\n        return true\n      elseif y > z and y > x then\n\
    \        return true\n      elseif z > x and z > y then\n        return true\n\
    \      elseif x == y and x == z and type(x) == \"table\" then\n        return\
    \ true\n      else\n        return false\n      end\n    elseif type(y) == \"\
    string\" then\n      if x == y and type(x) == \"string\" then\n        return\
    \ true\n      else\n        return false\n      end\n    elseif type(y) == \"\
    table\" then\n      if type(x) == \"string\" then\n        if y == x and type(x)\
    \ == \"string\" then\n          return true\n        else\n          return false\n\
    \        end\n      elseif type(x) == \"table\" then\n        if y == x and type(x)\
    \ == \"table\" then\n          return true\n        else\n          return false\n\
    \        end\n      else\n        return false\n      end\n    else\n      return\
    \ false\n    end\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpumot_sx0.lua:86:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpumot_sx0.lua:86:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   -- Return\
    \ true if the sum of the 3 numbers is equal to the 3 numbers.\n   return x==y\
    \ or x==z or y==z\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_sa3xguw.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_sa3xguw.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ (x or 0) == (y or 0) and (x or 0) == (z or 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3x2weed.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpo3x2weed.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ function is_int(x)\n    return x == x\n  end\n  if type(y) == 'number' and type(z)\
    \ == 'number' then\n    return is_int(x) and is_int(y) and is_int(z) and x + y\
    \ + z == y\n  elseif type(y) == 'table' and type(z) == 'table' then\n    local\
    \ ok, a, b, c = unpack(y, 2)\n    for _, v in pairs(z) do\n      ok, a, b, c =\
    \ is_int(a) and is_int(b) and is_int(c) and a + b + c == v\n    end\n    return\
    \ ok\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_abanig.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6_abanig.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ ~= nil and y ~= nil and z ~= nil then\n    if type(y) == \"number\" and type(z)\
    \ == \"number\" then\n      if y > z then\n        if x > z then\n          if\
    \ x > y then\n            return true\n          else\n            return false\n\
    \          end\n        else\n          return true\n        end\n      else\n\
    \        if x < z then\n          if x < y then\n            return true\n   \
    \       else\n            return false\n          end\n        else\n        \
    \  return true\n        end\n      end\n    else\n      return false\n    end\n\
    \  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppm2ncbrx.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppm2ncbrx.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ x or y or z or\n    x > y and y > z and z > x and x + y + z == z * z + 2 * z\
    \ + x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14ugzv27.lua:17:\
    \ expected: true, actual: 2\nstack traceback:\n\t/tmp/tmp14ugzv27.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   if x\
    \ == y or x == z or y == z then\n      return true\n   else\n      return false\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z4brriz.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9z4brriz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  -- This\
    \ function assumes integers\n  if type(x) ~= 'number' or type(y) ~= 'number' or\
    \ type(z) ~= 'number' then\n    return false\n  end\n  -- If all numbers are equal,\
    \ return true\n  if x == y and z == y then return true end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptz0oo2fc.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptz0oo2fc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(y)\
    \ == 'number' and type(z) == 'number' then\n    return (y + z) == x or (x - z)\
    \ == y\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdzbtvmfv.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdzbtvmfv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(y)\
    \ == type and type(x) == type and type(z) == type and type(y) == type(z) and type(x)\
    \ == number and type(y) == number and type(z) == number then\n    return x ==\
    \ y + z\n  elseif type(x) == number and type(y) == number and type(z) == number\
    \ and type(y) == number and type(z) == number and type(x) == number and type(y)\
    \ == number and type(z) == number then\n    return x == y + z\n  elseif type(x)\
    \ == number and type(y) == number and type(z) == number and type(x) == number\
    \ and type(y) == number and type(z) == number and type(x) == number and type(y)\
    \ == number and type(z) == number then\n    return x == y + z\n  elseif type(x)\
    \ == number and type(y) == number and type(z) == number and type(x) == number\
    \ and type(y) == number and type(z) == number and type(x) == number and type(y)\
    \ == number and type(z) == number and type(x) == number and type(y) == number\
    \ and type(z) == number and type(x) == number and type(y) == number and type(z)\
    \ == number and type(x) == number and type(y) == number and type(z) == number\
    \ and type(x) == number and type(y) == number and type(z) == number and type(x)\
    \ == number and type(y) == number and type(z) == number and type(x) == number\
    \ and type(y) == number and type(z) == number and type(x) == number and type(y)\
    \ == number and type(z) == number and type(x) == number and type(y) == number\
    \ and type(z) == number and type(x) == number and type(y) == number and type(z)\
    \ == number and type(x) == number and type(y) == number and type(z) == number\
    \ and type(x) == number and type(y) == number and type(z) == number and type(x)\
    \ == number and type(y) == number and type(z) == number and type(x) == number\
    \ and type(y) == number and type(z) == number and type(x) == number and type(y)\
    \ == number and type(z) == number and type(x) == number and type(y) == number\
    \ and type(z) == number and type(x) == number and type(y) == number and type(z)\
    \ == number and type(x) == number and type(y) == number and type(z) == number\
    \ and type(x) == number and type(y) == number and type(z) == number and type(x)\
    \ == number and type(y) == number and type(z) == number and type(x) == number\
    \ and type(y) == number and type(z) == number and type(x) == number and type(y)\
    \ == number and type(z) == number and type(x) == number and type(y) == number\
    \ and type(z) == number and type(x) == number and type(y) == number and type(z)\
    \ == number and type(x) == number and type(y) == number and type(z) == number\
    \ and type(x) == number and type(y) == number and type(z) == number and type(x)\
    \ == number and type(y) == number and type(z) == number and type(x) == number\
    \ and type(y) == number and type(z) == number and type(x) == number and type(y)\
    \ == number and type(z) == number and type(x) == number and type(y) == number\
    \ and type(z) == \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp32v7nxbg.lua:17: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   if type(z)\
    \ == 'number' then\n      return x == z or y == z\n   else\n      return x ==\
    \ y or y == z\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw6fkm_a.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprw6fkm_a.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ (x ~= nil and y ~= nil and z ~= nil) and\n    math.type(x - y + z) == 'number'\
    \ and math.type(x) == 'number' and math.type(y) == 'number' and math.type(z) ==\
    \ 'number'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01rowv5e.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp01rowv5e.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ ~= y and x ~= z and y ~= z then\n    return true\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevxwd_oi.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpevxwd_oi.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   return\
    \ x >= y or x == z or y == z\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxx74ufyr.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxx74ufyr.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ ~= nil and y ~= nil and z ~= nil then\n    return x ~= nil or y ~= nil or z\
    \ ~= nil and x ~= y and x ~= z and y ~= z\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlc5vybb.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjlc5vybb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ sum = x+y+z\n  if sum == x or sum == y or sum == z then\n    return true\n \
    \ end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsfp2d0qp.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsfp2d0qp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ r = true -- initialize to true\n  if x ~= nil then\n    if y ~= nil then\n \
    \     if z ~= nil then\n        if math.type(x) == 'number' and math.type(y) ==\
    \ 'number' and math.type(z) == 'number' then\n          r = r and x == y + z\n\
    \        end\n      else\n        r = r and x == y\n      end\n    else\n    \
    \  r = r and x == z\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5tptwp8.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg5tptwp8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  assert(type(x)\
    \ == 'number', 'First argument must be a number.')\n  assert(type(y) == 'number',\
    \ 'Second argument must be a number.')\n  assert(type(z) == 'number', 'Third argument\
    \ must be a number.')\n  return x == y + z\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsrtxq2_c.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsrtxq2_c.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y then return true end\n  if x == z or y == z then return true end\n  return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxgbd15bl.lua:14: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  -- Check\
    \ if all are integers\n  if type(y) == 'number' and type(z) == 'number' and type(x)\
    \ == 'number' then\n    return #x == #y and type(y) == type(z) and x % z == 0\
    \ or x % z == y or x % z == -y or x % z == -z\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqdrqaj3u.lua:12:\
    \ attempt to get length of a number value (local 'x')\nstack traceback:\n\t/tmp/tmpqdrqaj3u.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpqdrqaj3u.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    local\
    \ xint, yint, zint = x:int(), y:int(), z:int()\n    if xint ~= yint and xint ~=\
    \ zint then\n        return (xint + yint + zint) == zint\n    end\n    return\
    \ xint ~= yint or xint ~= zint\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplzfoh2gq.lua:10:\
    \ attempt to index a number value (local 'x')\nstack traceback:\n\t/tmp/tmplzfoh2gq.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmplzfoh2gq.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    --\
    \ The 'or false' is here to handle negative numbers (x or z).\n    -- The 'or\
    \ true' is here to handle non-numbers.\n    return ((type(y) == \"number\" and\
    \ type(z) == \"number\") or x==y) or (type(y) == \"number\" and type(z) == \"\
    number\") and x==z or x>y and x>z\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoaxi85i2.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpoaxi85i2.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  -- Check\
    \ if x is less or equal to y.\n  if x <= y then\n    local xint, yint, zint =\
    \ x, y, z\n    -- Check which number is greater.\n    if x > y then\n      --\
    \ If x is greater, subtract x from y to get z.\n      -- Then, add x to z.\n \
    \     -- If y has changed, then z hasn't changed, and x is greater than y\n  \
    \    -- which means that x is greater than or equal to y.\n      yint, zint, zint\
    \ = y, zint, xint\n      xint, yint = x, yint\n    end\n    -- Compare numbers\
    \ and return true if any of them are equal.\n    return xint == yint or xint ==\
    \ zint or yint == zint\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuhqer1vm.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuhqer1vm.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y or x == z or y == z then return true end\n  if x == z or y == z then return\
    \ false end\n  return ((type(x) == \"number\") and (type(y) == \"number\") and\
    \ (type(z) == \"number\")) and (x + y == z)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1fl5gqjz.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1fl5gqjz.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y then\n    return x == z\n  else\n    return x ~= y and x ~= z\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpazyde8v_.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpazyde8v_.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   return\
    \ ( type(x) == 'number' and type(y) == 'number' and type(z) == 'number' ) and\
    \ x == y + z and math.floor(x) == math.floor(y) and math.floor(x) == math.floor(z)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8c8yglss.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8c8yglss.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ x ~= nil and\n    y ~= nil and\n    z ~= nil and\n    x == y and\n    x ~= z\
    \ and\n    y == z and\n    x >= 0 and\n    y >= 0 and\n    z >= 0 and\n    x <=\
    \ z and\n    y <= z and\n    z <= x and z >= y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdqim4nur.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdqim4nur.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ ~= nil and y ~= nil and z ~= nil then\n    return x + y == z\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnvpqa2ab.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnvpqa2ab.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ ((#x > 0) and ((#y > 0) and (#z > 0)) and\n  (#x > 0 and #y > 0 and #z > 0)\
    \ and #x > 0 and #y > 0 and #z > 0 and x < y and x < z and y < z and x < z and\
    \ y > z and y < z and z > x)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm_ay44hm.lua:10:\
    \ attempt to get length of a number value (local 'x')\nstack traceback:\n\t/tmp/tmpm_ay44hm.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpm_ay44hm.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    local\
    \ a, b, c = x, y, z\n    if a > 0 and b > 0 and c > 0 then\n        if a == b\
    \ + c then\n            return true\n        elseif a - b == c - b then\n    \
    \        return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdzit_umz.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdzit_umz.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y and x == z and x ~= 0 then\n    return true\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_0ljt6r.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf_0ljt6r.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   if x\
    \ == y or x == z or y == z then\n      return true\n   else\n      return false\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3xzz3sy.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb3xzz3sy.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   if type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n   \
    \   return #x > 0\n         and #y > 0\n         and #z > 0\n         and x+y\
    \ == z\n   else\n      return false\n   end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphzn986jl.lua:11:\
    \ attempt to get length of a number value (local 'x')\nstack traceback:\n\t/tmp/tmphzn986jl.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmphzn986jl.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y and x == z and x % 1 == 0 then\n    return true\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpat9jup9g.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpat9jup9g.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y and x % 1 == 0 and y == z and y % 1 == 0 and z % 1 == 0 then return true\
    \ end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfh2s7e6z.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfh2s7e6z.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ function is_int(x)\n    return type(x) == 'number' and int(x) == x\n  end\n\
    \  return is_int(x) and is_int(y) and is_int(z) and (x+y+z) == z and (x+y+z) ==\
    \ (x+y) or (x+y) == (x+z) or (x+z) == (x-y) or (x-y) == (x-z) or (x-z) == (x+y)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr6jp1ao6.lua:11:\
    \ attempt to call a nil value (global 'int')\nstack traceback:\n\t/tmp/tmpr6jp1ao6.lua:11:\
    \ in local 'is_int'\n\t/tmp/tmpr6jp1ao6.lua:13: in local 'candidate'\n\t/tmp/tmpr6jp1ao6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ type(z) ~= \"number\" then return false end\n    if x < y then\n        if x\
    \ < z then return true end\n        return any_int(y, z, z)\n    elseif x < z\
    \ then\n        return any_int(x, y, z)\n    end\n    if y < z then\n        return\
    \ any_int(x, y, z)\n    end\n    return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   if x\
    \ > y and x > z then\n      return true\n   elseif y < x and y < z then\n    \
    \  return true\n   elseif x < y and x < z then\n      return true\n   else\n \
    \     return false\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdznlw2t.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqdznlw2t.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(y)\
    \ ~= 'number' then return false end\n  if type(x) ~= 'number' then return false\
    \ end\n  if type(z) ~= 'number' then return false end\n  if x < y then return\
    \ false end\n  if y < x then return false end\n  if x < z then return false end\n\
    \  if z < x then return false end\n  if x == y then return true end\n  return\
    \ false\nend\nreturn any_int\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0cillciy.lua:21: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ ((type(y) == 'number' and type(z) == 'number') and ((x ~= 0) and ((type(y) ==\
    \ 'number' and type(z) == 'number') and (y > 0)) or ((z > 0) and (type(y) == 'number'\
    \ and type(z) == 'number') and (y > 0))) and ((x == z) or ((x ~= 0) and ((type(y)\
    \ == 'number' and type(z) == 'number') and (y < 0)) or ((z < 0) and (type(y) ==\
    \ 'number' and type(z) == 'number') and (y < 0))))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppr32q1iz.lua:11: ')' expected (to close '(' at line 10) near\
    \ 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n   \
    \ return x == y + z\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphw_r7xfw.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphw_r7xfw.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  -- Check\
    \ for invalid cases.\n  if x == nil or y == nil or z == nil then\n    return false\n\
    \  end\n  -- If one or both of them are NaN, return false.\n  if x == math.nan\
    \ or y == math.nan or z == math.nan then\n    return false\n  end\n  -- If one\
    \ of the numbers is NaN or the sum of them is NaN, return false.\n  if math.isnan(x)\
    \ or math.isnan(y) or math.isnan(z) then\n    return false\n  end\n  -- If the\
    \ sum of the two numbers is NaN, return false.\n  if math.isnan(x + y) then\n\
    \    return false\n  end\n  -- If any of the numbers are integers, return true.\n\
    \  if math.isinteger(x) or math.isinteger(y) or math.isinteger(z) then\n    return\
    \ true\n  end\n  -- If any of the numbers are float, return true.\n  if math.isfloat(x)\
    \ or math.isfloat(y) or math.isfloat(z) then\n    return true\n  end\n  -- If\
    \ the sum of the numbers is float or integer, return false.\n  if math.isfloat(x+y)\
    \ or math.isfloat(y+z) then\n    return false\n  end\n  -- Otherwise, return true.\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf481z4m2.lua:19:\
    \ attempt to call a nil value (field 'isnan')\nstack traceback:\n\t/tmp/tmpf481z4m2.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpf481z4m2.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ type(x) == type(y) and type(x) == type(z) and x == y+z\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmg9phahv.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmg9phahv.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    local\
    \ _, sum = pcall(function () return x + y + z end)\n    x, y = x + y, y + z\n\
    \    z = z - sum\n    return x == z and y == z\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqevkpxmx.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqevkpxmx.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ lx = type(x)\n  local ly = type(y)\n  local lz = type(z)\n  if lx ~= ly or lx\
    \ ~= lz then\n    return false\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb46f6nqs.lua:32: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ type(y) == type(z) and type(y) == type(y) and type(z) == type(x) and type(x)\
    \ == type(y) and type(x) == type(z) and type(x) == type(x:type()) and x == y +\
    \ z and x or false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfc_i9nj7.lua:10:\
    \ attempt to index a number value (local 'x')\nstack traceback:\n\t/tmp/tmpfc_i9nj7.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpfc_i9nj7.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(x)\
    \ == 'number' and type(y) == 'number' and type(z) == 'number' then\n    return\
    \ (x == y and type(z) == 'number')\n  else\n    return false\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9sukpfc.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe9sukpfc.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ y >= x and x >= z\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gi_2zp4.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3gi_2zp4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y then\n    return x == z\n  elseif x < y then\n    return any_int(y, x,\
    \ z)\n  else\n    return any_int(x, y, z) or any_int(y, z, x)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzvagodfj.lua:15:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpzvagodfj.lua:15: in upvalue 'any_int'\n\
    \t/tmp/tmpzvagodfj.lua:15: in upvalue 'any_int'\n\t/tmp/tmpzvagodfj.lua:15: in\
    \ upvalue 'any_int'\n\t/tmp/tmpzvagodfj.lua:15: in upvalue 'any_int'\n\t/tmp/tmpzvagodfj.lua:15:\
    \ in upvalue 'any_int'\n\t/tmp/tmpzvagodfj.lua:15: in upvalue 'any_int'\n\t/tmp/tmpzvagodfj.lua:15:\
    \ in upvalue 'any_int'\n\t/tmp/tmpzvagodfj.lua:15: in upvalue 'any_int'\n\t/tmp/tmpzvagodfj.lua:15:\
    \ in upvalue 'any_int'\n\t...\n\t/tmp/tmpzvagodfj.lua:15: in function </tmp/tmpzvagodfj.lua:9>\n\
    \t(...tail calls...)\n\t/tmp/tmpzvagodfj.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.100 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n   \
    \ if x == y or x == z or y == z then\n      return true\n    else\n      return\
    \ false\n    end\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6aad7rd.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpp6aad7rd.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   if x\
    \ == y and x == z then\n      return true\n   elseif x == y then\n      return\
    \ false\n   elseif y == z then\n      return false\n   elseif x ~= z then\n  \
    \    return true\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ri6hofo.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4ri6hofo.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ x ~= nil and y ~= nil and z ~= nil and\n           x~=y and x~=z and y~=z and\
    \ tonumber(x)+tonumber(y)+tonumber(z)==tonumber(x+y+z) and\n           not (x~=nil\
    \ or y~=nil or z~=nil)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1718_gvd.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1718_gvd.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x >= y then\n        if x >= z then\n            return true\n        end\n\
    \    end\n    if y >= z then\n        return true\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqze2mx4o.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqze2mx4o.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ nx = x ~= nil and x or 0\n  local ny = y ~= nil and y or 0\n  local nz = z ~=\
    \ nil and z or 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp11qkyfu0.lua:29: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y then\n    return z == 0 or z == x\n  elseif x < y then\n    return any_int(y,\
    \ x, z)\n  else\n    return any_int(x, y, z)\n  end\nend\n</cell>\n<cell>\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyx7hoowo.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   if x\
    \ == y then\n      if type(z) == \"number\" then\n         return z == math.floor(x)+math.floor(y)\n\
    \      else\n         return false\n      end\n   else\n      if type(z) == \"\
    number\" then\n         return z == math.floor(x) + math.floor(y) + math.floor(z)\n\
    \      else\n         return false\n      end\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf66epwia.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf66epwia.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x and y and z then\n        local a, b, c = x, y, z\n        for _, v in ipairs({\
    \ a, b, c }) do\n            if not v then\n                return false\n   \
    \         end\n        end\n        return true\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfdkmz23t.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfdkmz23t.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x == y then\n        return z\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3c3tlyr6.lua:29: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y or x == z or y == z then\n    return true\n  else\n    return false\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsxrx4yif.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsxrx4yif.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   return\
    \ x + y == z and tonumber(x) or tonumber(y) or tonumber(z)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppifwt_jg.lua:16:\
    \ expected: true, actual: 3\nstack traceback:\n\t/tmp/tmppifwt_jg.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ x == y or x == z and y == z or (type(x) == 'number' and type(y) == 'number'\
    \ and type(z) == 'number' and math.floor(x) == math.floor(y) and math.floor(x)\
    \ == math.floor(z))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjh052vvs.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjh052vvs.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ function is_integer_a(s)\n    return s and #s == 1 and tonumber(s):byte() >=\
    \ 0\n  end\n  \n  if x == y or y == z or x == z then\n    return true\n  end\n\
    \  if x and is_integer_a(x.data) and y and is_integer_a(y.data) and z and is_integer_a(z.data)\n\
    \    then\n    local num1, num2, num3 = x, y, z\n    local sum\n    sum = (num1\
    \ + num2 + num3) - (num1 * num2 * num3)\n    if sum == 0 then\n      return true\n\
    \    else\n      return false\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmmmvnyks.lua:17:\
    \ attempt to index a number value (local 'x')\nstack traceback:\n\t/tmp/tmpmmmvnyks.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpmmmvnyks.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  x = int(x)\n\
    \  y = int(y)\n  z = int(z)\n  if x < y and x < z then\n    return true\n  elseif\
    \ y < z and y < x then\n    return true\n  else\n    return false\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbi4j09jw.lua:10:\
    \ attempt to call a nil value (global 'int')\nstack traceback:\n\t/tmp/tmpbi4j09jw.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpbi4j09jw.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y then return true end\n  if x == z then return true end\n  if y == z then\
    \ return true end\n  if x == math.floor(x) then return true end\n  if y == math.floor(y)\
    \ then return true end\n  if z == math.floor(z) then return true end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_ezet2d.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj_ezet2d.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(x)\
    \ == 'number' and type(y) == 'number' and type(z) == 'number'\n    then\n    \
    \  if math.abs(x + y + z) == math.abs(x) + math.abs(y) + math.abs(z) then\n  \
    \      return true\n      end\n      return false\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01f4tod1.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp01f4tod1.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ a = x == y and z\n  return a and type(a) == 'number'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptrt6tg5h.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptrt6tg5h.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    local\
    \ a, b, c = x, y, z\n    if b == nil then b = 0\n    else b = b or 0 end\n   \
    \ if c == nil then c = 0\n    else c = c or 0 end\n    return a == b + c\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprr0blsp.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpprr0blsp.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(y)\
    \ == \"number\" and type(z) == \"number\" then\n    return x == y and z == math.floor(x+y)\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqgtgnc3.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkqgtgnc3.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ type(y) == 'number' and type(z) == 'number' and type(x + y) == 'number' and\
    \ type(x + z) == 'number' and type(y + z) == 'number'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1md2w96w.lua:17:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1md2w96w.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  x = tonumber(x)\n\
    \  y = tonumber(y)\n  z = tonumber(z)\n  if not isinteger(x) then\n    return\
    \ false\n  end\n  if not isinteger(y) then\n    return false\n  end\n  if not\
    \ isinteger(z) then\n    return false\n  end\n  if x == y then\n    return true\n\
    \  end\n  if x == z then\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphppvlc6o.lua:13:\
    \ attempt to call a nil value (global 'isinteger')\nstack traceback:\n\t/tmp/tmphppvlc6o.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmphppvlc6o.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  -- Check\
    \ to see if any of them are integers\n  local zint = type(z) == 'number' and z\
    \ and z % 1 == 0\n  local yint = type(y) == 'number' and y and y % 1 == 0\n  local\
    \ xint = type(x) == 'number' and x % 1 == 0\n  return zint and yint and xint\n\
    end\n</code>\n<|/ a tags=lua |>\n<| c |>\nThanks for the answer!\n<|/ c |>\n<|\
    \ a dscore=1 |>\nThis should work for you:\n<code>\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk5y5rkbw.lua:16: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if is_integer(x)\
    \ and is_integer(y) and is_integer(z) then\n    return x == y + z\n  else\n  \
    \  return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpabka23a8.lua:10:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpabka23a8.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpabka23a8.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ r, w\n  if x == y then\n    r, w = z, x\n  elseif y == z then\n    r, w = y,\
    \ z\n  else\n    return false\n  end\n  local i = 1\n  while i <= r do\n    local\
    \ m = 0\n    while i <= w do\n      m = m + 1\n      i = i + 1\n    end\n    if\
    \ m == r then\n      return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9m_q0erq.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9m_q0erq.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(y)\
    \ == \"number\" then\n    if x == y then\n      return true\n    elseif x == z\
    \ then\n      return true\n    else\n      return false\n    end\n  else\n   \
    \ if x == y or x == z then\n      return true\n    else\n      return false\n\
    \    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zw1ezid.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0zw1ezid.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   if type(x)\
    \ == 'number' and type(y) == 'number' and type(z) == 'number' then\n      return\
    \ true\n   else\n      return false\n   end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpes2zleej.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpes2zleej.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y and type(x) == 'number' then\n    if y == z then\n      return true\n \
    \   else\n      return false\n    end\n  else\n    return false\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqgggq5i.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphqgggq5i.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(x)\
    \ == 'number' and type(y) == 'number' and type(z) == 'number' and x >= 0 and y\
    \ >= 0 and z >= 0 then\n    return x == y + z\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32czghlt.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp32czghlt.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ y == x or z == x then\n        return true\n    elseif y >= x and z >= x then\n\
    \        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9dg0egid.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9dg0egid.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n   \
    \ if x + y == z then\n      return true\n    end\n  else\n    return false\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0ocq5kv.lua:22:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpm0ocq5kv.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    local\
    \ sum = x+y+z\n    local t = type(sum)\n    if t == \"number\" then\n        if\
    \ (sum < 0 or sum > 10) and (sum > math.floor (sum)) and (sum < math.ceil (sum))\
    \ then\n            return false\n        else\n            return true\n    \
    \    end\n    elseif t == \"table\" then\n        for _, v in pairs(sum) do\n\
    \            if not any_int(x, y, v) then\n                return false\n    \
    \        end\n        end\n        return true\n    elseif t == \"userdata\" then\n\
    \        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc6i0uy34.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc6i0uy34.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ ~= nil and y ~= nil and z ~= nil then\n    if x ~= y and x ~= z and y ~= z then\n\
    \      return true\n    end\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnewe2f7.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqnewe2f7.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   local\
    \ s = x + y + z\n   return s == z or s == y or s == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5f2uf2w.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl5f2uf2w.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ x >= y and type(y) == type(z) and x == math.floor(x) and y == math.floor(y)\
    \ and z == math.floor(z)\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7iz8zk31.lua:12: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ type(y) == \"number\" then\n        if type(z) == \"number\" then\n        \
    \    return y == x + z\n        else\n            return false\n        end\n\
    \    else\n        if type(z) == \"number\" then\n            return false\n \
    \       else\n            return y == x\n        end\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vpdzjag.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4vpdzjag.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   if x\
    \ == y then\n      return true\n   elseif x == z then\n      return true\n   elseif\
    \ y == z then\n      return true\n   else\n      return false\n   end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi461ky36.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpi461ky36.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   if type(y)\
    \ == \"number\" then\n      if type(z) == \"number\" then\n         return x ==\
    \ y + z\n      else\n         return y == z\n      end\n   else\n      if type(x)\
    \ == \"number\" then\n         return x == y\n      else\n         return y ==\
    \ x\n      end\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7g7ddht.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpa7g7ddht.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ type(x) == type(y) and type(x) == type(z) and type(x) == int or type(x) == float\
    \ or type(x) == double and type(x) == int and type(x) == float and type(x) ==\
    \ float or type(x) == double and type(x) == double and type(x) == double\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc69yj9zu.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpc69yj9zu.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ math.floor(x + y + z) == math.floor(x + y + z)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphjfkmaql.lua:17:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphjfkmaql.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\t-- If\
    \ any of them is nil, the function returns false\n\tif x ~= nil and y ~= nil and\
    \ z ~= nil then\n\t\tif type(x) == \"number\" and type(y) == \"number\" and type(z)\
    \ == \"number\" then\n\t\t\treturn (x+y+z) == x\n\t\telse\n\t\t\treturn false\n\
    \t\tend\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn8b7asj9.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpn8b7asj9.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ x ~= nil and y ~= nil and z ~= nil and x and y and z and type(y) ~= 'number'\
    \ and type(z) ~= 'number' and math.floor(x) + math.floor(y) + math.floor(z) ==\
    \ math.floor(x + y + z)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p3_gxep.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9p3_gxep.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(x)\
    \ == 'number' and type(y) == 'number' and type(z) == 'number' then\n    return\
    \ (x >= y and x >= z and y >= z and x % z == 0 and y % z == 0 and z % z == 0)\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplepjir0i.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplepjir0i.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x == y then\n        if x == z then\n            -- We know that x and z are\
    \ both integers, so the result is true.\n            return true\n        else\n\
    \            -- We know that z is integer but not x. So, result is false.\n  \
    \          return false\n        end\n    elseif y == z then\n        -- We know\
    \ that y and z are both integers, so the result is true.\n        return true\n\
    \    elseif y == z and x == z then\n        -- In this case we know that z and\
    \ z are both integers, so the result is true.\n        return true\n    else\n\
    \        -- We know that none of the numbers are integers. So, result is false.\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibueh8i8.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpibueh8i8.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ type(x) == \"number\" then\n        if type(y) == \"number\" then\n        \
    \    if type(z) == \"number\" then\n                return x >= y and x >= z and\
    \ y >= z\n            else\n                return true\n            end\n   \
    \     else\n            return true\n        end\n    else\n        return true\n\
    \    end\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6wd_k_rs.lua:24: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(y)\
    \ == \"number\" and type(z) == \"number\" then\n    return x == y + z or x ==\
    \ z + y\n  elseif type(y) == \"number\" then\n    return x == y or z == y\n  elseif\
    \ type(z) == \"number\" then\n    return x == z or y == z\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppkgt0n6c.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppkgt0n6c.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ nx = tonumber(x); ny = tonumber(y); nz = tonumber(z)\n  -- Return false if one\
    \ of the numbers is nil or the other is nil\n  if nx == nil or ny == nil or nz\
    \ == nil then return false end\n  -- Return true if any of the numbers are equal\
    \ to the sum of the other two\n  if nx == ny and nx == nz then return true end\n\
    \  -- Return false if any of the numbers are different in value but the same in\
    \ representation\n  if nx == ny and nx ~= nz then return false end\n  -- Return\
    \ false if any of the numbers are different in value or representation\n  if nx\
    \ ~= ny and nx ~= nz then return false end\n  -- Return false if all values are\
    \ equal\n  if nx == ny then return true end\n  -- Return false if all values are\
    \ different\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfclewf6a.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfclewf6a.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ n = x + y + z\n  return math.floor(n / 3) == n and n % 3 == 2 or math.floor(n\
    \ / 3) == n and n % 3 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbke4idx.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvbke4idx.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  -- Check\
    \ for negatives\n  if x < 0 then\n    if y < 0 then\n      if z < 0 then\n   \
    \     return false\n      else\n        return true\n      end\n    else\n   \
    \   return true\n    end\n  else\n    if y < 0 then\n      if z < 0 then\n   \
    \     return true\n      else\n        return false\n      end\n    else\n   \
    \   if z < 0 then\n        return true\n      else\n        return false\n   \
    \   end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2t263cez.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2t263cez.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y and type(y) == 'number' and type(z) == 'number' then\n    local xs = x:byte()\n\
    \    local ys = y:byte()\n    local zs = z:byte()\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppl69i8kb.lua:30: 'end' expected (to close 'if' at line 10)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x == y or x == z or y == z then\n        return true\n    end\n    return false\n\
    end\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvhu62cf3.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    --\
    \ Handle the fact that x, y and z may be any type\n    if type(x) ~= 'number'\
    \ or type(y) ~= 'number' or type(z) ~= 'number' then\n        return false\n \
    \   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsqx3wsaj.lua:30: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ not (type(x) == 'number' or type(y) == 'number' or type(z) == 'number')\n  and\
    \ x ~= nil and y ~= nil and z ~= nil\n  and x ~= y and x ~= z\n  and y ~= z\n\
    \  and tonumber(x) or tonumber(y) or tonumber(z)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoj9wrinx.lua:20:\
    \ expected: true, actual: 3\nstack traceback:\n\t/tmp/tmpoj9wrinx.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x ~= nil then\n        if y ~= nil then\n            if z ~= nil then\n    \
    \            if x == y + z then\n                    return true\n           \
    \     else\n                    return false\n                end\n          \
    \  else\n                return false\n            end\n        else\n       \
    \     return false\n        end\n    else\n        return false\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_obqgal4.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_obqgal4.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ < y then return true end\n  if x < z or y < z then return false end\n  if x\
    \ > z then return false end\n  return true\nend\n</cell>\n<code language=julia-1.5>\n\
    # TEST any_int\nx = [5, 2, 7]\ny = [3, 2, 2]\nz = [3, -2, 1]\nany_int(x,y,z) \u2261\
    \ true\n</cell>\n<code language=julia-1.5>\n# TEST any_int (again)\nx = [5, 2,\
    \ 7]\ny = [3, 2, 2]\nz = [3.6, -2.2, 2]\nany_int(x,y,z) \u2261 false\n</cell>\n\
    <code language=julia-1.5>\n# TEST is_integer\nany_int([3.5, 3.1, 3.5]) \u2261\
    \ true\nany_int([3.1, 3.1, 3.5]) \u2261 false\nany_int([3.1, 3.1, 3.5]) \u2261\
    \ false\nany_int([3.1, 3.1, 3.5]) \u2261 false\nany_int([3.1, 3.1, 3.5]) \u2261\
    \ false\nany_int([3.1, 3.1, 3.5]) \u2261 false\nany_int([3.1, 3.1, 3.5]) \u2261\
    \ false\n</cell>\n<code language=julia-1.5>\n# TEST is_integer (again)\nany_int([3.5,\
    \ 3.1, 3.5]) \u2261 false\n</cell>\n<code language=julia-1.5>\n# TEST is_integer_list\n\
    any_int([3.5, 3.1, 3.5]) \u2261 true\nany_int([3.1, 3.1, 3.5]) \u2261 false\n\
    any_int([3.1, 3.1, 3.5]) \u2261 false\nany_int([3.1, 3.1, 3.5]) \u2261 false\n\
    any_int([3.1, 3.1, 3.5]) \u2261 false\nany_int([3.1, 3.1, 3.5]) \u2261 false\n\
    any_int([3.1, 3.1, 3.5]) \u2261 false\nany_int([3.1, 3.1, 3.5]) \u2261 false\n\
    </cell>\n<code language=julia-1.5>\n# TEST is_integer_list (again)\nany_int([3.5,\
    \ 3.1, 3.5]) \u2261 false\n</cell>\n<text>\nis_even()\nis_even() tests if a number\
    \ is even.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_qeybqi4.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ x ~= nil and y ~= nil and z ~= nil and x >= 0 and y >= 0 and z >= 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpld17_gkc.lua:17:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpld17_gkc.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y then\n    return true\n  elseif y == z then\n    return true\n  elseif\
    \ math.floor(x) == math.floor(y) or math.floor(y) == math.floor(z) then\n    return\
    \ true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xbn3sqc.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3xbn3sqc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ ~= nil and y ~= nil and z ~= nil then\n    return ((x == y or x == z) and type(x)\
    \ == \"number\") or (type(y) == \"number\" and type(z) == \"number\")\n  else\n\
    \    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1s8uc32.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpf1s8uc32.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ sum = x + y + z\n  return (type(sum) == 'number') and (type(sum) == 'integer')\
    \ and (sum == sum or sum == sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8z4ziym.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj8z4ziym.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ x and type(y) ~= 'boolean' and type(z) ~= 'boolean' and\n  x == y and type(x\
    \ + y) == 'integer' and type(x + z) == 'integer'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuehpz97v.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuehpz97v.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ sum\n  local xint, yint, zint\n  xint, yint, zint = x == nil, y == nil, z ==\
    \ nil or x == y or x == z and x or y == z and y or z\n  if xint then\n    sum\
    \ = x + y + z\n    return sum == math.floor(xsum) and sum or false\n  elseif x\
    \ == \"string\" or x == \"table\" then\n    sum = x:len() + y:len() + z:len()\n\
    \    return sum == math.floor(xsum) and sum or false\n  elseif x == \"number\"\
    \ then\n    sum = xint and x + y + z or x + y + z\n    return sum == math.floor(sum)\
    \ and sum or false\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwvzhufk.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqwvzhufk.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   if not\
    \ is_integer(x) or not is_integer(y) or not is_integer(z) then\n      return false\n\
    \   end\n   return x ~= x + y and x ~= y + z and x ~= z + x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8nd8nfj1.lua:10:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmp8nd8nfj1.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp8nd8nfj1.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y then return true end\n  if x == z then return true end\n  if y == z then\
    \ return false end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3o4phvq.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe3o4phvq.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ z + x == y or (z + x == -y and z * x ~= -y)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps8brmd5h.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps8brmd5h.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ type(y) == 'number' and type(z) == 'number' then\n        return ((x + y) ==\
    \ z)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdb7pvxm8.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdb7pvxm8.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    --\
    \ The three numbers need to be integers\n    assert(type(y) == 'number')\n   \
    \ assert(type(z) == 'number')\n    assert(type(x) == 'number')\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplzsq2mk8.lua:30: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    local\
    \ x = tonumber(x)\n    local y = tonumber(y)\n    local z = tonumber(z)\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt14em0tz.lua:29: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    local\
    \ function is_all_ints(...)\n        for _, v in pairs({...}) do\n           \
    \ if not torch.isInt(v) then return false end\n        end\n        return true\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvox7fufy.lua:32: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    local\
    \ sum = x+y+z\n    return sum >= 0 and ((sum == x) or (sum == y) or (sum == z))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdr8zkey.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbdr8zkey.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    local\
    \ x_int, y_int, z_int = x:int(), y:int(), z:int()\n    if x_int == y_int and x_int\
    \ == z_int then\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp60skmuh_.lua:10:\
    \ attempt to index a number value (local 'x')\nstack traceback:\n\t/tmp/tmp60skmuh_.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp60skmuh_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\tif type(x)\
    \ == 'number' and type(y) == 'number' and type(z) == 'number' then\n\t\treturn\
    \ ((x==y) or ((x==z) and (y==z)))\n\telse\n\t\treturn false\n\tend\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppevtpsao.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppevtpsao.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  -- Make\
    \ sure x and y are integers\n  x = tonumber(x)\n  y = tonumber(y)\n  if type(x)\
    \ == 'number' and type(y) == 'number' and x + y ~= z then\n    -- Return true\
    \ if x and y are equal to the sum of z\n    return z == x + y\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3h1df5hg.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3h1df5hg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x == y or x == z or y == z then\n        return true\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7p5_rbr1.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7p5_rbr1.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x==y and x==z then return true end\n    if x==y and z==z then return true end\n\
    \    if y==z and y==z then return true end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8iabsflh.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8iabsflh.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(x)\
    \ == 'number' and type(y) == 'number' and type(z) == 'number' then\n    return\
    \ (x or y) and (x or z) and (y or z)\n  elseif type(x) == 'number' and type(x)\
    \ == 'number' and type(x) == 'number' then\n    return false\n  elseif type(x)\
    \ == 'number' then\n    return false\n  elseif type(y) == 'number' then\n    return\
    \ false\n  elseif type(z) == 'number' then\n    return false\n  else\n    return\
    \ true\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkncxydh.lua:28:\
    \ expected: true, actual: 3\nstack traceback:\n\t/tmp/tmpmkncxydh.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   if x\
    \ == y or x == z or y == z then return true end\n   return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj82g1nfl.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj82g1nfl.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(x)\
    \ == 'number' and type(y) == 'number' and type(z) == 'number' then\n    return\
    \ x == y + z\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdw5xv9_l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdw5xv9_l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    local\
    \ a, b, c = x, y, z\n    return a == b and a == c or a == b and b == c or b ==\
    \ c and c == a or c == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkpcujr1i.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkpcujr1i.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  x = math.floor(x)\n\
    \  y = math.floor(y)\n  z = math.floor(z)\n  if x==y and x==z then\n    return\
    \ true\n  elseif x==z and y==z then\n    return true\n  elseif y==z then\n   \
    \ return false\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpodkpm2cs.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpodkpm2cs.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   local\
    \ x_int = x\n   local y_int = y\n   local z_int = z\n   if type(x_int) ~= 'number'\
    \ then\n      x_int = 1\n   end\n   if type(y_int) ~= 'number' then\n      y_int\
    \ = 1\n   end\n   if type(z_int) ~= 'number' then\n      z_int = 1\n   end\n \
    \  if x_int == y_int and x_int == z_int then\n      return true\n   end\n   return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppy5ahlum.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppy5ahlum.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ (type(y) == 'number' and type(z) == 'number') and\n         math.floor(x) ==\
    \ x and\n         math.floor(y) == y and\n         math.floor(z) == z\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1gm1lxn.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa1gm1lxn.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   if type(x)\
    \ ~= 'number' or type(y) ~= 'number' or type(z) ~= 'number' then return false\
    \ end\n   return ((x > y and x > z) or (x > y and y > z) or (x == y and x > z)\
    \ or (x == y and y > z) or (x == z and x > y) or (x == z and y > z) or (y == z\
    \ and x > x) or (y == z and y > x))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbdga9vp.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprbdga9vp.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\tif x\
    \ > 0 and y > 0 and z > 0 and x <= y and x <= z and y <= z then return true else\
    \ return false end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxttngunp.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxttngunp.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n   if x\
    \ ~= nil then\n      if y ~= nil then\n         if z ~= nil then\n           \
    \ return x == y + z\n         else\n            return false\n         end\n \
    \     else\n         return true\n      end\n   else\n      if y ~= nil then\n\
    \         return true\n      else\n         return false\n      end\n   end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppcxpful1.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppcxpful1.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
