name: HumanEval_92_any_int
language: lua
prompt: "-- Create a function that takes 3 numbers.\n-- Returns true if one of the\
  \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
  -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E True\n\
  -- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n-- any_int(3.6,\
  \ -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
  \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
  \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
  \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
  \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
  \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
  \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if type(x) ~= 'number' or type(y) ~= 'number' or type(z) ~= 'number'\
    \ then return false end\n  if x == y or x == z or y == z then return true end\n\
    \  return false\nend", "  if x == y and x == z and x ~= z then\n    return true\n\
    \  elseif x ~= x and x ~= y and x ~= z and y ~= z and x ~= z then\n    return\
    \ true\n  elseif y ~= y and y ~= z and y ~= z then\n    return true\n  elseif\
    \ z ~= z and z ~= z and z ~= z then\n    return true\n  else\n    return false\n\
    \  end\nend", "  if x ~= y then\n    if x ~= z then\n      if y ~= z then\n  \
    \      return true\n      else\n        return false\n      end\n    else\n  \
    \    return false\n    end\n  else\n    return true\n  end\nend", "    if type(x)\
    \ == type(y) and type(x) == type(z) and type(x) == number then\n        if x ==\
    \ y and y == z then\n            return true\n        else\n            return\
    \ false\n        end\n    end\nend", "   -- x is our first number; we assume it\
    \ is an integer\n   -- y is our second number, which is our \"sum\"\n   -- z is\
    \ our third number, which is our \"difference\"\n   -- If any of them are non-integers,\
    \ return false\n   -- If they're all integers, return true\n   if x ~= tonumber(x)\
    \ or y ~= tonumber(y) or z ~= tonumber(z) then return false end\n   if x ~= y\
    \ or x ~= z then return true end\n   return true\nend", "\t-- Check that the arguments\
    \ are integers.\n\tif type(y) ~= 'number' or type(z) ~= 'number' then return false\
    \ end\n\tif y == z or y > z then return false end\n\t-- If the values are equal,\
    \ check all the numbers are integers.\n\treturn true\nend", "  if type(x) == \"\
    number\" and type(y) == \"number\" and type(z) == \"number\" then\n    return\
    \ x == y + z\n  else\n    return false\n  end\nend", "  if x ~= nil and y ~= nil\
    \ and z ~= nil then\n    return x == y + z and x:int() == y:int() + z:int() and\n\
    \           x:int() == y and x:int() == z:int() and\n           x:int() ~= nil\
    \ and y:int() ~= nil and z:int() ~= nil\n  else\n    return false\n  end\nend",
  "  local ok, err = pcall(function()\n    return x + y == z\n  end)\n  if err ~=\
    \ nil then\n    return false\n  end\n  return true\nend", "  if type(x) == \"\
    number\" and type(y) == \"number\" and type(z) == \"number\" then\n    if x ==\
    \ y + z then\n      return true\n    end\n  end\n  return false\nend", "    if\
    \ type(x) == number and type(y) == number and type(z) == number then\n       \
    \ return (x < y + z) and (y < x + z) and (x < y + z) and (y < x + z)\n    elseif\
    \ type(x) == number and type(y) == number then\n        return (x < y) and (y\
    \ < x)\n    elseif type(x) == number and type(y) == string then\n        return\
    \ (x < y) and (y < x)\n    else\n        return false\n    end\nend", "  x = tointeger(x)\n\
    \  y = tointeger(y)\n  z = tointeger(z)\n  if x and y and z then\n    if x ==\
    \ y + z then\n      return true\n    end\n  end\n  return false\nend", "  if type(y)\
    \ ~= 'number' or type(x) ~= 'number' or type(z) ~= 'number' then\n    return false\n\
    \  end\n  -- if y > x then return false because we're trying to compare numbers\
    \ and letters.\n  if y > x then\n    return false\n  end\n  -- if z < 0 then return\
    \ false because we're trying to compare numbers and letters.\n  if z < 0 then\n\
    \    return false\n  end\n  if x > y and x > z then\n    return true\n  end\n\
    \  if y > z and y > x then\n    return true\n  end\n  if z > x and z > y then\n\
    \    return true\n  end\n  return false\nend", "   if type(x) == \"number\" and\
    \ type(y) == \"number\" and type(z) == \"number\" then\n      return x ~= nil\
    \ or y ~= nil or z ~= nil and (x + y + z == nil or x * y * z == nil or x * y *\
    \ z == nil or not (x * y * z % 1))\n   else\n      return false\n   end\nend",
  "  if x == y then\n    return x ~= 0 and x ~= z\n  else\n    return x ~= 0 and y\
    \ ~= 0 and x ~= z\n  end\nend", "   if type(y) ~= 'number' then\n      return\
    \ false\n   end\n   if type(x) ~= 'number' then\n      return false\n   end\n\
    \   if type(z) ~= 'number' then\n      return false\n   end\n   return x == y\
    \ + z\nend", "  if type(y) == type(x) and type(x) == type(z) and type(x) == type(y)\
    \ and type(x) == 'number' then\n    if x == y and z == x then return true end\n\
    \  end\n  return false\nend", "  if x == y then\n    if x == z then\n      return\
    \ true\n    end\n    return false\n  end\n  return x < y and y < z\nend", "  return\
    \ (type(x) == 'number' and type(y) == 'number' and type(z) == 'number' and x +\
    \ y == z)\nend", "  -- If the values are all integers then we know we have the\
    \ correct answer\n  if tonumber(x) == x and tonumber(y) == y and tonumber(z) ==\
    \ z then\n    return true\n  end\n  -- If the values are non-integers but are\
    \ also non-negative then we have an answer\n  if tonumber(x) > 0 and tonumber(y)\
    \ > 0 and tonumber(z) > 0 then\n    return true\n  end\n  -- If the values are\
    \ non-integers and are both negative, then we have an answer\n  if tonumber(x)\
    \ > 0 and tonumber(y) < 0 and tonumber(z) > 0 then\n    return true\n  end\n \
    \ -- If we didn't return false in any of the above cases then return false\n \
    \ return false\nend", "    local result = x ~= y or y ~= z\n    return result\n\
    end\n</cell>\n<text>\nExercise 7 - Creating a recursive function\nAs a first exercise,\
    \ let's write a recursive function which takes a list as an argument, and returns\
    \ all non-negative elements in the list. Write the function without using any\
    \ loops or recursion. Try to write it in as few lines as possible while being\
    \ compact.", "  if x == nil then\n    return y == nil\n  end\n  if y == nil then\n\
    \    return z == nil\n  end\n  if z == nil then\n    return x == y\n  end\n  return\
    \ x == y or x == z or y == z\nend", "  if x ~= nil and y ~= nil and z ~= nil then\n\
    \    if x ~= y or y ~= z then\n      return true\n    end\n  end\n  return false\n\
    end", "  if x == y and type(y) == 'number' and type(z) == 'number' then\n    return\
    \ true\n  elseif type(x) == 'number' and type(y) == 'number' then\n    return\
    \ z == x + y\n  elseif type(x) == 'number' and type(z) == 'number' then\n    return\
    \ z == x - y\n  elseif type(y) == 'number' and type(z) == 'number' then\n    return\
    \ z == y - x\n  else\n    return false\n  end\nend", "    if type(x) == 'number'\
    \ and type(y) == 'number' and type(z) == 'number' then\n        return math.abs(x\
    \ - y + z) < 0.0001\n    end\n    return false\nend", "    if type(y) == \"number\"\
    \ and type(z) == \"number\" then\n        return x == y or x == z or y == z\n\
    \    elseif type(x) == \"number\" and type(y) == \"table\" then\n        if type(x)\
    \ == \"table\" and type(y) == \"number\" then\n            -- The first number\
    \ is a table and the second is a number.\n            -- Check if all of the numbers\
    \ in the table are integers.\n            for k, v in pairs(y) do\n          \
    \      if not type(k) == \"number\" or type(v) == \"number\" then\n          \
    \          return false\n                end\n            end\n        end\n \
    \   end\n    return false\nend", "    -- If one argument is an integer, return\
    \ it\n    if x == x or y == y or z == z then\n        return x == y + z\n    end\n\
    \    -- If one argument is a number, check if it is equal to the sum of other\
    \ two.\n    return x + y == z\nend", "    local function is_int(n)\n        return\
    \ type(n) == 'number' and math.floor(n) == n\n    end\n    return x ~= nil and\n\
    \           y ~= nil and\n           z ~= nil and\n           (is_int(x) or is_int(y)\
    \ or is_int(z)) and\n           x ~= y and\n           x ~= z and\n          \
    \ y ~= z\nend", "    if type(y) ~= 'number' then\n        return false\n    end",
  "  if x==y or y==z or z==x then\n    return true\n  else\n    return false\n  end\n\
    end", "  if type(z) ~= \"number\" or z < 0 then\n    return false\n  end\n  return\
    \ not (x ~= y and x + y ~= z)\nend", "  if x < 0 or x > z then\n    return false\n\
    \  end\n  if y < 0 or y > z then\n    return false\n  end\n  if x == y then\n\
    \    return true\n  end\n  return true\nend", "  if x == y then\n    if type(z)\
    \ == 'number' then\n      local n = z\n      if n == x or n == y then\n      \
    \  return true\n      end\n    end\n  end\n  return false\nend", "  -- Check if\
    \ any number is positive\n  if x > y then\n    -- If x is greater than y, then\
    \ check if z is greater\n    if z > y then\n      return true\n    else\n    \
    \  return false\n    end\n  else\n    -- If y is greater than x, then check if\
    \ z is greater\n    if z > x then\n      return true\n    else\n      return false\n\
    \    end\n  end\nend", "  if x == y and x == z and y ~= z then return true end\n\
    \  if x == z or y == z then return false end\n  return true\nend", "    if x ==\
    \ y or y == z or z == x then\n        return true\n    end\n    return false\n\
    end", "    -- Check each case\n    if x == y or x == z or y == z then\n      \
    \  return true\n    else\n        return false\n    end\nend", "  -- We do arithmetic\
    \ with numbers to avoid issues with precision\n  -- by forcing them to integers\n\
    \  x = math.floor(x)\n  y = math.floor(y)\n  z = math.floor(z)\n  if x ~= x or\
    \ y ~= y or z ~= z then return false end\n  if x + y == z then return true end\n\
    \  return false\nend", "   return x ~= nil and y ~= nil and z ~= nil and x~=nil\
    \ and y~=nil and z~=nil and x~=y and x~=z and y~=z and (x~=nil or y~=nil or z~=nil)\
    \ and #x==#y and #y==#z\nend", "  local a, b, c = unpack({})\n  unpack({\"x,y,z\"\
    , x, y, z, a, b, c})\n  return a == x + y and b == z + x and c == x + y and b\
    \ == z + x\nend", "  return (x or 0) == y or (x or 0) == z\nend", "    return\
    \ type(z) == 'number' and type(y) == 'number' and type(x) == 'number' and x ==\
    \ z and y == z\nend", "  assert(type(y) == \"number\" and type(z) == \"number\"\
    )\n  return (x ~= nil and y ~= nil and z ~= nil) and (x ~= y or x ~= z or y ~=\
    \ z)\nend", "  if x == y or y == z or z == x then return true end\n  return false\n\
    end", "  return not x ~= y or x ~= z or y ~= z\nend", "  if x > z and x < y then\n\
    \    return true\n  end\n  if y > z and y < x then\n    return true\n  end\n \
    \ if x == y and x ~= z then\n    return true\n  end\n  if x ~= y and x ~= z then\n\
    \    return false\n  end\n  return true\nend", "  if x ~= nil and y ~= nil and\
    \ z ~= nil then\n    return x == y + z\n  end\n  return false\nend", "  local\
    \ function is_int(x)\n    return x == tonumber(x) or x == math.floor(x)\n  end",
  "  if x ~= nil and y ~= nil and z ~= nil then\n    return ((type(x) == 'number'\
    \ and type(y) == 'number' and type(z) == 'number' and x ~= 0 and y ~= 0 and z\
    \ ~= 0 and x + y + z == 0) or x == y or x == z or y == z)\n  else\n    return\
    \ false\n  end\nend", "  if type(x) == \"number\" and type(y) == \"number\" and\
    \ type(z) == \"number\" then\n    if x == y and y == z then return true else return\
    \ false end\n  end\n  if type(x) == \"number\" and type(y) == \"number\" then\n\
    \    if x == y then return true else return false end\n  end\n  if type(x) ==\
    \ \"number\" and type(z) == \"number\" then\n    if x == z then return true else\
    \ return false end\n  end\n  if type(y) == \"number\" and type(z) == \"number\"\
    \ then\n    if y == z then return true else return false end\n  end\n  if x ==\
    \ y and y == z then return true else return false end\n  if x == y then return\
    \ true else return false end\n  if x == z then return true else return false end\n\
    \  if y == z then return true else return false end\n  return false\nend", " \
    \ if type(y) == 'number' and type(z) == 'number' then\n    if y == z then\n  \
    \    return true\n    elseif x < y then\n      if x < z then\n        return any_int(x,\
    \ y, z)\n      else\n        return true\n      end\n    elseif x < z then\n \
    \     return any_int(x, y, z)\n    else\n      return true\n    end\n  else\n\
    \    return false\n  end\nend", "  local n1 = tonumber(x), tonumber(y), tonumber(z)\n\
    \  if n1 then\n    return #n1 == 3 and all(map(function(x) return type(x) == 'number'\
    \ and x ~= 0 end, n1)) and n1 ~= nil\n  else\n    return false\n  end\nend", " \
    \ if x == nil then return false end\n  if y == nil then return false end\n  if\
    \ z == nil then return false end", "  local sum = x + y\n  local t = z\n  -- Make\
    \ sure that numbers are integers\n  x = tonumber(x)\n  y = tonumber(y)\n  z =\
    \ tonumber(z)\n  if x ~= nil and y ~= nil and z ~= nil then\n    -- Return true\
    \ only if all three numbers are integers\n    if x == sum and y == t and z ~=\
    \ z then return true end\n  else\n    return false\n  end\nend", "  return (not\
    \ (x == y and x == z)) and (not (x == z and y == z)) and (((not x) or x) and (not\
    \ y) and (not z))\nend", "  if type(y) ~= 'number' or type(z) ~= 'number' then\
    \ return false end\n  x = tonumber(x)\n  y = tonumber(y)\n  z = tonumber(z)\n\
    \  local r, p, k\n  if x < y and x < z then\n    return true\n  elseif x > y and\
    \ x > z then\n    return false\n  elseif y < z and y < x then\n    return true\n\
    \  elseif y > z and y > x then\n    return false\n  else\n    r = x + y\n    k\
    \ = x + z\n    k = k + y\n    return (r + z) == k\n  end\nend", "    if x < y\
    \ and y < z and math.floor(x) == math.floor(y) and math.floor(y) == math.floor(z)\
    \ then\n        return true\n    end\n    return false\nend", "  if type(x) ==\
    \ \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n    return\
    \ x == y+z\n  else\n    return false\n  end\nend", "  local sum = x + y + z\n\
    \  return ((type(x) == 'number' and type(x) == type(y)) and type(x) == type(z))\
    \ or\n    (type(x) == 'number' and type(x) == type(sum)) or\n    (type(x) == 'number'\
    \ and type(x) == type(z) and type(y) == type(sum))\nend", "    if y == z then\n\
    \        return true\n    end\n    if y == nil or z == nil then\n        return\
    \ false\n    end\n    if x ~= tonumber(x) or y ~= tonumber(y) then\n        return\
    \ false\n    end\n    if x ~= y and x ~= z then\n        return true\n    end\n\
    end", "   return ((type(y) == 'number' and type(z) == 'number') and\n       (x\
    \ == y or x == z or y == z)) and math.floor(x) == math.floor(y) and math.floor(x)\
    \ == math.floor(z)\nend", "  return x == y + z and type(z) == 'number' and math.floor(x)\
    \ == math.floor(x + y) and math.floor(x) == math.floor(x - y)\nend", "    -- First,\
    \ check whether any of the numbers is NaN\n    if math.isnan(x) or math.isnan(y)\
    \ or math.isnan(z) then return false end", "   if type(y) == 'number' and type(z)\
    \ == 'number' and y ~= z then\n      return math.abs(y - z) <= math.max(y, z)\n\
    \   elseif type(y) == 'number' and type(z) ~= 'number' then\n      return true\n\
    \   elseif type(x) == 'number' and type(z) == 'number' and x ~= z then\n     \
    \ return math.abs(x - z) <= math.max(x, y)\n   elseif type(x) == 'number' and\
    \ type(z) ~= 'number' then\n      return true\n   elseif type(x) ~= 'number' and\
    \ type(y) == 'number' and y ~= z then\n      return true\n   elseif type(x) ~=\
    \ 'number' and type(y) ~= 'number' then\n      return true\n   else\n      return\
    \ false\n   end\nend", "  if x == nil or y == nil or z == nil then\n    return\
    \ nil\n  end", "   if type(y) ~= 'number' then return false end\n   if type(z)\
    \ ~= 'number' then return false end\n   if x < y then return false end\n   if\
    \ x > z then return false end\n   if y == z then return true end\n   return any_int(y,\
    \ z - x, z)\nend", "   if x == y then\n      return z == x\n   elseif x ~= z and\
    \ z ~= y then\n      return false\n   else\n      return true\n   end\nend", " \
    \ if x ~= nil then\n    if y ~= nil then\n      if z ~= nil then\n        return\
    \ x ~= y + z\n      end\n      return true\n    elseif z ~= nil then\n      return\
    \ true\n    else\n      return false\n    end\n  elseif y ~= nil then\n    if\
    \ z ~= nil then\n      return true\n    else\n      return false\n    end\n  elseif\
    \ z ~= nil then\n    return true\n  else\n    return false\n  end\nend", "  --\
    \ Check for valid inputs.\n  if type(x) == \"number\" then\n    if type(y) ==\
    \ \"number\" and type(z) == \"number\" then\n      if x > y and x > z then\n \
    \       return true\n      elseif y > z and y > x then\n        return true\n\
    \      elseif z > x and z > y then\n        return true\n      elseif x == y and\
    \ x == z and type(x) == \"number\" then\n        return true\n      else\n   \
    \     return false\n      end\n    elseif type(x) == \"string\" then\n      if\
    \ y == x and type(x) == \"string\" then\n        return true\n      else\n   \
    \     return false\n      end\n    elseif type(x) == \"table\" then\n      if\
    \ y == x and type(x) == \"table\" then\n        return true\n      else\n    \
    \    return false\n      end\n    else\n      return false\n    end\n  elseif\
    \ type(x) == \"table\" then\n    if type(y) == \"number\" and type(z) == \"number\"\
    \ then\n      if x > y and x > z then\n        return true\n      elseif y > z\
    \ and y > x then\n        return true\n      elseif z > x and z > y then\n   \
    \     return true\n      elseif x == y and x == z and type(x) == \"table\" then\n\
    \        return true\n      else\n        return false\n      end\n    elseif\
    \ type(y) == \"string\" then\n      if x == y and type(x) == \"string\" then\n\
    \        return true\n      else\n        return false\n      end\n    elseif\
    \ type(y) == \"table\" then\n      if type(x) == \"string\" then\n        if y\
    \ == x and type(x) == \"string\" then\n          return true\n        else\n \
    \         return false\n        end\n      elseif type(x) == \"table\" then\n\
    \        if y == x and type(x) == \"table\" then\n          return true\n    \
    \    else\n          return false\n        end\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend", "   -- Return true if the sum of the 3 numbers is equal to the 3\
    \ numbers.\n   return x==y or x==z or y==z\nend", "  return (x or 0) == (y or\
    \ 0) and (x or 0) == (z or 0)\nend", "  local function is_int(x)\n    return x\
    \ == x\n  end\n  if type(y) == 'number' and type(z) == 'number' then\n    return\
    \ is_int(x) and is_int(y) and is_int(z) and x + y + z == y\n  elseif type(y) ==\
    \ 'table' and type(z) == 'table' then\n    local ok, a, b, c = unpack(y, 2)\n\
    \    for _, v in pairs(z) do\n      ok, a, b, c = is_int(a) and is_int(b) and\
    \ is_int(c) and a + b + c == v\n    end\n    return ok\n  end\n  return false\n\
    end", "  if x ~= nil and y ~= nil and z ~= nil then\n    if type(y) == \"number\"\
    \ and type(z) == \"number\" then\n      if y > z then\n        if x > z then\n\
    \          if x > y then\n            return true\n          else\n          \
    \  return false\n          end\n        else\n          return true\n        end\n\
    \      else\n        if x < z then\n          if x < y then\n            return\
    \ true\n          else\n            return false\n          end\n        else\n\
    \          return true\n        end\n      end\n    else\n      return false\n\
    \    end\n  else\n    return false\n  end\nend", "  return x or y or z or\n  \
    \  x > y and y > z and z > x and x + y + z == z * z + 2 * z + x\nend", "   if\
    \ x == y or x == z or y == z then\n      return true\n   else\n      return false\n\
    \   end\nend", "  -- This function assumes integers\n  if type(x) ~= 'number'\
    \ or type(y) ~= 'number' or type(z) ~= 'number' then\n    return false\n  end\n\
    \  -- If all numbers are equal, return true\n  if x == y and z == y then return\
    \ true end\n  return false\nend", "  if type(y) == 'number' and type(z) == 'number'\
    \ then\n    return (y + z) == x or (x - z) == y\n  else\n    return false\n  end\n\
    end", "  if type(y) == type and type(x) == type and type(z) == type and type(y)\
    \ == type(z) and type(x) == number and type(y) == number and type(z) == number\
    \ then\n    return x == y + z\n  elseif type(x) == number and type(y) == number\
    \ and type(z) == number and type(y) == number and type(z) == number and type(x)\
    \ == number and type(y) == number and type(z) == number then\n    return x ==\
    \ y + z\n  elseif type(x) == number and type(y) == number and type(z) == number\
    \ and type(x) == number and type(y) == number and type(z) == number and type(x)\
    \ == number and type(y) == number and type(z) == number then\n    return x ==\
    \ y + z\n  elseif type(x) == number and type(y) == number and type(z) == number\
    \ and type(x) == number and type(y) == number and type(z) == number and type(x)\
    \ == number and type(y) == number and type(z) == number and type(x) == number\
    \ and type(y) == number and type(z) == number and type(x) == number and type(y)\
    \ == number and type(z) == number and type(x) == number and type(y) == number\
    \ and type(z) == number and type(x) == number and type(y) == number and type(z)\
    \ == number and type(x) == number and type(y) == number and type(z) == number\
    \ and type(x) == number and type(y) == number and type(z) == number and type(x)\
    \ == number and type(y) == number and type(z) == number and type(x) == number\
    \ and type(y) == number and type(z) == number and type(x) == number and type(y)\
    \ == number and type(z) == number and type(x) == number and type(y) == number\
    \ and type(z) == number and type(x) == number and type(y) == number and type(z)\
    \ == number and type(x) == number and type(y) == number and type(z) == number\
    \ and type(x) == number and type(y) == number and type(z) == number and type(x)\
    \ == number and type(y) == number and type(z) == number and type(x) == number\
    \ and type(y) == number and type(z) == number and type(x) == number and type(y)\
    \ == number and type(z) == number and type(x) == number and type(y) == number\
    \ and type(z) == number and type(x) == number and type(y) == number and type(z)\
    \ == number and type(x) == number and type(y) == number and type(z) == number\
    \ and type(x) == number and type(y) == number and type(z) == number and type(x)\
    \ == number and type(y) == number and type(z) == number and type(x) == number\
    \ and type(y) == number and type(z) == number and type(x) == number and type(y)\
    \ == number and type(z) == number and type(x) == number and type(y) == number\
    \ and type(z) == number and type(x) == number and type(y) == number and type(z)\
    \ == number and type(x) == number and type(y) == number and type(z) == number\
    \ and type(x) == number and type(y) == number and type(z) == number and type(x)\
    \ == number and type(y) == number and type(z) == number and type(x) == number\
    \ and type(y) == number and type(z) == ", "   if type(z) == 'number' then\n  \
    \    return x == z or y == z\n   else\n      return x == y or y == z\n   end\n\
    end", "  return (x ~= nil and y ~= nil and z ~= nil) and\n    math.type(x - y\
    \ + z) == 'number' and math.type(x) == 'number' and math.type(y) == 'number' and\
    \ math.type(z) == 'number'\nend", "  if x ~= y and x ~= z and y ~= z then\n  \
    \  return true\n  end\n  return false\nend", "   return x >= y or x == z or y\
    \ == z\nend", "  if x ~= nil and y ~= nil and z ~= nil then\n    return x ~= nil\
    \ or y ~= nil or z ~= nil and x ~= y and x ~= z and y ~= z\n  end\n  return false\n\
    end", "  local sum = x+y+z\n  if sum == x or sum == y or sum == z then\n    return\
    \ true\n  end\n  return false\nend", "  local r = true -- initialize to true\n\
    \  if x ~= nil then\n    if y ~= nil then\n      if z ~= nil then\n        if\
    \ math.type(x) == 'number' and math.type(y) == 'number' and math.type(z) == 'number'\
    \ then\n          r = r and x == y + z\n        end\n      else\n        r = r\
    \ and x == y\n      end\n    else\n      r = r and x == z\n    end\n  end\n  return\
    \ r\nend", "  assert(type(x) == 'number', 'First argument must be a number.')\n\
    \  assert(type(y) == 'number', 'Second argument must be a number.')\n  assert(type(z)\
    \ == 'number', 'Third argument must be a number.')\n  return x == y + z\nend",
  "  if x == y then return true end\n  if x == z or y == z then return true end\n\
    \  return false\nend\n</cell>\n<code language=julia-1.5>", "  -- Check if all\
    \ are integers\n  if type(y) == 'number' and type(z) == 'number' and type(x) ==\
    \ 'number' then\n    return #x == #y and type(y) == type(z) and x % z == 0 or\
    \ x % z == y or x % z == -y or x % z == -z\n  end\n  return false\nend", "   \
    \ local xint, yint, zint = x:int(), y:int(), z:int()\n    if xint ~= yint and\
    \ xint ~= zint then\n        return (xint + yint + zint) == zint\n    end\n  \
    \  return xint ~= yint or xint ~= zint\nend", "    -- The 'or false' is here to\
    \ handle negative numbers (x or z).\n    -- The 'or true' is here to handle non-numbers.\n\
    \    return ((type(y) == \"number\" and type(z) == \"number\") or x==y) or (type(y)\
    \ == \"number\" and type(z) == \"number\") and x==z or x>y and x>z\nend", "  --\
    \ Check if x is less or equal to y.\n  if x <= y then\n    local xint, yint, zint\
    \ = x, y, z\n    -- Check which number is greater.\n    if x > y then\n      --\
    \ If x is greater, subtract x from y to get z.\n      -- Then, add x to z.\n \
    \     -- If y has changed, then z hasn't changed, and x is greater than y\n  \
    \    -- which means that x is greater than or equal to y.\n      yint, zint, zint\
    \ = y, zint, xint\n      xint, yint = x, yint\n    end\n    -- Compare numbers\
    \ and return true if any of them are equal.\n    return xint == yint or xint ==\
    \ zint or yint == zint\n  end\n  return false\nend", "  if x == y or x == z or\
    \ y == z then return true end\n  if x == z or y == z then return false end\n \
    \ return ((type(x) == \"number\") and (type(y) == \"number\") and (type(z) ==\
    \ \"number\")) and (x + y == z)\nend", "  if x == y then\n    return x == z\n\
    \  else\n    return x ~= y and x ~= z\n  end\nend", "   return ( type(x) == 'number'\
    \ and type(y) == 'number' and type(z) == 'number' ) and x == y + z and math.floor(x)\
    \ == math.floor(y) and math.floor(x) == math.floor(z)\nend", "  return x ~= nil\
    \ and\n    y ~= nil and\n    z ~= nil and\n    x == y and\n    x ~= z and\n  \
    \  y == z and\n    x >= 0 and\n    y >= 0 and\n    z >= 0 and\n    x <= z and\n\
    \    y <= z and\n    z <= x and z >= y\nend", "  if x ~= nil and y ~= nil and\
    \ z ~= nil then\n    return x + y == z\n  end\n  return false\nend", "  return\
    \ ((#x > 0) and ((#y > 0) and (#z > 0)) and\n  (#x > 0 and #y > 0 and #z > 0)\
    \ and #x > 0 and #y > 0 and #z > 0 and x < y and x < z and y < z and x < z and\
    \ y > z and y < z and z > x)\nend", "    local a, b, c = x, y, z\n    if a > 0\
    \ and b > 0 and c > 0 then\n        if a == b + c then\n            return true\n\
    \        elseif a - b == c - b then\n            return true\n        end\n  \
    \  end\n    return false\nend", "  if x == y and x == z and x ~= 0 then\n    return\
    \ true\n  end\n  return false\nend", "   if x == y or x == z or y == z then\n\
    \      return true\n   else\n      return false\n   end\nend", "   if type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n   \
    \   return #x > 0\n         and #y > 0\n         and #z > 0\n         and x+y\
    \ == z\n   else\n      return false\n   end\nend", "  if x == y and x == z and\
    \ x % 1 == 0 then\n    return true\n  end\n  return false\nend", "  if x == y\
    \ and x % 1 == 0 and y == z and y % 1 == 0 and z % 1 == 0 then return true end\n\
    \  return false\nend", "  local function is_int(x)\n    return type(x) == 'number'\
    \ and int(x) == x\n  end\n  return is_int(x) and is_int(y) and is_int(z) and (x+y+z)\
    \ == z and (x+y+z) == (x+y) or (x+y) == (x+z) or (x+z) == (x-y) or (x-y) == (x-z)\
    \ or (x-z) == (x+y)\nend", "    if type(z) ~= \"number\" then return false end\n\
    \    if x < y then\n        if x < z then return true end\n        return any_int(y,\
    \ z, z)\n    elseif x < z then\n        return any_int(x, y, z)\n    end\n   \
    \ if y < z then\n        return any_int(x, y, z)\n    end\n    return true\nend",
  "   if x > y and x > z then\n      return true\n   elseif y < x and y < z then\n\
    \      return true\n   elseif x < y and x < z then\n      return true\n   else\n\
    \      return false\n   end\nend", "  if type(y) ~= 'number' then return false\
    \ end\n  if type(x) ~= 'number' then return false end\n  if type(z) ~= 'number'\
    \ then return false end\n  if x < y then return false end\n  if y < x then return\
    \ false end\n  if x < z then return false end\n  if z < x then return false end\n\
    \  if x == y then return true end\n  return false\nend\nreturn any_int", "  return\
    \ ((type(y) == 'number' and type(z) == 'number') and ((x ~= 0) and ((type(y) ==\
    \ 'number' and type(z) == 'number') and (y > 0)) or ((z > 0) and (type(y) == 'number'\
    \ and type(z) == 'number') and (y > 0))) and ((x == z) or ((x ~= 0) and ((type(y)\
    \ == 'number' and type(z) == 'number') and (y < 0)) or ((z < 0) and (type(y) ==\
    \ 'number' and type(z) == 'number') and (y < 0))))\nend", "  if type(x) == \"\
    number\" and type(y) == \"number\" and type(z) == \"number\" then\n    return\
    \ x == y + z\n  else\n    return false\n  end\nend", "  -- Check for invalid cases.\n\
    \  if x == nil or y == nil or z == nil then\n    return false\n  end\n  -- If\
    \ one or both of them are NaN, return false.\n  if x == math.nan or y == math.nan\
    \ or z == math.nan then\n    return false\n  end\n  -- If one of the numbers is\
    \ NaN or the sum of them is NaN, return false.\n  if math.isnan(x) or math.isnan(y)\
    \ or math.isnan(z) then\n    return false\n  end\n  -- If the sum of the two numbers\
    \ is NaN, return false.\n  if math.isnan(x + y) then\n    return false\n  end\n\
    \  -- If any of the numbers are integers, return true.\n  if math.isinteger(x)\
    \ or math.isinteger(y) or math.isinteger(z) then\n    return true\n  end\n  --\
    \ If any of the numbers are float, return true.\n  if math.isfloat(x) or math.isfloat(y)\
    \ or math.isfloat(z) then\n    return true\n  end\n  -- If the sum of the numbers\
    \ is float or integer, return false.\n  if math.isfloat(x+y) or math.isfloat(y+z)\
    \ then\n    return false\n  end\n  -- Otherwise, return true.\n  return true\n\
    end", "    return type(x) == type(y) and type(x) == type(z) and x == y+z\nend",
  "    local _, sum = pcall(function () return x + y + z end)\n    x, y = x + y, y\
    \ + z\n    z = z - sum\n    return x == z and y == z\nend", "  local lx = type(x)\n\
    \  local ly = type(y)\n  local lz = type(z)\n  if lx ~= ly or lx ~= lz then\n\
    \    return false\n  end", "  return type(y) == type(z) and type(y) == type(y)\
    \ and type(z) == type(x) and type(x) == type(y) and type(x) == type(z) and type(x)\
    \ == type(x:type()) and x == y + z and x or false\nend", "  if type(x) == 'number'\
    \ and type(y) == 'number' and type(z) == 'number' then\n    return (x == y and\
    \ type(z) == 'number')\n  else\n    return false\n  end\nend", "  return y >=\
    \ x and x >= z\nend", "  if x == y then\n    return x == z\n  elseif x < y then\n\
    \    return any_int(y, x, z)\n  else\n    return any_int(x, y, z) or any_int(y,\
    \ z, x)\n  end\nend", "  if type(x) == \"number\" and type(y) == \"number\" and\
    \ type(z) == \"number\" then\n    if x == y or x == z or y == z then\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end", "   if x == y and x == z then\n      return true\n   elseif x == y then\n\
    \      return false\n   elseif y == z then\n      return false\n   elseif x ~=\
    \ z then\n      return true\n   end\nend", "    return x ~= nil and y ~= nil and\
    \ z ~= nil and\n           x~=y and x~=z and y~=z and tonumber(x)+tonumber(y)+tonumber(z)==tonumber(x+y+z)\
    \ and\n           not (x~=nil or y~=nil or z~=nil)\nend", "    if x >= y then\n\
    \        if x >= z then\n            return true\n        end\n    end\n    if\
    \ y >= z then\n        return true\n    end\n    return false\nend", "  local\
    \ nx = x ~= nil and x or 0\n  local ny = y ~= nil and y or 0\n  local nz = z ~=\
    \ nil and z or 0", "  if x == y then\n    return z == 0 or z == x\n  elseif x\
    \ < y then\n    return any_int(y, x, z)\n  else\n    return any_int(x, y, z)\n\
    \  end\nend\n</cell>\n<cell>", "   if x == y then\n      if type(z) == \"number\"\
    \ then\n         return z == math.floor(x)+math.floor(y)\n      else\n       \
    \  return false\n      end\n   else\n      if type(z) == \"number\" then\n   \
    \      return z == math.floor(x) + math.floor(y) + math.floor(z)\n      else\n\
    \         return false\n      end\n   end\nend", "    if x and y and z then\n\
    \        local a, b, c = x, y, z\n        for _, v in ipairs({ a, b, c }) do\n\
    \            if not v then\n                return false\n            end\n  \
    \      end\n        return true\n    end\n    return false\nend", "    if x ==\
    \ y then\n        return z\n    end", "  if x == y or x == z or y == z then\n\
    \    return true\n  else\n    return false\n  end\nend", "   return x + y == z\
    \ and tonumber(x) or tonumber(y) or tonumber(z)\nend", "  return x == y or x ==\
    \ z and y == z or (type(x) == 'number' and type(y) == 'number' and type(z) ==\
    \ 'number' and math.floor(x) == math.floor(y) and math.floor(x) == math.floor(z))\n\
    end", "  local function is_integer_a(s)\n    return s and #s == 1 and tonumber(s):byte()\
    \ >= 0\n  end\n  \n  if x == y or y == z or x == z then\n    return true\n  end\n\
    \  if x and is_integer_a(x.data) and y and is_integer_a(y.data) and z and is_integer_a(z.data)\n\
    \    then\n    local num1, num2, num3 = x, y, z\n    local sum\n    sum = (num1\
    \ + num2 + num3) - (num1 * num2 * num3)\n    if sum == 0 then\n      return true\n\
    \    else\n      return false\n    end\n  end\n  return false\nend", "  x = int(x)\n\
    \  y = int(y)\n  z = int(z)\n  if x < y and x < z then\n    return true\n  elseif\
    \ y < z and y < x then\n    return true\n  else\n    return false\n  end\nend",
  "  if x == y then return true end\n  if x == z then return true end\n  if y == z\
    \ then return true end\n  if x == math.floor(x) then return true end\n  if y ==\
    \ math.floor(y) then return true end\n  if z == math.floor(z) then return true\
    \ end\n  return false\nend", "  if type(x) == 'number' and type(y) == 'number'\
    \ and type(z) == 'number'\n    then\n      if math.abs(x + y + z) == math.abs(x)\
    \ + math.abs(y) + math.abs(z) then\n        return true\n      end\n      return\
    \ false\n  end\n  return false\nend", "  local a = x == y and z\n  return a and\
    \ type(a) == 'number'\nend", "    local a, b, c = x, y, z\n    if b == nil then\
    \ b = 0\n    else b = b or 0 end\n    if c == nil then c = 0\n    else c = c or\
    \ 0 end\n    return a == b + c\nend", "  if type(y) == \"number\" and type(z)\
    \ == \"number\" then\n    return x == y and z == math.floor(x+y)\n  end\n  return\
    \ false\nend", "  return type(y) == 'number' and type(z) == 'number' and type(x\
    \ + y) == 'number' and type(x + z) == 'number' and type(y + z) == 'number'\nend",
  "  x = tonumber(x)\n  y = tonumber(y)\n  z = tonumber(z)\n  if not isinteger(x)\
    \ then\n    return false\n  end\n  if not isinteger(y) then\n    return false\n\
    \  end\n  if not isinteger(z) then\n    return false\n  end\n  if x == y then\n\
    \    return true\n  end\n  if x == z then\n    return true\n  end\n  return false\n\
    end", "  -- Check to see if any of them are integers\n  local zint = type(z) ==\
    \ 'number' and z and z % 1 == 0\n  local yint = type(y) == 'number' and y and\
    \ y % 1 == 0\n  local xint = type(x) == 'number' and x % 1 == 0\n  return zint\
    \ and yint and xint\nend\n</code>\n<|/ a tags=lua |>\n<| c |>\nThanks for the\
    \ answer!\n<|/ c |>\n<| a dscore=1 |>\nThis should work for you:\n<code>", " \
    \ if is_integer(x) and is_integer(y) and is_integer(z) then\n    return x == y\
    \ + z\n  else\n    return false\n  end\nend", "  local r, w\n  if x == y then\n\
    \    r, w = z, x\n  elseif y == z then\n    r, w = y, z\n  else\n    return false\n\
    \  end\n  local i = 1\n  while i <= r do\n    local m = 0\n    while i <= w do\n\
    \      m = m + 1\n      i = i + 1\n    end\n    if m == r then\n      return true\n\
    \    end\n  end\n  return false\nend", "  if type(y) == \"number\" then\n    if\
    \ x == y then\n      return true\n    elseif x == z then\n      return true\n\
    \    else\n      return false\n    end\n  else\n    if x == y or x == z then\n\
    \      return true\n    else\n      return false\n    end\n  end\nend", "   if\
    \ type(x) == 'number' and type(y) == 'number' and type(z) == 'number' then\n \
    \     return true\n   else\n      return false\n   end\nend", "  if x == y and\
    \ type(x) == 'number' then\n    if y == z then\n      return true\n    else\n\
    \      return false\n    end\n  else\n    return false\n  end\nend", "  if type(x)\
    \ == 'number' and type(y) == 'number' and type(z) == 'number' and x >= 0 and y\
    \ >= 0 and z >= 0 then\n    return x == y + z\n  end\n  return false\nend", " \
    \   if y == x or z == x then\n        return true\n    elseif y >= x and z >=\
    \ x then\n        return true\n    else\n        return false\n    end\nend",
  "  if type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\"\
    \ then\n    if x + y == z then\n      return true\n    end\n  else\n    return\
    \ false\n  end\nend", "    local sum = x+y+z\n    local t = type(sum)\n    if\
    \ t == \"number\" then\n        if (sum < 0 or sum > 10) and (sum > math.floor\
    \ (sum)) and (sum < math.ceil (sum)) then\n            return false\n        else\n\
    \            return true\n        end\n    elseif t == \"table\" then\n      \
    \  for _, v in pairs(sum) do\n            if not any_int(x, y, v) then\n     \
    \           return false\n            end\n        end\n        return true\n\
    \    elseif t == \"userdata\" then\n        return true\n    else\n        return\
    \ false\n    end\nend", "  if x ~= nil and y ~= nil and z ~= nil then\n    if\
    \ x ~= y and x ~= z and y ~= z then\n      return true\n    end\n  else\n    return\
    \ false\n  end\nend", "   local s = x + y + z\n   return s == z or s == y or s\
    \ == x\nend", "    return x >= y and type(y) == type(z) and x == math.floor(x)\
    \ and y == math.floor(y) and z == math.floor(z)\nend\n</cell>\n<cell>", "    if\
    \ type(y) == \"number\" then\n        if type(z) == \"number\" then\n        \
    \    return y == x + z\n        else\n            return false\n        end\n\
    \    else\n        if type(z) == \"number\" then\n            return false\n \
    \       else\n            return y == x\n        end\n    end\nend", "   if x\
    \ == y then\n      return true\n   elseif x == z then\n      return true\n   elseif\
    \ y == z then\n      return true\n   else\n      return false\n   end\nend", " \
    \  if type(y) == \"number\" then\n      if type(z) == \"number\" then\n      \
    \   return x == y + z\n      else\n         return y == z\n      end\n   else\n\
    \      if type(x) == \"number\" then\n         return x == y\n      else\n   \
    \      return y == x\n      end\n   end\nend", "  return type(x) == type(y) and\
    \ type(x) == type(z) and type(x) == int or type(x) == float or type(x) == double\
    \ and type(x) == int and type(x) == float and type(x) == float or type(x) == double\
    \ and type(x) == double and type(x) == double\nend", "  return math.floor(x +\
    \ y + z) == math.floor(x + y + z)\nend", "\t-- If any of them is nil, the function\
    \ returns false\n\tif x ~= nil and y ~= nil and z ~= nil then\n\t\tif type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n\t\t\
    \treturn (x+y+z) == x\n\t\telse\n\t\t\treturn false\n\t\tend\n\telse\n\t\treturn\
    \ false\n\tend\nend", "  return x ~= nil and y ~= nil and z ~= nil and x and y\
    \ and z and type(y) ~= 'number' and type(z) ~= 'number' and math.floor(x) + math.floor(y)\
    \ + math.floor(z) == math.floor(x + y + z)\nend", "  if type(x) == 'number' and\
    \ type(y) == 'number' and type(z) == 'number' then\n    return (x >= y and x >=\
    \ z and y >= z and x % z == 0 and y % z == 0 and z % z == 0)\n  end\n  return\
    \ false\nend", "    if x == y then\n        if x == z then\n            -- We\
    \ know that x and z are both integers, so the result is true.\n            return\
    \ true\n        else\n            -- We know that z is integer but not x. So,\
    \ result is false.\n            return false\n        end\n    elseif y == z then\n\
    \        -- We know that y and z are both integers, so the result is true.\n \
    \       return true\n    elseif y == z and x == z then\n        -- In this case\
    \ we know that z and z are both integers, so the result is true.\n        return\
    \ true\n    else\n        -- We know that none of the numbers are integers. So,\
    \ result is false.\n        return false\n    end\nend", "    if type(x) == \"\
    number\" then\n        if type(y) == \"number\" then\n            if type(z) ==\
    \ \"number\" then\n                return x >= y and x >= z and y >= z\n     \
    \       else\n                return true\n            end\n        else\n   \
    \         return true\n        end\n    else\n        return true\n    end\nend\n\
    </cell>\n<cell>", "  if type(y) == \"number\" and type(z) == \"number\" then\n\
    \    return x == y + z or x == z + y\n  elseif type(y) == \"number\" then\n  \
    \  return x == y or z == y\n  elseif type(z) == \"number\" then\n    return x\
    \ == z or y == z\n  end\n  return false\nend", "  local nx = tonumber(x); ny =\
    \ tonumber(y); nz = tonumber(z)\n  -- Return false if one of the numbers is nil\
    \ or the other is nil\n  if nx == nil or ny == nil or nz == nil then return false\
    \ end\n  -- Return true if any of the numbers are equal to the sum of the other\
    \ two\n  if nx == ny and nx == nz then return true end\n  -- Return false if any\
    \ of the numbers are different in value but the same in representation\n  if nx\
    \ == ny and nx ~= nz then return false end\n  -- Return false if any of the numbers\
    \ are different in value or representation\n  if nx ~= ny and nx ~= nz then return\
    \ false end\n  -- Return false if all values are equal\n  if nx == ny then return\
    \ true end\n  -- Return false if all values are different\n  return false\nend",
  "  local n = x + y + z\n  return math.floor(n / 3) == n and n % 3 == 2 or math.floor(n\
    \ / 3) == n and n % 3 == 0\nend", "  -- Check for negatives\n  if x < 0 then\n\
    \    if y < 0 then\n      if z < 0 then\n        return false\n      else\n  \
    \      return true\n      end\n    else\n      return true\n    end\n  else\n\
    \    if y < 0 then\n      if z < 0 then\n        return true\n      else\n   \
    \     return false\n      end\n    else\n      if z < 0 then\n        return true\n\
    \      else\n        return false\n      end\n    end\n  end\nend", "  if x ==\
    \ y and type(y) == 'number' and type(z) == 'number' then\n    local xs = x:byte()\n\
    \    local ys = y:byte()\n    local zs = z:byte()", "    if x == y or x == z or\
    \ y == z then\n        return true\n    end\n    return false\nend\n</cell>\n\
    <cell>", "    -- Handle the fact that x, y and z may be any type\n    if type(x)\
    \ ~= 'number' or type(y) ~= 'number' or type(z) ~= 'number' then\n        return\
    \ false\n    end", "  return not (type(x) == 'number' or type(y) == 'number' or\
    \ type(z) == 'number')\n  and x ~= nil and y ~= nil and z ~= nil\n  and x ~= y\
    \ and x ~= z\n  and y ~= z\n  and tonumber(x) or tonumber(y) or tonumber(z)\n\
    end", "    if x ~= nil then\n        if y ~= nil then\n            if z ~= nil\
    \ then\n                if x == y + z then\n                    return true\n\
    \                else\n                    return false\n                end\n\
    \            else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    else\n        return false\n    end\n\
    end", "  if x < y then return true end\n  if x < z or y < z then return false\
    \ end\n  if x > z then return false end\n  return true\nend\n</cell>\n<code language=julia-1.5>\n\
    # TEST any_int\nx = [5, 2, 7]\ny = [3, 2, 2]\nz = [3, -2, 1]\nany_int(x,y,z) \u2261\
    \ true\n</cell>\n<code language=julia-1.5>\n# TEST any_int (again)\nx = [5, 2,\
    \ 7]\ny = [3, 2, 2]\nz = [3.6, -2.2, 2]\nany_int(x,y,z) \u2261 false\n</cell>\n\
    <code language=julia-1.5>\n# TEST is_integer\nany_int([3.5, 3.1, 3.5]) \u2261\
    \ true\nany_int([3.1, 3.1, 3.5]) \u2261 false\nany_int([3.1, 3.1, 3.5]) \u2261\
    \ false\nany_int([3.1, 3.1, 3.5]) \u2261 false\nany_int([3.1, 3.1, 3.5]) \u2261\
    \ false\nany_int([3.1, 3.1, 3.5]) \u2261 false\nany_int([3.1, 3.1, 3.5]) \u2261\
    \ false\n</cell>\n<code language=julia-1.5>\n# TEST is_integer (again)\nany_int([3.5,\
    \ 3.1, 3.5]) \u2261 false\n</cell>\n<code language=julia-1.5>\n# TEST is_integer_list\n\
    any_int([3.5, 3.1, 3.5]) \u2261 true\nany_int([3.1, 3.1, 3.5]) \u2261 false\n\
    any_int([3.1, 3.1, 3.5]) \u2261 false\nany_int([3.1, 3.1, 3.5]) \u2261 false\n\
    any_int([3.1, 3.1, 3.5]) \u2261 false\nany_int([3.1, 3.1, 3.5]) \u2261 false\n\
    any_int([3.1, 3.1, 3.5]) \u2261 false\nany_int([3.1, 3.1, 3.5]) \u2261 false\n\
    </cell>\n<code language=julia-1.5>\n# TEST is_integer_list (again)\nany_int([3.5,\
    \ 3.1, 3.5]) \u2261 false\n</cell>\n<text>\nis_even()\nis_even() tests if a number\
    \ is even.", "    return x ~= nil and y ~= nil and z ~= nil and x >= 0 and y >=\
    \ 0 and z >= 0\nend", "  if x == y then\n    return true\n  elseif y == z then\n\
    \    return true\n  elseif math.floor(x) == math.floor(y) or math.floor(y) ==\
    \ math.floor(z) then\n    return true\n  else\n    return false\n  end\nend",
  "  if x ~= nil and y ~= nil and z ~= nil then\n    return ((x == y or x == z) and\
    \ type(x) == \"number\") or (type(y) == \"number\" and type(z) == \"number\")\n\
    \  else\n    return false\n  end\nend", "  local sum = x + y + z\n  return (type(sum)\
    \ == 'number') and (type(sum) == 'integer') and (sum == sum or sum == sum)\nend",
  "  return x and type(y) ~= 'boolean' and type(z) ~= 'boolean' and\n  x == y and\
    \ type(x + y) == 'integer' and type(x + z) == 'integer'\nend", "  local sum\n\
    \  local xint, yint, zint\n  xint, yint, zint = x == nil, y == nil, z == nil or\
    \ x == y or x == z and x or y == z and y or z\n  if xint then\n    sum = x + y\
    \ + z\n    return sum == math.floor(xsum) and sum or false\n  elseif x == \"string\"\
    \ or x == \"table\" then\n    sum = x:len() + y:len() + z:len()\n    return sum\
    \ == math.floor(xsum) and sum or false\n  elseif x == \"number\" then\n    sum\
    \ = xint and x + y + z or x + y + z\n    return sum == math.floor(sum) and sum\
    \ or false\n  else\n    return false\n  end\nend", "   if not is_integer(x) or\
    \ not is_integer(y) or not is_integer(z) then\n      return false\n   end\n  \
    \ return x ~= x + y and x ~= y + z and x ~= z + x\nend", "  if x == y then return\
    \ true end\n  if x == z then return true end\n  if y == z then return false end\n\
    \  return false\nend", "  return z + x == y or (z + x == -y and z * x ~= -y)\n\
    end", "    if type(y) == 'number' and type(z) == 'number' then\n        return\
    \ ((x + y) == z)\n    end\nend", "    -- The three numbers need to be integers\n\
    \    assert(type(y) == 'number')\n    assert(type(z) == 'number')\n    assert(type(x)\
    \ == 'number')", "    local x = tonumber(x)\n    local y = tonumber(y)\n    local\
    \ z = tonumber(z)", "    local function is_all_ints(...)\n        for _, v in\
    \ pairs({...}) do\n            if not torch.isInt(v) then return false end\n \
    \       end\n        return true\n    end", "    local sum = x+y+z\n    return\
    \ sum >= 0 and ((sum == x) or (sum == y) or (sum == z))\nend", "    local x_int,\
    \ y_int, z_int = x:int(), y:int(), z:int()\n    if x_int == y_int and x_int ==\
    \ z_int then\n        return true\n    end\n    return false\nend", "\tif type(x)\
    \ == 'number' and type(y) == 'number' and type(z) == 'number' then\n\t\treturn\
    \ ((x==y) or ((x==z) and (y==z)))\n\telse\n\t\treturn false\n\tend\nend", "  --\
    \ Make sure x and y are integers\n  x = tonumber(x)\n  y = tonumber(y)\n  if type(x)\
    \ == 'number' and type(y) == 'number' and x + y ~= z then\n    -- Return true\
    \ if x and y are equal to the sum of z\n    return z == x + y\n  end\n  return\
    \ false\nend", "    if x == y or x == z or y == z then\n        return true\n\
    \    end\n    return false\nend", "    if x==y and x==z then return true end\n\
    \    if x==y and z==z then return true end\n    if y==z and y==z then return true\
    \ end\n    return false\nend", "  if type(x) == 'number' and type(y) == 'number'\
    \ and type(z) == 'number' then\n    return (x or y) and (x or z) and (y or z)\n\
    \  elseif type(x) == 'number' and type(x) == 'number' and type(x) == 'number'\
    \ then\n    return false\n  elseif type(x) == 'number' then\n    return false\n\
    \  elseif type(y) == 'number' then\n    return false\n  elseif type(z) == 'number'\
    \ then\n    return false\n  else\n    return true\n  end\nend", "   if x == y\
    \ or x == z or y == z then return true end\n   return false\nend", "  if type(x)\
    \ == 'number' and type(y) == 'number' and type(z) == 'number' then\n    return\
    \ x == y + z\n  end\nend", "    local a, b, c = x, y, z\n    return a == b and\
    \ a == c or a == b and b == c or b == c and c == a or c == a\nend", "  x = math.floor(x)\n\
    \  y = math.floor(y)\n  z = math.floor(z)\n  if x==y and x==z then\n    return\
    \ true\n  elseif x==z and y==z then\n    return true\n  elseif y==z then\n   \
    \ return false\n  else\n    return false\n  end\nend", "   local x_int = x\n \
    \  local y_int = y\n   local z_int = z\n   if type(x_int) ~= 'number' then\n \
    \     x_int = 1\n   end\n   if type(y_int) ~= 'number' then\n      y_int = 1\n\
    \   end\n   if type(z_int) ~= 'number' then\n      z_int = 1\n   end\n   if x_int\
    \ == y_int and x_int == z_int then\n      return true\n   end\n   return false\n\
    end", "  return (type(y) == 'number' and type(z) == 'number') and\n         math.floor(x)\
    \ == x and\n         math.floor(y) == y and\n         math.floor(z) == z\nend",
  "   if type(x) ~= 'number' or type(y) ~= 'number' or type(z) ~= 'number' then return\
    \ false end\n   return ((x > y and x > z) or (x > y and y > z) or (x == y and\
    \ x > z) or (x == y and y > z) or (x == z and x > y) or (x == z and y > z) or\
    \ (y == z and x > x) or (y == z and y > x))\nend", "\tif x > 0 and y > 0 and z\
    \ > 0 and x <= y and x <= z and y <= z then return true else return false end\n\
    end", "   if x ~= nil then\n      if y ~= nil then\n         if z ~= nil then\n\
    \            return x == y + z\n         else\n            return false\n    \
    \     end\n      else\n         return true\n      end\n   else\n      if y ~=\
    \ nil then\n         return true\n      else\n         return false\n      end\n\
    \   end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
