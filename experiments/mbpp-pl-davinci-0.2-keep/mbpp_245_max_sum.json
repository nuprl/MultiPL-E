{
  "name": "mbpp_245_max_sum",
  "language": "pl",
  "prompt": "# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nsub max_sum {\n    my($arr) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum;\n        if(eq_deeply($candidate->([1, 15, 51, 45, 33, 100, 12, 18, 9]),194)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([80, 60, 30, 40, 20, 10]),210)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 14, 16, 21, 23, 29, 30]),138)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $n = scalar @$arr;\n    my @inc = (0) x $n;\n    my @dec = (0) x $n;",
    "    my $n = scalar @$arr;\n    my @inc = (0) x $n;\n    my @dec = (0) x $n;\n    $inc[0] = $arr->[0];\n    $dec[$n-1] = $arr->[$n-1];\n    for my $i (1..$n-1) {\n        $inc[$i] = max($arr->[$i], $inc[$i-1] + $arr->[$i]);\n    }\n    for my $i ($n-2..0) {\n        $dec[$i] = max($arr->[$i], $dec[$i+1] + $arr->[$i]);\n    }\n    my $max = $inc[0] + $dec[0] - $arr->[0];\n    for my $i (1..$n-1) {\n        $max = max($max, $inc[$i] + $dec[$i] - $arr->[$i]);\n    }\n    return $max;\n}",
    "    my $n = scalar(@$arr);\n    my $inc = [@$arr];\n    my $dec = [@$arr];\n    for my $i (1..$n-1) {\n        for my $j (0..$i-1) {\n            if ($arr->[$i] > $arr->[$j] && $inc->[$i] < $inc->[$j] + $arr->[$i]) {\n                $inc->[$i] = $inc->[$j] + $arr->[$i];\n            }\n        }\n    }\n    for my $i (reverse(0..$n-2)) {\n        for my $j (reverse($i+1..$n-1)) {\n            if ($arr->[$i] > $arr->[$j] && $dec->[$i] < $dec->[$j] + $arr->[$i]) {\n                $dec->[$i] = $dec->[$j] + $arr->[$i];\n            }\n        }\n    }\n    my $max = 0;\n    for my $i (0..$n-1) {\n        $max = max($max, $inc->[$i] + $dec->[$i] - $arr->[$i]);\n    }\n    return $max;\n}",
    "    my $n = scalar(@$arr);\n    my @inc = (0) x $n;\n    my @dec = (0) x $n;\n    $inc[0] = $dec[$n-1] = $arr->[0];\n    for (my $i = 1; $i < $n; $i++) {\n        $inc[$i] = max($inc[$i-1] + $arr->[$i], $arr->[$i]);\n    }\n    for (my $i = $n-2; $i >= 0; $i--) {\n        $dec[$i] = max($dec[$i+1] + $arr->[$i], $arr->[$i]);\n    }\n    my $max_sum = $arr->[0];\n    for (my $i = 0; $i < $n; $i++) {\n        $max_sum = max($max_sum, $inc[$i] + $dec[$i] - $arr->[$i]);\n    }\n    return $max_sum;\n}",
    "    my $max = 0;\n    my $sum = 0;\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar(@$arr);\n    while ($i < $n) {\n        $sum = 0;\n        $j = $i;\n        while ($j < $n) {\n            $sum += $arr->[$j];\n            $j++;\n        }\n        $i++;\n        $max = $sum if $sum > $max;\n    }\n    return $max;\n}",
    "    my $n = scalar @$arr;\n    my @inc = (0) x $n;\n    my @dec = (0) x $n;",
    "    my $n = scalar(@$arr);\n    my @inc = (0) x $n;\n    my @dec = (0) x $n;\n    $inc[0] = $arr->[0];\n    $dec[$n-1] = $arr->[$n-1];\n    for(my $i = 1; $i < $n; $i++) {\n        $inc[$i] = $arr->[$i];\n        for(my $j = 0; $j < $i; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inc[$i] = max($inc[$i], $inc[$j] + $arr->[$i]);\n            }\n        }\n    }\n    for(my $i = $n-2; $i >= 0; $i--) {\n        $dec[$i] = $arr->[$i];\n        for(my $j = $n-1; $j > $i; $j--) {\n            if($arr->[$i] > $arr->[$j]) {\n                $dec[$i] = max($dec[$i], $dec[$j] + $arr->[$i]);\n            }\n        }\n    }\n    my $max = 0;\n    for(my $i = 0; $i < $n; $i++) {\n        $max = max($max, $inc[$i] + $dec[$i] - $arr->[$i]);\n    }\n    return $max;\n}",
    "    my $n = scalar @$arr;\n    my @inc = (0) x $n;\n    my @dec = (0) x $n;\n    $inc[0] = $dec[$n-1] = $arr->[0];\n    for my $i (1..$n-1) {\n        $inc[$i] = $arr->[$i] + max($inc[$i-1], 0);\n        $dec[$n-$i-1] = $arr->[$n-$i-1] + max($dec[$n-$i], 0);\n    }\n    my $max = 0;\n    for my $i (0..$n-1) {\n        $max = max($max, $inc[$i] + $dec[$i] - $arr->[$i]);\n    }\n    return $max;\n}",
    "    my $n = scalar @$arr;\n    my @inc = (0) x $n;\n    my @dec = (0) x $n;",
    "    my $n = scalar(@$arr);\n    my @max_sum_inc = (0) x $n;\n    my @max_sum_dec = (0) x $n;\n    $max_sum_inc[0] = $arr->[0];\n    $max_sum_dec[$n-1] = $arr->[$n-1];\n    for (my $i = 1; $i < $n; $i++) {\n        $max_sum_inc[$i] = max($arr->[$i], $max_sum_inc[$i-1] + $arr->[$i]);\n    }\n    for (my $i = $n-2; $i >= 0; $i--) {\n        $max_sum_dec[$i] = max($arr->[$i], $max_sum_dec[$i+1] + $arr->[$i]);\n    }\n    my $max_sum = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        $max_sum = max($max_sum, $max_sum_inc[$i] + $max_sum_dec[$i] - $arr->[$i]);\n    }\n    return $max_sum;\n}",
    "    my $n = scalar(@$arr);\n    my $inc = [0];\n    my $dec = [0];\n    my $max = 0;\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 0; $j < $i; $j++) {\n            if ($arr->[$j] < $arr->[$i]) {\n                $inc->[$i] = max($inc->[$i], $inc->[$j] + $arr->[$i]);\n            }\n        }\n    }\n    for (my $i = $n - 2; $i >= 0; $i--) {\n        for (my $j = $n - 1; $j > $i; $j--) {\n            if ($arr->[$j] < $arr->[$i]) {\n                $dec->[$i] = max($dec->[$i], $dec->[$j] + $arr->[$i]);\n            }\n        }\n    }\n    for (my $i = 0; $i < $n; $i++) {\n        $max = max($max, $inc->[$i] + $dec->[$i] - $arr->[$i]);\n    }\n    return $max;\n}",
    "    my $n = scalar @$arr;\n    my @inc = (0) x $n;\n    my @dec = (0) x $n;\n    $inc[0] = $dec[$n-1] = $arr->[0];\n    for my $i (1 .. $n-1) {\n        $inc[$i] = max($arr->[$i], $inc[$i-1] + $arr->[$i]);\n        $dec[$n-$i-1] = max($arr->[$n-$i-1], $dec[$n-$i] + $arr->[$n-$i-1]);\n    }\n    my $max = $inc[0] + $dec[0] - $arr->[0];\n    for my $i (1 .. $n-1) {\n        $max = max($max, $inc[$i] + $dec[$i] - $arr->[$i]);\n    }\n    return $max;\n}",
    "    my $n = scalar @$arr;\n    my @inc = (0) x $n;\n    my @dec = (0) x $n;\n    $inc[0] = $dec[$n-1] = $arr->[0];\n    for my $i (1..$n-1) {\n        $inc[$i] = max($arr->[$i], $inc[$i-1] + $arr->[$i]);\n        $dec[$n-$i-1] = max($arr->[$n-$i-1], $dec[$n-$i] + $arr->[$n-$i-1]);\n    }\n    my $max = $inc[0] + $dec[0] - $arr->[0];\n    for my $i (1..$n-1) {\n        $max = max($max, $inc[$i] + $dec[$i] - $arr->[$i]);\n    }\n    return $max;\n}",
    "    my $n = scalar(@$arr);\n    my @inc = (0) x $n;\n    my @dec = (0) x $n;\n    $inc[0] = $arr->[0];\n    $dec[$n-1] = $arr->[$n-1];\n    for (my $i = 1; $i < $n; $i++) {\n        $inc[$i] = max($inc[$i-1], $arr->[$i]);\n    }\n    for (my $i = $n-2; $i >= 0; $i--) {\n        $dec[$i] = max($dec[$i+1], $arr->[$i]);\n    }\n    my $max = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        $max = max($max, $inc[$i] + $dec[$i] - $arr->[$i]);\n    }\n    return $max;\n}",
    "    my $n = scalar @$arr;\n    my @inc = (0) x $n;\n    my @dec = (0) x $n;\n    $inc[0] = $dec[$n-1] = $arr->[0];\n    for my $i (1..$n-1) {\n        $inc[$i] = max($inc[$i-1] + $arr->[$i], $arr->[$i]);\n        $dec[$n-$i-1] = max($dec[$n-$i] + $arr->[$n-$i-1], $arr->[$n-$i-1]);\n    }\n    my $max = $inc[0] + $dec[0] - $arr->[0];\n    for my $i (1..$n-1) {\n        $max = max($max, $inc[$i] + $dec[$i] - $arr->[$i]);\n    }\n    return $max;\n}",
    "    my $n = scalar(@$arr);\n    my @inc = (0) x $n;\n    my @dec = (0) x $n;\n    $inc[0] = $arr->[0];\n    $dec[$n-1] = $arr->[$n-1];\n    for (my $i = 1; $i < $n; $i++) {\n        $inc[$i] = $arr->[$i];\n        for (my $j = 0; $j < $i; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inc[$i] = max($inc[$i], $inc[$j] + $arr->[$i]);\n            }\n        }\n    }\n    for (my $i = $n-2; $i >= 0; $i--) {\n        $dec[$i] = $arr->[$i];\n        for (my $j = $n-1; $j > $i; $j--) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $dec[$i] = max($dec[$i], $dec[$j] + $arr->[$i]);\n            }\n        }\n    }\n    my $max = $inc[0] + $dec[0] - $arr->[0];\n    for (my $i = 1; $i < $n; $i++) {\n        $max = max($max, $inc[$i] + $dec[$i] - $arr->[$i]);\n    }\n    return $max;\n}",
    "    my $max_sum = 0;\n    my $n = scalar(@$arr);\n    for (my $i = 0; $i < $n; $i++) {\n        my $sum = 0;\n        for (my $j = $i; $j < $n; $j++) {\n            $sum += $arr->[$j];\n            $max_sum = $sum if $sum > $max_sum;\n        }\n    }\n    return $max_sum;\n}",
    "    my $len = scalar @$arr;\n    my $inc = [0];\n    my $dec = [0];\n    my $max = 0;\n    for my $i (0..$len-1) {\n        $inc->[$i] = $arr->[$i];\n        $dec->[$i] = $arr->[$i];\n        for my $j (0..$i-1) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inc->[$i] = max($inc->[$i], $inc->[$j] + $arr->[$i]);\n            }\n            if ($arr->[$i] < $arr->[$j]) {\n                $dec->[$i] = max($dec->[$i], $dec->[$j] + $arr->[$i]);\n            }\n        }\n        $max = max($max, $inc->[$i] + $dec->[$i] - $arr->[$i]);\n    }\n    return $max;\n}",
    "    my $n = scalar @$arr;\n    my @inc = (0) x $n;\n    my @dec = (0) x $n;\n    $inc[0] = $dec[$n-1] = $arr->[0];\n    for my $i (1..$n-1) {\n        $inc[$i] = $arr->[$i] + max($inc[$i-1], 0);\n        $dec[$n-$i-1] = $arr->[$n-$i-1] + max($dec[$n-$i], 0);\n    }\n    my $max = $inc[0] + $dec[0] - $arr->[0];\n    for my $i (1..$n-1) {\n        $max = max($max, $inc[$i] + $dec[$i] - $arr->[$i]);\n    }\n    return $max;\n}",
    "    my $n = scalar @$arr;\n    my @inc = (0) x $n;\n    my @dec = (0) x $n;\n    $inc[0] = $arr->[0];\n    $dec[$n-1] = $arr->[$n-1];\n    for my $i (1..$n-1) {\n        $inc[$i] = max($inc[$i-1], $arr->[$i]);\n        $dec[$n-$i-1] = max($dec[$n-$i], $arr->[$n-$i-1]);\n    }\n    my $max = 0;\n    for my $i (0..$n-1) {\n        $max = max($max, $inc[$i] + $dec[$i]);\n    }\n    return $max;\n}"
  ]
}