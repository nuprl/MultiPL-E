{
  "name": "mbpp_99_decimal_to_binary",
  "language": "pl",
  "prompt": "# Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nsub decimal_to_binary {\n    my($n) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&decimal_to_binary;\n        if(eq_deeply($candidate->(8),\"1000\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(18),\"10010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),\"111\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $b = '';\n    while ($n > 0) {\n        $b = ($n % 2) . $b;\n        $n = int($n / 2);\n    }\n    return $b;\n}",
    "    my $b = '';\n    while ($n) {\n        $b = ($n & 1) . $b;\n        $n >>= 1;\n    }\n    return $b;\n}",
    "    my $b = '';\n    while ($n > 0) {\n        $b = ($n % 2) . $b;\n        $n = int($n / 2);\n    }\n    return $b;\n}",
    "    my $b = '';\n    while ($n > 0) {\n        $b = ($n % 2) . $b;\n        $n = int($n / 2);\n    }\n    return $b;\n}",
    "    my $b = '';\n    while ($n) {\n        $b = ($n % 2) . $b;\n        $n = int($n / 2);\n    }\n    return $b;\n}",
    "    my $b = '';\n    while ($n > 0) {\n        $b = ($n % 2) . $b;\n        $n = int($n / 2);\n    }\n    return $b;\n}",
    "    my $b = '';\n    while ($n) {\n        $b = ($n % 2) . $b;\n        $n = int($n / 2);\n    }\n    return $b;\n}",
    "    my $b = '';\n    while ($n > 0) {\n        $b = ($n % 2) . $b;\n        $n = int($n / 2);\n    }\n    return $b;\n}",
    "    my $binary = '';\n    while ($n > 0) {\n        $binary = ($n % 2) . $binary;\n        $n = int($n / 2);\n    }\n    return $binary;\n}",
    "    my $b = '';\n    while ($n > 0) {\n        $b = ($n % 2) . $b;\n        $n = int($n / 2);\n    }\n    return $b;\n}",
    "    my $b = '';\n    while ($n) {\n        $b = ($n % 2) . $b;\n        $n = int($n / 2);\n    }\n    return $b;\n}",
    "    my $b = '';\n    while ($n > 0) {\n        $b = ($n % 2) . $b;\n        $n = int($n / 2);\n    }\n    return $b;\n}",
    "    my $b = '';\n    while ($n) {\n        $b = ($n % 2) . $b;\n        $n = int($n / 2);\n    }\n    return $b;\n}",
    "    my $b = '';\n    while ($n > 0) {\n        $b = ($n % 2) . $b;\n        $n = int($n / 2);\n    }\n    return $b;\n}",
    "    my $b = '';\n    while ($n > 0) {\n        $b = ($n % 2) . $b;\n        $n = int($n / 2);\n    }\n    return $b;\n}",
    "    my $b = '';\n    while ($n > 0) {\n        $b = ($n % 2) . $b;\n        $n = int($n / 2);\n    }\n    return $b;\n}",
    "    my $b = '';\n    while ($n > 0) {\n        $b = ($n % 2) . $b;\n        $n = int($n / 2);\n    }\n    return $b;\n}",
    "    my $s = '';\n    while ($n) {\n        $s = ($n % 2) . $s;\n        $n = int($n / 2);\n    }\n    return $s;\n}",
    "    my $b = '';\n    while ($n > 0) {\n        $b = ($n % 2) . $b;\n        $n = int($n / 2);\n    }\n    return $b;\n}",
    "    my $b = '';\n    while ($n > 0) {\n        $b = ($n % 2) . $b;\n        $n = int($n / 2);\n    }\n    return $b;\n}"
  ]
}