{
  "name": "mbpp_400_extract_freq",
  "language": "pl",
  "prompt": "# Write a function to extract the number of unique tuples in the given list.\nsub extract_freq {\n    my($test_list) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&extract_freq;\n        if(eq_deeply($candidate->([[3, 4], [1, 2], [4, 3], [5, 6]]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[4, 15], [2, 3], [5, 4], [6, 7]]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 16], [2, 3], [6, 5], [6, 9]]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my %freq = ();\n    foreach my $item (@$test_list) {\n        $freq{$item}++;\n    }\n    return \\%freq;\n}",
    "    my %freq_hash = ();\n    foreach my $test_tuple (@$test_list) {\n        my $test_tuple_str = join(\" \", @$test_tuple);\n        $freq_hash{$test_tuple_str}++;\n    }\n    return \\%freq_hash;\n}",
    "    my %count;\n    foreach my $tuple (@$test_list) {\n        my $key = join(\"_\", @$tuple);\n        $count{$key}++;\n    }\n    return \\%count;\n}",
    "    my @freq_list;\n    my %freq_hash;",
    "    my %seen;\n    my @unique = grep { !$seen{$_}++ } @$test_list;\n    return scalar(@unique);\n}",
    "    my %freq;\n    foreach my $tuple (@$test_list) {\n        my $key = join(\" \", @$tuple);\n        $freq{$key}++;\n    }\n    return \\%freq;\n}",
    "    my %freq = ();\n    foreach my $tuple (@$test_list) {\n        my $key = join(' ', @$tuple);\n        $freq{$key} = 1;\n    }\n    return scalar(keys %freq);\n}",
    "    my %freq = ();\n    foreach my $tuple (@$test_list) {\n        my $key = join(\"-\", @$tuple);\n        $freq{$key}++;\n    }\n    return \\%freq;\n}",
    "    my $freq = {};\n    foreach my $tuple (@$test_list) {\n        $freq->{$tuple}++;\n    }\n    return $freq;\n}",
    "    my %freq;\n    foreach my $tuple (@$test_list) {\n        $freq{$tuple}++;\n    }\n    return \\%freq;\n}",
    "    my %freq;\n    foreach my $tuple (@$test_list) {\n        my $key = join(',', @$tuple);\n        $freq{$key}++;\n    }\n    return \\%freq;\n}",
    "    my %freq = ();\n    foreach my $tuple (@$test_list) {\n        my $key = join(\",\", @$tuple);\n        $freq{$key}++;\n    }\n    return \\%freq;\n}",
    "    my @test_list = @{$test_list};\n    my %freq;\n    foreach my $tuple (@test_list) {\n        $freq{$tuple}++;\n    }\n    return \\%freq;\n}",
    "    my %freq;\n    foreach my $tuple (@$test_list) {\n        $freq{$tuple}++;\n    }\n    return \\%freq;\n}",
    "    my %freq_hash = ();\n    foreach my $tuple (@$test_list) {\n        my $tuple_str = join(',', @$tuple);\n        $freq_hash{$tuple_str}++;\n    }\n    return \\%freq_hash;\n}",
    "    my %freq_hash;\n    foreach my $test_tuple (@$test_list) {\n        $freq_hash{$test_tuple}++;\n    }\n    return \\%freq_hash;\n}",
    "    my %freq;\n    foreach my $tuple (@$test_list) {\n        my $key = join(',', @$tuple);\n        $freq{$key}++;\n    }\n    return \\%freq;\n}",
    "    my @unique_list = uniq @$test_list;\n    my @freq_list = ();\n    foreach my $unique_tuple (@unique_list) {\n        my $freq = 0;\n        foreach my $test_tuple (@$test_list) {\n            if ($unique_tuple eq $test_tuple) {\n                $freq++;\n            }\n        }\n        push @freq_list, $freq;\n    }\n    return \\@freq_list;\n}",
    "    my %hash = map {$_ => 1} @$test_list;\n    my @unique_tuples = keys %hash;\n    return scalar @unique_tuples;\n}",
    "    my %freq;\n    foreach my $tuple (@$test_list) {\n        my $key = join(\",\", sort @$tuple);\n        $freq{$key}++;\n    }\n    return \\%freq;\n}"
  ]
}