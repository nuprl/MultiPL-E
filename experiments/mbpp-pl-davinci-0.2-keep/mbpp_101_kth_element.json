{
  "name": "mbpp_101_kth_element",
  "language": "pl",
  "prompt": "# Write a function to find the kth element in the given array using 1-based indexing.\nsub kth_element {\n    my($arr, $k) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&kth_element;\n        if(eq_deeply($candidate->([12, 3, 5, 7, 19], 2),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([17, 24, 8, 23], 3),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([16, 21, 25, 36, 4], 4),36)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    my $n = scalar @$arr;\n    return undef if $k < 1 || $k > $n;\n    return $arr->[$k - 1];\n}",
    "    my $n = @$arr;\n    return $arr->[$k - 1] if $k <= $n;\n    return -1;\n}",
    "    return $arr->[$k - 1];\n}",
    "    my $n = scalar(@$arr);\n    return $arr->[$k - 1] if $k == 1;\n    return $arr->[$n - $k] if $k == $n;\n    my $pivot = $arr->[0];\n    my $left = [grep {$_ < $pivot} @$arr];\n    my $right = [grep {$_ > $pivot} @$arr];\n    my $left_size = scalar(@$left);\n    return kth_element($left, $k) if $k <= $left_size;\n    return kth_element($right, $k - $left_size - 1) if $k > $left_size + 1;\n    return $pivot;\n}",
    "    my $n = scalar @$arr;\n    return $arr->[$k-1] if $n == 1;\n    my $pivot = $arr->[$n-1];\n    my @left = grep { $_ < $pivot } @$arr;\n    my @right = grep { $_ > $pivot } @$arr;\n    my $left_size = scalar @left;\n    return $pivot if $left_size == $k-1;\n    return kth_element(\\@left, $k) if $left_size > $k-1;\n    return kth_element(\\@right, $k-$left_size-1);\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    my $n = scalar @$arr;\n    return undef if $k < 1 || $k > $n;",
    "    return $arr->[$k-1];\n}",
    "    my $n = scalar(@$arr);\n    return undef if $k < 1 || $k > $n;\n    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    my $n = scalar(@$arr);\n    my $kth = partition($arr, 0, $n - 1);\n    while ($kth != $k - 1) {\n        if ($kth > $k - 1) {\n            $kth = partition($arr, 0, $kth - 1);\n        } else {\n            $kth = partition($arr, $kth + 1, $n - 1);\n        }\n    }\n    return $arr->[$kth];\n}",
    "    my $n = @$arr;\n    return $arr->[$k - 1] if $k == 1 || $k == $n;\n    my $pivot = $arr->[$n - 1];\n    my $i = 0;\n    for (my $j = 0; $j < $n - 1; $j++) {\n        if ($arr->[$j] <= $pivot) {\n            ($arr->[$i], $arr->[$j]) = ($arr->[$j], $arr->[$i]);\n            $i++;\n        }\n    }\n    ($arr->[$i], $arr->[$n - 1]) = ($arr->[$n - 1], $arr->[$i]);\n    if ($k <= $i) {\n        return kth_element($arr, $k);\n    } else {\n        return kth_element([@$arr[$i + 1 .. $n - 1]], $k - $i - 1);\n    }\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k-1];\n}",
    "    my $n = scalar @$arr;\n    return undef if $k < 1 || $k > $n;\n    return $arr->[$k-1];\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    my $n = @$arr;\n    return undef if $k > $n;\n    return $arr->[$k - 1];\n}",
    "    return undef if $k < 1 || $k > @$arr;\n    return $arr->[$k-1];\n}",
    "    my $n = scalar(@$arr);\n    return $arr->[$k - 1] if $k == 1;\n    return $arr->[$n - $k] if $k == $n;\n    return undef if $k < 1 || $k > $n;\n    my $pivot = $arr->[0];\n    my $left = [grep {$_ < $pivot} @$arr];\n    my $right = [grep {$_ > $pivot} @$arr];\n    my $m = scalar(@$left);\n    if ($k <= $m) {\n        return kth_element($left, $k);\n    } elsif ($k == $m + 1) {\n        return $pivot;\n    } else {\n        return kth_element($right, $k - $m - 1);\n    }\n}",
    "    return $arr->[$k - 1];\n}",
    "\n    return undef if $k < 1 || $k > @$arr;",
    "    return undef if $k < 1 || $k > @$arr;\n    return $arr->[$k-1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return undef if $k < 1 || $k > @$arr;\n    return $arr->[$k-1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k-1];\n}",
    "    my $n = scalar(@$arr);\n    my $pivot = $arr->[0];\n    my $i = 1;\n    my $j = $n - 1;\n    while ($i <= $j) {\n        while ($i <= $j && $arr->[$i] <= $pivot) {\n            $i++;\n        }\n        while ($i <= $j && $arr->[$j] > $pivot) {\n            $j--;\n        }\n        if ($i < $j) {\n            ($arr->[$i], $arr->[$j]) = ($arr->[$j], $arr->[$i]);\n        }\n    }\n    ($arr->[0], $arr->[$j]) = ($arr->[$j], $arr->[0]);\n    if ($j == $k - 1) {\n        return $arr->[$j];\n    }\n    elsif ($j > $k - 1) {\n        return kth_element([@$arr[0..$j-1]], $k);\n    }\n    else {\n        return kth_element([@$arr[$j+1..$n-1]], $k - $j - 1);\n    }\n}",
    "    return $arr->[$k - 1];\n}",
    "    my $n = scalar @$arr;\n    return $arr->[$k-1];\n}",
    "    my $n = scalar @$arr;\n    return undef if $k > $n;\n    return $arr->[$k-1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    return undef if $k < 1 || $k > scalar @$arr;\n    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    my $n = scalar @$arr;\n    return undef if $k < 1 || $k > $n;\n    my $pivot = $arr->[0];\n    my $i = 1;\n    my $j = $n - 1;\n    while ($i <= $j) {\n        while ($i <= $j && $arr->[$i] <= $pivot) {\n            $i++;\n        }\n        while ($i <= $j && $arr->[$j] > $pivot) {\n            $j--;\n        }\n        if ($i < $j) {\n            ($arr->[$i], $arr->[$j]) = ($arr->[$j], $arr->[$i]);\n        }\n    }\n    ($arr->[0], $arr->[$j]) = ($arr->[$j], $arr->[0]);\n    if ($j == $k - 1) {\n        return $arr->[$j];\n    } elsif ($j > $k - 1) {\n        return kth_element([@$arr[0..$j-1]], $k);\n    } else {\n        return kth_element([@$arr[$j+1..$n-1]], $k - $j - 1);\n    }\n}",
    "    my $n = scalar @$arr;\n    return undef if $k < 1 || $k > $n;\n    return $arr->[$k - 1];\n}",
    "    return undef if $k < 1 || $k > @$arr;\n    return $arr->[$k-1];\n}",
    "    my $n = scalar(@$arr);\n    my $p = partition($arr, 0, $n - 1);\n    while ($p + 1 != $k) {\n        if ($p + 1 > $k) {\n            $p = partition($arr, 0, $p - 1);\n        } else {\n            $p = partition($arr, $p + 1, $n - 1);\n        }\n    }\n    return $arr->[$p];\n}",
    "    my $n = scalar(@$arr);\n    my $p = partition($arr, 0, $n - 1);\n    while ($p + 1 != $k) {\n        if ($p + 1 > $k) {\n            $p = partition($arr, 0, $p - 1);\n        } else {\n            $p = partition($arr, $p + 1, $n - 1);\n        }\n    }\n    return $arr->[$p];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    my $n = scalar(@$arr);\n    return undef if $k < 1 || $k > $n;\n    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    my $n = scalar(@$arr);\n    my $kth = _kth_element($arr, 0, $n-1, $k);\n    return $kth;\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    my $n = scalar @$arr;\n    return undef if $k < 1 || $k > $n;\n    my $pivot = $arr->[0];\n    my $left = 1;\n    my $right = $n - 1;\n    while ($left <= $right) {\n        while ($left <= $right && $arr->[$left] < $pivot) {\n            $left++;\n        }\n        while ($left <= $right && $arr->[$right] >= $pivot) {\n            $right--;\n        }\n        if ($left < $right) {\n            @$arr[$left, $right] = @$arr[$right, $left];\n        }\n    }\n    @$arr[0, $right] = @$arr[$right, 0];\n    if ($right == $k - 1) {\n        return $arr->[$right];\n    } elsif ($right > $k - 1) {\n        return kth_element([@$arr[0..$right-1]], $k);\n    } else {\n        return kth_element([@$arr[$right+1..$n-1]], $k - $right - 1);\n    }\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    my $n = scalar(@$arr);\n    if ($k < 1 || $k > $n) {\n        die \"k must be between 1 and $n\";\n    }\n    return _kth_element($arr, $k, 0, $n - 1);\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    my $n = scalar @$arr;\n    if ($k < 1 || $k > $n) {\n        return undef;\n    }\n    return _kth_element($arr, 0, $n - 1, $k);\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k-1];\n}",
    "    my $n = scalar @$arr;\n    return undef if $k < 1 || $k > $n;\n    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    my $n = scalar @$arr;\n    return $arr->[$k-1] if $k <= $n;\n    return undef;\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k-1];\n}",
    "    my $n = scalar @$arr;\n    my $p = partition($arr, 0, $n-1);\n    while ($p != $k-1) {\n        if ($p > $k-1) {\n            $p = partition($arr, 0, $p-1);\n        } else {\n            $p = partition($arr, $p+1, $n-1);\n        }\n    }\n    return $arr->[$p];\n}",
    "    return $arr->[$k - 1];\n}",
    "    my $len = scalar(@$arr);\n    if ($k < 1 || $k > $len) {\n        return undef;\n    }\n    my $pivot = $arr->[0];\n    my @less;\n    my @greater;\n    for (my $i = 1; $i < $len; $i++) {\n        if ($arr->[$i] < $pivot) {\n            push @less, $arr->[$i];\n        } else {\n            push @greater, $arr->[$i];\n        }\n    }\n    if (scalar(@less) == $k - 1) {\n        return $pivot;\n    } elsif (scalar(@less) > $k - 1) {\n        return kth_element(\\@less, $k);\n    } else {\n        return kth_element(\\@greater, $k - scalar(@less) - 1);\n    }\n}",
    "    my $n = scalar @$arr;\n    if ($k < 1 || $k > $n) {\n        die \"kth_element: k is out of bounds\";\n    }\n    my $pivot = $arr->[0];\n    my $i = 1;\n    my $j = $n - 1;\n    while ($i <= $j) {\n        while ($i <= $j && $arr->[$i] <= $pivot) {\n            $i++;\n        }\n        while ($i <= $j && $arr->[$j] > $pivot) {\n            $j--;\n        }\n        if ($i < $j) {\n            @$arr[$i, $j] = @$arr[$j, $i];\n        }\n    }\n    @$arr[0, $j] = @$arr[$j, 0];\n    if ($k == $j + 1) {\n        return $pivot;\n    } elsif ($k < $j + 1) {\n        return kth_element([@$arr[0..$j-1]], $k);\n    } else {\n        return kth_element([@$arr[$j+1..$n-1]], $k - $j - 1);\n    }\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    my $n = scalar @$arr;\n    return $arr->[$k - 1] if $k <= $n;\n    return undef;\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    my $n = scalar(@$arr);\n    return undef if $k < 1 || $k > $n;\n    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    my $n = scalar(@$arr);\n    my $p = partition($arr, 0, $n - 1);\n    while ($p + 1 != $k) {\n        if ($p + 1 < $k) {\n            $p = partition($arr, $p + 1, $n - 1);\n        }\n        else {\n            $p = partition($arr, 0, $p - 1);\n        }\n    }\n    return $arr->[$p];\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k-1];\n}",
    "    my $n = scalar(@$arr);\n    return undef if $k < 1 || $k > $n;\n    my $pivot = $arr->[0];\n    my $i = 1;\n    my $j = $n - 1;\n    while ($i <= $j) {\n        while ($i <= $j && $arr->[$i] <= $pivot) {\n            $i++;\n        }\n        while ($i <= $j && $arr->[$j] > $pivot) {\n            $j--;\n        }\n        if ($i < $j) {\n            ($arr->[$i], $arr->[$j]) = ($arr->[$j], $arr->[$i]);\n        }\n    }\n    ($arr->[0], $arr->[$j]) = ($arr->[$j], $arr->[0]);\n    if ($j == $k - 1) {\n        return $arr->[$j];\n    } elsif ($j > $k - 1) {\n        return kth_element([@$arr[0..$j-1]], $k);\n    } else {\n        return kth_element([@$arr[$j+1..$n-1]], $k - $j - 1);\n    }\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    my $n = scalar(@$arr);\n    return undef if $k < 1 || $k > $n;\n    return $arr->[$k - 1];\n}",
    "    my $n = scalar @$arr;\n    my $p = partition($arr, 0, $n - 1);\n    while ($p + 1 != $k) {\n        if ($k < $p + 1) {\n            $p = partition($arr, 0, $p - 1);\n        }\n        else {\n            $p = partition($arr, $p + 1, $n - 1);\n        }\n    }\n    return $arr->[$p];\n}",
    "    return $arr->[$k-1];\n}",
    "    my $n = scalar(@$arr);\n    return $arr->[$k - 1] if $k == 1;\n    return $arr->[$n - $k] if $k == $n;\n    my $pivot = $arr->[0];\n    my @less = grep { $_ < $pivot } @$arr;\n    my @greater = grep { $_ > $pivot } @$arr;\n    my $n_less = scalar(@less);\n    return $pivot if $k == $n_less + 1;\n    if ($k <= $n_less) {\n        return kth_element(\\@less, $k);\n    } else {\n        return kth_element(\\@greater, $k - $n_less - 1);\n    }\n}",
    "    return $arr->[$k - 1];\n}",
    "    my $n = scalar @$arr;\n    my $kth = partition($arr, 0, $n-1);\n    while ($kth != $k-1) {\n        if ($kth > $k-1) {\n            $kth = partition($arr, 0, $kth-1);\n        } else {\n            $kth = partition($arr, $kth+1, $n-1);\n        }\n    }\n    return $arr->[$kth];\n}",
    "    my $n = scalar @$arr;\n    return undef if $k < 1 || $k > $n;\n    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    my $n = scalar @$arr;\n    return if $k > $n;\n    my $pivot = $arr->[0];\n    my $i = 1;\n    for my $j (1..$n-1) {\n        if ($arr->[$j] < $pivot) {\n            ($arr->[$i], $arr->[$j]) = ($arr->[$j], $arr->[$i]);\n            $i++;\n        }\n    }\n    ($arr->[0], $arr->[$i-1]) = ($arr->[$i-1], $arr->[0]);\n    if ($i == $k) {\n        return $arr->[$i-1];\n    } elsif ($i > $k) {\n        return kth_element([@$arr[0..$i-2]], $k);\n    } else {\n        return kth_element([@$arr[$i..$n-1]], $k-$i);\n    }\n}",
    "    return $arr->[$k - 1];\n}",
    "    my $n = scalar @$arr;\n    return $arr->[$k-1];\n}",
    "    return $arr->[$k-1];\n}",
    "    my $n = scalar(@$arr);\n    my $kth = $arr->[$k - 1];\n    my $i = 0;\n    my $j = $n - 1;\n    while ($i <= $j) {\n        my $m = $i;\n        for (my $l = $i + 1; $l <= $j; $l++) {\n            if ($arr->[$l] < $arr->[$m]) {\n                $m = $l;\n            }\n        }\n        if ($m == $k - 1) {\n            return $arr->[$m];\n        } elsif ($m < $k - 1) {\n            $i = $m + 1;\n        } else {\n            $j = $m - 1;\n        }\n    }\n    return undef;\n}",
    "    my $n = scalar(@$arr);\n    if ($k < 1 || $k > $n) {\n        die \"Invalid k: $k\";\n    }\n    return kth_element_helper($arr, 0, $n - 1, $k);\n}",
    "    my $n = scalar @$arr;\n    return $arr->[$k-1] if $k == 1;\n    return $arr->[$n-$k] if $k == $n;\n    return undef;\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    my $n = scalar(@$arr);\n    my $left = 0;\n    my $right = $n - 1;\n    my $pivot = 0;\n    while ($left <= $right) {\n        $pivot = partition($arr, $left, $right);\n        if ($pivot == $k - 1) {\n            return $arr->[$pivot];\n        } elsif ($pivot > $k - 1) {\n            $right = $pivot - 1;\n        } else {\n            $left = $pivot + 1;\n        }\n    }\n    return undef;\n}",
    "    return $arr->[$k-1];\n}",
    "    my $n = scalar(@$arr);\n    my $kth = select_kth($arr, 0, $n - 1, $k);\n    return $arr->[$kth];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return undef if $k < 1 || $k > @$arr;\n    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    my $n = scalar @$arr;\n    return undef if $k < 1 || $k > $n;\n    my $pivot = $arr->[0];\n    my $i = 1;\n    my $j = $n - 1;\n    while ($i <= $j) {\n        while ($i <= $j && $arr->[$i] <= $pivot) {\n            $i++;\n        }\n        while ($i <= $j && $arr->[$j] > $pivot) {\n            $j--;\n        }\n        if ($i < $j) {\n            ($arr->[$i], $arr->[$j]) = ($arr->[$j], $arr->[$i]);\n        }\n    }\n    ($arr->[0], $arr->[$j]) = ($arr->[$j], $arr->[0]);\n    if ($j == $k - 1) {\n        return $arr->[$j];\n    } elsif ($j > $k - 1) {\n        return kth_element([@$arr[0..$j-1]], $k);\n    } else {\n        return kth_element([@$arr[$j+1..$n-1]], $k - $j - 1);\n    }\n}",
    "    return $arr->[$k - 1];\n}",
    "    return undef if $k < 1 or $k > @$arr;\n    return $arr->[$k-1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k-1];\n}",
    "    my $n = scalar(@$arr);\n    return undef if $k < 1 || $k > $n;\n    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    my $n = scalar @$arr;\n    return undef if $k < 1 || $k > $n;\n    my $pivot = $arr->[0];\n    my $left = 1;\n    my $right = $n - 1;\n    while ($left <= $right) {\n        while ($left <= $right && $arr->[$left] < $pivot) {\n            $left++;\n        }\n        while ($left <= $right && $arr->[$right] >= $pivot) {\n            $right--;\n        }\n        if ($left < $right) {\n            @$arr[$left, $right] = @$arr[$right, $left];\n        }\n    }\n    @$arr[0, $right] = @$arr[$right, 0];\n    if ($right == $k - 1) {\n        return $pivot;\n    } elsif ($right > $k - 1) {\n        return kth_element([@$arr[0..$right-1]], $k);\n    } else {\n        return kth_element([@$arr[$right+1..$n-1]], $k - $right - 1);\n    }\n}",
    "    my $n = scalar(@$arr);\n    return $arr->[$k-1] if $k == 1;\n    return $arr->[$n-$k+1] if $k == $n;\n    return undef if $k < 1 || $k > $n;\n    my $pivot = $arr->[0];\n    my $left = [grep { $_ < $pivot } @$arr];\n    my $right = [grep { $_ > $pivot } @$arr];\n    my $left_size = scalar(@$left);\n    return $pivot if $k == $left_size + 1;\n    return kth_element($left, $k) if $k <= $left_size;\n    return kth_element($right, $k - $left_size - 1);\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    my $n = scalar @$arr;\n    return $arr->[$k-1] if $k > 0 && $k <= $n;\n    return undef;\n}",
    "    return $arr->[$k-1];\n}",
    "    my $n = scalar @$arr;\n    return $arr->[$k - 1] if $k > $n;\n    my $pivot = $arr->[0];\n    my $i = 1;\n    my $j = $n - 1;\n    while ($i <= $j) {\n        while ($i <= $j && $arr->[$i] <= $pivot) {\n            $i++;\n        }\n        while ($i <= $j && $arr->[$j] > $pivot) {\n            $j--;\n        }\n        if ($i < $j) {\n            ($arr->[$i], $arr->[$j]) = ($arr->[$j], $arr->[$i]);\n        }\n    }\n    ($arr->[0], $arr->[$j]) = ($arr->[$j], $arr->[0]);\n    if ($j == $k - 1) {\n        return $pivot;\n    } elsif ($j > $k - 1) {\n        return kth_element([@$arr[0..$j-1]], $k);\n    } else {\n        return kth_element([@$arr[$j+1..$n-1]], $k - $j - 1);\n    }\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}",
    "    my $n = scalar @$arr;\n    return $arr->[$k-1] if $k <= $n;\n    return undef;\n}",
    "    return $arr->[$k-1];\n}",
    "    my $n = scalar(@$arr);\n    return undef if $k < 1 || $k > $n;\n    return $arr->[$k - 1];\n}",
    "    return $arr->[$k - 1];\n}"
  ]
}