{
  "name": "mbpp_166_find_even_pair",
  "language": "pl",
  "prompt": "# Write a function that counts the number of pairs of integers in a list that xor to an even number.\nsub find_even_pair {\n    my($A) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_even_pair;\n        if(eq_deeply($candidate->([5, 4, 7, 2, 1]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 2, 8, 1, 0, 5, 11]),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $count = 0;\n    my %hash;\n    foreach my $a (@$A) {\n        my $xor = $a ^ ($a & 1);\n        $count += $hash{$xor};\n        $hash{$xor}++;\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my %hash;\n    for my $i (0 .. $#$A) {\n        for my $j ($i+1 .. $#$A) {\n            if (($A->[$i] ^ $A->[$j]) % 2 == 0) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $n = scalar @$A;\n    my $count = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            $count++ if ($A->[$i] ^ $A->[$j]) % 2 == 0;\n        }\n    }\n    return $count;\n}",
    "    my %odd;\n    my %even;\n    my $count = 0;\n    for my $a (@$A) {\n        if ($a % 2 == 0) {\n            $even{$a}++;\n        } else {\n            $odd{$a}++;\n        }\n    }\n    for my $a (@$A) {\n        if ($a % 2 == 0) {\n            $count += $odd{$a};\n        } else {\n            $count += $even{$a};\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for (my $i = 0; $i < scalar(@$A); $i++) {\n        for (my $j = $i + 1; $j < scalar(@$A); $j++) {\n            if (($A->[$i] ^ $A->[$j]) % 2 == 0) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my $n = scalar(@$A);\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if (($A->[$i] ^ $A->[$j]) % 2 == 0) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for (my $i = 0; $i < scalar(@$A); $i++) {\n        for (my $j = $i + 1; $j < scalar(@$A); $j++) {\n            if (($A->[$i] ^ $A->[$j]) % 2 == 0) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my $n = scalar(@$A);\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if (($A->[$i] ^ $A->[$j]) % 2 == 0) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my %hash;\n    for my $a (@$A) {\n        $hash{$a} = 1;\n    }\n    for my $a (@$A) {\n        for my $b (keys %hash) {\n            if (($a ^ $b) % 2 == 0) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for (my $i = 0; $i < scalar(@$A); $i++) {\n        for (my $j = $i + 1; $j < scalar(@$A); $j++) {\n            if (($A->[$i] ^ $A->[$j]) % 2 == 0) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for my $i (0 .. $#$A) {\n        for my $j ($i+1 .. $#$A) {\n            $count++ if ($A->[$i] ^ $A->[$j]) % 2 == 0;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for (my $i = 0; $i < scalar(@$A); $i++) {\n        for (my $j = $i + 1; $j < scalar(@$A); $j++) {\n            $count++ if ($A->[$i] ^ $A->[$j]) % 2 == 0;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for (my $i = 0; $i < scalar @$A; $i++) {\n        for (my $j = $i + 1; $j < scalar @$A; $j++) {\n            $count++ if ($A->[$i] ^ $A->[$j]) % 2 == 0;\n        }\n    }\n    return $count;\n}",
    "    my $n = scalar(@$A);\n    my $count = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if (($A->[$i] ^ $A->[$j]) % 2 == 0) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for (my $i = 0; $i < scalar(@$A); $i++) {\n        for (my $j = $i + 1; $j < scalar(@$A); $j++) {\n            $count++ if ($A->[$i] ^ $A->[$j]) % 2 == 0;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for (my $i = 0; $i < scalar(@$A); $i++) {\n        for (my $j = $i + 1; $j < scalar(@$A); $j++) {\n            if (($A->[$i] ^ $A->[$j]) % 2 == 0) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for my $i (0..$#$A) {\n        for my $j ($i+1..$#$A) {\n            $count++ if ($A->[$i] ^ $A->[$j]) % 2 == 0;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for (my $i = 0; $i < scalar @$A; $i++) {\n        for (my $j = $i + 1; $j < scalar @$A; $j++) {\n            if (($A->[$i] ^ $A->[$j]) % 2 == 0) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $n = scalar @$A;\n    my $count = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if (($A->[$i] ^ $A->[$j]) % 2 == 0) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $n = scalar(@$A);\n    my $count = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            my $xor = $A->[$i] ^ $A->[$j];\n            $count++ if ($xor % 2 == 0);\n        }\n    }\n    return $count;\n}"
  ]
}