{
  "name": "mbpp_108_merge_sorted_list",
  "language": "pl",
  "prompt": "# Write a function to merge three lists into a single sorted list.\nsub merge_sorted_list {\n    my($num1, $num2, $num3) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_108_merge_sorted_list.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&merge_sorted_list;\n        if(eq_deeply($candidate->([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]),[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]),[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41]),[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @list = sort {$a <=> $b} (@$num1, @$num2, @$num3);\n    return \\@list;\n}",
    "    my @merged_list = sort {$a <=> $b} (@$num1, @$num2, @$num3);\n    return \\@merged_list;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i < scalar(@$num1) && $j < scalar(@$num2) && $k < scalar(@$num3)) {\n        if ($num1->[$i] <= $num2->[$j] && $num1->[$i] <= $num3->[$k]) {\n            push @result, $num1->[$i];\n            $i++;\n        } elsif ($num2->[$j] <= $num1->[$i] && $num2->[$j] <= $num3->[$k]) {\n            push @result, $num2->[$j];\n            $j++;\n        } else {\n            push @result, $num3->[$k];\n            $k++;\n        }\n    }\n    while ($i < scalar(@$num1)) {\n        push @result, $num1->[$i];\n        $i++;\n    }\n    while ($j < scalar(@$num2)) {\n        push @result, $num2->[$j];\n        $j++;\n    }\n    while ($k < scalar(@$num3)) {\n        push @result, $num3->[$k];\n        $k++;\n    }\n    return \\@result;\n}",
    "    my @list = sort {$a <=> $b} (@$num1, @$num2, @$num3);\n    return \\@list;\n}",
    "    my @sorted_list;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i < scalar(@$num1) && $j < scalar(@$num2) && $k < scalar(@$num3)) {\n        if ($num1->[$i] <= $num2->[$j] && $num1->[$i] <= $num3->[$k]) {\n            push @sorted_list, $num1->[$i];\n            $i++;\n        } elsif ($num2->[$j] <= $num1->[$i] && $num2->[$j] <= $num3->[$k]) {\n            push @sorted_list, $num2->[$j];\n            $j++;\n        } else {\n            push @sorted_list, $num3->[$k];\n            $k++;\n        }\n    }\n    while ($i < scalar(@$num1) && $j < scalar(@$num2)) {\n        if ($num1->[$i] <= $num2->[$j]) {\n            push @sorted_list, $num1->[$i];\n            $i++;\n        } else {\n            push @sorted_list, $num2->[$j];\n            $j++;\n        }\n    }\n    while ($i < scalar(@$num1) && $k < scalar(@$num3)) {\n        if ($num1->[$i] <= $num3->[$k]) {\n            push @sorted_list, $num1->[$i];\n            $i++;\n        } else {\n            push @sorted_list, $num3->[$k];\n            $k++;\n        }\n    }\n    while ($j < scalar(@$num2) && $k < scalar(@$num3)) {\n        if ($num2->[$j] <= $num3->[$k]) {\n            push @sorted_list, $num2->[$j];\n            $j++;\n        } else {\n",
    "    my @sorted_list;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i <= $#{$num1} && $j <= $#{$num2} && $k <= $#{$num3}) {\n        if ($num1->[$i] <= $num2->[$j] && $num1->[$i] <= $num3->[$k]) {\n            push @sorted_list, $num1->[$i];\n            $i++;\n        } elsif ($num2->[$j] <= $num1->[$i] && $num2->[$j] <= $num3->[$k]) {\n            push @sorted_list, $num2->[$j];\n            $j++;\n        } elsif ($num3->[$k] <= $num1->[$i] && $num3->[$k] <= $num2->[$j]) {\n            push @sorted_list, $num3->[$k];\n            $k++;\n        }\n    }\n    while ($i <= $#{$num1}) {\n        push @sorted_list, $num1->[$i];\n        $i++;\n    }\n    while ($j <= $#{$num2}) {\n        push @sorted_list, $num2->[$j];\n        $j++;\n    }\n    while ($k <= $#{$num3}) {\n        push @sorted_list, $num3->[$k];\n        $k++;\n    }\n    return @sorted_list;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i < scalar(@$num1) && $j < scalar(@$num2) && $k < scalar(@$num3)) {\n        if ($num1->[$i] < $num2->[$j]) {\n            if ($num1->[$i] < $num3->[$k]) {\n                push @result, $num1->[$i];\n                $i++;\n            } else {\n                push @result, $num3->[$k];\n                $k++;\n            }\n        } else {\n            if ($num2->[$j] < $num3->[$k]) {\n                push @result, $num2->[$j];\n                $j++;\n            } else {\n                push @result, $num3->[$k];\n                $k++;\n            }\n        }\n    }\n    while ($i < scalar(@$num1) && $j < scalar(@$num2)) {\n        if ($num1->[$i] < $num2->[$j]) {\n            push @result, $num1->[$i];\n            $i++;\n        } else {\n            push @result, $num2->[$j];\n            $j++;\n        }\n    }\n    while ($i < scalar(@$num1) && $k < scalar(@$num3)) {\n        if ($num1->[$i] < $num3->[$k]) {\n            push @result, $num1->[$i];\n            $i++;\n        } else {\n            push @result, $num3->[$k];\n            $k++;\n        }\n    }\n    while ($j < scalar(@$num2) && $k < scalar(@$num3)) {\n        if ($num2->[$j] < $num3->[$k]) {\n            push @result, $num2->[$j];\n            $j++;\n        } else {\n            push @result, $num3->[",
    "    my @merged_list = sort {$a <=> $b} (@$num1, @$num2, @$num3);\n    return \\@merged_list;\n}",
    "    my @sorted_list = ();\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i < scalar(@$num1) && $j < scalar(@$num2) && $k < scalar(@$num3)) {\n        if ($num1->[$i] < $num2->[$j] && $num1->[$i] < $num3->[$k]) {\n            push @sorted_list, $num1->[$i];\n            $i++;\n        } elsif ($num2->[$j] < $num1->[$i] && $num2->[$j] < $num3->[$k]) {\n            push @sorted_list, $num2->[$j];\n            $j++;\n        } else {\n            push @sorted_list, $num3->[$k];\n            $k++;\n        }\n    }\n    while ($i < scalar(@$num1)) {\n        push @sorted_list, $num1->[$i];\n        $i++;\n    }\n    while ($j < scalar(@$num2)) {\n        push @sorted_list, $num2->[$j];\n        $j++;\n    }\n    while ($k < scalar(@$num3)) {\n        push @sorted_list, $num3->[$k];\n        $k++;\n    }\n    return @sorted_list;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i < scalar(@$num1) && $j < scalar(@$num2) && $k < scalar(@$num3)) {\n        if ($num1->[$i] <= $num2->[$j] && $num1->[$i] <= $num3->[$k]) {\n            push @result, $num1->[$i];\n            $i++;\n        } elsif ($num2->[$j] <= $num1->[$i] && $num2->[$j] <= $num3->[$k]) {\n            push @result, $num2->[$j];\n            $j++;\n        } else {\n            push @result, $num3->[$k];\n            $k++;\n        }\n    }\n    while ($i < scalar(@$num1)) {\n        push @result, $num1->[$i];\n        $i++;\n    }\n    while ($j < scalar(@$num2)) {\n        push @result, $num2->[$j];\n        $j++;\n    }\n    while ($k < scalar(@$num3)) {\n        push @result, $num3->[$k];\n        $k++;\n    }\n    return \\@result;\n}",
    "    my @sorted_list;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i < scalar(@$num1) && $j < scalar(@$num2) && $k < scalar(@$num3)) {\n        if ($num1->[$i] <= $num2->[$j] && $num1->[$i] <= $num3->[$k]) {\n            push @sorted_list, $num1->[$i];\n            $i++;\n        } elsif ($num2->[$j] <= $num1->[$i] && $num2->[$j] <= $num3->[$k]) {\n            push @sorted_list, $num2->[$j];\n            $j++;\n        } else {\n            push @sorted_list, $num3->[$k];\n            $k++;\n        }\n    }\n    while ($i < scalar(@$num1)) {\n        push @sorted_list, $num1->[$i];\n        $i++;\n    }\n    while ($j < scalar(@$num2)) {\n        push @sorted_list, $num2->[$j];\n        $j++;\n    }\n    while ($k < scalar(@$num3)) {\n        push @sorted_list, $num3->[$k];\n        $k++;\n    }\n    return @sorted_list;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i < @$num1 && $j < @$num2 && $k < @$num3) {\n        if ($num1->[$i] < $num2->[$j]) {\n            if ($num1->[$i] < $num3->[$k]) {\n                push @result, $num1->[$i];\n                $i++;\n            } else {\n                push @result, $num3->[$k];\n                $k++;\n            }\n        } else {\n            if ($num2->[$j] < $num3->[$k]) {\n                push @result, $num2->[$j];\n                $j++;\n            } else {\n                push @result, $num3->[$k];\n                $k++;\n            }\n        }\n    }\n    while ($i < @$num1) {\n        push @result, $num1->[$i];\n        $i++;\n    }\n    while ($j < @$num2) {\n        push @result, $num2->[$j];\n        $j++;\n    }\n    while ($k < @$num3) {\n        push @result, $num3->[$k];\n        $k++;\n    }\n    return @result;\n}",
    "    my @sorted_list = sort {$a <=> $b} (@$num1, @$num2, @$num3);\n    return \\@sorted_list;\n}",
    "    my @list = sort {$a <=> $b} (@$num1, @$num2, @$num3);\n    return \\@list;\n}",
    "    my @sorted_list = sort {$a <=> $b} (@$num1, @$num2, @$num3);\n    return @sorted_list;\n}",
    "    my @sorted_list = sort {$a <=> $b} (@$num1, @$num2, @$num3);\n    return @sorted_list;\n}",
    "    my @sorted_list;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i < scalar(@$num1) && $j < scalar(@$num2) && $k < scalar(@$num3)) {\n        if ($num1->[$i] <= $num2->[$j] && $num1->[$i] <= $num3->[$k]) {\n            push @sorted_list, $num1->[$i];\n            $i++;\n        } elsif ($num2->[$j] <= $num1->[$i] && $num2->[$j] <= $num3->[$k]) {\n            push @sorted_list, $num2->[$j];\n            $j++;\n        } else {\n            push @sorted_list, $num3->[$k];\n            $k++;\n        }\n    }\n    while ($i < scalar(@$num1) && $j < scalar(@$num2)) {\n        if ($num1->[$i] <= $num2->[$j]) {\n            push @sorted_list, $num1->[$i];\n            $i++;\n        } else {\n            push @sorted_list, $num2->[$j];\n            $j++;\n        }\n    }\n    while ($i < scalar(@$num1) && $k < scalar(@$num3)) {\n        if ($num1->[$i] <= $num3->[$k]) {\n            push @sorted_list, $num1->[$i];\n            $i++;\n        } else {\n            push @sorted_list, $num3->[$k];\n            $k++;\n        }\n    }\n    while ($j < scalar(@$num2) && $k < scalar(@$num3)) {\n        if ($num2->[$j] <= $num3->[$k]) {\n            push @sorted_list, $num2->[$j];\n            $j++;\n        } else {\n",
    "    my @sorted_list = sort {$a <=> $b} (@$num1, @$num2, @$num3);\n    return @sorted_list;\n}",
    "    my @list = sort {$a <=> $b} (@$num1, @$num2, @$num3);\n    return @list;\n}",
    "    my @sorted_list;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i < scalar(@$num1) && $j < scalar(@$num2) && $k < scalar(@$num3)) {\n        if ($num1->[$i] < $num2->[$j]) {\n            if ($num1->[$i] < $num3->[$k]) {\n                push @sorted_list, $num1->[$i];\n                $i++;\n            } else {\n                push @sorted_list, $num3->[$k];\n                $k++;\n            }\n        } else {\n            if ($num2->[$j] < $num3->[$k]) {\n                push @sorted_list, $num2->[$j];\n                $j++;\n            } else {\n                push @sorted_list, $num3->[$k];\n                $k++;\n            }\n        }\n    }\n    while ($i < scalar(@$num1) && $j < scalar(@$num2)) {\n        if ($num1->[$i] < $num2->[$j]) {\n            push @sorted_list, $num1->[$i];\n            $i++;\n        } else {\n            push @sorted_list, $num2->[$j];\n            $j++;\n        }\n    }\n    while ($i < scalar(@$num1) && $k < scalar(@$num3)) {\n        if ($num1->[$i] < $num3->[$k]) {\n            push @sorted_list, $num1->[$i];\n            $i++;\n        } else {\n            push @sorted_list, $num3->[$k];\n            $k++;\n        }\n    }\n    while ($j < scalar(@$num2) && $k < scalar(@$num3)) {\n        if ($num2->[$j] < $num3->[$k]) {\n            push @sorted_list"
  ]
}