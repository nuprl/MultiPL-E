{
  "name": "mbpp_586_split_Arr",
  "language": "pl",
  "prompt": "# Write a python function to split a list at the nth eelment and add the first part to the end.\nsub split_Arr {\n    my($l, $n) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&split_Arr;\n        if(eq_deeply($candidate->([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], 1),[2, 3, 4, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @arr = @$l;\n    my @new_arr = splice(@arr, $n);\n    push @new_arr, @arr;\n    return @new_arr;\n}",
    "    my @a = @$l;\n    my @b = splice(@a, $n);\n    push(@a, @b);\n    return @a;\n}",
    "    my @arr = @$l;\n    my @first = @arr[0..$n-1];\n    my @second = @arr[$n..$#arr];\n    my @new = (@second, @first);\n    return @new;\n}",
    "    my @arr = @$l;\n    my @first = @arr[0..$n-1];\n    my @second = @arr[$n..$#arr];\n    my @new = (@second, @first);\n    return @new;\n}",
    "    my @arr = @$l;\n    my @arr1 = splice(@arr, 0, $n);\n    push(@arr, @arr1);\n    return @arr;\n}",
    "    my @arr = @{$l};\n    my @first = @arr[0..$n-1];\n    my @second = @arr[$n..$#arr];\n    my @new = (@second, @first);\n    return @new;\n}",
    "    my @arr = @$l;\n    my @new_arr = ();\n    for(my $i = $n; $i < @arr; $i++) {\n        push(@new_arr, $arr[$i]);\n    }\n    for(my $i = 0; $i < $n; $i++) {\n        push(@new_arr, $arr[$i]);\n    }\n    return @new_arr;\n}",
    "    my @a = @$l;\n    my @b = splice(@a, $n);\n    push(@a, @b);\n    return @a;\n}",
    "    my @arr = @$l;\n    my @first = @arr[0..$n-1];\n    my @second = @arr[$n..$#arr];\n    push @second, @first;\n    return @second;\n}",
    "    my @arr = @$l;\n    my @first = @arr[0..$n-1];\n    my @second = @arr[$n..$#arr];\n    push(@second, @first);\n    return @second;\n}",
    "    my @arr = @$l;\n    my @new_arr = ();\n    for (my $i = $n; $i < @arr; $i++) {\n        push(@new_arr, $arr[$i]);\n    }\n    for (my $i = 0; $i < $n; $i++) {\n        push(@new_arr, $arr[$i]);\n    }\n    return @new_arr;\n}",
    "    my $len = scalar @$l;\n    if ($n > $len) {\n        print \"n is greater than length of array\\n\";\n        return;\n    }\n    my @arr1 = @$l[0..$n-1];\n    my @arr2 = @$l[$n..$len-1];\n    my @arr3 = (@arr2, @arr1);\n    return @arr3;\n}",
    "    my @arr = @$l;\n    my @new_arr;\n    for (my $i = $n; $i < @arr; $i++) {\n        push @new_arr, $arr[$i];\n    }\n    for (my $i = 0; $i < $n; $i++) {\n        push @new_arr, $arr[$i];\n    }\n    return @new_arr;\n}",
    "    my @arr = @$l;\n    my @arr1 = @arr[0..$n-1];\n    my @arr2 = @arr[$n..$#arr];\n    push @arr2, @arr1;\n    return @arr2;\n}",
    "    my @arr = @$l;\n    my @arr1 = @arr[0..$n-1];\n    my @arr2 = @arr[$n..$#arr];\n    my @arr3 = (@arr2, @arr1);\n    return @arr3;\n}",
    "    my @arr = @$l;\n    my @first = @arr[0..$n-1];\n    my @second = @arr[$n..$#arr];\n    push(@second, @first);\n    return @second;\n}",
    "    my @arr = @$l;\n    my @first = splice @arr, 0, $n;\n    push @arr, @first;\n    return @arr;\n}",
    "    my $len = scalar @$l;\n    my @res;\n    if ($n > $len) {\n        print \"n is greater than length of array\\n\";\n        return;\n    }\n    for (my $i = $n; $i < $len; $i++) {\n        push @res, $l->[$i];\n    }\n    for (my $i = 0; $i < $n; $i++) {\n        push @res, $l->[$i];\n    }\n    return @res;\n}",
    "    my @arr = @$l;\n    my @first = @arr[0..$n-1];\n    my @second = @arr[$n..$#arr];\n    my @new = (@second, @first);\n    return @new;\n}",
    "    my @arr = @$l;\n    my @newArr = ();\n    my $i = 0;\n    while ($i < $n) {\n        push(@newArr, $arr[$i]);\n        $i++;\n    }\n    while ($i < @arr) {\n        unshift(@newArr, $arr[$i]);\n        $i++;\n    }\n    return @newArr;\n}"
  ]
}