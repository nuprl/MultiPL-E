{
  "name": "mbpp_16_text_lowercase_underscore",
  "language": "pl",
  "prompt": "# Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nsub text_lowercase_underscore {\n    my($text) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&text_lowercase_underscore;\n        if(eq_deeply($candidate->(\"aab_cbbbc\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aab_Abbbc\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Aaab_abbbc\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    return $text =~ /^[a-z_]+$/;\n}",
    "    return $text =~ /^[a-z_]+$/;\n}",
    "    return $text =~ /[a-z]+_[a-z]+/;\n}",
    "    if ($text =~ /^[a-z]+(?:_[a-z]+)*$/) {\n        return 1;\n    }\n    return 0;\n}",
    "    return $text =~ /^[a-z]+(_[a-z]+)*$/;\n}",
    "    return $text =~ /^[a-z]+(_[a-z]+)*$/;\n}",
    "    return $text =~ /^[a-z_]+$/;\n}",
    "    return $text =~ /^[a-z_]+$/;\n}",
    "    return $text =~ /^[a-z_]+$/;\n}",
    "    return $text =~ /^[a-z_]+$/;\n}",
    "    return $text =~ /^[a-z_]+$/;\n}",
    "    return $text =~ /^[a-z_]+$/;\n}",
    "    return $text =~ /^[a-z_]+$/;\n}",
    "    my $regex = qr/^[a-z]+(_[a-z]+)*$/;\n    return $text =~ $regex;\n}",
    "    return $text =~ /^[a-z_]+$/;\n}",
    "    return $text =~ /^[a-z_]+$/;\n}",
    "    return $text =~ /^[a-z]+(_[a-z]+)*$/;\n}",
    "    return $text =~ /^[a-z_]+$/;\n}",
    "    return $text =~ /^[a-z_]+$/;\n}",
    "    return $text =~ /^[a-z_]+$/;\n}"
  ]
}