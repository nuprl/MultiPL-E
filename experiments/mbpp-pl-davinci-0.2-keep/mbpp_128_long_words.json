{
  "name": "mbpp_128_long_words",
  "language": "pl",
  "prompt": "# Write a function to find words that are longer than n characters from a given list of words.\nsub long_words {\n    my($n, $str) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&long_words;\n        if(eq_deeply($candidate->(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, \"writing a program\"),[\"writing\", \"program\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, \"sorting list\"),[\"sorting\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @words = split /\\s+/, $str;\n    my @long_words = grep { length($_) > $n } @words;\n    return @long_words;\n}",
    "    my @words = split(/\\s+/, $str);\n    my @long_words = grep { length($_) > $n } @words;\n    return @long_words;\n}",
    "    my @words = split /\\s+/, $str;\n    my @long_words = grep { length($_) > $n } @words;\n    return @long_words;\n}",
    "    my @words = split(/\\s+/, $str);\n    my @long_words = grep { length($_) > $n } @words;\n    return @long_words;\n}",
    "    my @words = split(/ /, $str);\n    my @long_words = grep { length($_) > $n } @words;\n    return @long_words;\n}",
    "    my @words = split /\\s+/, $str;\n    my @long_words = grep { length($_) > $n } @words;\n    return @long_words;\n}",
    "    my @words = split(/\\s+/, $str);\n    my @long_words = grep { length($_) > $n } @words;\n    return @long_words;\n}",
    "    my @words = split /\\s+/, $str;\n    my @long_words = grep { length($_) > $n } @words;\n    return @long_words;\n}",
    "    my @words = split(/\\s+/, $str);\n    my @long_words = grep { length($_) > $n } @words;\n    return @long_words;\n}",
    "    my @words = split / /, $str;\n    my @long_words = grep { length($_) > $n } @words;\n    return @long_words;\n}",
    "    my @words = split /\\s+/, $str;\n    my @long_words = grep { length($_) > $n } @words;\n    return @long_words;\n}",
    "    my @words = split /\\s+/, $str;\n    my @long_words = grep { length($_) > $n } @words;\n    return @long_words;\n}",
    "    my @words = split /\\s+/, $str;\n    my @long_words = grep { length($_) > $n } @words;\n    return @long_words;\n}",
    "    my @words = split /\\s+/, $str;\n    my @long_words = grep { length($_) > $n } @words;\n    return @long_words;\n}",
    "    my @words = split(/\\s+/, $str);\n    my @long_words = grep { length($_) > $n } @words;\n    return @long_words;\n}",
    "    my @words = split(/\\s+/, $str);\n    my @long_words = grep { length($_) > $n } @words;\n    return @long_words;\n}",
    "    my @words = split(/\\s+/, $str);\n    my @long_words = grep { length($_) > $n } @words;\n    return @long_words;\n}",
    "    my @words = split(/\\s+/, $str);\n    my @long_words = grep { length($_) > $n } @words;\n    return @long_words;\n}",
    "    my @words = split /\\s+/, $str;\n    my @long_words = grep { length($_) > $n } @words;\n    return @long_words;\n}",
    "    my @words = split / /, $str;\n    my @long_words = grep { length($_) > $n } @words;\n    return @long_words;\n}"
  ]
}