{
  "name": "mbpp_771_check_expression",
  "language": "pl",
  "prompt": "# Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nsub check_expression {\n    my($exp) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_expression;\n        if(eq_deeply($candidate->(\"{()}[{}]\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"{()}[{]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"{()}[{}][]({})\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            if(scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop(@stack);\n            if($c eq ')' && $top ne '(') {\n                $balanced = 0;\n                last;\n            }\n            if($c eq '}' && $top ne '{') {\n                $balanced = 0;\n                last;\n            }\n            if($c eq ']' && $top ne '[') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if($balanced && scalar(@stack) == 0) {\n        return 1;\n    }\n    return 0;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    my %closing = reverse %brackets;\n    for my $c (split //, $exp) {\n        if (exists $brackets{$c}) {\n            push @stack, $c;\n        } elsif (exists $closing{$c}) {\n            my $top = pop @stack;\n            return 0 if $brackets{$top} ne $c;\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );",
    "    my @stack;\n    my %closing_brackets = (\n        ')' => '(',\n        '}' => '{',\n        ']' => '[',\n    );\n    for my $char (split //, $exp) {\n        if ($char =~ /[\\(\\{\\[]/) {\n            push @stack, $char;\n        } elsif ($char =~ /[\\)\\}\\]]/) {\n            my $last_bracket = pop @stack;\n            if ($closing_brackets{$char} ne $last_bracket) {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my $i = 0;\n    my $len = length($exp);\n    while($i < $len) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if(($top eq '(' && $c ne ')') || ($top eq '{' && $c ne '}') || ($top eq '[' && $c ne ']')) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            my $top = pop @stack;\n            if ($pairs{$top} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '[' || $char eq '{') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq ']' || $char eq '}') {\n            my $top = pop @stack;\n            if ($brackets{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    for my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (scalar @stack == 0) {\n                $balanced = 0;\n                last;\n            } else {\n                pop @stack;\n            }\n        }\n    }\n    if (scalar @stack != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    my @open = keys %pairs;\n    my @close = values %pairs;\n    for my $c (split //, $exp) {\n        if (grep {$_ eq $c} @open) {\n            push @stack, $c;\n        }\n        elsif (grep {$_ eq $c} @close) {\n            my $last = pop @stack;\n            return 0 unless $pairs{$last} eq $c;\n        }\n    }\n    return 1;\n}",
    "    my @arr = split(//, $exp);\n    my @stack;\n    my $top = -1;\n    foreach my $ch (@arr) {\n        if ($ch eq '(' || $ch eq '{' || $ch eq '[') {\n            $top++;\n            $stack[$top] = $ch;\n        } elsif ($ch eq ')' || $ch eq '}' || $ch eq ']') {\n            if ($top == -1) {\n                return 0;\n            } elsif ($ch eq ')' && $stack[$top] eq '(') {\n                $top--;\n            } elsif ($ch eq '}' && $stack[$top] eq '{') {\n                $top--;\n            } elsif ($ch eq ']' && $stack[$top] eq '[') {\n                $top--;\n            } else {\n                return 0;\n            }\n        }\n    }\n    if ($top == -1) {\n        return 1;\n    } else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            my $last = pop @stack;\n            return 0 if !defined $last || $pairs{$last} ne $c;\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my %pairs = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    for my $char (split //, $exp) {\n        if ($char =~ /[\\{\\[\\(]/) {\n            push @stack, $char;\n        }\n        elsif ($char =~ /[\\}\\]\\)]/) {\n            my $last = pop @stack;\n            return 0 if $pairs{$last} ne $char;\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    foreach my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (scalar @stack == 0) {\n                return 0;\n            } else {\n                pop @stack;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %hash = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            my $top = pop @stack;\n            if ($hash{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $c (split //, $exp) {\n        if (exists $map{$c}) {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            return 0 if $c ne $map{pop @stack};\n        }\n    }\n    return 0 if @stack;\n    return 1;\n}",
    "    my @stack;\n    my $i = 0;\n    my $len = length($exp);\n    while($i < $len) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if(!$top) {\n                return 0;\n            }\n            if($c eq ')' && $top ne '(') {\n                return 0;\n            }\n            if($c eq '}' && $top ne '{') {\n                return 0;\n            }\n            if($c eq ']' && $top ne '[') {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) > 0) {\n        return 0;\n    }\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if ($brackets{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if ($pairs{$top} ne $c) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    return $balanced && !@stack;\n}",
    "    my @stack;\n    my %brackets = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')'\n    );\n    my @chars = split(//, $exp);\n    for my $char (@chars) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        } elsif (scalar @stack > 0) {\n            if ($brackets{$stack[-1]} eq $char) {\n                pop @stack;\n            } else {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my $i = 0;\n    while ($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')') {\n            return 0 if pop(@stack) ne '(';\n        }\n        elsif ($c eq '}') {\n            return 0 if pop(@stack) ne '{';\n        }\n        elsif ($c eq ']') {\n            return 0 if pop(@stack) ne '[';\n        }\n        $i++;\n    }\n    return 0 if scalar(@stack) > 0;\n    return 1;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            return 0 unless $pairs{$top} eq $c;\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if(($c eq ')' && $top ne '(') || ($c eq '}' && $top ne '{') || ($c eq ']' && $top ne '[')) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '[' || $char eq '{') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq ']' || $char eq '}') {\n            my $top = pop @stack;\n            if ($pairs{$top} ne $char) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if ($balanced && !@stack) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my @exp = split //, $exp;\n    for my $c (@exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if ($top eq '(' && $c ne ')') {\n                return 0;\n            }\n            elsif ($top eq '{' && $c ne '}') {\n                return 0;\n            }\n            elsif ($top eq '[' && $c ne ']') {\n                return 0;\n            }\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my $i = 0;\n    while ($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if ($c eq ')' && $top ne '(') {\n                return 0;\n            } elsif ($c eq '}' && $top ne '{') {\n                return 0;\n            } elsif ($c eq ']' && $top ne '[') {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack;\n    my $i = 0;\n    my $len = length($exp);\n    while($i < $len) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if(($top eq '(' && $c ne ')') || ($top eq '{' && $c ne '}') || ($top eq '[' && $c ne ']')) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack;\n    my @exp_arr = split(//, $exp);\n    for my $char (@exp_arr) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push(@stack, $char);\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            if ($char eq ')') {\n                if (pop(@stack) ne '(') {\n                    return 0;\n                }\n            }\n            elsif ($char eq '}') {\n                if (pop(@stack) ne '{') {\n                    return 0;\n                }\n            }\n            elsif ($char eq ']') {\n                if (pop(@stack) ne '[') {\n                    return 0;\n                }\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '{' || $char eq '[' || $char eq '(') {\n            push @stack, $char;\n        }\n        elsif ($char eq '}' || $char eq ']' || $char eq ')') {\n            my $last = pop @stack;\n            if ($brackets{$last} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    my @chars = split //, $exp;\n    for my $char (@chars) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $last = pop @stack;\n            if ($brackets{$last} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0 ? 1 : 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    for my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')') {\n            if (@stack) {\n                pop @stack;\n            }\n            else {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    $balanced && !@stack;\n}",
    "    my @stack;\n    my $i = 0;\n    my $length = length($exp);\n    while($i < $length) {\n        my $char = substr($exp, $i, 1);\n        if($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        } elsif($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if(($top eq '(' && $char ne ')') || ($top eq '{' && $char ne '}') || ($top eq '[' && $char ne ']')) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    for my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (@stack) {\n                pop @stack;\n            } else {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if (@stack) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    my $balanced = 1;\n    foreach my $char (split //, $exp) {\n        if (exists $pairs{$char}) {\n            push @stack, $char;\n        } elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if ($pairs{$top} ne $char) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if ($balanced && !@stack) {\n        return 1;\n    }\n    return 0;\n}",
    "    my @stack;\n    my @exp = split //, $exp;\n    for my $c (@exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            else {\n                pop @stack;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            return 0 if $pairs{$top} ne $c;\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    for my $char (split //, $exp) {\n        if ($char eq '(') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            else {\n                pop @stack;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack = ();\n    my %pairs = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '{' || $char eq '[' || $char eq '(') {\n            push @stack, $char;\n        }\n        elsif ($char eq '}' || $char eq ']' || $char eq ')') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            my $last = pop @stack;\n            if ($pairs{$last} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            my $top = pop @stack;\n            if ($brackets{$top} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    foreach my $char (split //, $exp) {\n        if ($char eq '(') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            pop @stack;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    my @chars = split //, $exp;\n    for my $char (@chars) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $last_char = pop @stack;\n            if ($char ne $brackets{$last_char}) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my @exp = split(//, $exp);\n    for my $c (@exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            else {\n                pop @stack;\n            }\n        }\n    }\n    if (scalar @stack == 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my %pairs = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    for my $c (split //, $exp) {\n        if (exists $pairs{$c}) {\n            push @stack, $c;\n        }\n        elsif ($c eq '}' || $c eq ']' || $c eq ')') {\n            return 0 if $c ne $pairs{pop @stack};\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while ($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if ($c eq ')' && $top ne '(') {\n                $balanced = 0;\n                last;\n            } elsif ($c eq '}' && $top ne '{') {\n                $balanced = 0;\n                last;\n            } elsif ($c eq ']' && $top ne '[') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if ($balanced && scalar(@stack) == 0) {\n        return 1;\n    } else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if(($top eq '(' && $c ne ')') || ($top eq '{' && $c ne '}') || ($top eq '[' && $c ne ']')) {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if($balanced && scalar(@stack) == 0) {\n        return 1;\n    } else {\n        return 0;\n    }\n}",
    "    my @stack = ();\n    my $balanced = 1;\n    for my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')') {\n            if (@stack == 0) {\n                $balanced = 0;\n                last;\n            }\n            else {\n                pop @stack;\n            }\n        }\n    }\n    if (@stack > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $i = 0;\n    while ($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if ($top eq '(' && $c ne ')') {\n                return 0;\n            } elsif ($top eq '{' && $c ne '}') {\n                return 0;\n            } elsif ($top eq '[' && $c ne ']') {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    if (@stack) {\n        return 0;\n    }\n    return 1;\n}",
    "    my @stack;\n    my @exp = split(//, $exp);\n    for my $c (@exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            pop @stack;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' or $c eq '{' or $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' or $c eq '}' or $c eq ']') {\n            return 0 if $pairs{pop @stack} ne $c;\n        }\n    }\n    return 0 if @stack;\n    return 1;\n}",
    "    my @stack = ();\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    my $balanced = 1;\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if ($brackets{$top} ne $c) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if ($balanced && scalar @stack == 0) {\n        return 1;\n    } else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if (!defined $top || $pairs{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $ch (split //, $exp) {\n        if (exists $brackets{$ch}) {\n            push @stack, $ch;\n        }\n        else {\n            if ($ch eq $brackets{$stack[-1]}) {\n                pop @stack;\n            }\n            else {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %brackets = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')'\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (scalar @stack > 0 && $brackets{$stack[-1]} eq $char) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %closing = (\n        ')' => '(',\n        ']' => '[',\n        '}' => '{',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            my $top = pop @stack;\n            if ($top ne $closing{$c}) {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my %closing_brackets = (\n        ')' => '(',\n        '}' => '{',\n        ']' => '[',\n    );\n    my %opening_brackets = reverse %closing_brackets;\n    for my $char (split //, $exp) {\n        if (exists $opening_brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (exists $closing_brackets{$char}) {\n            if ($stack[-1] eq $closing_brackets{$char}) {\n                pop @stack;\n            }\n            else {\n                return 0;\n            }\n        }\n    }\n    return !@stack;\n}",
    "    my $stack = [];\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $char = substr($exp, $i, 1);\n        if($char eq '(' || $char eq '{' || $char eq '[') {\n            push(@$stack, $char);\n        }\n        elsif($char eq ')' || $char eq '}' || $char eq ']') {\n            if(scalar(@$stack) == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop(@$stack);\n            if($top eq '(' && $char ne ')') {\n                $balanced = 0;\n                last;\n            }\n            elsif($top eq '{' && $char ne '}') {\n                $balanced = 0;\n                last;\n            }\n            elsif($top eq '[' && $char ne ']') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if($balanced == 1 && scalar(@$stack) == 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my %closing_brackets = (\n        ')' => '(',\n        ']' => '[',\n        '}' => '{',\n    );\n    for my $ch (split //, $exp) {\n        if ($ch eq '(' || $ch eq '[' || $ch eq '{') {\n            push @stack, $ch;\n        }\n        elsif ($ch eq ')' || $ch eq ']' || $ch eq '}') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            my $top = pop @stack;\n            if ($top ne $closing_brackets{$ch}) {\n                return 0;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while ($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            my $top = pop @stack;\n            if ($top eq '(' && $c ne ')') {\n                $balanced = 0;\n                last;\n            } elsif ($top eq '[' && $c ne ']') {\n                $balanced = 0;\n                last;\n            } elsif ($top eq '{' && $c ne '}') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if ($balanced && scalar @stack == 0) {\n        return 1;\n    } else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            if (@stack && $map{$stack[-1]} eq $char) {\n                pop @stack;\n            }\n            else {\n                return 0;\n            }\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my $i = 0;\n    my $len = length($exp);\n    while($i < $len) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if(($c eq ')' && $top ne '(') || ($c eq '}' && $top ne '{') || ($c eq ']' && $top ne '[')) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $last = pop @stack;\n            if ($brackets{$last} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if(($c eq ')' && $top ne '(') || ($c eq '}' && $top ne '{') || ($c eq ']' && $top ne '[')) {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if($balanced && scalar(@stack) == 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (scalar @stack > 0) {\n            my $last = pop @stack;\n            return 0 if $brackets{$last} ne $char;\n        }\n        else {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %pairs = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')'\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '{' || $char eq '[' || $char eq '(') {\n            push @stack, $char;\n        }\n        elsif ($char eq '}' || $char eq ']' || $char eq ')') {\n            my $last = pop @stack;\n            if ($pairs{$last} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my $stack = [];\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @$stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @$stack;\n            if ($map{$top} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return scalar @$stack == 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    foreach my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '[' || $char eq '{') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq ']' || $char eq '}') {\n            my $top = pop @stack;\n            if ($pairs{$top} ne $char) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if ($balanced && !@stack) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $char = substr($exp, $i, 1);\n        if($char eq '(' || $char eq '{' || $char eq '[') {\n            push(@stack, $char);\n        }\n        elsif($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop(@stack);\n            if($top eq '(' && $char ne ')') {\n                $balanced = 0;\n                last;\n            }\n            elsif($top eq '{' && $char ne '}') {\n                $balanced = 0;\n                last;\n            }\n            elsif($top eq '[' && $char ne ']') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack = ();\n    my $balanced = 1;\n    for my $ch (split //, $exp) {\n        if ($ch eq '(') {\n            push @stack, $ch;\n        } elsif ($ch eq ')') {\n            if (scalar @stack == 0) {\n                $balanced = 0;\n                last;\n            }\n            pop @stack;\n        }\n    }\n    $balanced = 0 if scalar @stack > 0;\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            if(scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop(@stack);\n            if($c eq ')' && $top ne '(') {\n                $balanced = 0;\n                last;\n            }\n            if($c eq '}' && $top ne '{') {\n                $balanced = 0;\n                last;\n            }\n            if($c eq ']' && $top ne '[') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if($balanced == 1 && scalar(@stack) == 0) {\n        return 1;\n    } else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while ($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (scalar(@stack) == 0 || pop(@stack) ne '(') {\n                $balanced = 0;\n                last;\n            }\n        } elsif ($c eq '}') {\n            if (scalar(@stack) == 0 || pop(@stack) ne '{') {\n                $balanced = 0;\n                last;\n            }\n        } elsif ($c eq ']') {\n            if (scalar(@stack) == 0 || pop(@stack) ne '[') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if (scalar(@stack) != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '[' || $char eq '{') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq ']' || $char eq '}') {\n            my $top = pop @stack;\n            if ($brackets{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %pairs = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    for my $char (split //, $exp) {\n        if (exists $pairs{$char}) {\n            push @stack, $char;\n        }\n        elsif (scalar @stack) {\n            my $last = pop @stack;\n            return 0 if $pairs{$last} ne $char;\n        }\n        else {\n            return 0;\n        }\n    }\n    return 0 if scalar @stack;\n    return 1;\n}",
    "    my @stack;\n    my @exp_arr = split(//, $exp);\n    foreach my $char (@exp_arr) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push(@stack, $char);\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop(@stack);\n            if ($top eq '(' && $char ne ')') {\n                return 0;\n            }\n            elsif ($top eq '{' && $char ne '}') {\n                return 0;\n            }\n            elsif ($top eq '[' && $char ne ']') {\n                return 0;\n            }\n        }\n    }\n    if (scalar(@stack) == 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            if(scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop(@stack);\n            if($c eq ')' && $top ne '(') {\n                $balanced = 0;\n                last;\n            }\n            elsif($c eq '}' && $top ne '{') {\n                $balanced = 0;\n                last;\n            }\n            elsif($c eq ']' && $top ne '[') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            my $top = pop @stack;\n            if ($pairs{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            if(scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop(@stack);\n            if(!(($top eq '(' && $c eq ')') || ($top eq '{' && $c eq '}') || ($top eq '[' && $c eq ']'))) {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $i = 0;\n    my $len = length($exp);\n    while($i < $len) {\n        my $char = substr($exp, $i, 1);\n        if($char eq '(' || $char eq '{' || $char eq '[') {\n            push(@stack, $char);\n        } elsif($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop(@stack);\n            if(!$top) {\n                return 0;\n            }\n            if($top eq '(' && $char ne ')') {\n                return 0;\n            }\n            if($top eq '{' && $char ne '}') {\n                return 0;\n            }\n            if($top eq '[' && $char ne ']') {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    if(@stack) {\n        return 0;\n    }\n    return 1;\n}",
    "\n    my @stack;\n    my $balanced = 1;\n    my %pairs = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            my $last = pop @stack;\n            if ($pairs{$last} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    my %closing_brackets = reverse %brackets;\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (exists $closing_brackets{$char}) {\n            my $last_bracket = pop @stack;\n            return 0 if $brackets{$last_bracket} ne $char;\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %map = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}'\n    );\n    for my $c (split //, $exp) {\n        if (exists $map{$c}) {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            my $top = pop @stack;\n            if ($map{$top} ne $c) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if (@stack) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while ($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if ($top eq '(' && $c ne ')') {\n                $balanced = 0;\n                last;\n            }\n            elsif ($top eq '{' && $c ne '}') {\n                $balanced = 0;\n                last;\n            }\n            elsif ($top eq '[' && $c ne ']') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if ($balanced && scalar(@stack) == 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %brackets = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '[' || $char eq '{') {\n            push @stack, $char;\n        } elsif ($char eq ')' || $char eq ']' || $char eq '}') {\n            my $top = pop @stack;\n            if ($char ne $brackets{$top}) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if ($balanced && !@stack) {\n        return 1;\n    } else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '[' || $char eq '{') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq ']' || $char eq '}') {\n            my $top = pop @stack;\n            if ($brackets{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my @exp_arr = split(//, $exp);\n    foreach my $char (@exp_arr) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            if (scalar(@stack) == 0) {\n                return 0;\n            }\n            my $top = pop @stack;\n            if ($char eq ')' && $top ne '(') {\n                return 0;\n            }\n            elsif ($char eq '}' && $top ne '{') {\n                return 0;\n            }\n            elsif ($char eq ']' && $top ne '[') {\n                return 0;\n            }\n        }\n    }\n    if (scalar(@stack) == 0) {\n        return 1;\n    }\n    return 0;\n}",
    "    my @stack = ();\n    my %brackets = (\n        '{' => '}',\n        '(' => ')',\n        '[' => ']',\n    );\n    my %closing_brackets = (\n        '}' => 1,\n        ')' => 1,\n        ']' => 1,\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (exists $closing_brackets{$char}) {\n            my $last_bracket = pop @stack;\n            return 0 if $brackets{$last_bracket} ne $char;\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my @exp = split(//,$exp);\n    foreach my $ch (@exp) {\n        if($ch eq '(') {\n            push(@stack,$ch);\n        }\n        elsif($ch eq ')') {\n            if(scalar(@stack) == 0) {\n                return 0;\n            }\n            else {\n                pop(@stack);\n            }\n        }\n    }\n    if(scalar(@stack) == 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    my $stack = [];\n    my $balanced = 1;\n    foreach my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @$stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            if (scalar @$stack == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop @$stack;\n            if ($c eq ')' && $top ne '(') {\n                $balanced = 0;\n                last;\n            }\n            if ($c eq '}' && $top ne '{') {\n                $balanced = 0;\n                last;\n            }\n            if ($c eq ']' && $top ne '[') {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if (scalar @$stack != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            my $top = pop @stack;\n            return 0 if !$top || $pairs{$top} ne $c;\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '{' || $char eq '[' || $char eq '(') {\n            push @stack, $char;\n        }\n        elsif ($char eq '}' || $char eq ']' || $char eq ')') {\n            if ($brackets{pop @stack} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if(exists $pairs{$c}) {\n            push @stack, $c;\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            return 0 if $pairs{pop @stack} ne $c;\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %brackets = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    my @chars = split(//, $exp);\n    for my $char (@chars) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        } else {\n            my $top = pop @stack;\n            if ($brackets{$top} ne $char) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if ($balanced && @stack == 0) {\n        return 1;\n    } else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            if (@stack) {\n                my $last = pop @stack;\n                if ($brackets{$last} ne $c) {\n                    return 0;\n                }\n            }\n            else {\n                return 0;\n            }\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if (exists $pairs{$c}) {\n            push @stack, $c;\n        }\n        elsif (scalar @stack == 0) {\n            return 0;\n        }\n        elsif ($pairs{$stack[-1]} eq $c) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my $i = 0;\n    my $len = length($exp);\n    while($i < $len) {\n        my $char = substr($exp, $i, 1);\n        if($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if(!$top) {\n                return 0;\n            }\n            if($char eq ')' && $top ne '(') {\n                return 0;\n            }\n            if($char eq '}' && $top ne '{') {\n                return 0;\n            }\n            if($char eq ']' && $top ne '[') {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my @chars = split('', $exp);\n    foreach my $char (@chars) {\n        if ($char eq '(') {\n            push(@stack, $char);\n        } elsif ($char eq ')') {\n            if (scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            }\n            pop(@stack);\n        }\n    }\n    if (scalar(@stack) != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    for my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (@stack == 0) {\n                return 0;\n            } else {\n                pop @stack;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } else {\n            if($c eq ')' && pop(@stack) ne '(') {\n                return 0;\n            } elsif($c eq '}' && pop(@stack) ne '{') {\n                return 0;\n            } elsif($c eq ']' && pop(@stack) ne '[') {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %brackets = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        } else {\n            my $last = pop @stack;\n            if ($brackets{$last} ne $char) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %closing_braces = (\n        ')' => '(',\n        ']' => '[',\n        '}' => '{',\n    );\n    my %opening_braces = reverse %closing_braces;\n    for my $c (split //, $exp) {\n        if (exists $opening_braces{$c}) {\n            push @stack, $c;\n        }\n        elsif (exists $closing_braces{$c}) {\n            my $top = pop @stack;\n            if ($top ne $closing_braces{$c}) {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        if(substr($exp, $i, 1) eq '(') {\n            push @stack, '(';\n        }\n        elsif(substr($exp, $i, 1) eq ')') {\n            if(scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            }\n            else {\n                pop @stack;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $i = 0;\n    my $len = length($exp);\n    while($i < $len) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            if(scalar(@stack) == 0) {\n                return 0;\n            }\n            my $last = pop(@stack);\n            if(($last eq '(' && $c ne ')') || ($last eq '{' && $c ne '}') || ($last eq '[' && $c ne ']')) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) == 0) {\n        return 1;\n    }\n    return 0;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            return 0 if !@stack;\n            my $top = pop @stack;\n            return 0 if $map{$top} ne $c;\n        }\n    }\n    return 0 if @stack;\n    return 1;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            return 0 unless $pairs{$top} eq $c;\n        }\n    }\n    return 0 if @stack;\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %pairs = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    for my $c (split //, $exp) {\n        if (exists $pairs{$c}) {\n            push @stack, $c;\n        }\n        elsif (scalar @stack > 0 && $pairs{$stack[-1]} eq $c) {\n            pop @stack;\n        }\n        else {\n            $balanced = 0;\n            last;\n        }\n    }\n    return $balanced && scalar @stack == 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    foreach my $char (split //, $exp) {\n        if ($char eq '(') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')') {\n            if (scalar @stack == 0) {\n                $balanced = 0;\n                last;\n            }\n            else {\n                pop @stack;\n            }\n        }\n    }\n    if (scalar @stack != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if (exists $pairs{$c}) {\n            push @stack, $c;\n        }\n        elsif (scalar @stack) {\n            my $top = pop @stack;\n            return 0 unless $pairs{$top} eq $c;\n        }\n        else {\n            return 0;\n        }\n    }\n    return 0 if scalar @stack;\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    my @exp = split //, $exp;\n    for my $char (@exp) {\n        if($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif($char eq ')' || $char eq '}' || $char eq ']') {\n            if(@stack == 0) {\n                return 0;\n            }\n            my $top = pop @stack;\n            if($brackets{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    if(@stack == 0) {\n        return 1;\n    }\n    return 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %pairs = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    my @chars = split //, $exp;\n    for my $char (@chars) {\n        if (exists $pairs{$char}) {\n            push @stack, $char;\n        } elsif ($char eq ')' || $char eq ']' || $char eq '}') {\n            my $last = pop @stack;\n            return 0 if $pairs{$last} ne $char;\n        }\n    }\n    return 0 if @stack;\n    return 1;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            my $top = pop @stack;\n            return 0 if !defined $top || $map{$top} ne $c;\n        }\n    }\n    return 0 if @stack;\n    return 1;\n}",
    "    my @stack;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if(($top eq '(' && $c ne ')') || ($top eq '{' && $c ne '}') || ($top eq '[' && $c ne ']')) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    foreach my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (scalar @stack == 0) {\n            return 0;\n        }\n        elsif ($brackets{$stack[-1]} eq $char) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '[' || $c eq '{') {\n            push @stack, $c;\n        } elsif($c eq ')' || $c eq ']' || $c eq '}') {\n            my $top = pop @stack;\n            if(!$top) {\n                $balanced = 0;\n                last;\n            }\n            if($c eq ')' && $top ne '(') {\n                $balanced = 0;\n                last;\n            }\n            if($c eq ']' && $top ne '[') {\n                $balanced = 0;\n                last;\n            }\n            if($c eq '}' && $top ne '{') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar @stack > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %brackets = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (scalar @stack && $char eq $brackets{$stack[-1]}) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n    }\n    return scalar @stack ? 0 : 1;\n}",
    "    my $stack = [];\n    my $balanced = 1;\n    for my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @$stack, $c;\n        }\n        elsif ($c eq ')') {\n            if (scalar @$stack == 0) {\n                $balanced = 0;\n                last;\n            }\n            else {\n                pop @$stack;\n            }\n        }\n    }\n    if (scalar @$stack != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '[' || $char eq '{') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq ']' || $char eq '}') {\n            my $last = pop @stack;\n            return 0 if $brackets{$last} ne $char;\n        }\n    }\n    return 0 if @stack;\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %brackets = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        } elsif ($char eq $brackets{$stack[-1]}) {\n            pop @stack;\n        } else {\n            $balanced = 0;\n            last;\n        }\n    }\n    return $balanced;\n}",
    "    my @stack;\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if (($c eq ')' && $top ne '(') ||\n                ($c eq '}' && $top ne '{') ||\n                ($c eq ']' && $top ne '[')) {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            return 0 if !@stack;\n            my $top = pop @stack;\n            return 0 if $map{$top} ne $c;\n        }\n    }\n    return 0 if @stack;\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')'\n    );\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if(exists $brackets{$c}) {\n            push @stack, $c;\n        }\n        else {\n            my $top = pop @stack;\n            if($brackets{$top} ne $c) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my $len = length($exp);\n    my @stack;\n    my $i = 0;\n    while($i < $len) {\n        my $ch = substr($exp, $i, 1);\n        if($ch eq '(' || $ch eq '{' || $ch eq '[') {\n            push(@stack, $ch);\n        }\n        elsif($ch eq ')' || $ch eq '}' || $ch eq ']') {\n            if(scalar(@stack) == 0) {\n                return 0;\n            }\n            my $top = pop(@stack);\n            if(($top eq '(' && $ch ne ')') || ($top eq '{' && $ch ne '}') || ($top eq '[' && $ch ne ']')) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) == 0) {\n        return 1;\n    }\n    return 0;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            return 0 if !defined $top || $pairs{$top} ne $char;\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my @exp = split //, $exp;\n    for my $c (@exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if (($top eq '(' && $c ne ')') || ($top eq '{' && $c ne '}') || ($top eq '[' && $c ne ']')) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    for my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (@stack) {\n                pop @stack;\n            } else {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if (@stack) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $c (split //, $exp) {\n        if (exists $pairs{$c}) {\n            push @stack, $c;\n        } elsif (scalar @stack > 0 && $pairs{$stack[-1]} eq $c) {\n            pop @stack;\n        } else {\n            return 0;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if (!defined $top || $map{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    foreach my $char (split //, $exp) {\n        if ($char eq '(') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            else {\n                pop @stack;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '[' || $char eq '{') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq ']' || $char eq '}') {\n            my $top = pop @stack;\n            return 0 if !$top || $pairs{$top} ne $char;\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my %closing = (\n        ')' => '(',\n        ']' => '[',\n        '}' => '{',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            return 0 if !@stack || $stack[-1] ne $closing{$c};\n            pop @stack;\n        }\n    }\n    return !@stack;\n}",
    "    my @stack;\n    for my $char (split //, $exp) {\n        if ($char eq '(' or $char eq '{' or $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' or $char eq '}' or $char eq ']') {\n            my $top = pop @stack;\n            if ($top eq '(' and $char ne ')') {\n                return 0;\n            }\n            elsif ($top eq '{' and $char ne '}') {\n                return 0;\n            }\n            elsif ($top eq '[' and $char ne ']') {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %pairs = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')'\n    );\n    my $i = 0;\n    while ($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if (exists $pairs{$c}) {\n            push @stack, $c;\n        } elsif (scalar @stack > 0 && $pairs{$stack[-1]} eq $c) {\n            pop @stack;\n        } else {\n            return 0;\n        }\n        $i++;\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %closing_brackets = (\n        ')' => '(',\n        '}' => '{',\n        ']' => '[',\n    );\n    for my $char (split //, $exp) {\n        if ($char =~ /[\\(\\{\\[]/) {\n            push @stack, $char;\n        }\n        elsif ($char =~ /[\\)\\}\\]]/) {\n            if ($stack[-1] eq $closing_brackets{$char}) {\n                pop @stack;\n            }\n            else {\n                return 0;\n            }\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my %closing = ( ')' => '(', '}' => '{', ']' => '[' );\n    my %opening = reverse %closing;\n    for my $c (split //, $exp) {\n        if (exists $opening{$c}) {\n            push @stack, $c;\n        } elsif (exists $closing{$c}) {\n            if ($stack[-1] eq $closing{$c}) {\n                pop @stack;\n            } else {\n                return 0;\n            }\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my %closing = (\n        ')' => '(',\n        '}' => '{',\n        ']' => '[',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            return 0 if $top ne $closing{$c};\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (scalar @stack && $brackets{$stack[-1]} eq $char) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my $i = 0;\n    my $len = length($exp);\n    while ($i < $len) {\n        my $c = substr($exp, $i, 1);\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if ($c eq ')' && $top ne '(') {\n                return 0;\n            } elsif ($c eq '}' && $top ne '{') {\n                return 0;\n            } elsif ($c eq ']' && $top ne '[') {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    my @chars = split(//, $exp);\n    foreach my $char (@chars) {\n        if (exists $brackets{$char}) {\n            push(@stack, $char);\n        }\n        elsif (scalar @stack > 0) {\n            my $last = pop(@stack);\n            if ($brackets{$last} ne $char) {\n                $balanced = 0;\n                last;\n            }\n        }\n        else {\n            $balanced = 0;\n            last;\n        }\n    }\n    $balanced = 0 if scalar @stack > 0;\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    for my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (scalar @stack == 0) {\n                $balanced = 0;\n                last;\n            }\n            pop @stack;\n        }\n    }\n    if (scalar @stack != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %brackets = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    my $i = 0;\n    while($i < length($exp)) {\n        my $char = substr($exp, $i, 1);\n        if(exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif($char eq '}' || $char eq ']' || $char eq ')') {\n            my $last = pop @stack;\n            if($brackets{$last} ne $char) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack;\n    my @exp_arr = split(//, $exp);\n    foreach my $ch (@exp_arr) {\n        if ($ch eq '(' || $ch eq '[' || $ch eq '{') {\n            push(@stack, $ch);\n        }\n        elsif ($ch eq ')' || $ch eq ']' || $ch eq '}') {\n            if (scalar(@stack) == 0) {\n                return 0;\n            }\n            my $top = pop(@stack);\n            if ($ch eq ')' && $top ne '(') {\n                return 0;\n            }\n            elsif ($ch eq ']' && $top ne '[') {\n                return 0;\n            }\n            elsif ($ch eq '}' && $top ne '{') {\n                return 0;\n            }\n        }\n    }\n    if (scalar(@stack) != 0) {\n        return 0;\n    }\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            if(scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop(@stack);\n            if($top eq '(' && $c ne ')') {\n                $balanced = 0;\n                last;\n            } elsif($top eq '{' && $c ne '}') {\n                $balanced = 0;\n                last;\n            } elsif($top eq '[' && $c ne ']') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '[' || $char eq '{') {\n            push @stack, $char;\n        } elsif ($char eq ')' || $char eq ']' || $char eq '}') {\n            my $top = pop @stack;\n            if ($top eq '(' && $char ne ')') {\n                return 0;\n            } elsif ($top eq '[' && $char ne ']') {\n                return 0;\n            } elsif ($top eq '{' && $char ne '}') {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    foreach my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (scalar @stack == 0) {\n                $balanced = 0;\n                last;\n            } else {\n                pop @stack;\n            }\n        }\n    }\n    if (scalar @stack != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}'\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            my $top = pop @stack;\n            if ($c ne $pairs{$top}) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if (@stack) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my @exp = split //, $exp;\n    for my $char (@exp) {\n        if ($char eq '(') {\n            push @stack, $char;\n        } elsif ($char eq ')') {\n            if (scalar @stack == 0) {\n                return 0;\n            } else {\n                pop @stack;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if (exists $map{$c}) {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            return 0 if $map{pop @stack} ne $c;\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (scalar @stack) {\n            my $last = pop @stack;\n            if ($brackets{$last} ne $char) {\n                return 0;\n            }\n        }\n        else {\n            return 0;\n        }\n    }\n    return scalar @stack ? 0 : 1;\n}",
    "    my @stack;\n    my $i = 0;\n    my $len = length($exp);\n    while($i < $len) {\n        my $char = substr($exp, $i, 1);\n        if($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif($char eq ')' || $char eq '}' || $char eq ']') {\n            if(scalar(@stack) == 0) {\n                return 0;\n            }\n            my $top = pop @stack;\n            if($char eq ')' && $top ne '(') {\n                return 0;\n            }\n            if($char eq '}' && $top ne '{') {\n                return 0;\n            }\n            if($char eq ']' && $top ne '[') {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) == 0) {\n        return 1;\n    }\n    return 0;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if (exists $brackets{$c}) {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            return 0 if $c ne $brackets{pop @stack};\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %brackets = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')'\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (scalar @stack == 0 || $brackets{$stack[-1]} ne $char) {\n            $balanced = 0;\n            last;\n        }\n        else {\n            pop @stack;\n        }\n    }\n    $balanced = 0 if scalar @stack > 0;\n    return $balanced;\n}",
    "    my @stack;\n    my %pair = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            return 0 if !@stack;\n            my $top = pop @stack;\n            return 0 if $pair{$top} ne $c;\n        }\n    }\n    return 0 if @stack;\n    return 1;\n}",
    "    my @stack;\n    my $len = length($exp);\n    for(my $i = 0; $i < $len; $i++) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if($top eq '(' && $c ne ')') {\n                return 0;\n            } elsif($top eq '{' && $c ne '}') {\n                return 0;\n            } elsif($top eq '[' && $c ne ']') {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if ($pairs{$top} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my %hash = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            my $top = pop @stack;\n            if ($hash{$top} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my $i = 0;\n    my $len = length($exp);\n    while($i < $len) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if(($top eq '(' && $c ne ')') || ($top eq '{' && $c ne '}') || ($top eq '[' && $c ne ']')) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my $stack = [];\n    my $balanced = 1;\n    my $i = 0;\n    while ($i < length($exp) && $balanced) {\n        my $c = substr($exp, $i, 1);\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push(@$stack, $c);\n        } elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            if (scalar(@$stack) == 0) {\n                $balanced = 0;\n            } else {\n                my $top = pop(@$stack);\n                if ($c eq ')' && $top ne '(') {\n                    $balanced = 0;\n                } elsif ($c eq ']' && $top ne '[') {\n                    $balanced = 0;\n                } elsif ($c eq '}' && $top ne '{') {\n                    $balanced = 0;\n                }\n            }\n        }\n        $i++;\n    }\n    if (scalar(@$stack) > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    foreach my $c (split //, $exp) {\n        if (exists $brackets{$c}) {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            if (scalar @stack == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop @stack;\n            if ($brackets{$top} ne $c) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if (scalar @stack > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if ($map{$top} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $last = pop @stack;\n            return 0 if $brackets{$last} ne $char;\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } else {\n            if(scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop(@stack);\n            if(($c eq ')' && $top ne '(') || ($c eq '}' && $top ne '{') || ($c eq ']' && $top ne '[')) {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if($balanced && scalar(@stack) == 0) {\n        return 1;\n    }\n    return 0;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    my @chars = split //, $exp;\n    for my $char (@chars) {\n        if ($char eq '(' || $char eq '[' || $char eq '{') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq ']' || $char eq '}') {\n            my $last = pop @stack;\n            if ($pairs{$last} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if($c eq ')' && $top ne '(') {\n                $balanced = 0;\n                last;\n            } elsif($c eq '}' && $top ne '{') {\n                $balanced = 0;\n                last;\n            } elsif($c eq ']' && $top ne '[') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar @stack > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $ch (split //, $exp) {\n        if ($ch eq '(' || $ch eq '{' || $ch eq '[') {\n            push @stack, $ch;\n        } elsif ($ch eq ')' || $ch eq '}' || $ch eq ']') {\n            my $top = pop @stack;\n            return 0 if !defined $top || $map{$top} ne $ch;\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my $i;\n    my $top;\n    my $len = length($exp);\n    for($i = 0; $i < $len; $i++) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            if(scalar(@stack) == 0) {\n                return 0;\n            }\n            $top = pop(@stack);\n            if(($top eq '(' && $c ne ')') || ($top eq '{' && $c ne '}') || ($top eq '[' && $c ne ']')) {\n                return 0;\n            }\n        }\n    }\n    if(scalar(@stack) == 0) {\n        return 1;\n    }\n    return 0;\n}",
    "    my @stack;\n    my @exp_arr = split(//, $exp);\n    foreach my $char (@exp_arr) {\n        if ($char eq '(') {\n            push(@stack, $char);\n        }\n        elsif ($char eq ')') {\n            if (scalar(@stack) == 0) {\n                return 0;\n            }\n            else {\n                pop(@stack);\n            }\n        }\n    }\n    if (scalar(@stack) == 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my $i = 0;\n    my $len = length($exp);\n    my $balanced = 1;",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    my $balanced = 1;\n    for my $c (split //, $exp) {\n        if (exists $pairs{$c}) {\n            push @stack, $c;\n        }\n        elsif (scalar @stack > 0) {\n            my $top = pop @stack;\n            if ($pairs{$top} ne $c) {\n                $balanced = 0;\n                last;\n            }\n        }\n        else {\n            $balanced = 0;\n            last;\n        }\n    }\n    $balanced = 0 if scalar @stack > 0;\n    return $balanced;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        } elsif (scalar @stack && $brackets{$stack[-1]} eq $char) {\n            pop @stack;\n        } else {\n            return 0;\n        }\n    }\n    return scalar @stack ? 0 : 1;\n}",
    "    my @stack;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if($top eq '(' && $c ne ')') {\n                return 0;\n            } elsif($top eq '{' && $c ne '}') {\n                return 0;\n            } elsif($top eq '[' && $c ne ']') {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if ($map{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $ch (split //, $exp) {\n        if (exists $brackets{$ch}) {\n            push @stack, $ch;\n        } elsif ($ch eq ')' || $ch eq '}' || $ch eq ']') {\n            my $top = pop @stack;\n            if ($brackets{$top} ne $ch) {\n                return 0;\n            }\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my %braces = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    my $balanced = 1;\n    for my $c (split //, $exp) {\n        if (exists $braces{$c}) {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            if (scalar @stack == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop @stack;\n            if ($braces{$top} ne $c) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if (scalar @stack > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack = ();\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            my $top = pop @stack;\n            if ($brackets{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %hash = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if ($hash{$top} ne $char) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if ($balanced && !@stack) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (scalar @stack) {\n            my $last = pop @stack;\n            if ($brackets{$last} ne $char) {\n                return 0;\n            }\n        }\n        else {\n            return 0;\n        }\n    }\n    return scalar @stack ? 0 : 1;\n}",
    "    my @stack;\n    my @exp = split //, $exp;\n    for my $e (@exp) {\n        if ($e eq '(' || $e eq '{' || $e eq '[') {\n            push @stack, $e;\n        }\n        elsif ($e eq ')' || $e eq '}' || $e eq ']') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            my $top = pop @stack;\n            if ($e eq ')' && $top ne '(') {\n                return 0;\n            }\n            if ($e eq '}' && $top ne '{') {\n                return 0;\n            }\n            if ($e eq ']' && $top ne '[') {\n                return 0;\n            }\n        }\n    }\n    if (scalar @stack == 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my @exp_arr = split(//, $exp);\n    foreach my $char (@exp_arr) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push(@stack, $char);\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop(@stack);\n            if ($top eq '(' && $char ne ')') {\n                return 0;\n            }\n            elsif ($top eq '{' && $char ne '}') {\n                return 0;\n            }\n            elsif ($top eq '[' && $char ne ']') {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            if(scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop(@stack);\n            if($c eq ')' && $top ne '(') {\n                $balanced = 0;\n                last;\n            }\n            elsif($c eq '}' && $top ne '{') {\n                $balanced = 0;\n                last;\n            }\n            elsif($c eq ']' && $top ne '[') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if (!defined $top || $pairs{$top} ne $c) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if (@stack) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if (exists $pairs{$c}) {\n            push @stack, $c;\n        } elsif (scalar @stack > 0 && $pairs{$stack[-1]} eq $c) {\n            pop @stack;\n        } else {\n            return 0;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %hash = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if ($hash{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $char = substr($exp, $i, 1);\n        if($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if(($top eq '(' && $char eq ')') || ($top eq '{' && $char eq '}') || ($top eq '[' && $char eq ']')) {\n                # do nothing\n            }\n            else {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq ']' || $char eq '}') {\n            return 0 if $brackets{pop @stack} ne $char;\n        }\n    }\n    return 0 if @stack;\n    return 1;\n}",
    "    my @stack;\n    for my $ch (split //, $exp) {\n        if ($ch eq '(' || $ch eq '{' || $ch eq '[') {\n            push @stack, $ch;\n        }\n        elsif ($ch eq ')') {\n            if (pop(@stack) ne '(') {\n                return 0;\n            }\n        }\n        elsif ($ch eq '}') {\n            if (pop(@stack) ne '{') {\n                return 0;\n            }\n        }\n        elsif ($ch eq ']') {\n            if (pop(@stack) ne '[') {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my %brackets = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (scalar @stack == 0) {\n            return 0;\n        }\n        elsif ($brackets{$stack[-1]} eq $char) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $ch = substr($exp, $i, 1);\n        if($ch eq '(' || $ch eq '{' || $ch eq '[') {\n            push(@stack, $ch);\n        }\n        elsif($ch eq ')' || $ch eq '}' || $ch eq ']') {\n            my $top = pop(@stack);\n            if(!$top) {\n                $balanced = 0;\n                last;\n            }\n            if($ch eq ')' && $top ne '(') {\n                $balanced = 0;\n                last;\n            }\n            if($ch eq '}' && $top ne '{') {\n                $balanced = 0;\n                last;\n            }\n            if($ch eq ']' && $top ne '[') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if($top eq '(' && $c ne ')') {\n                $balanced = 0;\n                last;\n            } elsif($top eq '{' && $c ne '}') {\n                $balanced = 0;\n                last;\n            } elsif($top eq '[' && $c ne ']') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my @exp = split //, $exp;\n    for my $char (@exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        } elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if ($char eq ')' && $top ne '(') {\n                return 0;\n            } elsif ($char eq '}' && $top ne '{') {\n                return 0;\n            } elsif ($char eq ']' && $top ne '[') {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            if(scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop(@stack);\n            if(($top eq '(' && $c ne ')') || ($top eq '{' && $c ne '}') || ($top eq '[' && $c ne ']')) {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        } elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if ($char ne $brackets{$top}) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %closing = (\n        ')' => '(',\n        ']' => '[',\n        '}' => '{',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            my $last = pop @stack;\n            return 0 if $last ne $closing{$c};\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my $result = 1;\n    for my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (scalar @stack == 0) {\n                $result = 0;\n                last;\n            }\n            pop @stack;\n        }\n    }\n    if (scalar @stack != 0) {\n        $result = 0;\n    }\n    return $result;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        } elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if ($map{$top} ne $char) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    for my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (@stack) {\n                pop @stack;\n            } else {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    $balanced = 0 if @stack;\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            if(scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop(@stack);\n            if(($c eq ')' && $top ne '(') || ($c eq '}' && $top ne '{') || ($c eq ']' && $top ne '[')) {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        } elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $last = pop @stack;\n            if ($brackets{$last} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    my @chars = split(//, $exp);\n    for my $char (@chars) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        } elsif (scalar @stack > 0) {\n            my $last = pop @stack;\n            if ($brackets{$last} ne $char) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    my @exp_arr = split //, $exp;\n    for my $char (@exp_arr) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            my $top = pop @stack;\n            if ($brackets{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return scalar @stack == 0 ? 1 : 0;\n}"
  ]
}