{
  "name": "mbpp_120_max_product_tuple",
  "language": "pl",
  "prompt": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nsub max_product_tuple {\n    my($list1) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_product_tuple;\n        if(eq_deeply($candidate->([[2, 7], [2, 6], [1, 8], [4, 9]]),36)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[10, 20], [15, 2], [5, 10]]),200)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[11, 44], [10, 15], [20, 5], [12, 9]]),484)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $max = 0;\n    my $product = 0;\n    for my $i (0 .. $#{$list1}) {\n        for my $j ($i + 1 .. $#{$list1}) {\n            $product = abs($list1->[$i]->[0] * $list1->[$j]->[0]) + abs($list1->[$i]->[1] * $list1->[$j]->[1]);\n            $max = $product if $product > $max;\n        }\n    }\n    return $max;\n}",
    "    my $max = 0;\n    my $product = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a1 = 0;\n    my $b1 = 0;\n    my $c1 = 0;\n    my $d1 = 0;\n    my $e1 = 0;\n    my $f1 = 0;\n    my $g1 = 0;\n    my $h1 = 0;\n    my $i1 = 0;\n    my $j1 = 0;\n    my $k1 = 0;\n    my $l1 = 0;\n    my $m1 = 0;\n    my $n1 = 0;\n    my $o1 = 0;\n    my $p1 = 0;\n    my $q1 = 0;\n    my $r1 = 0;\n    my $s1 = 0;\n    my $t1 = 0;\n    my $u1 = 0;\n    my $v1 = 0;\n    my $w1 = 0;\n    my $x1 = 0;\n    my $y1 = 0;\n    my $z1 = 0;\n    my $a2 = 0;\n    my $b2 = 0;\n    my $c2 = 0;\n    my $d2 = 0;\n    my $e2 = 0;\n    my $f2 = 0;\n    my $g2 = 0;\n    my $h2 = 0;\n    my $i2 = 0;\n    my $j2 = 0;\n    my $k2 = 0;\n    my $l2 = 0;\n    my $m2 = 0;\n",
    "    my $max = 0;\n    for my $tuple1 (@$list1) {\n        for my $tuple2 (@$list1) {\n            my $product = abs($tuple1->[0] * $tuple2->[0]) + abs($tuple1->[1] * $tuple2->[1]);\n            $max = $product if $product > $max;\n        }\n    }\n    return $max;\n}",
    "    my @list = @$list1;\n    my $max = 0;\n    for(my $i = 0; $i < scalar(@list); $i++) {\n        for(my $j = $i + 1; $j < scalar(@list); $j++) {\n            my $product = abs($list[$i][0] * $list[$i][1] * $list[$j][0] * $list[$j][1]);\n            if($product > $max) {\n                $max = $product;\n            }\n        }\n    }\n    return $max;\n}",
    "    my $max_product = 0;\n    foreach my $tuple1 (@$list1) {\n        foreach my $tuple2 (@$list1) {\n            my $product = abs($tuple1->[0] * $tuple2->[0]) + abs($tuple1->[1] * $tuple2->[1]);\n            $max_product = $product if $product > $max_product;\n        }\n    }\n    return $max_product;\n}",
    "    my $max = 0;\n    my $product = 0;\n    my $size = @$list1;\n    for (my $i = 0; $i < $size; $i++) {\n        for (my $j = $i + 1; $j < $size; $j++) {\n            $product = abs($list1->[$i]->[0] * $list1->[$j]->[0]) + abs($list1->[$i]->[1] * $list1->[$j]->[1]);\n            if ($product > $max) {\n                $max = $product;\n            }\n        }\n    }\n    return $max;\n}",
    "    my $max = 0;\n    for my $i (0 .. $#$list1) {\n        for my $j ($i+1 .. $#$list1) {\n            my $product = abs($list1->[$i]->[0] * $list1->[$j]->[0]) + abs($list1->[$i]->[1] * $list1->[$j]->[1]);\n            $max = $product if $product > $max;\n        }\n    }\n    return $max;\n}",
    "    my $max_product = 0;\n    for (my $i = 0; $i < scalar(@$list1); $i++) {\n        for (my $j = $i + 1; $j < scalar(@$list1); $j++) {\n            my $product = abs($list1->[$i]->[0] * $list1->[$j]->[0]) + abs($list1->[$i]->[1] * $list1->[$j]->[1]);\n            $max_product = $product if $product > $max_product;\n        }\n    }\n    return $max_product;\n}",
    "    my $max = 0;\n    for my $i (0 .. $#{$list1}) {\n        for my $j ($i+1 .. $#{$list1}) {\n            my $product = abs($list1->[$i]->[0] * $list1->[$j]->[0]) + abs($list1->[$i]->[1] * $list1->[$j]->[1]);\n            $max = $product if $product > $max;\n        }\n    }\n    return $max;\n}",
    "    my $max_product = 0;\n    for my $i (0 .. $#{$list1}) {\n        for my $j ($i + 1 .. $#{$list1}) {\n            my $product = $list1->[$i] * $list1->[$j];\n            $max_product = $product if $product > $max_product;\n        }\n    }\n    return $max_product;\n}",
    "    my $max_product = 0;\n    my $product;\n    for my $i (0 .. $#{$list1}) {\n        for my $j ($i+1 .. $#{$list1}) {\n            $product = abs($list1->[$i]->[0] * $list1->[$j]->[0]) + abs($list1->[$i]->[1] * $list1->[$j]->[1]);\n            $max_product = $product if $product > $max_product;\n        }\n    }\n    return $max_product;\n}",
    "    my $max = 0;\n    for my $i (0 .. $#{$list1}) {\n        for my $j ($i+1 .. $#{$list1}) {\n            my $product = abs($list1->[$i]->[0] * $list1->[$j]->[0]) + abs($list1->[$i]->[1] * $list1->[$j]->[1]);\n            $max = $product if $product > $max;\n        }\n    }\n    return $max;\n}",
    "    my $max = 0;\n    for my $i (0 .. $#{$list1}) {\n        for my $j ($i+1 .. $#{$list1}) {\n            my $product = abs($list1->[$i]->[0] * $list1->[$j]->[0]) + abs($list1->[$i]->[1] * $list1->[$j]->[1]);\n            $max = $product if $product > $max;\n        }\n    }\n    return $max;\n}",
    "    my @list = @$list1;\n    my $max = 0;\n    my $product = 0;\n    for(my $i=0; $i<@list; $i++) {\n        for(my $j=$i+1; $j<@list; $j++) {\n            $product = abs($list[$i][0] * $list[$j][0]) + abs($list[$i][1] * $list[$j][1]);\n            if($product > $max) {\n                $max = $product;\n            }\n        }\n    }\n    return $max;\n}",
    "    my $max_product = 0;\n    my $product = 0;\n    my $i = 0;\n    my $j = 0;\n    my $size = @$list1;\n    for($i = 0; $i < $size; $i++) {\n        for($j = $i + 1; $j < $size; $j++) {\n            $product = abs($list1->[$i]->[0] * $list1->[$i]->[1] * $list1->[$j]->[0] * $list1->[$j]->[1]);\n            if($product > $max_product) {\n                $max_product = $product;\n            }\n        }\n    }\n    return $max_product;\n}",
    "    my $max = 0;\n    for my $i (0 .. $#{$list1}) {\n        for my $j ($i+1 .. $#{$list1}) {\n            my $prod = abs($list1->[$i]->[0] * $list1->[$j]->[0]) + abs($list1->[$i]->[1] * $list1->[$j]->[1]);\n            $max = $prod if $prod > $max;\n        }\n    }\n    return $max;\n}",
    "    my $max_product = 0;\n    for my $i (0 .. $#{$list1}) {\n        for my $j ($i+1 .. $#{$list1}) {\n            my $product = abs($list1->[$i][0] * $list1->[$j][0]) + abs($list1->[$i][1] * $list1->[$j][1]);\n            $max_product = $product if $product > $max_product;\n        }\n    }\n    return $max_product;\n}",
    "    my $max = 0;\n    for my $tuple1 (@$list1) {\n        for my $tuple2 (@$list1) {\n            my $product = abs($tuple1->[0] * $tuple2->[0]) + abs($tuple1->[1] * $tuple2->[1]);\n            $max = $product if $product > $max;\n        }\n    }\n    return $max;\n}",
    "    my $max_product = 0;\n    my $product = 0;\n    my $size = scalar @{$list1};\n    for (my $i = 0; $i < $size; $i++) {\n        for (my $j = $i + 1; $j < $size; $j++) {\n            $product = abs($list1->[$i][0] * $list1->[$j][0]) + abs($list1->[$i][1] * $list1->[$j][1]);\n            if ($product > $max_product) {\n                $max_product = $product;\n            }\n        }\n    }\n    return $max_product;\n}",
    "    my $max_product = 0;\n    for my $i (0 .. $#{$list1}) {\n        for my $j ($i+1 .. $#{$list1}) {\n            my $product = abs($list1->[$i]->[0] * $list1->[$j]->[0]) + abs($list1->[$i]->[1] * $list1->[$j]->[1]);\n            $max_product = $product if $product > $max_product;\n        }\n    }\n    return $max_product;\n}"
  ]
}