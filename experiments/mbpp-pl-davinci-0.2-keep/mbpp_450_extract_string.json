{
  "name": "mbpp_450_extract_string",
  "language": "pl",
  "prompt": "# Write a function to extract specified size of strings from a given list of string values.\nsub extract_string {\n    my($str, $l) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&extract_string;\n        if(eq_deeply($candidate->([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @str = @$str;\n    my @extract_str;\n    foreach my $s (@str) {\n        if (length($s) == $l) {\n            push(@extract_str, $s);\n        }\n    }\n    return @extract_str;\n}",
    "    my @str_list = @$str;\n    my @new_str_list;\n    foreach my $str (@str_list) {\n        if (length($str) == $l) {\n            push @new_str_list, $str;\n        }\n    }\n    return @new_str_list;\n}",
    "    my @str_list = @$str;\n    my @new_list;\n    foreach my $s (@str_list) {\n        if (length($s) == $l) {\n            push @new_list, $s;\n        }\n    }\n    return @new_list;\n}",
    "    my @str = @$str;\n    my @new_str;\n    foreach my $s (@str) {\n        if (length($s) == $l) {\n            push @new_str, $s;\n        }\n    }\n    return @new_str;\n}",
    "    my @str = @$str;\n    my @new_str;\n    foreach my $str (@str) {\n        if (length($str) == $l) {\n            push @new_str, $str;\n        }\n    }\n    return @new_str;\n}",
    "    my @str_list = @$str;\n    my @ext_str;\n    foreach my $str (@str_list) {\n        if (length($str) == $l) {\n            push @ext_str, $str;\n        }\n    }\n    return @ext_str;\n}",
    "    my @str_list = @$str;\n    my @new_list;\n    foreach my $s (@str_list) {\n        if (length($s) == $l) {\n            push @new_list, $s;\n        }\n    }\n    return @new_list;\n}",
    "    my @str = @$str;\n    my @new_str;\n    foreach my $s (@str) {\n        if (length($s) == $l) {\n            push @new_str, $s;\n        }\n    }\n    return @new_str;\n}",
    "    my @str = split(/\\s+/, $str);\n    my @new_str;\n    foreach my $s (@str) {\n        if (length($s) == $l) {\n            push @new_str, $s;\n        }\n    }\n    return @new_str;\n}",
    "    my @str_list = @$str;\n    my @extracted_str;\n    foreach my $s (@str_list) {\n        if (length($s) == $l) {\n            push @extracted_str, $s;\n        }\n    }\n    return @extracted_str;\n}",
    "    my @str_list = @$str;\n    my @new_list;\n    foreach my $s (@str_list) {\n        if (length($s) == $l) {\n            push @new_list, $s;\n        }\n    }\n    return @new_list;\n}",
    "    my @str = @$str;\n    my @extract;\n    foreach my $s (@str) {\n        if (length($s) == $l) {\n            push @extract, $s;\n        }\n    }\n    return @extract;\n}",
    "    my @list = @$str;\n    my @new_list = ();\n    foreach my $i (@list) {\n        if (length($i) == $l) {\n            push @new_list, $i;\n        }\n    }\n    return @new_list;\n}",
    "    my @str_list = @$str;\n    my @extracted_str;\n    foreach my $str (@str_list) {\n        if (length($str) == $l) {\n            push @extracted_str, $str;\n        }\n    }\n    return @extracted_str;\n}",
    "    my @str = split(/\\s+/, $str);\n    my @str_new = ();\n    foreach my $s (@str) {\n        if (length($s) > $l) {\n            push @str_new, substr($s, 0, $l);\n        } else {\n            push @str_new, $s;\n        }\n    }\n    return join(\" \", @str_new);\n}",
    "    my @str = @$str;\n    my @new_str;\n    foreach my $s (@str) {\n        if (length($s) == $l) {\n            push @new_str, $s;\n        }\n    }\n    return @new_str;\n}",
    "    my @list = @$str;\n    my @new_list;\n    foreach my $s (@list) {\n        if (length($s) == $l) {\n            push @new_list, $s;\n        }\n    }\n    return @new_list;\n}",
    "    my $str_len = length($str);\n    if($str_len > $l) {\n        $str = substr($str, 0, $l);\n    }\n    return $str;\n}",
    "    my @arr = split(/\\s+/, $str);\n    my @res;\n    foreach my $s (@arr) {\n        push @res, $s if length($s) == $l;\n    }\n    return @res;\n}",
    "    my @str = @$str;\n    my @new_str;\n    foreach my $s (@str) {\n        if (length($s) == $l) {\n            push @new_str, $s;\n        }\n    }\n    return @new_str;\n}"
  ]
}