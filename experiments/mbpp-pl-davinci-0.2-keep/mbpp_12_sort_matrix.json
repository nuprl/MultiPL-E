{
  "name": "mbpp_12_sort_matrix",
  "language": "pl",
  "prompt": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\nsub sort_matrix {\n    my($M) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_matrix;\n        if(eq_deeply($candidate->([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @sorted = sort {\n        my $sum_a = sum(@{$M->[$a]});\n        my $sum_b = sum(@{$M->[$b]});\n        $sum_a <=> $sum_b;\n    } 0..$#$M;\n    return [@{$M}[@sorted]];\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted_rows = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted_rows;\n}",
    "    my @rows = @$M;\n    my @sorted = sort {sum(@$a) <=> sum(@$b)} @rows;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } map { [sum(@$_), $_] } @$M;\n    return [map { $_->[1] } @sorted];\n}",
    "    my @sorted = sort { sum(@{$M->[$a]}) <=> sum(@{$M->[$b]}) } 0 .. $#{$M};\n    return [@{$M}[@sorted]];\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum_a = 0;\n        my $sum_b = 0;\n        for my $i (0 .. $#{$a}) {\n            $sum_a += $a->[$i];\n            $sum_b += $b->[$i];\n        }\n        $sum_a <=> $sum_b;\n    } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @rows = @$M;\n    my @sorted = sort { sum(@$a) <=> sum(@$b) } @rows;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum_a = sum(@$a);\n        my $sum_b = sum(@$b);\n        $sum_a <=> $sum_b;\n    } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } map { [sum(@$_), $_] } @$M;\n    return [ map { $_->[1] } @sorted ];\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } map { [sum(@$_), $_] } @$M;\n    return [ map { $_->[1] } @sorted ];\n}",
    "    my $n = scalar(@$M);\n    my $m = scalar(@{$M->[0]});\n    my @row_sums = map { my $sum = 0; $sum += $_ for @$_; $sum } @$M;\n    my @sorted_rows = sort { $row_sums[$a] <=> $row_sums[$b] } 0 .. $n - 1;\n    my @sorted_matrix = map { $M->[$_] } @sorted_rows;\n    return \\@sorted_matrix;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } map { [ sum(@$_), $_ ] } @$M;\n    return [ map { $_->[1] } @sorted ];\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum_a = sum(@{$M->[$a]});\n        my $sum_b = sum(@{$M->[$b]});\n        $sum_a <=> $sum_b;\n    } 0..$#$M;\n    return [@{$M}[@sorted]];\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } map { [sum(@$_), $_] } @$M;\n    return [ map { $_->[1] } @sorted ];\n}",
    "    my @sorted = sort {\n        my $sum_a = 0;\n        my $sum_b = 0;\n        for my $i (0..$#{$a}) {\n            $sum_a += $a->[$i];\n            $sum_b += $b->[$i];\n        }\n        $sum_a <=> $sum_b;\n    } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } map { [ sum(@$_), $_ ] } @$M;\n    return [ map { $_->[1] } @sorted ];\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum_a = sum(@{$M->[$a]});\n        my $sum_b = sum(@{$M->[$b]});\n        $sum_a <=> $sum_b;\n    } 0 .. $#$M;\n    return [@{$M}[@sorted]];\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @rows = @$M;\n    my @sorted = sort { sum(@$a) <=> sum(@$b) } @rows;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @rows = @$M;\n    my @sorted = sort { sum(@$a) <=> sum(@$b) } @rows;\n    return \\@sorted;\n}",
    "    my $n = @$M;\n    my @sums = map { sum(@$_) } @$M;\n    my @idx = sort { $sums[$a] <=> $sums[$b] } 0..$n-1;\n    my @sorted = map { $M->[$_] } @idx;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my $n = @$M;\n    my @indices = (0..$n-1);\n    @indices = sort {\n        my $sum_a = 0;\n        my $sum_b = 0;\n        for my $i (0..$n-1) {\n            $sum_a += $M->[$a][$i];\n            $sum_b += $M->[$b][$i];\n        }\n        $sum_a <=> $sum_b;\n    } @indices;\n    my @sorted = map { $M->[$_] } @indices;\n    return \\@sorted;\n}",
    "    my $n = @$M;\n    my $m = @{$M->[0]};\n    my @sums = map { sum(@$_) } @$M;\n    my @idx = sort { $sums[$a] <=> $sums[$b] } 0..$n-1;\n    my @sorted = map { $M->[$_] } @idx;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum_a = 0;\n        my $sum_b = 0;\n        for my $i (0..$#{$a}) {\n            $sum_a += $a->[$i];\n            $sum_b += $b->[$i];\n        }\n        $sum_a <=> $sum_b;\n    } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] }\n                 map { [ sum(@$_), $_ ] } @$M;\n    return [ map { $_->[1] } @sorted ];\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my $n = @$M;\n    my $m = @{$M->[0]};\n    my @sums = map { sum(@$_) } @$M;\n    my @indices = sort { $sums[$a] <=> $sums[$b] } 0..$n-1;\n    return [ map { $M->[$_] } @indices ];\n}",
    "    my @M = @$M;\n    my @sorted = sort { $a->[0] <=> $b->[0] } map { [sum(@$_), $_] } @M;\n    return [map { $_->[1] } @sorted];\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my $n = scalar(@$M);\n    my $m = scalar(@{$M->[0]});\n    my @sums;\n    for my $i (0..$n-1) {\n        my $sum = 0;\n        for my $j (0..$m-1) {\n            $sum += $M->[$i][$j];\n        }\n        push @sums, [$sum, $i];\n    }\n    @sums = sort { $a->[0] <=> $b->[0] } @sums;\n    my @sorted_M;\n    for my $i (0..$n-1) {\n        push @sorted_M, $M->[$sums[$i][1]];\n    }\n    return \\@sorted_M;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum_a = 0;\n        my $sum_b = 0;\n        for my $i (0 .. $#{$a}) {\n            $sum_a += $a->[$i];\n            $sum_b += $b->[$i];\n        }\n        $sum_a <=> $sum_b;\n    } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum_a = 0;\n        my $sum_b = 0;\n        for my $i (0 .. $#{$a}) {\n            $sum_a += $a->[$i];\n            $sum_b += $b->[$i];\n        }\n        $sum_a <=> $sum_b;\n    } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @M = @$M;\n    my @sorted = sort { sum(@$a) <=> sum(@$b) } @M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted_rows = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted_rows;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { $M->[$a][0] <=> $M->[$b][0] } (0 .. $#$M);\n    return [ map { $M->[$_] } @sorted ];\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {sum(@$a) <=> sum(@$b)} @$M;\n    return \\@sorted;\n}",
    "    my $n = scalar @$M;\n    my $m = scalar @{$M->[0]};\n    my @sums = map { sum(@$_) } @$M;\n    my @indices = sort { $sums[$a] <=> $sums[$b] } 0 .. $n - 1;\n    my @sorted_M = map { $M->[$_] } @indices;\n    return \\@sorted_M;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum1 = 0;\n        my $sum2 = 0;\n        for my $i (0..$#{$M->[$a]}) {\n            $sum1 += $M->[$a][$i];\n            $sum2 += $M->[$b][$i];\n        }\n        $sum1 <=> $sum2;\n    } 0..$#{$M};\n    return [@sorted];\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } map { [sum(@$_), $_] } @$M;\n    return [map { $_->[1] } @sorted];\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum1 = 0;\n        my $sum2 = 0;\n        for my $i (0 .. $#{$M->[$a]}) {\n            $sum1 += $M->[$a][$i];\n            $sum2 += $M->[$b][$i];\n        }\n        $sum1 <=> $sum2;\n    } 0 .. $#$M;\n    return [@{$M}[@sorted]];\n}",
    "    my @M = @$M;\n    my @sorted = sort {\n        my $sum_a = 0;\n        my $sum_b = 0;\n        for (@$a) { $sum_a += $_ }\n        for (@$b) { $sum_b += $_ }\n        $sum_a <=> $sum_b\n    } @M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum_a = sum(@$a);\n        my $sum_b = sum(@$b);\n        $sum_a <=> $sum_b;\n    } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum_a = 0;\n        my $sum_b = 0;\n        for my $i (0..$#{$a}) {\n            $sum_a += $a->[$i];\n            $sum_b += $b->[$i];\n        }\n        $sum_a <=> $sum_b;\n    } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum_a = sum(@{$M->[$a]});\n        my $sum_b = sum(@{$M->[$b]});\n        $sum_a <=> $sum_b;\n    } 0 .. $#$M;\n    return [@{$M}[@sorted]];\n}",
    "    my @sorted = sort {\n        my $sum_a = 0;\n        my $sum_b = 0;\n        for my $i (0..$#{$a}) {\n            $sum_a += $a->[$i];\n            $sum_b += $b->[$i];\n        }\n        $sum_a <=> $sum_b;\n    } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum_a = sum(@{$M->[$a]});\n        my $sum_b = sum(@{$M->[$b]});\n        $sum_a <=> $sum_b;\n    } 0 .. $#$M;\n    return [@{$M}[@sorted]];\n}",
    "    my @sorted = sort {\n        my $sum_a = sum(@{$M->[$a]});\n        my $sum_b = sum(@{$M->[$b]});\n        $sum_a <=> $sum_b;\n    } 0..$#$M;\n    return [@{$M}[@sorted]];\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @rows = @$M;\n    my @sorted = sort { sum(@$a) <=> sum(@$b) } @rows;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum1 = 0;\n        my $sum2 = 0;\n        for my $i (0..$#{$M->[$a]}) {\n            $sum1 += $M->[$a][$i];\n            $sum2 += $M->[$b][$i];\n        }\n        $sum1 <=> $sum2;\n    } 0..$#{$M};\n    return [@sorted];\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] }\n                 map { [sum(@$_), $_] } @$M;\n    return [ map { $_->[1] } @sorted ];\n}",
    "    my @M = @$M;\n    my @sorted = sort { sum(@$a) <=> sum(@$b) } @M;\n    return \\@sorted;\n}",
    "    my @sorted = map { $_->[0] }\n                 sort { $a->[1] <=> $b->[1] }\n                 map { [$_, sum(@$_)] } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum1 = 0;\n        my $sum2 = 0;\n        for my $i (0..$#{$M->[$a]}) {\n            $sum1 += $M->[$a][$i];\n            $sum2 += $M->[$b][$i];\n        }\n        $sum1 <=> $sum2;\n    } 0..$#{$M};\n    return [@$M[@sorted]];\n}",
    "    my @rows = @$M;\n    my @sorted = sort { sum(@$a) <=> sum(@$b) } @rows;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum_a = sum(@$a);\n        my $sum_b = sum(@$b);\n        $sum_a <=> $sum_b;\n    } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } map { [ sum(@$_), $_ ] } @$M;\n    return [ map { $_->[1] } @sorted ];\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } map { [sum(@$_), $_] } @$M;\n    return [ map { $_->[1] } @sorted ];\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } map { [sum(@$_), $_] } @$M;\n    return [map { $_->[1] } @sorted];\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {sum(@$a) <=> sum(@$b)} @$M;\n    return \\@sorted;\n}",
    "    my $n = scalar(@$M);\n    my @rows = map { [$_, sum(@{$M->[$_]}) ] } (0 .. $n-1);\n    @rows = sort { $a->[1] <=> $b->[1] } @rows;\n    my $M2 = [];\n    for my $i (0 .. $n-1) {\n        $M2->[$i] = $M->[$rows[$i]->[0]];\n    }\n    return $M2;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum_a = sum(@{$M->[$a]});\n        my $sum_b = sum(@{$M->[$b]});\n        $sum_a <=> $sum_b;\n    } 0 .. $#$M;\n    return [@{$M}[@sorted]];\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } map { [ sum(@$_), $_ ] } @$M;\n    return [ map { $_->[1] } @sorted ];\n}",
    "    my @rows = @$M;\n    my @sorted_rows = sort { sum(@$a) <=> sum(@$b) } @rows;\n    return \\@sorted_rows;\n}",
    "    my @sorted = sort {\n        my $sum_a = sum(@$a);\n        my $sum_b = sum(@$b);\n        $sum_a <=> $sum_b;\n    } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {sum(@$a) <=> sum(@$b)} @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum_a = 0;\n        my $sum_b = 0;\n        for my $i (0 .. $#{$a}) {\n            $sum_a += $a->[$i];\n            $sum_b += $b->[$i];\n        }\n        $sum_a <=> $sum_b;\n    } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum_a = 0;\n        my $sum_b = 0;\n        for my $i (0 .. $#{$a}) {\n            $sum_a += $a->[$i];\n            $sum_b += $b->[$i];\n        }\n        $sum_a <=> $sum_b;\n    } @$M;\n    return \\@sorted;\n}",
    "    my @rows = @$M;\n    my @sorted_rows = sort { sum(@$a) <=> sum(@$b) } @rows;\n    return \\@sorted_rows;\n}",
    "    my @M = @$M;\n    my @sorted = sort { sum(@$a) <=> sum(@$b) } @M;\n    return \\@sorted;\n}",
    "\n    my @sorted = sort {\n        my $sum_a = 0;\n        my $sum_b = 0;\n        for my $i (0 .. $#{$a}) {\n            $sum_a += $a->[$i];\n            $sum_b += $b->[$i];\n        }\n        $sum_a <=> $sum_b;\n    } @$M;",
    "    my @M = @$M;\n    my @sorted = sort { sum(@$a) <=> sum(@$b) } @M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my $n = scalar(@$M);\n    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum_a = sum(@{$M->[$a]});\n        my $sum_b = sum(@{$M->[$b]});\n        $sum_a <=> $sum_b;\n    } 0..$#$M;\n    return [@$M[@sorted]];\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum_a = 0;\n        my $sum_b = 0;\n        for my $i (0..$#{$a}) {\n            $sum_a += $a->[$i];\n            $sum_b += $b->[$i];\n        }\n        $sum_a <=> $sum_b;\n    } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum_a = sum(@{$M->[$a]});\n        my $sum_b = sum(@{$M->[$b]});\n        $sum_a <=> $sum_b;\n    } 0 .. $#$M;\n    return [@{$M}[@sorted]];\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @rows = @$M;\n    my @sorted_rows = sort { sum(@$a) <=> sum(@$b) } @rows;\n    return \\@sorted_rows;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } map { [ sum(@$_), $_ ] } @$M;\n    return [ map { $_->[1] } @sorted ];\n}",
    "    my @sorted = sort {\n        my $sum_a = 0;\n        my $sum_b = 0;\n        for my $i (0..$#{$a}) {\n            $sum_a += $a->[$i];\n            $sum_b += $b->[$i];\n        }\n        $sum_a <=> $sum_b;\n    } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted_matrix = sort {\n        my $sum_a = 0;\n        my $sum_b = 0;\n        for my $i (0..$#{$a}) {\n            $sum_a += $a->[$i];\n            $sum_b += $b->[$i];\n        }\n        $sum_a <=> $sum_b;\n    } @$M;\n    return \\@sorted_matrix;\n}",
    "\n    my @sorted = sort {\n        my $sum_a = sum(@{$M->[$a]});\n        my $sum_b = sum(@{$M->[$b]});\n        $sum_a <=> $sum_b;\n    } 0..$#$M;",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } map { [ sum(@$_), $_ ] } @$M;\n    return [ map { $_->[1] } @sorted ];\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @rows = @{$M};\n    my @sorted = sort { sum(@{$a}) <=> sum(@{$b}) } @rows;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum_a = 0;\n        my $sum_b = 0;\n        for my $i (0 .. $#{$a}) {\n            $sum_a += $a->[$i];\n            $sum_b += $b->[$i];\n        }\n        $sum_a <=> $sum_b;\n    } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum1 = 0;\n        my $sum2 = 0;\n        for my $i (0..$#{$M->[$a]}) {\n            $sum1 += $M->[$a][$i];\n            $sum2 += $M->[$b][$i];\n        }\n        $sum1 <=> $sum2;\n    } 0..$#$M;\n    my @sorted_matrix = map { $M->[$_] } @sorted;\n    return \\@sorted_matrix;\n}",
    "    my @sorted = sort {sum(@$a) <=> sum(@$b)} @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } map { [sum(@$_), $_] } @$M;\n    return [map { $_->[1] } @sorted];\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted_rows = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted_rows;\n}",
    "    my @sorted = sort {\n        my $sum_a = sum(@{$M->[$a]});\n        my $sum_b = sum(@{$M->[$b]});\n        $sum_a <=> $sum_b;\n    } 0..$#$M;\n    return [@{$M}[@sorted]];\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } map { [sum(@$_), $_] } @$M;\n    return [map { $_->[1] } @sorted];\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {sum_row($a) <=> sum_row($b)} @$M;\n    return \\@sorted;\n}",
    "    my $n = @$M;\n    my $m = @{$M->[0]};\n    my @sums;\n    for my $i (0..$n-1) {\n        my $sum = 0;\n        for my $j (0..$m-1) {\n            $sum += $M->[$i][$j];\n        }\n        push @sums, $sum;\n    }\n    my @idx = sort { $sums[$a] <=> $sums[$b] } (0..$n-1);\n    my @M;\n    for my $i (0..$n-1) {\n        push @M, [@{$M->[$idx[$i]]}];\n    }\n    return \\@M;\n}",
    "    my @sorted = sort {\n        my $sum_a = 0;\n        my $sum_b = 0;\n        for my $i (0 .. $#{$a}) {\n            $sum_a += $a->[$i];\n            $sum_b += $b->[$i];\n        }\n        $sum_a <=> $sum_b;\n    } @$M;\n    return \\@sorted;\n}",
    "    my @M = @$M;\n    my @rows = map { [$_, sum(@$_)] } @M;\n    my @sorted = sort { $a->[1] <=> $b->[1] } @rows;\n    return [ map { $_->[0] } @sorted ];\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } map { [sum(@$_), $_] } @$M;\n    return [ map { $_->[1] } @sorted ];\n}",
    "    my @rows = @$M;\n    my @sorted = sort { sum(@$a) <=> sum(@$b) } @rows;\n    return \\@sorted;\n}"
  ]
}