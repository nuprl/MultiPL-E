{
  "name": "mbpp_161_remove_elements",
  "language": "pl",
  "prompt": "# Write a function to remove all elements from a given list present in another list.\nsub remove_elements {\n    my($list1, $list2) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_elements;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my %hash = map { $_ => 1 } @$list2;\n    my @result = grep { !$hash{$_} } @$list1;\n    return @result;\n}",
    "    my %hash = map {$_ => 1} @$list2;\n    my @result = grep {!$hash{$_}} @$list1;\n    return @result;\n}",
    "    my @new_list;\n    foreach my $elem (@$list1) {\n        if (!grep {$_ eq $elem} @$list2) {\n            push @new_list, $elem;\n        }\n    }\n    return \\@new_list;\n}",
    "    my %hash = map { $_ => 1 } @$list2;\n    return [ grep { !$hash{$_} } @$list1 ];\n}",
    "    my %hash = map {$_ => 1} @$list2;\n    return [grep {!$hash{$_}} @$list1];\n}",
    "    my %hash = map { $_ => 1 } @$list2;\n    return [ grep { !$hash{$_} } @$list1 ];\n}",
    "    my %hash = map { $_ => 1 } @$list2;\n    my @result = grep { !$hash{$_} } @$list1;\n    return @result;\n}",
    "    my %hash = map { $_ => 1 } @$list2;\n    my @result = grep { !$hash{$_} } @$list1;\n    return @result;\n}",
    "    my %hash = map { $_ => 1 } @$list2;\n    my @result = grep { !$hash{$_} } @$list1;\n    return @result;\n}",
    "    my %hash = map { $_ => 1 } @$list2;\n    my @result = grep { !$hash{$_} } @$list1;\n    return @result;\n}",
    "    my %hash = map { $_ => 1 } @$list2;\n    my @result = grep { not exists $hash{$_} } @$list1;\n    return @result;\n}",
    "    my %hash = map { $_ => 1 } @$list2;\n    return [ grep { !$hash{$_} } @$list1 ];\n}",
    "    my %hash = map { $_ => 1 } @$list2;\n    my @result = grep { !$hash{$_} } @$list1;\n    return @result;\n}",
    "    my %hash = map {$_ => 1} @$list2;\n    my @result = grep {!$hash{$_}} @$list1;\n    return @result;\n}",
    "    my @result = ();\n    foreach my $elem (@$list1) {\n        push @result, $elem unless grep {$_ eq $elem} @$list2;\n    }\n    return @result;\n}",
    "    my %hash = map { $_ => 1 } @$list2;\n    return [ grep { !$hash{$_} } @$list1 ];\n}",
    "    my %hash = map { $_ => 1 } @$list2;\n    my @result = grep { !$hash{$_} } @$list1;\n    return @result;\n}",
    "    my %hash = map { $_ => 1 } @$list2;\n    return [ grep { !$hash{$_} } @$list1 ];\n}",
    "    my @result = ();\n    foreach my $item (@$list1) {\n        if (!grep {$item eq $_} @$list2) {\n            push @result, $item;\n        }\n    }\n    return @result;\n}",
    "    my %hash;\n    foreach my $element (@$list2) {\n        $hash{$element} = 1;\n    }\n    my @result;\n    foreach my $element (@$list1) {\n        push @result, $element unless $hash{$element};\n    }\n    return @result;\n}"
  ]
}