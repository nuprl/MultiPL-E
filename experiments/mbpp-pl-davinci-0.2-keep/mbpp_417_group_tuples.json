{
  "name": "mbpp_417_group_tuples",
  "language": "pl",
  "prompt": "# Write a function to find common first element in given list of tuple.\nsub group_tuples {\n    my($Input) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&group_tuples;\n        if(eq_deeply($candidate->([[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]]),[[\"x\", \"y\", \"z\"], [\"w\", \"t\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]]),[[\"a\", \"b\", \"c\"], [\"d\", \"e\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]]),[[\"f\", \"g\", \"g\"], [\"h\", \"i\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $first = $Input->[0]->[0];\n    my $i = 1;\n    while($i < scalar @$Input) {\n        if($Input->[$i]->[0] ne $first) {\n            return 0;\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my %hash;\n    foreach my $tuple (@$Input) {\n        my $key = $tuple->[0];\n        $hash{$key} = [] unless exists $hash{$key};\n        push @{$hash{$key}}, $tuple;\n    }\n    return \\%hash;\n}",
    "    my %hash;\n    foreach my $tuple (@$Input) {\n        my ($a,$b) = @$tuple;\n        $hash{$a} = [] if not exists $hash{$a};\n        push @{$hash{$a}}, $b;\n    }\n    return \\%hash;\n}",
    "    my %hash;\n    foreach my $tuple (@$Input) {\n        my $key = $tuple->[0];\n        push @{$hash{$key}}, $tuple;\n    }\n    return \\%hash;\n}",
    "    my %hash;\n    foreach my $tuple (@$Input) {\n        $hash{$tuple->[0]}++;\n    }\n    my @common_first_elements = grep { $hash{$_} > 1 } keys %hash;\n    return \\@common_first_elements;\n}",
    "    my @Output;\n    my $i = 0;\n    foreach my $tuple (@$Input) {\n        my $j = 0;\n        foreach my $tuple2 (@$Input) {\n            if ($tuple->[0] eq $tuple2->[0]) {\n                $Output[$i][$j] = $tuple2->[1];\n                $j++;\n            }\n        }\n        $i++;\n    }\n    return \\@Output;\n}",
    "    my %hash;\n    foreach my $tuple (@$Input) {\n        my($key, $value) = @$tuple;\n        push @{$hash{$key}}, $value;\n    }\n    return \\%hash;\n}",
    "    my %hash;\n    my @result;\n    foreach my $tuple (@$Input) {\n        my $key = $tuple->[0];\n        push @{$hash{$key}}, $tuple;\n    }\n    foreach my $key (keys %hash) {\n        push @result, [$key, $hash{$key}];\n    }\n    return @result;\n}",
    "    my $Output = [];\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $flag = 0;\n    my $temp = 0;\n    my $temp1 = 0;\n    my $temp2 = 0;\n    my $temp3 = 0;\n    my $temp4 = 0;\n    my $temp5 = 0;\n    my $temp6 = 0;\n    my $temp7 = 0;\n    my $temp8 = 0;\n    my $temp9 = 0;\n    my $temp10 = 0;\n    my $temp11 = 0;\n    my $temp12 = 0;\n    my $temp13 = 0;\n    my $temp14 = 0;\n    my $temp15 = 0;\n    my $temp16 = 0;\n    my $temp17 = 0;\n    my $temp18 = 0;\n    my $temp19 = 0;\n    my $temp20 = 0;\n    my $temp21 = 0;\n    my $temp22 = 0;\n    my $temp23 = 0;\n    my $temp24 = 0;\n    my $temp25 = 0;\n    my $temp26 = 0;\n    my $temp27 = 0;\n    my $temp28 = 0;\n    my $temp29 = 0;\n    my $temp30 = 0;\n    my $temp31 = 0;\n    my $temp32 = 0;\n    my $temp33 = 0;\n    my $temp34 = 0;\n    my $temp35 = 0;\n    my $temp36 = 0;\n    my $temp37 = 0;\n    my $temp38 = 0;\n    my $temp39 = 0;\n    my $temp40 = 0;\n    my $temp41 = 0;\n    my $temp42 = 0;\n    my $temp43 = 0;\n    my $temp44 = 0;\n    my $temp45 = 0;\n    my $temp46 = 0;\n    my $temp47 = 0;\n    my $temp48 = 0;\n    my $temp49 = 0;\n    my $temp50 = 0;\n    my $temp51 = 0;\n    my $temp52",
    "    my %hash;\n    foreach my $tuple (@$Input) {\n        my $key = $tuple->[0];\n        push @{$hash{$key}}, $tuple;\n    }\n    return \\%hash;\n}",
    "    my %hash;\n    foreach my $tuple (@$Input) {\n        $hash{$tuple->[0]}++;\n    }\n    my @common_first_element = grep { $hash{$_} > 1 } keys %hash;\n    return \\@common_first_element;\n}",
    "    my %hash;\n    foreach my $tuple (@$Input) {\n        my $key = $tuple->[0];\n        push @{$hash{$key}}, $tuple;\n    }\n    return \\%hash;\n}",
    "    my %hash;\n    foreach my $tuple (@$Input) {\n        $hash{$tuple->[0]}++;\n    }\n    return \\%hash;\n}",
    "    my @Input = @{$Input};\n    my @Output;\n    my $i = 0;\n    foreach my $tuple (@Input) {\n        my @tuple = @{$tuple};\n        $Output[$i] = $tuple[0];\n        $i++;\n    }\n    return \\@Output;\n}",
    "    my %hash;\n    foreach my $tuple (@$Input) {\n        my $first = $tuple->[0];\n        push @{$hash{$first}}, $tuple;\n    }\n    return \\%hash;\n}",
    "    my %hash;\n    foreach my $tuple (@$Input) {\n        $hash{$tuple->[0]}++;\n    }\n    my @common = grep { $hash{$_} > 1 } keys %hash;\n    return \\@common;\n}",
    "    my %hash;\n    foreach my $tuple (@$Input) {\n        my $key = $tuple->[0];\n        push @{$hash{$key}}, $tuple;\n    }\n    return \\%hash;\n}",
    "    my %hash;\n    foreach my $tuple (@$Input) {\n        $hash{$tuple->[0]}++;\n    }\n    my @common_first_elements = grep { $hash{$_} > 1 } keys %hash;\n    return \\@common_first_elements;\n}",
    "    my %hash;\n    foreach my $tuple (@$Input) {\n        my $key = $tuple->[0];\n        push @{$hash{$key}}, $tuple;\n    }\n    return \\%hash;\n}",
    "    my %hash;\n    foreach my $tuple (@$Input) {\n        my $key = $tuple->[0];\n        $hash{$key} = [] unless exists $hash{$key};\n        push @{$hash{$key}}, $tuple;\n    }\n    return \\%hash;\n}"
  ]
}