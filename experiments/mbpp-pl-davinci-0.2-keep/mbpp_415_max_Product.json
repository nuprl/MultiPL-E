{
  "name": "mbpp_415_max_Product",
  "language": "pl",
  "prompt": "# Write a python function to find a pair with highest product from a given array of integers.\nsub max_Product {\n    my($arr) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_Product;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 7, 0, 8, 4]),[7, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, -1, -2, -4, 5, 0, -6]),[-4, -6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),[2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $max = $arr->[0] * $arr->[1];\n    for(my $i = 0; $i < scalar(@$arr); $i++) {\n        for(my $j = $i + 1; $j < scalar(@$arr); $j++) {\n            if($arr->[$i] * $arr->[$j] > $max) {\n                $max = $arr->[$i] * $arr->[$j];\n            }\n        }\n    }\n    return $max;\n}",
    "    my $max = $arr->[0];\n    my $second_max = $arr->[1];\n    my $min = $arr->[0];\n    my $second_min = $arr->[1];\n    for(my $i = 2; $i < scalar @$arr; $i++) {\n        if($arr->[$i] > $max) {\n            $second_max = $max;\n            $max = $arr->[$i];\n        }\n        elsif($arr->[$i] > $second_max) {\n            $second_max = $arr->[$i];\n        }\n        if($arr->[$i] < $min) {\n            $second_min = $min;\n            $min = $arr->[$i];\n        }\n        elsif($arr->[$i] < $second_min) {\n            $second_min = $arr->[$i];\n        }\n    }\n    return ($max * $second_max, $min * $second_min);\n}",
    "    my $max = $arr->[0] * $arr->[1];\n    for(my $i = 0; $i < scalar @$arr; $i++) {\n        for(my $j = $i + 1; $j < scalar @$arr; $j++) {\n            if($arr->[$i] * $arr->[$j] > $max) {\n                $max = $arr->[$i] * $arr->[$j];\n            }\n        }\n    }\n    return $max;\n}",
    "    my $max = $arr->[0] * $arr->[1];\n    for(my $i = 0; $i < scalar @$arr; $i++) {\n        for(my $j = $i + 1; $j < scalar @$arr; $j++) {\n            if($arr->[$i] * $arr->[$j] > $max) {\n                $max = $arr->[$i] * $arr->[$j];\n            }\n        }\n    }\n    return $max;\n}",
    "    my $max = $arr->[0];\n    my $max2 = $arr->[1];\n    my $min = $arr->[0];\n    my $min2 = $arr->[1];\n    my $max_product = $max * $max2;\n    for(my $i = 2; $i < scalar @$arr; $i++) {\n        if($arr->[$i] > $max) {\n            $max2 = $max;\n            $max = $arr->[$i];\n        }\n        elsif($arr->[$i] > $max2) {\n            $max2 = $arr->[$i];\n        }\n        if($arr->[$i] < $min) {\n            $min2 = $min;\n            $min = $arr->[$i];\n        }\n        elsif($arr->[$i] < $min2) {\n            $min2 = $arr->[$i];\n        }\n        my $product = $arr->[$i] * $max;\n        $max_product = $product if($product > $max_product);\n        $product = $arr->[$i] * $max2;\n        $max_product = $product if($product > $max_product);\n        $product = $arr->[$i] * $min;\n        $max_product = $product if($product > $max_product);\n        $product = $arr->[$i] * $min2;\n        $max_product = $product if($product > $max_product);\n    }\n    return $max_product;\n}",
    "    my $max = $arr->[0] * $arr->[1];\n    for(my $i = 0; $i < scalar @$arr; $i++) {\n        for(my $j = $i + 1; $j < scalar @$arr; $j++) {\n            if($arr->[$i] * $arr->[$j] > $max) {\n                $max = $arr->[$i] * $arr->[$j];\n            }\n        }\n    }\n    return $max;\n}",
    "    my $max = $arr->[0];\n    my $secondMax = $arr->[1];\n    my $min = $arr->[0];\n    my $secondMin = $arr->[1];\n    for (my $i = 0; $i < scalar @$arr; $i++) {\n        if ($arr->[$i] > $max) {\n            $secondMax = $max;\n            $max = $arr->[$i];\n        }\n        elsif ($arr->[$i] > $secondMax) {\n            $secondMax = $arr->[$i];\n        }\n        if ($arr->[$i] < $min) {\n            $secondMin = $min;\n            $min = $arr->[$i];\n        }\n        elsif ($arr->[$i] < $secondMin) {\n            $secondMin = $arr->[$i];\n        }\n    }\n    return $max * $secondMax > $min * $secondMin ? $max * $secondMax : $min * $secondMin;\n}",
    "    my $max = $arr->[0] * $arr->[1];\n    for(my $i = 0; $i < scalar(@$arr); $i++) {\n        for(my $j = $i + 1; $j < scalar(@$arr); $j++) {\n            if($arr->[$i] * $arr->[$j] > $max) {\n                $max = $arr->[$i] * $arr->[$j];\n            }\n        }\n    }\n    return $max;\n}",
    "    my @arr = @$arr;\n    my $max_product = $arr[0] * $arr[1];\n    my $max_index = 0;\n    my $max_index_2 = 1;\n    for(my $i = 0; $i < scalar @arr; $i++) {\n        for(my $j = $i + 1; $j < scalar @arr; $j++) {\n            if($arr[$i] * $arr[$j] > $max_product) {\n                $max_product = $arr[$i] * $arr[$j];\n                $max_index = $i;\n                $max_index_2 = $j;\n            }\n        }\n    }\n    return ($arr[$max_index], $arr[$max_index_2]);\n}",
    "    my $max = $arr->[0] * $arr->[1];\n    for(my $i = 0; $i < scalar(@$arr); $i++) {\n        for(my $j = $i + 1; $j < scalar(@$arr); $j++) {\n            if($arr->[$i] * $arr->[$j] > $max) {\n                $max = $arr->[$i] * $arr->[$j];\n            }\n        }\n    }\n    return $max;\n}",
    "    my $max = 0;\n    my $max_index = 0;\n    my $max_index2 = 0;\n    for(my $i = 0; $i < scalar(@$arr); $i++) {\n        if($arr->[$i] > $max) {\n            $max = $arr->[$i];\n            $max_index = $i;\n        }\n    }\n    $max = 0;\n    for(my $i = 0; $i < scalar(@$arr); $i++) {\n        if($arr->[$i] > $max && $i != $max_index) {\n            $max = $arr->[$i];\n            $max_index2 = $i;\n        }\n    }\n    return $arr->[$max_index] * $arr->[$max_index2];\n}",
    "    my $max = $arr->[0] * $arr->[1];\n    for(my $i = 0; $i < scalar(@$arr) - 1; $i++) {\n        for(my $j = $i + 1; $j < scalar(@$arr); $j++) {\n            if($arr->[$i] * $arr->[$j] > $max) {\n                $max = $arr->[$i] * $arr->[$j];\n            }\n        }\n    }\n    return $max;\n}",
    "    my $max = $arr->[0] * $arr->[1];\n    for(my $i = 0; $i < @{$arr} - 1; $i++) {\n        for(my $j = $i + 1; $j < @{$arr}; $j++) {\n            if($arr->[$i] * $arr->[$j] > $max) {\n                $max = $arr->[$i] * $arr->[$j];\n            }\n        }\n    }\n    return $max;\n}",
    "    my $max = $arr->[0] * $arr->[1];\n    for(my $i = 0; $i < scalar(@$arr); $i++) {\n        for(my $j = $i + 1; $j < scalar(@$arr); $j++) {\n            if($max < $arr->[$i] * $arr->[$j]) {\n                $max = $arr->[$i] * $arr->[$j];\n            }\n        }\n    }\n    return $max;\n}",
    "    my $max = $arr->[0] * $arr->[1];\n    for (my $i = 0; $i < scalar(@$arr); $i++) {\n        for (my $j = $i + 1; $j < scalar(@$arr); $j++) {\n            if ($arr->[$i] * $arr->[$j] > $max) {\n                $max = $arr->[$i] * $arr->[$j];\n            }\n        }\n    }\n    return $max;\n}",
    "    my $max = 0;\n    for(my $i = 0; $i < scalar(@$arr); $i++) {\n        for(my $j = $i + 1; $j < scalar(@$arr); $j++) {\n            if(($arr->[$i] * $arr->[$j]) > $max) {\n                $max = $arr->[$i] * $arr->[$j];\n            }\n        }\n    }\n    return $max;\n}",
    "    my $max1 = 0;\n    my $max2 = 0;\n    my $max3 = 0;\n    my $max4 = 0;\n    my $max5 = 0;\n    my $max6 = 0;\n    my $max7 = 0;\n    my $max8 = 0;\n    my $max9 = 0;\n    my $max10 = 0;\n    my $max11 = 0;\n    my $max12 = 0;\n    my $max13 = 0;\n    my $max14 = 0;\n    my $max15 = 0;\n    my $max16 = 0;\n    my $max17 = 0;\n    my $max18 = 0;\n    my $max19 = 0;\n    my $max20 = 0;\n    my $max21 = 0;\n    my $max22 = 0;\n    my $max23 = 0;\n    my $max24 = 0;\n    my $max25 = 0;\n    my $max26 = 0;\n    my $max27 = 0;\n    my $max28 = 0;\n    my $max29 = 0;\n    my $max30 = 0;\n    my $max31 = 0;\n    my $max32 = 0;\n    my $max33 = 0;\n    my $max34 = 0;\n    my $max35 = 0;\n    my $max36 = 0;\n    my $max37 = 0;\n    my $max38 = 0;\n    my $max39 = 0;\n    my $max40 = 0;\n    my $max41 = 0;\n    my $max42 = 0;\n    my $max43 = 0;\n    my $max44 = 0;\n    my $max45 = 0;\n    my $max46 = 0;\n    my $max47 = 0;\n    my $max48 = 0;\n    my $max49 = 0;\n    my $max50 = 0;\n    my $max51 = 0;\n    my $max52 = 0;\n    my $max53 = 0;\n    my $max54 = 0;\n    my $max55 = 0;\n    my $max56 = 0;\n    my $max57 = 0",
    "    my $max = 0;\n    my $max_index = 0;\n    my $i = 0;\n    foreach my $num (@$arr) {\n        if ($num > $max) {\n            $max = $num;\n            $max_index = $i;\n        }\n        $i++;\n    }\n    $max = 0;\n    $i = 0;\n    foreach my $num (@$arr) {\n        if ($i != $max_index && $num > $max) {\n            $max = $num;\n        }\n        $i++;\n    }\n    return $max * $max_index;\n}",
    "    my $max = 0;\n    my $max_index = 0;\n    my $max_index2 = 0;\n    my $i = 0;\n    my $j = 0;\n    my $product = 0;\n    for($i = 0; $i < scalar(@$arr); $i++) {\n        if($max < $$arr[$i]) {\n            $max = $$arr[$i];\n            $max_index = $i;\n        }\n    }\n    $max = 0;\n    for($j = 0; $j < scalar(@$arr); $j++) {\n        if($max < $$arr[$j] && $j != $max_index) {\n            $max = $$arr[$j];\n            $max_index2 = $j;\n        }\n    }\n    $product = $$arr[$max_index] * $$arr[$max_index2];\n    return $product;\n}",
    "    my $max = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    for(my $i = 0; $i < scalar @$arr; $i++) {\n        for(my $j = $i + 1; $j < scalar @$arr; $j++) {\n            if($arr->[$i] * $arr->[$j] > $max) {\n                $max = $arr->[$i] * $arr->[$j];\n                $max_i = $i;\n                $max_j = $j;\n            }\n        }\n    }\n    return ($max_i, $max_j);\n}"
  ]
}