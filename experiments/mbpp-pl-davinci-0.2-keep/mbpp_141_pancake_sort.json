{
  "name": "mbpp_141_pancake_sort",
  "language": "pl",
  "prompt": "# Write a function to sort a list of elements.\nsub pancake_sort {\n    my($nums) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pancake_sort;\n        if(eq_deeply($candidate->([15, 79, 25, 38, 69]),[15, 25, 38, 69, 79])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([98, 12, 54, 36, 85]),[12, 36, 54, 85, 98])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([41, 42, 32, 12, 23]),[12, 23, 32, 41, 42])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $n = scalar(@$nums);\n    for (my $i = $n - 1; $i >= 0; $i--) {\n        my $max_idx = $i;\n        for (my $j = 0; $j <= $i; $j++) {\n            if ($nums->[$j] > $nums->[$max_idx]) {\n                $max_idx = $j;\n            }\n        }\n        if ($max_idx != $i) {\n            flip($nums, $max_idx);\n            flip($nums, $i);\n        }\n    }\n}",
    "    my $n = scalar @$nums;\n    for my $i (0..$n-1) {\n        # Find the index of the maximum element.\n        my $max_index = 0;\n        for my $j (0..$n-$i-1) {\n            if ($nums->[$j] > $nums->[$max_index]) {\n                $max_index = $j;\n            }\n        }\n        # Flip the maximum element to the front.\n        flip($nums, $max_index);\n        # Flip the maximum element to the back.\n        flip($nums, $n-$i-1);\n    }\n}",
    "    my $n = scalar(@$nums);\n    for my $i (reverse(1 .. $n - 1)) {\n        my $max_idx = $i;\n        for my $j (0 .. $i) {\n            $max_idx = $j if $nums->[$j] > $nums->[$max_idx];\n        }\n        flip($nums, $max_idx);\n        flip($nums, $i);\n    }\n}",
    "    my $n = scalar(@$nums);\n    for (my $i = $n - 1; $i >= 1; $i--) {\n        my $max_idx = max_idx($nums, $i);\n        if ($max_idx != $i) {\n            flip($nums, $max_idx);\n            flip($nums, $i);\n        }\n    }\n}",
    "    my $n = scalar(@$nums);\n    for my $i (0..$n-1) {\n        my $max_idx = max_idx($nums, $i);\n        flip($nums, $max_idx);\n        flip($nums, $i);\n    }\n}",
    "\n    my $len = scalar @$nums;\n    for my $i (0 .. $len - 1) {\n        my $max = $i;\n        for my $j ($i + 1 .. $len - 1) {\n            $max = $j if $nums->[$j] > $nums->[$max];\n        }\n        flip($nums, $max);\n        flip($nums, $i);\n    }\n}",
    "    my $size = scalar(@$nums);\n    for my $i (reverse(1..$size)) {\n        my $max_index = $i - 1;\n        for my $j (0..$max_index) {\n            if ($nums->[$j] > $nums->[$max_index]) {\n                $max_index = $j;\n            }\n        }\n        if ($max_index != $i - 1) {\n            flip($nums, $max_index);\n            flip($nums, $i - 1);\n        }\n    }\n}",
    "    my $n = scalar(@$nums);\n    for (my $i = $n; $i > 1; $i--) {\n        my $max = $i - 1;\n        for (my $j = 0; $j < $i; $j++) {\n            if ($nums->[$j] > $nums->[$max]) {\n                $max = $j;\n            }\n        }\n        if ($max != $i - 1) {\n            flip($nums, $max);\n            flip($nums, $i - 1);\n        }\n    }\n}",
    "    my $n = scalar(@$nums);\n    for my $i (0..$n-1) {\n        my $max_index = max_index($nums, $i);\n        flip($nums, $max_index);\n        flip($nums, $i);\n    }\n}",
    "    my $size = scalar @$nums;\n    for my $i (reverse 0..$size-1) {\n        my $max_idx = max_idx($nums, $i);\n        flip($nums, $max_idx);\n        flip($nums, $i);\n    }\n}",
    "    my $size = scalar(@$nums);\n    for my $i (reverse(1 .. $size)) {\n        my $max_index = max_index($nums, $i);\n        if ($max_index != $i - 1) {\n            flip($nums, $max_index);\n            flip($nums, $i - 1);\n        }\n    }\n}",
    "    my $n = scalar @$nums;\n    for my $i (reverse 1..$n) {\n        my $max = $i - 1;\n        for my $j (0..$i-1) {\n            $max = $j if $nums->[$j] > $nums->[$max];\n        }\n        flip($nums, $max);\n        flip($nums, $i-1);\n    }\n}",
    "    my $n = scalar(@$nums);\n    for my $i (0..$n-2) {\n        my $max_idx = $i;\n        for my $j ($i+1..$n-1) {\n            if ($nums->[$j] > $nums->[$max_idx]) {\n                $max_idx = $j;\n            }\n        }\n        if ($max_idx != $i) {\n            flip($nums, $max_idx);\n            flip($nums, $i);\n        }\n    }\n}",
    "    my $n = scalar(@$nums);\n    for (my $i = $n - 1; $i > 0; $i--) {\n        my $max_idx = $i;\n        for (my $j = 0; $j < $i; $j++) {\n            if ($nums->[$j] > $nums->[$max_idx]) {\n                $max_idx = $j;\n            }\n        }\n        if ($max_idx != $i) {\n            reverse_subarray($nums, 0, $max_idx);\n            reverse_subarray($nums, 0, $i);\n        }\n    }\n}",
    "    my $n = scalar(@$nums);\n    for (my $i = $n - 1; $i > 0; $i--) {\n        my $max_idx = max_idx($nums, $i);\n        flip($nums, $max_idx);\n        flip($nums, $i);\n    }\n}",
    "    my $n = scalar @$nums;\n    for my $i (reverse 1..$n) {\n        my $max_idx = max_idx($nums, $i);\n        flip($nums, $max_idx);\n        flip($nums, $i-1);\n    }\n}",
    "    my $n = scalar @$nums;\n    for my $i (reverse 1 .. $n) {\n        my $max_idx = max_idx($nums, $i);\n        flip($nums, $max_idx);\n        flip($nums, $i - 1);\n    }\n}",
    "    my $n = @$nums;\n    for my $i (0..$n-1) {\n        my $max_idx = max_idx($nums, $i);\n        flip($nums, $max_idx);\n        flip($nums, $i);\n    }\n    return $nums;\n}",
    "    my $n = @$nums;\n    for my $i (0 .. $n - 1) {\n        my $max = $i;\n        for my $j ($i + 1 .. $n - 1) {\n            $max = $j if $nums->[$j] > $nums->[$max];\n        }\n        flip($nums, $max);\n        flip($nums, $i);\n    }\n}",
    "    my $n = scalar @$nums;\n    for my $i (0..$n-1) {\n        my $max_idx = $i;\n        for my $j ($i..$n-1) {\n            $max_idx = $j if $nums->[$j] > $nums->[$max_idx];\n        }\n        flip($nums, $max_idx);\n        flip($nums, $i);\n    }\n}"
  ]
}