{
  "name": "mbpp_747_lcs_of_three",
  "language": "pl",
  "prompt": "# Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nsub lcs_of_three {\n    my($X, $Y, $Z) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&lcs_of_three;\n        if(eq_deeply($candidate->(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif ($X[$i] eq $Y[$j] && $X[$i] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[-1][-1][-1];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @lcs;\n    my $m = scalar @X;\n    my $n = scalar @Y;\n    my $o = scalar @Z;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $lcs[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $lcs[$i][$j][$k] = $lcs[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $lcs[$i][$j][$k] = max($lcs[$i-1][$j][$k], $lcs[$i][$j-1][$k], $lcs[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $lcs[$m][$n][$o];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L = ();\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (1 .. $m) {\n        for my $j (1 .. $n) {\n            for my $k (1 .. $o) {\n                if ($X[$i-1] eq $Y[$j-1] and $Y[$j-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (1 .. $m) {\n        for my $j (1 .. $n) {\n            for my $k (1 .. $o) {\n                if ($X[$i-1] eq $Y[$j-1] and $Y[$j-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @LCS;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $LCS[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $LCS[$i][$j][$k] = $LCS[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $LCS[$i][$j][$k] = max($LCS[$i-1][$j][$k], $LCS[$i][$j-1][$k], $LCS[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $LCS[$m][$n][$o];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i - 1, 1) eq substr($Y, $j - 1, 1) && substr($X, $i - 1, 1) eq substr($Z, $k - 1, 1)) {\n                    $L[$i][$j][$k] = $L[$i - 1][$j - 1][$k - 1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i - 1][$j][$k], $L[$i][$j - 1][$k], $L[$i][$j][$k - 1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif ($X[$i-1] eq $Y[$j-1] && $Y[$j-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for (my $i = 0; $i <= $m; $i++) {\n        for (my $j = 0; $j <= $n; $j++) {\n            for (my $k = 0; $k <= $o; $k++) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i - 1, 1) eq substr($Y, $j - 1, 1) && substr($X, $i - 1, 1) eq substr($Z, $k - 1, 1)) {\n                    $L[$i][$j][$k] = $L[$i - 1][$j - 1][$k - 1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i - 1][$j][$k], $L[$i][$j - 1][$k], $L[$i][$j][$k - 1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    $L[$_][0][0] = 0 for 0 .. @X;\n    $L[0][$_][0] = 0 for 0 .. @Y;\n    $L[0][0][$_] = 0 for 0 .. @Z;\n    for my $i (1 .. @X) {\n        for my $j (1 .. @Y) {\n            for my $k (1 .. @Z) {\n                if ($X[$i - 1] eq $Y[$j - 1] and $X[$i - 1] eq $Z[$k - 1]) {\n                    $L[$i][$j][$k] = $L[$i - 1][$j - 1][$k - 1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i - 1][$j][$k], $L[$i][$j - 1][$k], $L[$i][$j][$k - 1]);\n                }\n            }\n        }\n    }\n    return $L[@X][@Y][@Z];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @lcs;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i < @X && $j < @Y && $k < @Z) {\n        if ($X[$i] eq $Y[$j] && $Y[$j] eq $Z[$k]) {\n            push @lcs, $X[$i];\n            $i++;\n            $j++;\n            $k++;\n        }\n        elsif ($X[$i] eq $Y[$j]) {\n            if ($X[$i] lt $Z[$k]) {\n                $i++;\n                $j++;\n            }\n            else {\n                $k++;\n            }\n        }\n        elsif ($X[$i] eq $Z[$k]) {\n            if ($X[$i] lt $Y[$j]) {\n                $i++;\n                $k++;\n            }\n            else {\n                $j++;\n            }\n        }\n        elsif ($Y[$j] eq $Z[$k]) {\n            if ($Y[$j] lt $X[$i]) {\n                $j++;\n                $k++;\n            }\n            else {\n                $i++;\n            }\n        }\n        else {\n            my $min = min($X[$i], $Y[$j], $Z[$k]);\n            if ($min eq $X[$i]) {\n                $i++;\n            }\n            elsif ($min eq $Y[$j]) {\n                $j++;\n            }\n            else {\n                $k++;\n            }\n        }\n    }\n    return join '', @lcs;\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    my @M;\n    my @N;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $M[$i][$j][$k] = $N[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = $M[$i][$j][$k] = $N[$i][$j][$k] = 0;\n                }\n                if ($i > 0 and $L[$i][$j][$k] < $L[$i-1][$j][$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j][$k];\n                }\n                if ($j > 0 and $M[$i][$j][$k] < $M[$i][$j-1][$k]) {\n                    $M[$i][$j][$k] = $M[$i][$j-1][$k];\n                }\n                if ($k > 0 and $N[$i][$j][$k] < $N[$i][$j][$k-1]) {\n                    $N[$i][$j][$k] = $N[$i][$j][$k-1];\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "\n    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split(//, $X);\n    my @Y = split(//, $Y);\n    my @Z = split(//, $Z);\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] && $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i] eq $Y[$j] && $X[$i] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i - 1, 1) eq substr($Y, $j - 1, 1) && substr($X, $i - 1, 1) eq substr($Z, $k - 1, 1)) {\n                    $L[$i][$j][$k] = $L[$i - 1][$j - 1][$k - 1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i - 1][$j][$k], $L[$i][$j - 1][$k], $L[$i][$j][$k - 1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i - 1, 1) eq substr($Y, $j - 1, 1) && substr($X, $i - 1, 1) eq substr($Z, $k - 1, 1)) {\n                    $L[$i][$j][$k] = $L[$i - 1][$j - 1][$k - 1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i - 1][$j][$k], $L[$i][$j - 1][$k], $L[$i][$j][$k - 1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @lcs;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    my $i = $m;\n    my $j = $n;\n    my $k = $o;\n    while ($i > 0 && $j > 0 && $k > 0) {\n        if ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n            push @lcs, $X[$i-1];\n            $i--;\n            $j--;\n            $k--;\n        }\n        elsif ($L[$i-1][$j][$k] >= $L[$i][$j-1][$k] && $L[$i-1][$j][$k] >= $L[$i][$j][$k-1]) {\n            $i--;\n        }\n        elsif ($L[$",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 or $j == 0 or $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) and substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i] eq $Y[$j] && $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @lcs;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    my $i = $m;\n    my $j = $n;\n    my $k = $o;\n    while ($i > 0 && $j > 0 && $k > 0) {\n        if ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n            unshift @lcs, $X[$i-1];\n            $i--;\n            $j--;\n            $k--;\n        } elsif ($L[$i-1][$j][$k] >= $L[$i][$j-1][$k] && $L[$i-1][$j][$k] >= $L[$i][$j][$k-1]) {\n            $i--;\n        } elsif ($L[$i][$j-1][",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $Y[$j-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] && $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                $L[$i][$j][$k] = 0 if !defined $L[$i][$j][$k];\n                if ($X[$i] eq $Y[$j] && $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (1 .. $m) {\n        for my $j (1 .. $n) {\n            for my $k (1 .. $o) {\n                if (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    $L[$_][0][0] = 0 for 0 .. @X;\n    $L[0][$_][0] = 0 for 0 .. @Y;\n    $L[0][0][$_] = 0 for 0 .. @Z;\n    for my $i (1 .. @X) {\n        for my $j (1 .. @Y) {\n            for my $k (1 .. @Z) {\n                if ($X[$i-1] eq $Y[$j-1] and $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[@X][@Y][@Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    my $m = scalar @X;\n    my $n = scalar @Y;\n    my $o = scalar @Z;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    my $m = scalar @X;\n    my $n = scalar @Y;\n    my $o = scalar @Z;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (1..$m) {\n        for my $j (1..$n) {\n            for my $k (1..$o) {\n                if(substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "\n    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @lcs;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $lcs[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $lcs[$i][$j][$k] = $lcs[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $lcs[$i][$j][$k] = max($lcs[$i-1][$j][$k], $lcs[$i][$j-1][$k], $lcs[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $lcs[$m][$n][$o];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    $L[$_][0][0] = 0 for 0 .. $#X;\n    $L[0][$_][0] = 0 for 0 .. $#Y;\n    $L[0][0][$_] = 0 for 0 .. $#Z;\n    for my $i (1 .. $#X) {\n        for my $j (1 .. $#Y) {\n            for my $k (1 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($Y, $j-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @lcs;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    my $i = $m;\n    my $j = $n;\n    my $k = $o;\n    while ($i > 0 && $j > 0 && $k > 0) {\n        if ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n            push @lcs, $X[$i-1];\n            $i--;\n            $j--;\n            $k--;\n        }\n        elsif ($L[$i-1][$j][$k] >= $L[$i][$j-1][$k] && $L[$i-1][$j][$k] >= $L[$i][$j][$k-1]) {\n            $i--;\n        }\n        elsif ($L[$",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        $L[$i][0][0] = 0;\n    }\n    for my $j (0..$#Y) {\n        $L[0][$j][0] = 0;\n    }\n    for my $k (0..$#Z) {\n        $L[0][0][$k] = 0;\n    }\n    for my $i (1..$#X) {\n        for my $j (1..$#Y) {\n            for my $k (1..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @lcs;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    my $i = $m;\n    my $j = $n;\n    my $k = $o;\n    while ($i > 0 && $j > 0 && $k > 0) {\n        if ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n            push @lcs, $X[$i-1];\n            $i--;\n            $j--;\n            $k--;\n        }\n        elsif ($L[$i-1][$j][$k] >= $L[$i][$j-1][$k] && $L[$i-1][$j][$k] >= $L[$i][$j][$k-1]) {\n            $i--;\n        }\n        elsif ($L[$",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (1 .. $m) {\n        for my $j (1 .. $n) {\n            for my $k (1 .. $o) {\n                if (substr($X, $i - 1, 1) eq substr($Y, $j - 1, 1) and substr($X, $i - 1, 1) eq substr($Z, $k - 1, 1)) {\n                    $L[$i][$j][$k] = $L[$i - 1][$j - 1][$k - 1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i - 1][$j][$k], $L[$i][$j - 1][$k], $L[$i][$j][$k - 1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for (my $i = 0; $i <= $m; $i++) {\n        for (my $j = 0; $j <= $n; $j++) {\n            for (my $k = 0; $k <= $o; $k++) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @lcs;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $lcs[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $lcs[$i][$j][$k] = $lcs[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $lcs[$i][$j][$k] = max($lcs[$i-1][$j][$k], $lcs[$i][$j-1][$k], $lcs[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $lcs[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @lcs;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    my $i = $m;\n    my $j = $n;\n    my $k = $o;\n    while ($i > 0 && $j > 0 && $k > 0) {\n        if ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n            push @lcs, $X[$i-1];\n            $i--;\n            $j--;\n            $k--;\n        }\n        elsif ($L[$i-1][$j][$k] >= $L[$i][$j-1][$k] && $L[$i-1][$j][$k] >= $L[$i][$j][$k-1]) {\n            $i--;\n        }\n        elsif ($L[$",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (1..$m) {\n        for my $j (1..$n) {\n            for my $k (1..$o) {\n                if ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif (substr($X, $i - 1, 1) eq substr($Y, $j - 1, 1) && substr($X, $i - 1, 1) eq substr($Z, $k - 1, 1)) {\n                    $L[$i][$j][$k] = $L[$i - 1][$j - 1][$k - 1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i - 1][$j][$k], $L[$i][$j - 1][$k], $L[$i][$j][$k - 1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ([]);\n    for (my $i=0; $i<=$m; $i++) {\n        for (my $j=0; $j<=$n; $j++) {\n            for (my $k=0; $k<=$o; $k++) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my($m, $n, $o) = (length($X), length($Y), length($Z));\n    my @L = ();\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i] eq $Y[$j] && $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L = ();\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @lcs;\n    my $m = scalar @X;\n    my $n = scalar @Y;\n    my $o = scalar @Z;\n    my @L;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    my $i = $m;\n    my $j = $n;\n    my $k = $o;\n    while ($i > 0 && $j > 0 && $k > 0) {\n        if ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n            unshift @lcs, $X[$i-1];\n            $i--;\n            $j--;\n            $k--;\n        }\n        elsif ($L[$i-1][$j][$k] >= $L[$i][$j-1][$k] && $L[$i-1][$j][$k] >= $L[$i][$j][$k-1]) {\n            $i--;\n        }\n       ",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for (my $i = 0; $i <= $m; $i++) {\n        for (my $j = 0; $j <= $n; $j++) {\n            for (my $k = 0; $k <= $o; $k++) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[-1][-1][-1];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @lcs;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (1 .. $m) {\n        for my $j (1 .. $n) {\n            for my $k (1 .. $o) {\n                if ($X[$i-1] eq $Y[$j-1] and $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    my $i = $m;\n    my $j = $n;\n    my $k = $o;\n    while ($i > 0 and $j > 0 and $k > 0) {\n        if ($X[$i-1] eq $Y[$j-1] and $X[$i-1] eq $Z[$k-1]) {\n            push @lcs, $X[$i-1];\n            $i--;\n            $j--;\n            $k--;\n        }\n        elsif ($L[$i-1][$j][$k] >= $L[$i][$j-1][$k] and $L[$i-1][$j][$k] >= $L[$i][$j][",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $Y[$j-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (1..$m) {\n        for my $j (1..$n) {\n            for my $k (1..$o) {\n                if (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) and substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    my @S;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                    $S[$i][$j][$k] = 'D';\n                }\n                elsif ($L[$i-1][$j][$k] >= $L[$i][$j-1][$k] and $L[$i-1][$j][$k] >= $L[$i][$j][$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j][$k];\n                    $S[$i][$j][$k] = 'U';\n                }\n                elsif ($L[$i][$j-1][$k] >= $L[$i-1][$j][$k] and $L[$i][$j-1][$k] >= $L[$i][$j][$k-1]) {\n                    $L[$i][$j][$k] = $L[$i][$j-1][$k];\n                    $S[$i][$j][$k] = 'L';\n                }\n                else {\n                    $L[$i][$j][$k] = $L[$i][$j][$k-1];\n                    $S[$i][$j][$k] = 'B';\n                }\n            }\n        }\n    }\n    my @lcs;\n    my($i, $j, $k) = ($#X, $#Y, $#Z);\n    while ($i >= 0 and $",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (1 .. $m) {\n        for my $j (1 .. $n) {\n            for my $k (1 .. $o) {\n                if (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i] eq $Y[$j] && $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] && $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split(//, $X);\n    my @Y = split(//, $Y);\n    my @Z = split(//, $Z);\n    my @lcs;\n    my $m = scalar @X;\n    my $n = scalar @Y;\n    my $o = scalar @Z;\n    my @L;\n    for (my $i = 0; $i <= $m; $i++) {\n        for (my $j = 0; $j <= $n; $j++) {\n            for (my $k = 0; $k <= $o; $k++) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    my @M;\n    my @N;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $M[$i][$j][$k] = $N[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = $M[$i][$j][$k] = $N[$i][$j][$k] = 0;\n                }\n                if ($i > 0 and $L[$i][$j][$k] < $L[$i-1][$j][$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j][$k];\n                }\n                if ($j > 0 and $L[$i][$j][$k] < $M[$i][$j-1][$k]) {\n                    $L[$i][$j][$k] = $M[$i][$j-1][$k];\n                }\n                if ($k > 0 and $L[$i][$j][$k] < $N[$i][$j][$k-1]) {\n                    $L[$i][$j][$k] = $N[$i][$j][$k-1];\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @lcs;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $lcs[$i][$j][$k] = 0;\n                } elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $lcs[$i][$j][$k] = $lcs[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $lcs[$i][$j][$k] = max($lcs[$i-1][$j][$k], $lcs[$i][$j-1][$k], $lcs[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $lcs[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i] eq $Y[$j] && $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @lcs;\n    my $m = scalar @X;\n    my $n = scalar @Y;\n    my $o = scalar @Z;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $lcs[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $lcs[$i][$j][$k] = $lcs[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $lcs[$i][$j][$k] = max($lcs[$i-1][$j][$k], $lcs[$i][$j-1][$k], $lcs[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $lcs[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    $L[$_][0][0] = 0 for 0 .. $#X;\n    $L[0][$_][0] = 0 for 0 .. $#Y;\n    $L[0][0][$_] = 0 for 0 .. $#Z;\n    for my $i (1 .. $#X) {\n        for my $j (1 .. $#Y) {\n            for my $k (1 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    $L[$_][0][0] = 0 for 0 .. $#X;\n    $L[0][$_][0] = 0 for 0 .. $#Y;\n    $L[0][0][$_] = 0 for 0 .. $#Z;\n    for my $i (1 .. $#X) {\n        for my $j (1 .. $#Y) {\n            for my $k (1 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @lcs;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (1 .. $m) {\n        for my $j (1 .. $n) {\n            for my $k (1 .. $o) {\n                if ($X[$i-1] eq $Y[$j-1] and $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    my $i = $m;\n    my $j = $n;\n    my $k = $o;\n    while ($i > 0 and $j > 0 and $k > 0) {\n        if ($X[$i-1] eq $Y[$j-1] and $X[$i-1] eq $Z[$k-1]) {\n            push @lcs, $X[$i-1];\n            $i--;\n            $j--;\n            $k--;\n        } else {\n            if ($L[$i-1][$j][$k] >= $L[$i][$j-1][$k] and $L[$i-1][$j][$k] >= $L[$i][$j][$k",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "\n    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ([]);\n    for (my $i = 0; $i <= $m; $i++) {\n        for (my $j = 0; $j <= $n; $j++) {\n            $L[$i][$j][0] = 0;\n        }\n    }\n    for (my $i = 0; $i <= $m; $i++) {\n        for (my $k = 0; $k <= $o; $k++) {\n            $L[$i][0][$k] = 0;\n        }\n    }\n    for (my $j = 0; $j <= $n; $j++) {\n        for (my $k = 0; $k <= $o; $k++) {\n            $L[0][$j][$k] = 0;\n        }\n    }\n    for (my $i = 1; $i <= $m; $i++) {\n        for (my $j = 1; $j <= $n; $j++) {\n            for (my $k = 1; $k <= $o; $k++) {\n                if (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i] eq $Y[$j] && $X[$i] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i] eq $Y[$j] && $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @lcs;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    my $i = $m;\n    my $j = $n;\n    my $k = $o;\n    while ($i > 0 && $j > 0 && $k > 0) {\n        if ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n            push @lcs, $X[$i-1];\n            $i--;\n            $j--;\n            $k--;\n        }\n        elsif ($L[$i-1][$j][$k] >= $L[$i][$j-1][$k] && $L[$i-1][$j][$k] >= $L[$i][$j][$k-1]) {\n            $i--;\n        }\n        elsif ($L[$",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i - 1, 1) eq substr($Y, $j - 1, 1) && substr($X, $i - 1, 1) eq substr($Z, $k - 1, 1)) {\n                    $L[$i][$j][$k] = $L[$i - 1][$j - 1][$k - 1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i - 1][$j][$k], $L[$i][$j - 1][$k], $L[$i][$j][$k - 1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. @X) {\n        for my $j (0 .. @Y) {\n            for my $k (0 .. @Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (1 .. @X) {\n        for my $j (1 .. @Y) {\n            for my $k (1 .. @Z) {\n                if ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[@X][@Y][@Z];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @lcs;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (1 .. $m) {\n        for my $j (1 .. $n) {\n            for my $k (1 .. $o) {\n                if (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @lcs;\n    my $m = scalar @X;\n    my $n = scalar @Y;\n    my $o = scalar @Z;\n    my @L;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    my $i = $m;\n    my $j = $n;\n    my $k = $o;\n    while ($i > 0 && $j > 0 && $k > 0) {\n        if ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n            push @lcs, $X[$i-1];\n            $i--;\n            $j--;\n            $k--;\n        }\n        elsif ($L[$i-1][$j][$k] >= $L[$i][$j-1][$k] && $L[$i-1][$j][$k] >= $L[$i][$j][$k-1]) {\n            $i--;\n        }\n        el",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (1..$m) {\n        for my $j (1..$n) {\n            for my $k (1..$o) {\n                if ($X[$i-1] eq $Y[$j-1] and $Y[$j-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L = ();\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] && $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @lcs;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max(\n                        $L[$i-1][$j][$k],\n                        $L[$i][$j-1][$k],\n                        $L[$i][$j][$k-1]\n                    );\n                }\n            }\n        }\n    }\n    my $i = $m;\n    my $j = $n;\n    my $k = $o;\n    while ($i > 0 && $j > 0 && $k > 0) {\n        if ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n            push @lcs, $X[$i-1];\n            $i--;\n            $j--;\n            $k--;\n        }\n        elsif ($L[$i-1][$j][$k] >= $L[$i][$j-1][$k] && $L[$i-1][$j][$k] >= $L[$i][$j][$k-1]) {\n            $i--;\n       ",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max(\n                        $L[$i-1][$j][$k],\n                        $L[$i][$j-1][$k],\n                        $L[$i][$j][$k-1],\n                    );\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    $L[$_][0][0] = 0 for 0..$#X;\n    $L[0][$_][0] = 0 for 0..$#Y;\n    $L[0][0][$_] = 0 for 0..$#Z;\n    for my $i (1..$#X) {\n        for my $j (1..$#Y) {\n            for my $k (1..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split(//, $X);\n    my @Y = split(//, $Y);\n    my @Z = split(//, $Z);\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] && $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i] eq $Y[$j] && $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @lcs;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $lcs[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $lcs[$i][$j][$k] = $lcs[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $lcs[$i][$j][$k] = max($lcs[$i-1][$j][$k], $lcs[$i][$j-1][$k], $lcs[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $lcs[$m][$n][$o];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (1..$m) {\n        for my $j (1..$n) {\n            for my $k (1..$o) {\n                if (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (1..$m) {\n        for my $j (1..$n) {\n            for my $k (1..$o) {\n                if ($X[$i-1] eq $Y[$j-1] and $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif ($X[$i-1] eq $Y[$j-1] && $Y[$j-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max(\n                        $L[$i-1][$j][$k],\n                        $L[$i][$j-1][$k],\n                        $L[$i][$j][$k-1],\n                    );\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @lcs;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    my $i = $m;\n    my $j = $n;\n    my $k = $o;\n    while ($i > 0 && $j > 0 && $k > 0) {\n        if ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n            push @lcs, $X[$i-1];\n            $i--;\n            $j--;\n            $k--;\n        }\n        elsif ($L[$i-1][$j][$k] >= $L[$i][$j-1][$k] && $L[$i-1][$j][$k] >= $L[$i][$j][$k-1]) {\n            $i--;\n        }\n        elsif ($L[$",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (1 .. $m) {\n        for my $j (1 .. $n) {\n            for my $k (1 .. $o) {\n                if (substr($X, $i - 1, 1) eq substr($Y, $j - 1, 1) && substr($X, $i - 1, 1) eq substr($Z, $k - 1, 1)) {\n                    $L[$i][$j][$k] = $L[$i - 1][$j - 1][$k - 1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i - 1][$j][$k], $L[$i][$j - 1][$k], $L[$i][$j][$k - 1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max(\n                        $L[$i-1][$j][$k],\n                        $L[$i][$j-1][$k],\n                        $L[$i][$j][$k-1],\n                    );\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @lcs;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    my $i = $m;\n    my $j = $n;\n    my $k = $o;\n    while ($i > 0 && $j > 0 && $k > 0) {\n        if ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n            push @lcs, $X[$i-1];\n            $i--;\n            $j--;\n            $k--;\n        }\n        elsif ($L[$i-1][$j][$k] >= $L[$i][$j-1][$k] && $L[$i-1][$j][$k] >= $L[$i][$j][$k-1]) {\n            $i--;\n        }\n        elsif ($L[$",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0 .. $m) {\n        $L[$i][0][0] = 0;\n    }\n    for my $j (0 .. $n) {\n        $L[0][$j][0] = 0;\n    }\n    for my $k (0 .. $o) {\n        $L[0][0][$k] = 0;\n    }\n    for my $i (1 .. $m) {\n        for my $j (1 .. $n) {\n            for my $k (1 .. $o) {\n                if (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my $m = scalar @X;\n    my $n = scalar @Y;\n    my $o = scalar @Z;\n    my @L;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    my @C;\n    my @S;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                    $C[$i][$j][$k] = 'D';\n                } elsif ($L[$i-1][$j][$k] >= $L[$i][$j-1][$k] and $L[$i-1][$j][$k] >= $L[$i][$j][$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j][$k];\n                    $C[$i][$j][$k] = 'U';\n                } elsif ($L[$i][$j-1][$k] >= $L[$i-1][$j][$k] and $L[$i][$j-1][$k] >= $L[$i][$j][$k-1]) {\n                    $L[$i][$j][$k] = $L[$i][$j-1][$k];\n                    $C[$i][$j][$k] = 'L';\n                } else {\n                    $L[$i][$j][$k] = $L[$i][$j][$k-1];\n                    $C[$i][$j][$k] = 'B';\n                }\n            }\n        }\n    }\n    my $i = $#X;\n    my $j = $#Y;\n    my $k = $#Z;\n    while ($i >= 0 and $j >=",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @dp;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $dp[$i][$j][$k] = 0;\n                } elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $dp[$i][$j][$k] = $dp[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $dp[$i][$j][$k] = max($dp[$i-1][$j][$k], $dp[$i][$j-1][$k], $dp[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $dp[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    $L[$_][0][0] = 0 for 0..$#X;\n    $L[0][$_][0] = 0 for 0..$#Y;\n    $L[0][0][$_] = 0 for 0..$#Z;\n    for my $i (1..$#X) {\n        for my $j (1..$#Y) {\n            for my $k (1..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @lcs;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    my $i = $m;\n    my $j = $n;\n    my $k = $o;\n    while ($i > 0 && $j > 0 && $k > 0) {\n        if ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n            push @lcs, $X[$i-1];\n            $i--;\n            $j--;\n            $k--;\n        }\n        elsif ($L[$i-1][$j][$k] >= $L[$i][$j-1][$k]) {\n            $i--;\n        }\n        elsif ($L[$i][$j-1][$k] >= $L[$i][$j][$k-1]) {\n            $j",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for (my $i = 0; $i <= $m; $i++) {\n        for (my $j = 0; $j <= $n; $j++) {\n            for (my $k = 0; $k <= $o; $k++) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i - 1, 1) eq substr($Y, $j - 1, 1) && substr($X, $i - 1, 1) eq substr($Z, $k - 1, 1)) {\n                    $L[$i][$j][$k] = $L[$i - 1][$j - 1][$k - 1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i - 1][$j][$k], $L[$i][$j - 1][$k], $L[$i][$j][$k - 1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "\n    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;"
  ]
}