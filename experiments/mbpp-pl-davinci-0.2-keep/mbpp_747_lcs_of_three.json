{
  "name": "mbpp_747_lcs_of_three",
  "language": "pl",
  "prompt": "# Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nsub lcs_of_three {\n    my($X, $Y, $Z) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&lcs_of_three;\n        if(eq_deeply($candidate->(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif ($X[$i] eq $Y[$j] && $X[$i] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[-1][-1][-1];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @lcs;\n    my $m = scalar @X;\n    my $n = scalar @Y;\n    my $o = scalar @Z;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $lcs[$i][$j][$k] = 0;\n                }\n                elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $lcs[$i][$j][$k] = $lcs[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $lcs[$i][$j][$k] = max($lcs[$i-1][$j][$k], $lcs[$i][$j-1][$k], $lcs[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $lcs[$m][$n][$o];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                }\n                elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L = ();\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    for my $i (0..$m) {\n        for my $j (0..$n) {\n            for my $k (0..$o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif ($X[$i-1] eq $Y[$j-1] && $X[$i-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0 .. $#X) {\n        for my $j (0 .. $#Y) {\n            for my $k (0 .. $#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (1 .. $m) {\n        for my $j (1 .. $n) {\n            for my $k (1 .. $o) {\n                if ($X[$i-1] eq $Y[$j-1] and $Y[$j-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}",
    "    my $m = length($X);\n    my $n = length($Y);\n    my $o = length($Z);\n    my @L = ();\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                if ($i == 0 || $j == 0 || $k == 0) {\n                    $L[$i][$j][$k] = 0;\n                } elsif (substr($X, $i-1, 1) eq substr($Y, $j-1, 1) && substr($X, $i-1, 1) eq substr($Z, $k-1, 1)) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my $m = @X;\n    my $n = @Y;\n    my $o = @Z;\n    my @L;\n    for my $i (0 .. $m) {\n        for my $j (0 .. $n) {\n            for my $k (0 .. $o) {\n                $L[$i][$j][$k] = 0;\n            }\n        }\n    }\n    for my $i (1 .. $m) {\n        for my $j (1 .. $n) {\n            for my $k (1 .. $o) {\n                if ($X[$i-1] eq $Y[$j-1] and $Y[$j-1] eq $Z[$k-1]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                }\n                else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$m][$n][$o];\n}",
    "    my @X = split //, $X;\n    my @Y = split //, $Y;\n    my @Z = split //, $Z;\n    my @L;\n    for my $i (0..$#X) {\n        for my $j (0..$#Y) {\n            for my $k (0..$#Z) {\n                if ($X[$i] eq $Y[$j] and $Y[$j] eq $Z[$k]) {\n                    $L[$i][$j][$k] = $L[$i-1][$j-1][$k-1] + 1;\n                } else {\n                    $L[$i][$j][$k] = max($L[$i-1][$j][$k], $L[$i][$j-1][$k], $L[$i][$j][$k-1]);\n                }\n            }\n        }\n    }\n    return $L[$#X][$#Y][$#Z];\n}"
  ]
}