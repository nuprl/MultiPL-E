{
  "name": "mbpp_618_div_list",
  "language": "pl",
  "prompt": "# Write a function to divide two lists element wise.\nsub div_list {\n    my($nums1, $nums2) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&div_list;\n        if(eq_deeply($candidate->([4, 5, 6], [1, 2, 3]),[4.0, 2.5, 2.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2], [1, 4]),[3.0, 0.5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([90, 120], [50, 70]),[1.8, 1.7142857142857142])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @div_list;\n    for my $i (0..$#{$nums1}) {\n        push @div_list, $nums1->[$i] / $nums2->[$i];\n    }\n    return \\@div_list;\n}",
    "    my @result = ();\n    for(my $i = 0; $i < @$nums1; $i++) {\n        push @result, $nums1->[$i] / $nums2->[$i];\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$nums1}) {\n        push @result, $nums1->[$i] / $nums2->[$i];\n    }\n    return \\@result;\n}",
    "    my @div_list;\n    for (my $i = 0; $i < @$nums1; $i++) {\n        push @div_list, $nums1->[$i] / $nums2->[$i];\n    }\n    return @div_list;\n}",
    "    my @result;\n    for (my $i = 0; $i < @$nums1; $i++) {\n        push @result, $nums1->[$i] / $nums2->[$i];\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$nums1}) {\n        push @result, $nums1->[$i] / $nums2->[$i];\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = 0; $i < @$nums1; $i++) {\n        push @result, $nums1->[$i] / $nums2->[$i];\n    }\n    return @result;\n}",
    "    my @div_list;\n    for my $i (0..$#{$nums1}) {\n        push @div_list, $nums1->[$i] / $nums2->[$i];\n    }\n    return \\@div_list;\n}",
    "    my @result;\n    for my $i (0 .. $#{$nums1}) {\n        push @result, $nums1->[$i] / $nums2->[$i];\n    }\n    return \\@result;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar @$nums1; $i++) {\n        push @result, $nums1->[$i] / $nums2->[$i];\n    }\n    return \\@result;\n}",
    "    my @result;\n    for (my $i = 0; $i < @$nums1; $i++) {\n        push @result, $nums1->[$i] / $nums2->[$i];\n    }\n    return @result;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar @$nums1; $i++) {\n        push @result, $nums1->[$i] / $nums2->[$i];\n    }\n    return @result;\n}",
    "    my @res;\n    for (my $i = 0; $i < @$nums1; $i++) {\n        push @res, $nums1->[$i] / $nums2->[$i];\n    }\n    return @res;\n}",
    "    my @div_list;\n    for my $i (0..$#{$nums1}) {\n        push @div_list, $nums1->[$i] / $nums2->[$i];\n    }\n    return \\@div_list;\n}",
    "    my @div_list;\n    for (my $i = 0; $i < @$nums1; $i++) {\n        push @div_list, $nums1->[$i] / $nums2->[$i];\n    }\n    return @div_list;\n}",
    "    my @result;\n    for(my $i = 0; $i < scalar(@$nums1); $i++) {\n        push(@result, $nums1->[$i] / $nums2->[$i]);\n    }\n    return @result;\n}",
    "    my @result;\n    for(my $i = 0; $i < scalar @$nums1; $i++) {\n        push @result, $nums1->[$i] / $nums2->[$i];\n    }\n    return \\@result;\n}",
    "    my @result;\n    for (my $i = 0; $i < @$nums1; $i++) {\n        push @result, $nums1->[$i] / $nums2->[$i];\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = 0; $i < @$nums1; $i++) {\n        push @result, $nums1->[$i] / $nums2->[$i];\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = 0; $i < @$nums1; $i++) {\n        push @result, $nums1->[$i] / $nums2->[$i];\n    }\n    return @result;\n}"
  ]
}