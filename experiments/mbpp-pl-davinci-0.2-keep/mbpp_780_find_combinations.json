{
  "name": "mbpp_780_find_combinations",
  "language": "pl",
  "prompt": "# Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nsub find_combinations {\n    my($test_list) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_combinations;\n        if(eq_deeply($candidate->([[2, 4], [6, 7], [5, 1], [6, 10]]),[[8, 11], [7, 5], [8, 14], [11, 8], [12, 17], [11, 11]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 5], [7, 8], [6, 2], [7, 11]]),[[10, 13], [9, 7], [10, 16], [13, 10], [14, 19], [13, 13]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[4, 6], [8, 9], [7, 3], [8, 12]]),[[12, 15], [11, 9], [12, 18], [15, 12], [16, 21], [15, 15]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @result;\n    for my $i (0 .. $#{$test_list}) {\n        for my $j ($i+1 .. $#{$test_list}) {\n            if ($test_list->[$i]->[0] + $test_list->[$j]->[0] == $test_list->[$i]->[1] + $test_list->[$j]->[1]) {\n                push @result, [$test_list->[$i], $test_list->[$j]];\n            }\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    my @sub_list;\n    my $sum = 0;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $aa;\n    my $bb;\n    my $cc;\n    my $dd;\n    my $ee;\n    my $ff;\n    my $gg;\n    my $hh;\n    my $ii;\n    my $jj;\n    my $kk;\n    my $ll;\n    my $mm;\n    my $nn;\n    my $oo;\n    my $pp;\n    my $qq;\n    my $rr;\n    my $ss;\n    my $tt;\n    my $uu;\n    my $vv;\n    my $ww;\n    my $xx;\n    my $yy;\n    my $zz;\n    my $aaa;\n    my $bbb;\n    my $ccc;\n    my $ddd;\n    my $eee;\n    my $fff;\n    my $ggg;\n    my $hhh;\n    my $iii;\n    my $jjj;\n    my $kkk;\n    my $lll;\n    my $mmm;\n    my $nnn;\n    my $ooo;\n    my $ppp;\n    my $qqq;\n    my $rrr;\n    my $sss;\n    my $ttt;\n    my $uuu;\n    my $vvv;\n    my $www;\n    my $xxx;\n    my $yyy;\n    my $zzz;\n    my $aaaa;\n    my $bbbb;\n    my $cccc;\n    my $dddd;\n    my $eeee;\n    my $ffff;\n    my $gggg;\n    my $hhhh;",
    "    my @result_list;\n    my $size = scalar @$test_list;\n    for (my $i = 0; $i < $size; $i++) {\n        for (my $j = $i + 1; $j < $size; $j++) {\n            if ($test_list->[$i] + $test_list->[$j] == 0) {\n                push @result_list, [$test_list->[$i], $test_list->[$j]];\n            }\n        }\n    }\n    return @result_list;\n}",
    "    my @combinations;\n    my $sum = 0;\n    for my $i (0..$#{$test_list}) {\n        for my $j ($i+1..$#{$test_list}) {\n            $sum = $test_list->[$i] + $test_list->[$j];\n            push @combinations, [$test_list->[$i], $test_list->[$j], $sum];\n        }\n    }\n    return @combinations;\n}",
    "    my @result_list;\n    my $size = scalar @$test_list;\n    for (my $i = 0; $i < $size; $i++) {\n        for (my $j = $i + 1; $j < $size; $j++) {\n            if ($test_list->[$i] + $test_list->[$j] == 0) {\n                push @result_list, [$test_list->[$i], $test_list->[$j]];\n            }\n        }\n    }\n    return @result_list;\n}",
    "    my $sum = 0;\n    my $result = [];\n    my $index = 0;\n    my $length = scalar @$test_list;\n    while ($index < $length) {\n        my $tuple = $test_list->[$index];\n        my $tuple_length = scalar @$tuple;\n        my $tuple_index = 0;\n        while ($tuple_index < $tuple_length) {\n            $sum += $tuple->[$tuple_index];\n            $tuple_index++;\n        }\n        $index++;\n    }\n    my $sum_half = $sum / 2;\n    my $result_index = 0;\n    my $result_length = scalar @$result;\n    while ($result_index < $result_length) {\n        my $tuple = $result->[$result_index];\n        my $tuple_length = scalar @$tuple;\n        my $tuple_index = 0;\n        while ($tuple_index < $tuple_length) {\n            my $element = $tuple->[$tuple_index];\n            if ($element == $sum_half) {\n                return 1;\n            }\n            $tuple_index++;\n        }\n        $result_index++;\n    }\n    return 0;\n}",
    "    my @res;\n    my $n = scalar(@$test_list);\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($test_list->[$i] + $test_list->[$j] == 0) {\n                push @res, [$test_list->[$i], $test_list->[$j]];\n            }\n        }\n    }\n    return @res;\n}",
    "    my @result;\n    my $size = scalar @$test_list;\n    my $sum = 0;\n    for (my $i = 0; $i < $size; $i++) {\n        $sum += $test_list->[$i][0];\n    }\n    for (my $i = 0; $i < $size; $i++) {\n        for (my $j = $i + 1; $j < $size; $j++) {\n            if ($test_list->[$i][0] + $test_list->[$j][0] == $sum) {\n                push @result, [$test_list->[$i], $test_list->[$j]];\n            }\n        }\n    }\n    return @result;\n}",
    "    my @result_list;\n    my $n = scalar @$test_list;\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($test_list->[$i]->[0] + $test_list->[$j]->[0] == $test_list->[$i]->[1] + $test_list->[$j]->[1]) {\n                push @result_list, [$test_list->[$i], $test_list->[$j]];\n            }\n        }\n    }\n    return @result_list;\n}",
    "    my @result;\n    my $size = scalar @$test_list;\n    for (my $i = 0; $i < $size; $i++) {\n        for (my $j = $i + 1; $j < $size; $j++) {\n            if ($test_list->[$i]->[0] + $test_list->[$j]->[0] == $test_list->[$i]->[1] + $test_list->[$j]->[1]) {\n                push @result, [$test_list->[$i], $test_list->[$j]];\n            }\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_list}) {\n        for my $j ($i+1 .. $#{$test_list}) {\n            push @result, [$test_list->[$i], $test_list->[$j]];\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    my $sum = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $aa = 0;\n    my $bb = 0;\n    my $cc = 0;\n    my $dd = 0;\n    my $ee = 0;\n    my $ff = 0;\n    my $gg = 0;\n    my $hh = 0;\n    my $ii = 0;\n    my $jj = 0;\n    my $kk = 0;\n    my $ll = 0;\n    my $mm = 0;\n    my $nn = 0;\n    my $oo = 0;\n    my $pp = 0;\n    my $qq = 0;\n    my $rr = 0;\n    my $ss = 0;\n    my $tt = 0;\n    my $uu = 0;\n    my $vv = 0;\n    my $ww = 0;\n    my $xx = 0;\n    my $yy = 0;\n    my $zz = 0;\n    my $aaa = 0;\n    my $bbb = 0;\n    my $ccc = 0;\n    my $ddd = 0;\n    my $eee = 0;\n    my $fff = 0;\n    my $ggg = 0;\n    my $hhh = 0;\n    my $iii = 0;\n    my $jjj = 0;\n    my $kkk = 0;\n    my $lll = 0;\n    my $mmm = 0;\n    my $nnn = 0;\n    my $ooo = 0;\n    my $ppp = 0;\n    my $qqq = 0",
    "    my @result;\n    my $size = scalar @$test_list;\n    for (my $i = 0; $i < $size; $i++) {\n        for (my $j = $i + 1; $j < $size; $j++) {\n            if ($test_list->[$i]->[0] + $test_list->[$j]->[0] == $test_list->[$i]->[1] + $test_list->[$j]->[1]) {\n                push @result, [$test_list->[$i], $test_list->[$j]];\n            }\n        }\n    }\n    return @result;\n}",
    "    my @list = @$test_list;\n    my @result;\n    my $size = scalar @list;\n    my $sum = 0;\n    my $i = 0;\n    my $j = 0;\n    for ($i = 0; $i < $size; $i++) {\n        $sum += $list[$i][0];\n    }\n    my $max = $sum;\n    for ($i = 0; $i < $size; $i++) {\n        $sum = $sum - $list[$i][0] + $list[$i][1];\n        if ($sum > $max) {\n            $max = $sum;\n        }\n    }\n    return $max;\n}",
    "    my $len = scalar @{$test_list};\n    my @result;\n    for (my $i = 0; $i < $len; $i++) {\n        for (my $j = $i + 1; $j < $len; $j++) {\n            my $sum = $test_list->[$i]->[0] + $test_list->[$j]->[0];\n            my @temp = ($sum, $test_list->[$i], $test_list->[$j]);\n            push @result, \\@temp;\n        }\n    }\n    return \\@result;\n}",
    "    my $sum = 0;\n    my $count = 0;\n    my $list_size = scalar @$test_list;\n    my $combinations = [];\n    for (my $i = 0; $i < $list_size - 1; $i++) {\n        for (my $j = $i + 1; $j < $list_size; $j++) {\n            $sum = $test_list->[$i]->[0] + $test_list->[$j]->[0];\n            push @$combinations, [$sum, $test_list->[$i], $test_list->[$j]];\n        }\n    }\n    return $combinations;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_list}) {\n        for my $j ($i+1 .. $#{$test_list}) {\n            my $sum = $test_list->[$i] + $test_list->[$j];\n            push @result, [$sum, $test_list->[$i], $test_list->[$j]];\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    my @test_list = @$test_list;\n    my $len = scalar @test_list;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    for($i = 0; $i < $len; $i++) {\n        for($j = $i + 1; $j < $len; $j++) {\n            for($k = $j + 1; $k < $len; $k++) {\n                for($l = $k + 1; $l < $len; $l++) {\n                    for($m = $l + 1; $m < $len; $m++) {\n                        for($n = $m + 1; $n < $len; $n++) {\n                            for($o = $n + 1; $o < $len; $o++) {\n                                for($p = $o + 1; $p < $len; $p++) {\n                                    for($q = $p + 1; $q < $len; $q++) {\n                                        for($r = $q + 1; $r < $len; $r++) {\n                                            for($s = $r + 1; $s < $len; $s++) {\n                                                for($t = $s + 1; $t < $len; $t++) {\n                                                    for($u = $t + 1; $u < $len; $u++) {\n                                                        for($v = $u + 1; $v < $len; $v++) {\n                                                            for($w = $v + 1; $w < $len; $w++) {\n                                                                for($x = $w + 1; $x < $len; $x++) {\n                                                                    for($y = $x + 1; $y < $len;",
    "    my @result;\n    my $n = scalar(@$test_list);\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($test_list->[$i] + $test_list->[$j] == 0) {\n                push @result, [$test_list->[$i], $test_list->[$j]];\n            }\n        }\n    }\n    return @result;\n}",
    "    my @result_list;\n    my $size = scalar(@$test_list);\n    my $sum = 0;\n    for (my $i = 0; $i < $size; $i++) {\n        $sum += $test_list->[$i][0];\n    }\n    my $half_sum = int($sum / 2);\n    my $count = 0;\n    for (my $i = 0; $i < $size; $i++) {\n        my $sum_1 = 0;\n        for (my $j = $i; $j < $size; $j++) {\n            $sum_1 += $test_list->[$j][0];\n            if ($sum_1 == $half_sum) {\n                $count++;\n                my @temp_list;\n                for (my $k = $i; $k <= $j; $k++) {\n                    push(@temp_list, $test_list->[$k]);\n                }\n                push(@result_list, \\@temp_list);\n            }\n        }\n    }\n    return $count, \\@result_list;\n}"
  ]
}