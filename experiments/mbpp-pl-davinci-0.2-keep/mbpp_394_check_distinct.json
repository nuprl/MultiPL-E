{
  "name": "mbpp_394_check_distinct",
  "language": "pl",
  "prompt": "# Write a function to check if given tuple contains no duplicates.\nsub check_distinct {\n    my($test_tup) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_distinct;\n        if(eq_deeply($candidate->([1, 4, 5, 6, 1, 4]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 5, 6]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 4, 5, 6]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my %seen;\n    foreach my $item (@$test_tup) {\n        return 0 if $seen{$item}++;\n    }\n    return 1;\n}",
    "    my %seen;\n    foreach my $item (@$test_tup) {\n        return 0 if $seen{$item}++;\n    }\n    return 1;\n}",
    "    my %seen = ();\n    foreach my $item (@$test_tup) {\n        return 0 if $seen{$item}++;\n    }\n    return 1;\n}",
    "    my %seen = ();\n    foreach my $elem (@$test_tup) {\n        if (exists $seen{$elem}) {\n            return 0;\n        } else {\n            $seen{$elem} = 1;\n        }\n    }\n    return 1;\n}",
    "    my %seen;\n    foreach my $item (@$test_tup) {\n        if ($seen{$item}) {\n            return 0;\n        }\n        $seen{$item} = 1;\n    }\n    return 1;\n}",
    "    my %seen;\n    foreach my $elem (@$test_tup) {\n        if ($seen{$elem}) {\n            return 0;\n        }\n        $seen{$elem} = 1;\n    }\n    return 1;\n}",
    "    my %seen = ();\n    foreach my $item (@$test_tup) {\n        if ($seen{$item}) {\n            return 0;\n        }\n        $seen{$item} = 1;\n    }\n    return 1;\n}",
    "    my %seen;\n    foreach my $item (@$test_tup) {\n        return 0 if $seen{$item}++;\n    }\n    return 1;\n}",
    "    my %seen;\n    foreach my $item (@$test_tup) {\n        return 0 if $seen{$item}++;\n    }\n    return 1;\n}",
    "    my $distinct = 1;\n    my %seen;\n    foreach my $elem (@$test_tup) {\n        if ($seen{$elem}) {\n            $distinct = 0;\n            last;\n        }\n        $seen{$elem} = 1;\n    }\n    return $distinct;\n}",
    "    my %seen;\n    foreach my $item (@$test_tup) {\n        return 0 if $seen{$item}++;\n    }\n    return 1;\n}",
    "    my %seen;\n    foreach my $item (@$test_tup) {\n        return 0 if $seen{$item}++;\n    }\n    return 1;\n}",
    "    my(%seen);\n    foreach my $i (@$test_tup) {\n        if ($seen{$i}) {\n            return 0;\n        }\n        $seen{$i} = 1;\n    }\n    return 1;\n}",
    "    my %seen;\n    foreach my $item (@$test_tup) {\n        return 0 if $seen{$item}++;\n    }\n    return 1;\n}",
    "    my $distinct = 1;\n    my %seen;\n    foreach my $elem (@{$test_tup}) {\n        if (exists $seen{$elem}) {\n            $distinct = 0;\n            last;\n        }\n        $seen{$elem} = 1;\n    }\n    return $distinct;\n}",
    "    my %hash;\n    foreach my $i (@$test_tup) {\n        if (exists $hash{$i}) {\n            return 0;\n        }\n        $hash{$i} = 1;\n    }\n    return 1;\n}",
    "    my(@test_tup) = @$test_tup;\n    my(%test_tup);\n    foreach my $i (@test_tup) {\n        if (exists $test_tup{$i}) {\n            return 0;\n        }\n        $test_tup{$i} = 1;\n    }\n    return 1;\n}",
    "    my $distinct = 1;\n    my %seen;\n    foreach my $elem (@$test_tup) {\n        if ($seen{$elem}) {\n            $distinct = 0;\n            last;\n        }\n        $seen{$elem} = 1;\n    }\n    return $distinct;\n}",
    "    my %seen;\n    foreach my $item (@$test_tup) {\n        return 0 if $seen{$item}++;\n    }\n    return 1;\n}",
    "    my %seen;\n    foreach my $elem (@$test_tup) {\n        return 0 if $seen{$elem}++;\n    }\n    return 1;\n}"
  ]
}