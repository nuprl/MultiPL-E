{
  "name": "mbpp_585_expensive_items",
  "language": "pl",
  "prompt": "# Write a function to find the n most expensive items in a given dataset.\nsub expensive_items {\n    my($items, $n) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&expensive_items;\n        if(eq_deeply($candidate->([{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}], 1),[{\"name\" => \"Item-2\", \"price\" => 555.22}])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}, {\"name\" => \"Item-3\", \"price\" => 45.09}], 2),[{\"name\" => \"Item-2\", \"price\" => 555.22}, {\"name\" => \"Item-1\", \"price\" => 101.1}])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}, {\"name\" => \"Item-3\", \"price\" => 45.09}, {\"name\" => \"Item-4\", \"price\" => 22.75}], 1),[{\"name\" => \"Item-2\", \"price\" => 555.22}])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @sorted = sort { $b->{price} <=> $a->{price} } @$items;\n    return @sorted[0..$n-1];\n}",
    "    my @sorted = sort { $b->{price} <=> $a->{price} } @$items;\n    return @sorted[0..$n-1];\n}",
    "    my @sorted = sort { $b->{price} <=> $a->{price} } @$items;\n    return @sorted[0..$n-1];\n}",
    "    my @sorted = sort { $b->{price} <=> $a->{price} } @$items;\n    return @sorted[0..$n-1];\n}",
    "    my @sorted = sort { $b->{price} <=> $a->{price} } @$items;\n    return @sorted[0..$n-1];\n}",
    "    my @sorted = sort { $b->{price} <=> $a->{price} } @$items;\n    return @sorted[0..$n-1];\n}",
    "    my @sorted_items = sort { $b->{price} <=> $a->{price} } @$items;\n    return @sorted_items[0..$n-1];\n}",
    "    my @sorted = sort { $b->{price} <=> $a->{price} } @$items;\n    return @sorted[0..$n-1];\n}",
    "    my @sorted = sort { $b->{price} <=> $a->{price} } @$items;\n    return @sorted[0..$n-1];\n}",
    "    my @sorted = sort { $b->{price} <=> $a->{price} } @$items;\n    return \\@sorted[0 .. $n-1];\n}",
    "    my @sorted = sort { $b->{price} <=> $a->{price} } @$items;\n    return @sorted[0..$n-1];\n}",
    "    my @sorted = sort { $b->{price} <=> $a->{price} } @$items;\n    return @sorted[0..$n-1];\n}",
    "    my @sorted = sort { $b->{price} <=> $a->{price} } @$items;\n    return @sorted[0..$n-1];\n}",
    "    my @sorted = sort { $b->{price} <=> $a->{price} } @$items;\n    return @sorted[0..$n-1];\n}",
    "    my @sorted = sort { $b->{price} <=> $a->{price} } @$items;\n    return @sorted[0..$n-1];\n}",
    "    my @sorted = sort { $b->{price} <=> $a->{price} } @$items;\n    return @sorted[0..$n-1];\n}",
    "    my @sorted = sort { $b->{price} <=> $a->{price} } @$items;\n    return @sorted[0..$n-1];\n}",
    "    my @sorted = sort { $b->{price} <=> $a->{price} } @$items;\n    return @sorted[0..$n-1];\n}",
    "    my @sorted = sort { $b->{price} <=> $a->{price} } @$items;\n    return @sorted[0..$n-1];\n}",
    "    my @sorted = sort { $b->{price} <=> $a->{price} } @$items;\n    return @sorted[0..$n-1];\n}"
  ]
}