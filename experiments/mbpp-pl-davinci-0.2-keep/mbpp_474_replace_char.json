{
  "name": "mbpp_474_replace_char",
  "language": "pl",
  "prompt": "# Write a function to replace characters in a string.\nsub replace_char {\n    my($str1, $ch, $newch) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&replace_char;\n        if(eq_deeply($candidate->(\"polygon\", \"y\", \"l\"),\"pollgon\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"character\", \"c\", \"a\"),\"aharaater\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"python\", \"l\", \"a\"),\"python\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $newstr = \"\";\n    for (my $i = 0; $i < length($str1); $i++) {\n        my $ch1 = substr($str1, $i, 1);\n        if ($ch1 eq $ch) {\n            $newstr .= $newch;\n        } else {\n            $newstr .= $ch1;\n        }\n    }\n    return $newstr;\n}",
    "    my($i, $len);\n    $len = length($str1);\n    for($i=0; $i<$len; $i++) {\n        if(substr($str1, $i, 1) eq $ch) {\n            substr($str1, $i, 1) = $newch;\n        }\n    }\n    return $str1;\n}",
    "    my $newstr = \"\";\n    for(my $i = 0; $i < length($str1); $i++) {\n        if(substr($str1, $i, 1) eq $ch) {\n            $newstr .= $newch;\n        } else {\n            $newstr .= substr($str1, $i, 1);\n        }\n    }\n    return $newstr;\n}",
    "    my $newstr = \"\";\n    foreach my $char (split //, $str1) {\n        if ($char eq $ch) {\n            $newstr .= $newch;\n        } else {\n            $newstr .= $char;\n        }\n    }\n    return $newstr;\n}",
    "    my($i, $len);\n    $len = length($str1);\n    for($i=0; $i<$len; $i++) {\n        if(substr($str1, $i, 1) eq $ch) {\n            substr($str1, $i, 1) = $newch;\n        }\n    }\n    return $str1;\n}",
    "    my $str2 = '';\n    for my $c (split //, $str1) {\n        $str2 .= $c eq $ch ? $newch : $c;\n    }\n    return $str2;\n}",
    "    my $str2 = \"\";\n    for (my $i = 0; $i < length($str1); $i++) {\n        if (substr($str1, $i, 1) eq $ch) {\n            $str2 .= $newch;\n        } else {\n            $str2 .= substr($str1, $i, 1);\n        }\n    }\n    return $str2;\n}",
    "    my $str2 = \"\";\n    for (my $i = 0; $i < length($str1); $i++) {\n        my $ch1 = substr($str1, $i, 1);\n        if ($ch1 eq $ch) {\n            $str2 .= $newch;\n        } else {\n            $str2 .= $ch1;\n        }\n    }\n    return $str2;\n}",
    "    my $newstr = \"\";\n    for(my $i = 0; $i < length($str1); $i++) {\n        my $ch1 = substr($str1, $i, 1);\n        if($ch1 eq $ch) {\n            $newstr .= $newch;\n        } else {\n            $newstr .= $ch1;\n        }\n    }\n    return $newstr;\n}",
    "    my($i, $newstr);\n    for ($i = 0; $i < length($str1); $i++) {\n        if (substr($str1, $i, 1) eq $ch) {\n            $newstr .= $newch;\n        } else {\n            $newstr .= substr($str1, $i, 1);\n        }\n    }\n    return $newstr;\n}",
    "    my $newstr = \"\";\n    for (my $i = 0; $i < length($str1); $i++) {\n        my $ch1 = substr($str1, $i, 1);\n        if ($ch1 eq $ch) {\n            $newstr .= $newch;\n        } else {\n            $newstr .= $ch1;\n        }\n    }\n    return $newstr;\n}",
    "    my $newstr = \"\";\n    for (my $i = 0; $i < length($str1); $i++) {\n        my $char = substr($str1, $i, 1);\n        if ($char eq $ch) {\n            $newstr .= $newch;\n        } else {\n            $newstr .= $char;\n        }\n    }\n    return $newstr;\n}",
    "    my $newstr = \"\";\n    for (my $i = 0; $i < length($str1); $i++) {\n        my $ch1 = substr($str1, $i, 1);\n        if ($ch1 eq $ch) {\n            $newstr .= $newch;\n        } else {\n            $newstr .= $ch1;\n        }\n    }\n    return $newstr;\n}",
    "    my $str2 = \"\";\n    for (my $i = 0; $i < length($str1); $i++) {\n        my $c = substr($str1, $i, 1);\n        if ($c eq $ch) {\n            $str2 .= $newch;\n        } else {\n            $str2 .= $c;\n        }\n    }\n    return $str2;\n}",
    "    my $newstr = \"\";\n    for my $c (split //, $str1) {\n        if ($c eq $ch) {\n            $newstr .= $newch;\n        } else {\n            $newstr .= $c;\n        }\n    }\n    return $newstr;\n}",
    "    my($i);\n    my($str2);",
    "    my($i, $len, $newstr);\n    $len = length($str1);\n    $newstr = \"\";\n    for($i = 0; $i < $len; $i++) {\n        if(substr($str1, $i, 1) eq $ch) {\n            $newstr = $newstr . $newch;\n        } else {\n            $newstr = $newstr . substr($str1, $i, 1);\n        }\n    }\n    return $newstr;\n}",
    "    my $newstr = \"\";\n    for my $i (0..length($str1)-1) {\n        my $c = substr($str1, $i, 1);\n        if ($c eq $ch) {\n            $c = $newch;\n        }\n        $newstr .= $c;\n    }\n    return $newstr;\n}",
    "    my $str2 = \"\";\n    for(my $i = 0; $i < length($str1); $i++) {\n        my $char = substr($str1, $i, 1);\n        if($char eq $ch) {\n            $str2 .= $newch;\n        } else {\n            $str2 .= $char;\n        }\n    }\n    return $str2;\n}",
    "    my($i, $len, $newstr);\n    $len = length($str1);\n    $newstr = \"\";\n    for($i=0; $i<$len; $i++) {\n        if(substr($str1, $i, 1) eq $ch) {\n            $newstr = $newstr . $newch;\n        }\n        else {\n            $newstr = $newstr . substr($str1, $i, 1);\n        }\n    }\n    return $newstr;\n}"
  ]
}