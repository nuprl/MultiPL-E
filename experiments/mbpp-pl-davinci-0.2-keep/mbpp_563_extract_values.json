{
  "name": "mbpp_563_extract_values",
  "language": "pl",
  "prompt": "# Write a function to extract values between quotation marks from a string.\nsub extract_values {\n    my($text) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&extract_values;\n        if(eq_deeply($candidate->(\"\"Python\", \"PHP\", \"Java\"\"),[\"Python\", \"PHP\", \"Java\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"python\",\"program\",\"language\"\"),[\"python\", \"program\", \"language\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"red\",\"blue\",\"green\",\"yellow\"\"),[\"red\", \"blue\", \"green\", \"yellow\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @values = ();\n    while ($text =~ /\"([^\"]+)\"/g) {\n        push @values, $1;\n    }\n    return @values;\n}",
    "    my @values = ();\n    while($text =~ /\"([^\"]+)\"/g) {\n        push @values, $1;\n    }\n    return @values;\n}",
    "    my @values = ();\n    while($text =~ /\"([^\"]*)\"/g) {\n        push @values, $1;\n    }\n    return @values;\n}",
    "    my @values = ();\n    while ($text =~ /\"(.*?)\"/g) {\n        push(@values, $1);\n    }\n    return @values;\n}",
    "    my @values = ();\n    while ($text =~ /\"([^\"]*)\"/g) {\n        push @values, $1;\n    }\n    return @values;\n}",
    "    my @values = ();\n    while ($text =~ /\"([^\"]*)\"/g) {\n        push @values, $1;\n    }\n    return @values;\n}",
    "    my @values;\n    while($text =~ /\"([^\"]+)\"/g) {\n        push(@values, $1);\n    }\n    return @values;\n}",
    "    my @values = ();\n    while ($text =~ /\"([^\"]+)\"/g) {\n        push(@values, $1);\n    }\n    return @values;\n}",
    "    my @values;\n    while ($text =~ /\"([^\"]*)\"/g) {\n        push(@values, $1);\n    }\n    return @values;\n}",
    "    my @values;\n    while($text =~ /\"([^\"]+)\"/g) {\n        push @values, $1;\n    }\n    return @values;\n}",
    "    my @values = ();\n    while ($text =~ /\"([^\"]+)\"/g) {\n        push @values, $1;\n    }\n    return @values;\n}",
    "    my @values = ();\n    my $value = '';\n    my $in_quotes = 0;\n    for (my $i = 0; $i < length($text); $i++) {\n        my $c = substr($text, $i, 1);\n        if ($c eq '\"') {\n            if ($in_quotes) {\n                push @values, $value;\n                $value = '';\n            }\n            $in_quotes = !$in_quotes;\n        } elsif ($in_quotes) {\n            $value .= $c;\n        }\n    }\n    return @values;\n}",
    "    my @values;\n    while ($text =~ /\"([^\"]+)\"/g) {\n        push @values, $1;\n    }\n    return @values;\n}",
    "    my @values;\n    while ($text =~ /\"([^\"]+)\"/g) {\n        push @values, $1;\n    }\n    return @values;\n}",
    "    my @values = ();\n    while ($text =~ /\"([^\"]*)\"/g) {\n        push @values, $1;\n    }\n    return @values;\n}",
    "    my @values = ();\n    while ($text =~ /\"([^\"]*)\"/g) {\n        push(@values, $1);\n    }\n    return @values;\n}",
    "    my @values = ();\n    while ($text =~ /\\\"([^\\\"]+)\\\"/g) {\n        push @values, $1;\n    }\n    return @values;\n}",
    "    my(@values) = ();\n    while($text =~ /\"(.*?)\"/g) {\n        push(@values, $1);\n    }\n    return @values;\n}",
    "    my @values = ();\n    while ($text =~ /\"([^\"]*)\"/g) {\n        push @values, $1;\n    }\n    return @values;\n}",
    "    my @values = ();\n    while ($text =~ /\\\"([^\\\"]*)\\\"/g) {\n        push @values, $1;\n    }\n    return @values;\n}"
  ]
}