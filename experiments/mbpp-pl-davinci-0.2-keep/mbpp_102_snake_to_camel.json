{
  "name": "mbpp_102_snake_to_camel",
  "language": "pl",
  "prompt": "# Write a function to convert a snake case string to camel case string.\nsub snake_to_camel {\n    my($word) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&snake_to_camel;\n        if(eq_deeply($candidate->(\"python_program\"),\"PythonProgram\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"python_language\"),\"PythonLanguage\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"programming_language\"),\"ProgrammingLanguage\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    $word =~ s/(\\_\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/^\\s+//;\n    $word =~ s/\\s+$//;\n    $word =~ s/\\s+/_/g;\n    $word =~ s/^([a-z])/uc($1)/e;\n    $word =~ s/_(.)/uc($1)/ge;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_([a-z])/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/(^|_)([a-z])/$2/g;\n    return ucfirst $word;\n}",
    "    $word =~ s/\\b([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_([a-z])/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/^_//;\n    $word =~ s/_([a-z])/\\u$1/g;\n    $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/^([a-z])/\\u$1/;\n    $word =~ s/_([a-z])/\\u$1/g;\n    return $word;\n}",
    "\n    $word =~ s/\\_(\\w)/\\U$1/g;"
  ]
}