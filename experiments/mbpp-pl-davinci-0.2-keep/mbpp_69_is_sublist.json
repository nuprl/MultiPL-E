{
  "name": "mbpp_69_is_sublist",
  "language": "pl",
  "prompt": "# Write a function to check whether a list contains the given sublist or not.\nsub is_sublist {\n    my($l, $s) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_sublist;\n        if(eq_deeply($candidate->([2, 4, 3, 5, 7], [3, 7]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 5, 7], [4, 3]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 5, 7], [1, 6]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $i = 0;\n    my $j = 0;\n    my $len_l = scalar @$l;\n    my $len_s = scalar @$s;\n    while ($i < $len_l && $j < $len_s) {\n        if ($l->[$i] == $s->[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i++;\n            $j = 0;\n        }\n    }\n    return $j == $len_s;\n}",
    "    return 0 if @$s > @$l;\n    for my $i (0 .. @$l - @$s) {\n        my $j;\n        for ($j = 0; $j < @$s; $j++) {\n            last if $l->[$i + $j] ne $s->[$j];\n        }\n        return 1 if $j == @$s;\n    }\n    return 0;\n}",
    "    my $len_l = @$l;\n    my $len_s = @$s;\n    for(my $i = 0; $i <= $len_l - $len_s; $i++) {\n        my $j = 0;\n        for(; $j < $len_s; $j++) {\n            last if $l->[$i + $j] != $s->[$j];\n        }\n        return 1 if $j == $len_s;\n    }\n    return 0;\n}",
    "    my $len = @$s;\n    for (my $i = 0; $i < @$l - $len + 1; $i++) {\n        my $j;\n        for ($j = 0; $j < $len; $j++) {\n            last if $l->[$i+$j] ne $s->[$j];\n        }\n        return 1 if $j == $len;\n    }\n    return 0;\n}",
    "    my $i = 0;\n    for my $e (@$l) {\n        if ($e == $s->[$i]) {\n            $i++;\n            return 1 if $i == @$s;\n        }\n        else {\n            $i = 0;\n        }\n    }\n    return 0;\n}",
    "    my $n = @$s;\n    for (my $i = 0; $i <= @$l - $n; $i++) {\n        if (join(',', @$l[$i..$i+$n-1]) eq join(',', @$s)) {\n            return 1;\n        }\n    }\n    return 0;\n}",
    "    my $n = @$s;\n    for my $i (0..@$l-$n) {\n        my $j;\n        for ($j=0; $j<$n; $j++) {\n            last if $l->[$i+$j] ne $s->[$j];\n        }\n        return 1 if $j == $n;\n    }\n    return 0;\n}",
    "    my $i = 0;\n    my $j = 0;\n    while ($i < @$l && $j < @$s) {\n        if ($l->[$i] == $s->[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i = $i - $j + 1;\n            $j = 0;\n        }\n    }\n    return $j == @$s;\n}",
    "    return 0 if @$s > @$l;\n    for my $i (0 .. $#$l - $#$s) {\n        return 1 if $l->[$i] eq $s->[0] and\n                    join(',', @$l[$i .. $i + $#$s]) eq join(',', @$s);\n    }\n    return 0;\n}",
    "    my $i = 0;\n    my $j = 0;\n    while ($i < @$l && $j < @$s) {\n        if ($l->[$i] == $s->[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i++;\n            $j = 0;\n        }\n    }\n    return $j == @$s;\n}",
    "    my $i = 0;\n    for my $e (@$l) {\n        if ($e == $s->[$i]) {\n            $i++;\n            if ($i == @$s) {\n                return 1;\n            }\n        } else {\n            $i = 0;\n        }\n    }\n    return 0;\n}",
    "    my $i = 0;\n    for my $e (@$l) {\n        if ($e == $s->[$i]) {\n            $i++;\n            if ($i == @$s) {\n                return 1;\n            }\n        } else {\n            $i = 0;\n        }\n    }\n    return 0;\n}",
    "    my $i = 0;\n    my $j = 0;\n    while ($i < @$l && $j < @$s) {\n        if ($l->[$i] == $s->[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i = $i - $j + 1;\n            $j = 0;\n        }\n    }\n    return $j == @$s;\n}",
    "    my $len = @$s;\n    for my $i (0 .. @$l - $len) {\n        my $j;\n        for ($j = 0; $j < $len; $j++) {\n            last if $l->[$i+$j] ne $s->[$j];\n        }\n        return 1 if $j == $len;\n    }\n    return 0;\n}",
    "    my $i = 0;\n    my $j = 0;\n    my $n = @$l;\n    my $m = @$s;\n    while ($i < $n and $j < $m) {\n        if ($l->[$i] == $s->[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i = $i - $j + 1;\n            $j = 0;\n        }\n    }\n    return $j == $m;\n}",
    "    my $i = 0;\n    while ($i < @$l) {\n        if ($l->[$i] == $s->[0]) {\n            my $j = 0;\n            while ($j < @$s && $l->[$i + $j] == $s->[$j]) {\n                $j++;\n            }\n            return 1 if $j == @$s;\n        }\n        $i++;\n    }\n    return 0;\n}",
    "    my $len = @$s;\n    for (my $i = 0; $i <= @$l - $len; $i++) {\n        if (join(',', @$l[$i..$i+$len-1]) eq join(',', @$s)) {\n            return 1;\n        }\n    }\n    return 0;\n}",
    "    my $i = 0;\n    for my $e (@$l) {\n        if ($e == $s->[$i]) {\n            $i++;\n            return 1 if $i == @$s;\n        } else {\n            $i = 0;\n        }\n    }\n    return 0;\n}",
    "    my $i = 0;\n    my $j = 0;\n    while ($i < @$l && $j < @$s) {\n        if ($l->[$i] == $s->[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i = $i - $j + 1;\n            $j = 0;\n        }\n    }\n    return $j == @$s;\n}",
    "    my $i = 0;\n    my $j = 0;\n    while ($i < @$l && $j < @$s) {\n        if ($l->[$i] == $s->[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    return $j == @$s;\n}"
  ]
}