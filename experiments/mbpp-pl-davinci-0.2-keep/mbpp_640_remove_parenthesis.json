{
  "name": "mbpp_640_remove_parenthesis",
  "language": "pl",
  "prompt": "# Write a function to remove the parenthesis and what is inbetween them from a string.\nsub remove_parenthesis {\n    my($items) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_parenthesis;\n        if(eq_deeply($candidate->([\"python (chrome)\"]),\"python\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"string(.abc)\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"alpha(num)\"]),\"alpha\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    $items =~ s/\\(.*?\\)//g;\n    return $items;\n}",
    "    $items =~ s/\\(.*?\\)//g;\n    return $items;\n}",
    "    $items =~ s/\\(.*?\\)//g;\n    return $items;\n}",
    "    $items =~ s/\\(.*?\\)//g;\n    return $items;\n}",
    "    $items =~ s/\\(.*?\\)//g;\n    return $items;\n}",
    "    $items =~ s/\\(.*?\\)//g;\n    return $items;\n}",
    "    $items =~ s/\\(.*?\\)//g;\n    return $items;\n}",
    "    $items =~ s/\\(.*?\\)//g;\n    return $items;\n}",
    "    $items =~ s/\\(.*?\\)//g;\n    return $items;\n}",
    "    $items =~ s/\\(.*?\\)//g;\n    return $items;\n}",
    "    my @items = @$items;\n    my @new_items;\n    foreach my $item (@items) {\n        $item =~ s/\\(.*?\\)//g;\n        push @new_items, $item;\n    }\n    return \\@new_items;\n}",
    "    $items =~ s/\\(.*?\\)//g;\n    return $items;\n}",
    "    $items =~ s/\\(.*?\\)//g;\n    return $items;\n}",
    "    $items =~ s/\\(.*?\\)//g;\n    return $items;\n}",
    "    $items =~ s/\\(.*?\\)//g;\n    return $items;\n}",
    "    $items =~ s/\\(.*?\\)//g;\n    return $items;\n}",
    "    $items =~ s/\\(.*?\\)//g;\n    return $items;\n}",
    "    $items =~ s/\\(.*?\\)//g;\n    return $items;\n}",
    "    $items =~ s/\\(.*?\\)//g;\n    return $items;\n}",
    "    $items =~ s/\\(.*?\\)//g;\n    return $items;\n}"
  ]
}