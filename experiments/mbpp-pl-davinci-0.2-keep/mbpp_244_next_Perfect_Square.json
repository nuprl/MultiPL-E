{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "pl",
  "prompt": "# Write a python function to find the next perfect square greater than a given number.\nsub next_Perfect_Square {\n    my($N) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&next_Perfect_Square;\n        if(eq_deeply($candidate->(35),36)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $num = $N + 1;\n    while (1) {\n        my $sqrt = sqrt($num);\n        if ($sqrt == int($sqrt)) {\n            return $num;\n        }\n        $num++;\n    }\n}",
    "    my $i = 1;\n    while($i < $N) {\n        $i++;\n    }\n    my $sqrt = $i * $i;\n    return $sqrt;\n}",
    "    my $sqrt = sqrt($N);\n    my $next_perfect_square = ceil($sqrt);\n    return $next_perfect_square * $next_perfect_square;\n}",
    "    my $sqrt = sqrt($N);\n    my $next_sqrt = ceil($sqrt);\n    my $next_perfect_square = $next_sqrt * $next_sqrt;\n    return $next_perfect_square;\n}",
    "    my $sqrt = sqrt($N);\n    my $next_perfect_square = ceil($sqrt);\n    return $next_perfect_square * $next_perfect_square;\n}",
    "    my $sqrt = sqrt($N);\n    my $next_perfect_square = ceil($sqrt);\n    return $next_perfect_square * $next_perfect_square;\n}",
    "    my $i = 1;\n    while($i*$i <= $N) {\n        $i++;\n    }\n    return $i*$i;\n}",
    "    my $sqrt = sqrt($N);\n    my $next_perfect_square = ceil($sqrt);\n    return $next_perfect_square * $next_perfect_square;\n}",
    "    my $sqrt = sqrt($N);\n    my $ceil = ceil($sqrt);\n    return $ceil * $ceil;\n}",
    "    my $sqrt = sqrt($N);\n    if ($sqrt == int($sqrt)) {\n        return $N;\n    }\n    else {\n        return ((int($sqrt) + 1) * (int($sqrt) + 1));\n    }\n}",
    "    my $sqrt = sqrt($N);\n    my $next_sqrt = ceil($sqrt);\n    my $next_perfect_square = $next_sqrt * $next_sqrt;\n    return $next_perfect_square;\n}",
    "    my $sqrt = sqrt($N);\n    if ($sqrt =~ /\\./) {\n        $sqrt = int($sqrt);\n        $sqrt++;\n        return $sqrt * $sqrt;\n    }\n    else {\n        return ($sqrt + 1) * ($sqrt + 1);\n    }\n}",
    "    my $i = 1;\n    while($i*$i < $N) {\n        $i++;\n    }\n    return $i*$i;\n}",
    "    my $sqrt = sqrt($N);\n    my $next_sqrt = ceil($sqrt);\n    return $next_sqrt * $next_sqrt;\n}",
    "    my $sqrt = sqrt($N);\n    my $next_sqrt = ceil($sqrt);\n    my $next_perfect_square = $next_sqrt * $next_sqrt;\n    return $next_perfect_square;\n}",
    "    my $sqrt = sqrt($N);\n    if ($sqrt == int($sqrt)) {\n        return ($sqrt + 1) ** 2;\n    }\n    else {\n        return ($sqrt + 1) ** 2;\n    }\n}",
    "    my $sqrt = sqrt($N);\n    my $ceil = ceil($sqrt);\n    my $next_perfect_square = $ceil * $ceil;\n    return $next_perfect_square;\n}",
    "    my $sqrt = sqrt($N);\n    if ($sqrt == int($sqrt)) {\n        return $N;\n    }\n    else {\n        my $next_sqrt = int($sqrt) + 1;\n        return $next_sqrt * $next_sqrt;\n    }\n}",
    "    my $sqrt = sqrt($N);\n    my $next_Perfect_Square = ceil($sqrt);\n    return $next_Perfect_Square * $next_Perfect_Square;\n}",
    "    my $i = 1;\n    while($i < $N) {\n        $i++;\n    }\n    my $sqrt = sqrt($i);\n    if($sqrt == int($sqrt)) {\n        return $i;\n    }\n    else {\n        return ($i+1);\n    }\n}"
  ]
}