{
  "name": "mbpp_758_unique_sublists",
  "language": "pl",
  "prompt": "# Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nsub unique_sublists {\n    my($list1) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_758_unique_sublists.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_sublists;\n        if(eq_deeply($candidate->([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]),{[1, 3] => 2, [5, 7] => 2, [13, 15, 17] => 1, [9, 11] => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]),{[\"green\", \"orange\"] => 2, [\"black\"] => 1, [\"white\"] => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]]),{[10, 20, 30, 40] => 1, [60, 70, 50, 50] => 1, [90, 100, 200] => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"john\"]]),{[\"john\"] => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my %count;\n    foreach my $item (@$list1) {\n        $count{$item}++;\n    }\n    return \\%count;\n}",
    "    my %hash;\n    foreach my $list (@$list1) {\n        my $tuple = join(\",\", @$list);\n        $hash{$tuple}++;\n    }\n    return %hash;\n}",
    "    my %hash;\n    foreach my $item (@{$list1}) {\n        my $tuple = tuple($item);\n        if (exists $hash{$tuple}) {\n            $hash{$tuple}++;\n        } else {\n            $hash{$tuple} = 1;\n        }\n    }\n    return %hash;\n}",
    "    my %count;\n    foreach my $element (@$list1) {\n        $count{$element}++;\n    }\n    return %count;\n}",
    "    my %hash;\n    foreach my $item (@$list1) {\n        my $tuple = tuple($item);\n        $hash{$tuple}++;\n    }\n    return \\%hash;\n}",
    "    my %sublists;\n    foreach my $sublist (@$list1) {\n        my $tuple = tuple($sublist);\n        $sublists{$tuple}++;\n    }\n    return \\%sublists;\n}",
    "    my %hash;\n    foreach my $sublist (@$list1) {\n        my $tuple = tuple($sublist);\n        $hash{$tuple}++;\n    }\n    return %hash;\n}",
    "    my %count;\n    foreach my $element (@$list1) {\n        $count{$element}++;\n    }\n    return %count;\n}",
    "    my %count;\n    foreach my $item (@$list1) {\n        my $tuple = tuple($item);\n        $count{$tuple}++;\n    }\n    return %count;\n}",
    "    my %list_count;\n    foreach my $list (@$list1) {\n        my $tuple = join(\",\", @$list);\n        $list_count{$tuple}++;\n    }\n    return %list_count;\n}",
    "    my %counts;\n    foreach my $sublist (@{$list1}) {\n        my $tuple = tuple($sublist);\n        $counts{$tuple}++;\n    }\n    return \\%counts;\n}",
    "    my %count;\n    foreach my $item (@$list1) {\n        $count{$item}++;\n    }\n    return %count;\n}",
    "    my %sublists;\n    foreach my $item (@$list1) {\n        my $tuple = tuple($item);\n        $sublists{$tuple}++;\n    }\n    return %sublists;\n}",
    "    my %hash;\n    foreach my $sublist (@$list1) {\n        my $tuple = tuple($sublist);\n        $hash{$tuple}++;\n    }\n    return %hash;\n}",
    "    my %count;\n    foreach my $elem (@$list1) {\n        my $tuple = tuple($elem);\n        $count{$tuple}++;\n    }\n    return \\%count;\n}",
    "    my %hash;\n    foreach my $item (@$list1) {\n        my $tuple = tuple($item);\n        $hash{$tuple}++;\n    }\n    return %hash;\n}",
    "    my %count;\n    foreach my $item (@$list1) {\n        $count{$item}++;\n    }\n    return %count;\n}",
    "    my %count;\n    foreach my $item (@$list1) {\n        my $tuple = tuple($item);\n        $count{$tuple}++;\n    }\n    return \\%count;\n}",
    "    my %count;\n    foreach my $element (@$list1) {\n        $count{$element}++;\n    }\n    return %count;\n}",
    "    my %count;\n    foreach my $item (@$list1) {\n        $count{$item}++;\n    }\n    return %count;\n}"
  ]
}