{
  "name": "mbpp_273_substract_elements",
  "language": "pl",
  "prompt": "# Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nsub substract_elements {\n    my($test_tup1, $test_tup2) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&substract_elements;\n        if(eq_deeply($candidate->([10, 4, 5], [2, 5, 18]),[8, -1, -13])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([11, 2, 3], [24, 45, 16]),[-13, -43, -13])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 18, 9], [10, 11, 12]),[-3, 7, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $$test_tup1[$i] - $$test_tup2[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $$test_tup1[$i] - $$test_tup2[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@result, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $$test_tup1[$i] - $$test_tup2[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for(my $i = 0; $i < @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@result, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@result, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @result;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup = ();\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @result = ();\n    for my $i (0 .. $#{$test_tup1}) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @sub_tup, $$test_tup1[$i] - $$test_tup2[$i];\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @sub_tup, $$test_tup1[$i] - $$test_tup2[$i];\n    }\n    return \\@sub_tup;\n}",
    "    my @result = ();\n    for my $i (0..$#{$test_tup1}) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup = ();\n    my $i = 0;\n    while ($i < @$test_tup1) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n        $i++;\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for my $i (0..$#{$test_tup1}) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_elements = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_elements, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return \\@sub_elements;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return \\@sub_tup;\n}",
    "    my @result = ();\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++){\n        push(@result, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @result;\n}",
    "    my $result_tup = ();\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @$result_tup, $$test_tup1[$i] - $$test_tup2[$i];\n    }\n    return $result_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for my $i (0..$#{$test_tup1}) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $$test_tup1[$i] - $$test_tup2[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $$test_tup1[$i] - $$test_tup2[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @tup1 = @{$test_tup1};\n    my @tup2 = @{$test_tup2};\n    my @result;\n    for (my $i = 0; $i < @tup1; $i++) {\n        push @result, $tup1[$i] - $tup2[$i];\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@result, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for my $i (0..$#{$test_tup1}) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar(@{$test_tup1}); $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@result, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $$test_tup1[$i] - $$test_tup2[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    my $i = 0;\n    while ($i < @$test_tup1) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n        $i++;\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $$test_tup1[$i] - $$test_tup2[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @new_tup = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@new_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @new_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @sub_tup, $$test_tup1[$i] - $$test_tup2[$i];\n    }\n    return @sub_tup;\n}",
    "    my @substraction = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@substraction, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @substraction;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @sub_tup, $$test_tup1[$i] - $$test_tup2[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup = ();\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push(@result, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return \\@sub_tup;\n}",
    "    my @result = ();\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@result, @$test_tup1[$i] - @$test_tup2[$i]);\n    }\n    return @result;\n}",
    "    my @sub_tup = ();\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup = ();\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $$test_tup1[$i] - $$test_tup2[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @test_tup1 = @$test_tup1;\n    my @test_tup2 = @$test_tup2;\n    my @result;\n    for (my $i = 0; $i < @test_tup1; $i++) {\n        push @result, $test_tup1[$i] - $test_tup2[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, @$test_tup1[$i] - @$test_tup2[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        push @result_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push(@result, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $$test_tup1[$i] - $$test_tup2[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @sub_tup, $$test_tup1[$i] - $$test_tup2[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push(@result, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @result;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@result, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @result;\n}",
    "    my @tup1 = @$test_tup1;\n    my @tup2 = @$test_tup2;\n    my @result;\n    for (my $i = 0; $i < scalar @tup1; $i++) {\n        push @result, $tup1[$i] - $tup2[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    my $i = 0;\n    while ($i < @$test_tup1) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n        $i++;\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return \\@sub_tup;\n}",
    "    my @sub_tup = ();\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @sub_tup, $$test_tup1[$i] - $$test_tup2[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @result = ();\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@result, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @result;\n}",
    "    my @new_tup;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @new_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @new_tup;\n}",
    "    my @result;\n    my $i = 0;\n    while ($i < @$test_tup1) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n        $i++;\n    }\n    return @result;\n}",
    "    my @result = ();\n    for my $i (0..$#{$test_tup1}) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @result = ();\n    for my $i (0..$#{$test_tup1}) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @subtracted_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @subtracted_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @subtracted_tup;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup = ();\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @sub_tup, $$test_tup1[$i] - $$test_tup2[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    my $i = 0;\n    while ($i < @$test_tup1) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n        $i++;\n    }\n    return @sub_tup;\n}",
    "    my @result = ();\n    for my $i (0..$#{$test_tup1}) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @result_tup = ();\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @result_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result_tup;\n}",
    "    my @result = ();\n    for my $i (0..$#{$test_tup1}) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @substracted_tuple;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @substracted_tuple, $$test_tup1[$i] - $$test_tup2[$i];\n    }\n    return @substracted_tuple;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $$test_tup1[$i] - $$test_tup2[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@result, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @result;\n}",
    "    my @sub_tup = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @result = ();\n    for(my $i = 0; $i < @$test_tup1; $i++) {\n        push @result, $$test_tup1[$i] - $$test_tup2[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @sub_tup, $$test_tup1[$i] - $$test_tup2[$i];\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup = ();\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup = ();\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push(@sub_tup, $$test_tup1[$i] - $$test_tup2[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for my $i (0..$#{$test_tup1}) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@result, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @result;\n}",
    "    my @sub_tup = ();",
    "    my @sub_tup;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @substracted_tuple;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @substracted_tuple, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @substracted_tuple;\n}",
    "    my @result;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@result, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @result;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return \\@sub_tup;\n}",
    "    my @sub_elements;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @sub_elements, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_elements;\n}",
    "    my @sub_tup = ();\n    for my $i (0..$#{$test_tup1}) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @sub_tup, $$test_tup1[$i] - $$test_tup2[$i];\n    }\n    return @sub_tup;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar(@{$test_tup1}); $i++) {\n        push(@result, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @result;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push(@result, $$test_tup1[$i] - $$test_tup2[$i]);\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $$test_tup1[$i] - $$test_tup2[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_elements;\n    for my $i (0..$#{$test_tup1}) {\n        push @sub_elements, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_elements;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return \\@sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup = ();\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @new_tup = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@new_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @new_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return \\@sub_tup;\n}",
    "    my @sub_tup;\n    for my $i (0..$#{$test_tup1}) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @test_tup1 = @$test_tup1;\n    my @test_tup2 = @$test_tup2;\n    my @result;\n    for(my $i = 0; $i < scalar(@test_tup1); $i++) {\n        push(@result, $test_tup1[$i] - $test_tup2[$i]);\n    }\n    return @result;\n}",
    "    my @result_tup = ();\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push(@result_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @result_tup;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @result, $$test_tup1[$i] - $$test_tup2[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup = ();\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return \\@sub_tup;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @result = ();\n    for my $i (0..$#{$test_tup1}) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @result, $$test_tup1[$i] - $$test_tup2[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for(my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@result, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@result, $$test_tup1[$i] - $$test_tup2[$i]);\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @sub_elements = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_elements, $$test_tup1[$i] - $$test_tup2[$i]);\n    }\n    return @sub_elements;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@result, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $$test_tup1[$i] - $$test_tup2[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    foreach my $i (0..$#{$test_tup1}) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @test_tup1 = @$test_tup1;\n    my @test_tup2 = @$test_tup2;\n    my @result;\n    for (my $i = 0; $i < @test_tup1; $i++) {\n        push @result, $test_tup1[$i] - $test_tup2[$i];\n    }\n    return @result;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@result, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return \\@sub_tup;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @result, $$test_tup1[$i] - $$test_tup2[$i];\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @result, $$test_tup1[$i] - $$test_tup2[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return \\@sub_tup;\n}",
    "    my @sub_tup;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for my $i (0..$#{$test_tup1}) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for(my $i=0; $i<scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for my $i (0..$#{$test_tup1}) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @tup1 = @$test_tup1;\n    my @tup2 = @$test_tup2;\n    my @result;\n    for (my $i = 0; $i < scalar @tup1; $i++) {\n        push @result, $tup1[$i] - $tup2[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @sub_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@result, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @result;\n}",
    "    my $result = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@$result, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return $result;\n}",
    "    my @result = ();\n    for(my $i = 0; $i < @$test_tup1; $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@sub_tup, $test_tup1->[$i] - $test_tup2->[$i]);\n    }\n    return @sub_tup;\n}",
    "    my @test_tup1 = @$test_tup1;\n    my @test_tup2 = @$test_tup2;\n    my @result;\n    for (my $i = 0; $i < scalar @test_tup1; $i++) {\n        push @result, $test_tup1[$i] - $test_tup2[$i];\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @result, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @sub_tup = ();\n    for my $i (0..$#{$test_tup1}) {\n        push @sub_tup, $test_tup1->[$i] - $test_tup2->[$i];\n    }\n    return @sub_tup;\n}"
  ]
}