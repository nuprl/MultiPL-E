{
  "name": "mbpp_75_find_tuples",
  "language": "pl",
  "prompt": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\nsub find_tuples {\n    my($test_list, $K) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_tuples;\n        if(eq_deeply($candidate->([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6),[[6, 24, 12]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5),[[5, 25, 30]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4),[[8, 16, 4]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my $flag = 1;\n        foreach my $element (@$tuple) {\n            if ($element % $K != 0) {\n                $flag = 0;\n                last;\n            }\n        }\n        if ($flag) {\n            push @result, $tuple;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my $flag = 1;\n        foreach my $element (@$tuple) {\n            if ($element % $K != 0) {\n                $flag = 0;\n                last;\n            }\n        }\n        if ($flag) {\n            push @result, $tuple;\n        }\n    }\n    return @result;\n}",
    "    my @result_list;\n    foreach my $tuple (@$test_list) {\n        my $is_divisible = 1;\n        foreach my $element (@$tuple) {\n            if ($element % $K != 0) {\n                $is_divisible = 0;\n                last;\n            }\n        }\n        if ($is_divisible) {\n            push @result_list, $tuple;\n        }\n    }\n    return \\@result_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my $flag = 1;\n        foreach my $element (@$tuple) {\n            if ($element % $K != 0) {\n                $flag = 0;\n                last;\n            }\n        }\n        if ($flag) {\n            push @result, $tuple;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my $divisible = 1;\n        foreach my $element (@$tuple) {\n            if ($element % $K != 0) {\n                $divisible = 0;\n                last;\n            }\n        }\n        if ($divisible) {\n            push @result, $tuple;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my $flag = 1;\n        foreach my $num (@$tuple) {\n            if ($num % $K != 0) {\n                $flag = 0;\n                last;\n            }\n        }\n        push @result, $tuple if $flag;\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    foreach my $tuple (@$test_list) {\n        my $flag = 1;\n        foreach my $num (@$tuple) {\n            if ($num % $K != 0) {\n                $flag = 0;\n                last;\n            }\n        }\n        if ($flag == 1) {\n            push @result, $tuple;\n        }\n    }\n    return @result;\n}",
    "    my @result = ();\n    foreach my $tuple (@$test_list) {\n        my $flag = 1;\n        foreach my $element (@$tuple) {\n            if ($element % $K != 0) {\n                $flag = 0;\n                last;\n            }\n        }\n        if ($flag) {\n            push @result, $tuple;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test_tuple (@$test_list) {\n        my $is_divisible = 1;\n        foreach my $test_element (@$test_tuple) {\n            if ($test_element % $K != 0) {\n                $is_divisible = 0;\n                last;\n            }\n        }\n        if ($is_divisible) {\n            push @result, $test_tuple;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my $flag = 1;\n        foreach my $element (@$tuple) {\n            if ($element % $K != 0) {\n                $flag = 0;\n                last;\n            }\n        }\n        if ($flag == 1) {\n            push @result, $tuple;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my $flag = 1;\n        foreach my $element (@$tuple) {\n            if($element % $K != 0) {\n                $flag = 0;\n                last;\n            }\n        }\n        if($flag) {\n            push @result, $tuple;\n        }\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    foreach my $tuple (@$test_list) {\n        my $flag = 1;\n        foreach my $element (@$tuple) {\n            if ($element % $K != 0) {\n                $flag = 0;\n                last;\n            }\n        }\n        if ($flag) {\n            push @result, $tuple;\n        }\n    }\n    return @result;\n}",
    "    my @result_list;\n    foreach my $tuple (@$test_list) {\n        my $flag = 1;\n        foreach my $element (@$tuple) {\n            if ($element % $K != 0) {\n                $flag = 0;\n                last;\n            }\n        }\n        if ($flag) {\n            push @result_list, $tuple;\n        }\n    }\n    return \\@result_list;\n}",
    "    my @result_list;\n    foreach my $tuple (@$test_list) {\n        my $is_divisible = 1;\n        foreach my $element (@$tuple) {\n            if ($element % $K != 0) {\n                $is_divisible = 0;\n                last;\n            }\n        }\n        if ($is_divisible) {\n            push @result_list, $tuple;\n        }\n    }\n    return @result_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my $flag = 1;\n        foreach my $element (@$tuple) {\n            if ($element % $K != 0) {\n                $flag = 0;\n                last;\n            }\n        }\n        push @result, $tuple if $flag;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my $flag = 1;\n        foreach my $element (@$tuple) {\n            if ($element % $K != 0) {\n                $flag = 0;\n                last;\n            }\n        }\n        push @result, $tuple if $flag;\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    foreach my $tuple (@$test_list) {\n        my $is_divisible = 1;\n        foreach my $element (@$tuple) {\n            if ($element % $K != 0) {\n                $is_divisible = 0;\n                last;\n            }\n        }\n        if ($is_divisible) {\n            push @result, $tuple;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my $flag = 1;\n        foreach my $element (@$tuple) {\n            if ($element % $K != 0) {\n                $flag = 0;\n                last;\n            }\n        }\n        if ($flag) {\n            push @result, $tuple;\n        }\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    foreach my $tuple (@$test_list) {\n        my $is_divisible = 1;\n        foreach my $element (@$tuple) {\n            if ($element % $K != 0) {\n                $is_divisible = 0;\n                last;\n            }\n        }\n        if ($is_divisible) {\n            push @result, $tuple;\n        }\n    }\n    return @result;\n}",
    "    my @result = ();\n    foreach my $tuple (@$test_list) {\n        my $is_divisible = 1;\n        foreach my $element (@$tuple) {\n            if ($element % $K != 0) {\n                $is_divisible = 0;\n                last;\n            }\n        }\n        if ($is_divisible) {\n            push(@result, $tuple);\n        }\n    }\n    return \\@result;\n}"
  ]
}