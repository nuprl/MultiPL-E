{
  "name": "mbpp_745_divisible_by_digits",
  "language": "pl",
  "prompt": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nsub divisible_by_digits {\n    my($startnum, $endnum) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&divisible_by_digits;\n        if(eq_deeply($candidate->(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20, 25),[22, 24])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @result = ();\n    for (my $i = $startnum; $i <= $endnum; $i++) {\n        my $num = $i;\n        my $flag = 1;\n        while ($num > 0) {\n            my $digit = $num % 10;\n            if ($digit == 0) {\n                $flag = 0;\n                last;\n            }\n            if ($i % $digit != 0) {\n                $flag = 0;\n                last;\n            }\n            $num = int($num / 10);\n        }\n        if ($flag == 1) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @numbers = ();\n    for (my $i = $startnum; $i <= $endnum; $i++) {\n        my $num = $i;\n        my $divisible = 1;\n        while ($num > 0) {\n            my $digit = $num % 10;\n            if ($digit == 0) {\n                $divisible = 0;\n                last;\n            }\n            if ($i % $digit != 0) {\n                $divisible = 0;\n                last;\n            }\n            $num = int($num / 10);\n        }\n        if ($divisible) {\n            push(@numbers, $i);\n        }\n    }\n    return @numbers;\n}",
    "    my @result = ();\n    my $i = $startnum;\n    while ($i <= $endnum) {\n        my @digits = split(//, $i);\n        my $divisible = 1;\n        foreach my $digit (@digits) {\n            if ($i % $digit != 0) {\n                $divisible = 0;\n                last;\n            }\n        }\n        if ($divisible) {\n            push(@result, $i);\n        }\n        $i++;\n    }\n    return @result;\n}",
    "    my @result = grep {\n        my $n = $_;\n        my @digits = split //, $n;\n        all { $n % $_ == 0 } @digits;\n    } $startnum..$endnum;\n    return @result;\n}",
    "    my @numbers;\n    for my $number ($startnum..$endnum) {\n        my $divisible = 1;\n        for my $digit (split //, $number) {\n            if ($number % $digit != 0) {\n                $divisible = 0;\n                last;\n            }\n        }\n        push @numbers, $number if $divisible;\n    }\n    return @numbers;\n}",
    "    my @result;\n    for (my $i = $startnum; $i <= $endnum; $i++) {\n        my @digits = split //, $i;\n        my $divisible = 1;\n        for my $digit (@digits) {\n            if ($i % $digit != 0) {\n                $divisible = 0;\n                last;\n            }\n        }\n        push @result, $i if $divisible;\n    }\n    return @result;\n}",
    "    my @result = ();\n    for my $num ($startnum..$endnum) {\n        my @digits = split //, $num;\n        my $flag = 1;\n        for my $digit (@digits) {\n            if ($num % $digit != 0) {\n                $flag = 0;\n                last;\n            }\n        }\n        if ($flag) {\n            push @result, $num;\n        }\n    }\n    return @result;\n}",
    "    my @result = ();\n    for my $num ($startnum..$endnum) {\n        my @digits = split //, $num;\n        my $is_divisible = 1;\n        for my $digit (@digits) {\n            if ($num % $digit != 0) {\n                $is_divisible = 0;\n                last;\n            }\n        }\n        push @result, $num if $is_divisible;\n    }\n    return @result;\n}",
    "    my @result = ();\n    for my $num ($startnum .. $endnum) {\n        my @digits = split //, $num;\n        my $divisible = 1;\n        for my $digit (@digits) {\n            if ($num % $digit != 0) {\n                $divisible = 0;\n                last;\n            }\n        }\n        push @result, $num if $divisible;\n    }\n    return @result;\n}",
    "    my @numbers = ();\n    for my $i ($startnum .. $endnum) {\n        my $divisible = 1;\n        for my $digit (split //, $i) {\n            if ($i % $digit != 0) {\n                $divisible = 0;\n                last;\n            }\n        }\n        push @numbers, $i if $divisible;\n    }\n    return @numbers;\n}",
    "    my @result = ();\n    for my $num ($startnum..$endnum) {\n        my $divisible = 1;\n        for my $digit (split //, $num) {\n            if ($num % $digit != 0) {\n                $divisible = 0;\n                last;\n            }\n        }\n        push @result, $num if $divisible;\n    }\n    return @result;\n}",
    "    my @result = ();\n    for my $num ($startnum .. $endnum) {\n        my $divisible = 1;\n        for my $digit (split //, $num) {\n            if ($num % $digit != 0) {\n                $divisible = 0;\n                last;\n            }\n        }\n        push @result, $num if $divisible;\n    }\n    return @result;\n}",
    "    my @result;\n    for my $num ($startnum..$endnum) {\n        my $divisible = 1;\n        for my $digit (split //, $num) {\n            if ($num % $digit != 0) {\n                $divisible = 0;\n                last;\n            }\n        }\n        push @result, $num if $divisible;\n    }\n    return @result;\n}",
    "    my @result;\n    for my $num ($startnum..$endnum) {\n        my $divisible = 1;\n        for my $digit (split //, $num) {\n            if ($num % $digit != 0) {\n                $divisible = 0;\n                last;\n            }\n        }\n        push @result, $num if $divisible;\n    }\n    return @result;\n}",
    "    my @result = ();\n    for my $num ($startnum..$endnum) {\n        my @digits = split(//, $num);\n        my $is_divisible = 1;\n        for my $digit (@digits) {\n            if ($num % $digit != 0) {\n                $is_divisible = 0;\n                last;\n            }\n        }\n        push @result, $num if $is_divisible;\n    }\n    return @result;\n}",
    "    my @result = ();\n    for (my $i = $startnum; $i <= $endnum; $i++) {\n        my $num = $i;\n        my $divisible = 1;\n        while ($num > 0) {\n            my $digit = $num % 10;\n            if ($digit == 0) {\n                $divisible = 0;\n                last;\n            }\n            if ($i % $digit != 0) {\n                $divisible = 0;\n                last;\n            }\n            $num = int($num / 10);\n        }\n        if ($divisible) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @divisible_numbers;\n    for (my $i = $startnum; $i <= $endnum; $i++) {\n        my $num = $i;\n        my $divisible = 1;\n        while ($num > 0) {\n            my $digit = $num % 10;\n            if ($digit == 0) {\n                $divisible = 0;\n                last;\n            }\n            if ($i % $digit != 0) {\n                $divisible = 0;\n                last;\n            }\n            $num = int($num / 10);\n        }\n        if ($divisible) {\n            push @divisible_numbers, $i;\n        }\n    }\n    return @divisible_numbers;\n}",
    "    my @result = ();\n    for(my $i = $startnum; $i <= $endnum; $i++) {\n        my @digits = split(//, $i);\n        my $divisible = 1;\n        for(my $j = 0; $j < scalar(@digits); $j++) {\n            if($i % $digits[$j] != 0) {\n                $divisible = 0;\n                last;\n            }\n        }\n        if($divisible) {\n            push(@result, $i);\n        }\n    }\n    return @result;\n}",
    "    my @result = ();\n    for my $i ($startnum..$endnum) {\n        my $is_divisible = 1;\n        for my $digit (split //, $i) {\n            if ($i % $digit != 0) {\n                $is_divisible = 0;\n                last;\n            }\n        }\n        push @result, $i if $is_divisible;\n    }\n    return @result;\n}",
    "    my @result = ();\n    for (my $i = $startnum; $i <= $endnum; $i++) {\n        my $num = $i;\n        my $divisible = 1;\n        while ($num > 0) {\n            my $digit = $num % 10;\n            if ($digit == 0) {\n                $divisible = 0;\n                last;\n            }\n            if ($i % $digit != 0) {\n                $divisible = 0;\n                last;\n            }\n            $num = int($num / 10);\n        }\n        if ($divisible) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}"
  ]
}