{
  "name": "mbpp_741_all_Characters_Same",
  "language": "pl",
  "prompt": "# Write a python function to check whether all the characters are same or not.\nsub all_Characters_Same {\n    my($s) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&all_Characters_Same;\n        if(eq_deeply($candidate->(\"python\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaa\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"data\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $first = substr($s, 0, 1);\n    my $i;\n    for($i=1; $i<length($s); $i++) {\n        if(substr($s, $i, 1) ne $first) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $i;\n    my $len = length($s);\n    for($i=0; $i<$len; $i++) {\n        if(substr($s, $i, 1) ne substr($s, 0, 1)) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $i = 0;\n    my $j = length($s) - 1;\n    while($i < $j) {\n        if(substr($s, $i, 1) ne substr($s, $j, 1)) {\n            return 0;\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    my $len = length($s);\n    my $i = 0;\n    my $j = $len - 1;\n    while($i < $j) {\n        if(substr($s, $i, 1) ne substr($s, $j, 1)) {\n            return 0;\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    my $len = length($s);\n    my $i = 0;\n    my $flag = 1;\n    while($i < $len) {\n        if(substr($s, $i, 1) ne substr($s, 0, 1)) {\n            $flag = 0;\n            last;\n        }\n        $i++;\n    }\n    return $flag;\n}",
    "    my $i;\n    for($i=0; $i<length($s)-1; $i++) {\n        if(substr($s, $i, 1) ne substr($s, $i+1, 1)) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $first = substr($s, 0, 1);\n    my $i = 1;\n    while ($i < length($s)) {\n        if (substr($s, $i, 1) ne $first) {\n            return 0;\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my $len = length($s);\n    my $i;\n    for($i = 0; $i < $len; $i++) {\n        if(substr($s, $i, 1) ne substr($s, 0, 1)) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $first = substr($s, 0, 1);\n    for (my $i = 1; $i < length($s); $i++) {\n        if (substr($s, $i, 1) ne $first) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $first = substr($s, 0, 1);\n    my $result = 1;\n    for (my $i = 1; $i < length($s); $i++) {\n        if (substr($s, $i, 1) ne $first) {\n            $result = 0;\n            last;\n        }\n    }\n    return $result;\n}",
    "    my $i = 0;\n    my $j = length($s) - 1;\n    while($i < $j) {\n        if(substr($s, $i, 1) ne substr($s, $j, 1)) {\n            return 0;\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    my $i;\n    my $j;\n    my $count = 0;\n    for($i = 0; $i < length($s); $i++) {\n        for($j = $i + 1; $j < length($s); $j++) {\n            if(substr($s, $i, 1) eq substr($s, $j, 1)) {\n                $count++;\n            }\n        }\n    }\n    if($count == length($s) - 1) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    my $i;\n    my $j;\n    my $flag = 0;\n    for($i = 0; $i < length($s); $i++) {\n        for($j = $i + 1; $j < length($s); $j++) {\n            if(substr($s, $i, 1) ne substr($s, $j, 1)) {\n                $flag = 1;\n                last;\n            }\n        }\n        if($flag == 1) {\n            last;\n        }\n    }\n    if($flag == 1) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}",
    "    my $len = length($s);\n    for (my $i = 0; $i < $len; $i++) {\n        for (my $j = $i + 1; $j < $len; $j++) {\n            if (substr($s, $i, 1) ne substr($s, $j, 1)) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my $first = substr($s, 0, 1);\n    for (my $i = 1; $i < length($s); $i++) {\n        if (substr($s, $i, 1) ne $first) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $i;\n    for ($i = 0; $i < length($s) - 1; $i++) {\n        if (substr($s, $i, 1) ne substr($s, $i + 1, 1)) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $first = substr($s, 0, 1);\n    my $i = 1;\n    while ($i < length($s)) {\n        if (substr($s, $i, 1) ne $first) {\n            return 0;\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my $l = length($s);\n    my $i = 0;\n    my $c = substr($s, 0, 1);\n    while ($i < $l) {\n        if (substr($s, $i, 1) ne $c) {\n            return 0;\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my $i = 0;\n    my $j = length($s) - 1;\n    while($i < $j) {\n        if(substr($s, $i, 1) ne substr($s, $j, 1)) {\n            return 0;\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    my $first_char = substr($s, 0, 1);\n    my $len = length($s);\n    for (my $i = 1; $i < $len; $i++) {\n        if (substr($s, $i, 1) ne $first_char) {\n            return 0;\n        }\n    }\n    return 1;\n}"
  ]
}