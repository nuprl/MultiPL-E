{
  "name": "mbpp_222_check_type",
  "language": "pl",
  "prompt": "# Write a function to check if all the elements in tuple have same data type or not.\nsub check_type {\n    my($test_tuple) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_type;\n        if(eq_deeply($candidate->([5, 6, 7, 3, 5, 6]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, \"4\"]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1, 4, 5]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $first_type = ref $test_tuple->[0];\n    foreach my $element (@$test_tuple) {\n        if (ref $element ne $first_type) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $first_element = $test_tuple->[0];\n    my $first_type = ref $first_element;\n    foreach my $element (@$test_tuple) {\n        my $type = ref $element;\n        if ($type ne $first_type) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $type = ref($test_tuple->[0]);\n    foreach my $element (@$test_tuple) {\n        if (ref($element) ne $type) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $type = ref($test_tuple->[0]);\n    foreach my $element (@$test_tuple) {\n        if (ref($element) ne $type) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $type = ref($test_tuple->[0]);\n    foreach my $element (@$test_tuple) {\n        if (ref($element) ne $type) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $first_element = $test_tuple->[0];\n    my $first_type = ref $first_element;\n    foreach my $element (@$test_tuple) {\n        my $type = ref $element;\n        if ($type ne $first_type) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $type = ref $test_tuple->[0];\n    foreach my $element (@$test_tuple) {\n        return 0 if ref $element ne $type;\n    }\n    return 1;\n}",
    "    my $type = ref($test_tuple->[0]);\n    foreach my $element (@$test_tuple) {\n        if (ref($element) ne $type) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $type = ref($test_tuple->[0]);\n    foreach my $element (@$test_tuple) {\n        if (ref($element) ne $type) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $type = ref $test_tuple->[0];\n    foreach my $element (@$test_tuple) {\n        return 0 if ref $element ne $type;\n    }\n    return 1;\n}",
    "    my $count = 0;\n    my $type = ref($test_tuple->[0]);\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq $type) {\n            $count++;\n        }\n    }\n    if ($count == scalar(@$test_tuple)) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    my $first_element = $test_tuple->[0];\n    my $first_type = ref $first_element;\n    foreach my $element (@$test_tuple) {\n        if (ref $element ne $first_type) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $first_element = $test_tuple->[0];\n    my $type = ref($first_element);\n    foreach my $element (@$test_tuple) {\n        if (ref($element) ne $type) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $type = ref($test_tuple->[0]);\n    foreach my $element (@$test_tuple) {\n        if (ref($element) ne $type) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $type = ref($test_tuple->[0]);\n    foreach my $element (@$test_tuple) {\n        if (ref($element) ne $type) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $type = ref($test_tuple->[0]);\n    foreach my $element (@$test_tuple) {\n        if (ref($element) ne $type) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $first_type = ref $test_tuple->[0];\n    foreach my $element (@$test_tuple) {\n        if (ref $element ne $first_type) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $flag = 1;\n    my $type = ref($test_tuple->[0]);\n    for (my $i = 1; $i < scalar @$test_tuple; $i++) {\n        if (ref($test_tuple->[$i]) ne $type) {\n            $flag = 0;\n            last;\n        }\n    }\n    return $flag;\n}",
    "    my $type = ref($test_tuple->[0]);\n    for my $i (0 .. $#{$test_tuple}) {\n        if (ref($test_tuple->[$i]) ne $type) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $first_element = $test_tuple->[0];\n    my $first_element_type = ref($first_element);\n    foreach my $element (@{$test_tuple}) {\n        my $element_type = ref($element);\n        if ($element_type ne $first_element_type) {\n            return 0;\n        }\n    }\n    return 1;\n}"
  ]
}