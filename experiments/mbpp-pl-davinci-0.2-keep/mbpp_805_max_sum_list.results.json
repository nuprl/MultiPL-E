{
  "name": "mbpp_805_max_sum_list",
  "language": "pl",
  "prompt": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmp0tsg8045.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum_list($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum_list called at /tmp/tmps_ft8khk.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ foreach @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $item (@$list) {\n            $sum += $item;\n        }\n        if ($sum > $max) {\n            $max = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n\n    my $max_sum = 0;\n    my $max_list;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpunwrbkk6.pl line 26, at end of line\nsyntax error at /tmp/tmpunwrbkk6.pl line 26, at EOF\nExecution of /tmp/tmpunwrbkk6.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpcu3pnlcw.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum_list($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum_list called at /tmp/tmps_ft8khk.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my($max_sum) = 0;\n    my($max_list) = [];\n    foreach my $list (@$lists) {\n        my($sum) = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmporq9msg5.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmporq9msg5.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ foreach @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpoy6t1c2k.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmpoy6t1c2k.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ foreach @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmphrhcwqc9.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmphrhcwqc9.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpcu3pnlcw.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpcu3pnlcw.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmp0tsg8045.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmp0tsg8045.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $elem (@$list) {\n            $sum += $elem;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpm3bsha6a.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpm3bsha6a.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpcu3pnlcw.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmp0tsg8045.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $item (@$list) {\n            $sum += $item;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpvbb4_a9x.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpvbb4_a9x.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpcu3pnlcw.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ foreach @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmphrhcwqc9.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmphrhcwqc9.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $item (@$list) {\n            $sum += $item;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpvbb4_a9x.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpvbb4_a9x.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpcu3pnlcw.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max) {\n            $max = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpcu60_nwt.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpcu60_nwt.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp69wfismj.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp69wfismj.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $item (@$list) {\n            $sum += $item;\n        }\n        if ($sum > $max) {\n            $max = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpksqt0o2v.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpksqt0o2v.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpe5f1_7kj.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmpe5f1_7kj.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ foreach @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpe5f1_7kj.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmpe5f1_7kj.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $item (@$list) {\n            $sum += $item;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpvbb4_a9x.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpvbb4_a9x.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp3q8r5_zj.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp3q8r5_zj.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpcu3pnlcw.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = undef;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpcb32kwis.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpcb32kwis.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum_list($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum_list called at /tmp/tmps_ft8khk.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp3q8r5_zj.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp3q8r5_zj.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max) {\n            $max = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpcu60_nwt.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpcu60_nwt.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpcu3pnlcw.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmp0tsg8045.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        map { $sum += $_ } @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpckfljhem.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpckfljhem.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $elem (@$list) {\n            $sum += $elem;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpm3bsha6a.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpm3bsha6a.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp69wfismj.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp69wfismj.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmp0tsg8045.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpcu3pnlcw.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpe5f1_7kj.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmpe5f1_7kj.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpe5f1_7kj.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmpe5f1_7kj.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmp0tsg8045.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max) {\n            $max = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpgpq6qqez.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmpgpq6qqez.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = sum($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp80a_dttp.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmp80a_dttp.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmp0tsg8045.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpcu3pnlcw.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpcu3pnlcw.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpcu3pnlcw.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = sum_list($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpx3by18e4.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmpx3by18e4.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = sum_list($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp_7jd7lq3.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmp_7jd7lq3.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = undef;\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpabogpvlp.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmpabogpvlp.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpoy6t1c2k.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmpoy6t1c2k.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmp0tsg8045.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmplqwc3fmy.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmplqwc3fmy.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum_list($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpkugyg_6j.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmpkugyg_6j.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp69wfismj.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp69wfismj.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = sum_list($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpx3by18e4.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmpx3by18e4.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum_list($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum_list called at /tmp/tmps_ft8khk.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $elem (@$list) {\n            $sum += $elem;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpiutlq0jr.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpiutlq0jr.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp805y9mjb.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmp805y9mjb.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n\n    my $max_sum = 0;\n    my $max_list;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpunwrbkk6.pl line 26, at end of line\nsyntax error at /tmp/tmpunwrbkk6.pl line 26, at EOF\nExecution of /tmp/tmpunwrbkk6.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ foreach @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp69wfismj.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp69wfismj.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $item (@$list) {\n            $sum += $item;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpvbb4_a9x.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpvbb4_a9x.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $elem (@$list) {\n            $sum += $elem;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpiutlq0jr.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpiutlq0jr.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpe5f1_7kj.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmpe5f1_7kj.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpcu3pnlcw.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpcu3pnlcw.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum_list($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum_list called at /tmp/tmps_ft8khk.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpcu3pnlcw.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ foreach @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $item (@$list) {\n            $sum += $item;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmps498ibmv.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmps498ibmv.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp805y9mjb.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmp805y9mjb.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum_list($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum_list called at /tmp/tmps_ft8khk.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpbvokhayn.pl line 6.\nBEGIN failed--compilation aborted at /tmp/tmpbvokhayn.pl line 6.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpcu3pnlcw.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpcu3pnlcw.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $item (@$list) {\n            $sum += $item;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpvbb4_a9x.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpvbb4_a9x.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpcu3pnlcw.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpcu3pnlcw.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpe5f1_7kj.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmpe5f1_7kj.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpcu3pnlcw.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}