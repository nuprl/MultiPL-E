{
  "name": "mbpp_308_large_product",
  "language": "pl",
  "prompt": "# Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nsub large_product {\n    my($nums1, $nums2, $N) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&large_product;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @products;\n    for my $num1 (@$nums1) {\n        for my $num2 (@$nums2) {\n            push @products, $num1 * $num2;\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return @products[0..$N-1];\n}",
    "    my @products;\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return @products[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $n1 = scalar @$nums1;\n    my $n2 = scalar @$nums2;\n    while ($i < $n1 && $j < $n2) {\n        my $p1 = $nums1->[$i];\n        my $p2 = $nums2->[$j];\n        if ($p1 < $p2) {\n            $i++;\n        } elsif ($p1 > $p2) {\n            $j++;\n        } else {\n            push @result, [$p1, $p2];\n            $i++;\n            $j++;\n        }\n    }\n    return @result[0..$N-1];\n}",
    "    my @result;\n    my @sorted1 = sort {$b <=> $a} @$nums1;\n    my @sorted2 = sort {$b <=> $a} @$nums2;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @sorted1 && $j < @sorted2) {\n        if ($sorted1[$i] * $sorted2[$j] > $sorted1[$i] * $sorted2[$j+1]) {\n            push @result, [$sorted1[$i], $sorted2[$j]];\n            $j++;\n        } else {\n            push @result, [$sorted1[$i], $sorted2[$j+1]];\n            $i++;\n        }\n    }\n    return @result[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        if ($nums1->[$i] > $nums2->[$j]) {\n            push @result, [$nums1->[$i], $nums2->[$j]];\n            $i++;\n        } else {\n            push @result, [$nums1->[$i], $nums2->[$j]];\n            $j++;\n        }\n    }\n    while ($i < @$nums1) {\n        push @result, [$nums1->[$i], $nums2->[-1]];\n        $i++;\n    }\n    while ($j < @$nums2) {\n        push @result, [$nums1->[-1], $nums2->[$j]];\n        $j++;\n    }\n    return @result[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $size1 = scalar(@$nums1);\n    my $size2 = scalar(@$nums2);\n    while ($i < $size1 && $j < $size2) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            push @result, $nums1->[$i] * $nums2->[$j];\n            $i++;\n        } else {\n            push @result, $nums1->[$i] * $nums2->[$j];\n            $j++;\n        }\n    }\n    while ($i < $size1) {\n        push @result, $nums1->[$i] * $nums2->[$size2 - 1];\n        $i++;\n    }\n    while ($j < $size2) {\n        push @result, $nums1->[$size1 - 1] * $nums2->[$j];\n        $j++;\n    }\n    @result = sort {$b <=> $a} @result;\n    return @result[0..$N - 1];\n}",
    "    my $max = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    for(my $i = 0; $i < @$nums1; $i++) {\n        for(my $j = 0; $j < @$nums2; $j++) {\n            my $prod = $nums1->[$i] * $nums2->[$j];\n            if($prod > $max) {\n                $max = $prod;\n                $max_i = $i;\n                $max_j = $j;\n            }\n        }\n    }\n    my $result = [];\n    push @$result, $max_i;\n    push @$result, $max_j;\n    return $result;\n}",
    "    my @products;\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return @products[0..$N-1];\n}",
    "    my @products = ();\n    for my $i (@$nums1) {\n        for my $j (@$nums2) {\n            push @products, $i * $j;\n        }\n    }\n    @products = sort {$b <=> $a} @products;\n    return @products[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar(@$nums1);\n    my $n = scalar(@$nums2);\n    while ($i < $m && $j < $n && $k < $N) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $result[$k++] = $nums1->[$i++];\n        } else {\n            $result[$k++] = $nums2->[$j++];\n        }\n    }\n    while ($i < $m && $k < $N) {\n        $result[$k++] = $nums1->[$i++];\n    }\n    while ($j < $n && $k < $N) {\n        $result[$k++] = $nums2->[$j++];\n    }\n    return \\@result;\n}",
    "    my $max_product = 0;\n    my $max_product_pair = [];\n    my $max_product_pairs = [];\n    for my $i (0 .. $#$nums1) {\n        for my $j (0 .. $#$nums2) {\n            my $product = $nums1->[$i] * $nums2->[$j];\n            if ($product > $max_product) {\n                $max_product = $product;\n                $max_product_pair = [$i, $j];\n            }\n        }\n    }\n    push @$max_product_pairs, $max_product_pair;\n    my $count = 1;\n    while ($count < $N) {\n        my $max_product = 0;\n        my $max_product_pair = [];\n        for my $i (0 .. $#$nums1) {\n            for my $j (0 .. $#$nums2) {\n                my $product = $nums1->[$i] * $nums2->[$j];\n                if ($product > $max_product) {\n                    my $is_duplicate = 0;\n                    for my $pair (@$max_product_pairs) {\n                        if ($pair->[0] == $i || $pair->[1] == $j) {\n                            $is_duplicate = 1;\n                            last;\n                        }\n                    }\n                    if (!$is_duplicate) {\n                        $max_product = $product;\n                        $max_product_pair = [$i, $j];\n                    }\n                }\n            }\n        }\n        push @$max_product_pairs, $max_product_pair;\n        $count++;\n    }\n    return $max_product_pairs;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar(@$nums1);\n    my $n = scalar(@$nums2);\n    my $product = $nums1->[0] * $nums2->[0];\n    my $max_product = $product;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_m = 0;\n    my $max_n = 0;\n    while ($k < $N) {\n        if ($i < $m && $j < $n) {\n            if ($nums1->[$i] < $nums2->[$j]) {\n                $product = $nums1->[$i] * $nums2->[$j];\n                $i++;\n            } else {\n                $product = $nums1->[$i] * $nums2->[$j];\n                $j++;\n            }\n        } elsif ($i < $m) {\n            $product = $nums1->[$i] * $nums2->[$j-1];\n            $i++;\n        } elsif ($j < $n) {\n            $product = $nums1->[$i-1] * $nums2->[$j];\n            $j++;\n        }\n        if ($product > $max_product) {\n            $max_product = $product;\n            $max_i = $i;\n            $max_j = $j;\n            $max_k = $k;\n            $max_m = $m;\n            $max_n = $n;\n        }\n        $k++;\n    }\n    $i = $max_i;\n    $j = $max_j;\n    $k = $max_k;\n    $m = $max_m;\n    $n = $max_n;\n    while ($k < $N) {\n        if ($i < $m && $j < $n) {\n            if",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        if ($nums1->[$i] > $nums2->[$j]) {\n            push @result, $nums1->[$i] * $nums2->[$j];\n            $j++;\n        } else {\n            push @result, $nums1->[$i] * $nums2->[$j];\n            $i++;\n        }\n    }\n    return @result[0..$N-1];\n}",
    "    my @sorted1 = sort {$b <=> $a} @$nums1;\n    my @sorted2 = sort {$b <=> $a} @$nums2;\n    my @result;\n    for (my $i = 0; $i < $N; $i++) {\n        my $max = 0;\n        my $max_i;\n        my $max_j;\n        for (my $i1 = 0; $i1 < @sorted1; $i1++) {\n            for (my $i2 = 0; $i2 < @sorted2; $i2++) {\n                my $product = $sorted1[$i1] * $sorted2[$i2];\n                if ($product > $max) {\n                    $max = $product;\n                    $max_i = $i1;\n                    $max_j = $i2;\n                }\n            }\n        }\n        push @result, $max;\n        $sorted1[$max_i] = 0;\n        $sorted2[$max_j] = 0;\n    }\n    return @result;\n}",
    "    my @result;\n    my @sorted1 = sort {$b <=> $a} @$nums1;\n    my @sorted2 = sort {$b <=> $a} @$nums2;\n    my $i = 0;\n    my $j = 0;\n    while ($N > 0) {\n        if ($sorted1[$i] * $sorted2[$j] > $sorted1[$i] * $sorted2[$j + 1]) {\n            push @result, [$sorted1[$i], $sorted2[$j]];\n            $j++;\n        } else {\n            push @result, [$sorted1[$i], $sorted2[$j + 1]];\n            $i++;\n        }\n        $N--;\n    }\n    return @result;\n}",
    "    my $len1 = scalar @$nums1;\n    my $len2 = scalar @$nums2;\n    my @res;\n    my $i = 0;\n    my $j = $len2 - 1;\n    while ($i < $len1 && $j >= 0) {\n        my $product = $nums1->[$i] * $nums2->[$j];\n        if ($product > $res[0]) {\n            if (scalar @res < $N) {\n                push @res, $product;\n                @res = sort {$b <=> $a} @res;\n            } else {\n                shift @res;\n                push @res, $product;\n                @res = sort {$b <=> $a} @res;\n            }\n        }\n        if ($nums1->[$i] > $nums2->[$j]) {\n            $i++;\n        } else {\n            $j--;\n        }\n    }\n    return \\@res;\n}",
    "    my @products = map { $nums1->[$_] * $nums2->[$_] } (0 .. $#$nums1);\n    @products[0 .. $N - 1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    my $p = $m * $n;\n    my $max = $nums1->[0] * $nums2->[0];\n    my $min = $nums1->[0] * $nums2->[0];\n    my $max_i = 0;\n    my $max_j = 0;\n    my $min_i = 0;\n    my $min_j = 0;\n    my $max_k = 0;\n    my $min_k = 0;\n    while ($k < $N) {\n        if ($i < $m && $j < $n) {\n            if ($nums1->[$i] * $nums2->[$j] > $max) {\n                $max = $nums1->[$i] * $nums2->[$j];\n                $max_i = $i;\n                $max_j = $j;\n            }\n            if ($nums1->[$i] * $nums2->[$j] < $min) {\n                $min = $nums1->[$i] * $nums2->[$j];\n                $min_i = $i;\n                $min_j = $j;\n            }\n            $i++;\n            $j++;\n        } elsif ($i < $m) {\n            if ($nums1->[$i] * $nums2->[$n - 1] > $max) {\n                $max = $nums1->[$i] * $nums2->[$n - 1];\n                $max_i = $i;\n                $max_j = $n - 1;\n            }\n            if ($nums1->[$i] * $nums2->[0] < $min) {\n                $min = $nums1->[$i] * $nums2->[0];\n                $min_i = $i;",
    "    my @res;\n    my @nums1 = sort {$b <=> $a} @$nums1;\n    my @nums2 = sort {$b <=> $a} @$nums2;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @nums1 && $j < @nums2) {\n        if ($nums1[$i] * $nums2[$j] > $nums1[$i] * $nums2[$j+1]) {\n            push @res, [$nums1[$i], $nums2[$j]];\n            $j++;\n        } else {\n            push @res, [$nums1[$i], $nums2[$j+1]];\n            $i++;\n        }\n    }\n    return @res[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = 0;\n    my $n = 0;\n    my $product;\n    my $max_product;\n    my $max_i;\n    my $max_j;\n    my $max_k;\n    my $max_m;\n    my $max_n;",
    "    my @products;\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    my @sorted = sort { $b <=> $a } @products;\n    return @sorted[0..$N-1];\n}",
    "    my $len1 = @$nums1;\n    my $len2 = @$nums2;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $res = [];\n    while ($i < $len1 && $j < $len2) {\n        if ($nums1->[$i] > $nums2->[$j]) {\n            $res->[$k++] = $nums1->[$i++];\n        } else {\n            $res->[$k++] = $nums2->[$j++];\n        }\n    }\n    while ($i < $len1) {\n        $res->[$k++] = $nums1->[$i++];\n    }\n    while ($j < $len2) {\n        $res->[$k++] = $nums2->[$j++];\n    }\n    return $res->[$N - 1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    while ($i < $m && $j < $n) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $result[$k++] = $nums1->[$i++];\n        } else {\n            $result[$k++] = $nums2->[$j++];\n        }\n    }\n    while ($i < $m) {\n        $result[$k++] = $nums1->[$i++];\n    }\n    while ($j < $n) {\n        $result[$k++] = $nums2->[$j++];\n    }\n    my $result = 1;\n    for (my $i = $k - 1; $i >= $k - $N; $i--) {\n        $result *= $result[$i];\n    }\n    return $result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        if ($nums1->[$i] > $nums2->[$j]) {\n            push @result, $nums1->[$i] * $nums2->[$j];\n            $j++;\n        } else {\n            push @result, $nums1->[$i] * $nums2->[$j];\n            $i++;\n        }\n    }\n    @result = sort { $b <=> $a } @result;\n    return @result[0..$N-1];\n}",
    "    my $max_product = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            my $product = $nums1->[$i] * $nums2->[$j];\n            if ($product > $max_product) {\n                $max_product = $product;\n                $max_i = $i;\n                $max_j = $j;\n            }\n        }\n    }\n    return [$max_i, $max_j];\n}",
    "    my @products;\n    for my $i (@$nums1) {\n        for my $j (@$nums2) {\n            push @products, $i * $j;\n        }\n    }\n    @products = sort {$b <=> $a} @products;\n    return @products[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = 0;\n    my $n = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    my $aa = 0;\n    my $ab = 0;\n    my $ac = 0;\n    my $ad = 0;\n    my $ae = 0;\n    my $af = 0;\n    my $ag = 0;\n    my $ah = 0;\n    my $ai = 0;\n    my $aj = 0;\n    my $ak = 0;\n    my $al = 0;\n    my $am = 0;\n    my $an = 0;\n    my $ao = 0;\n    my $ap = 0;\n    my $aq = 0;\n    my $ar = 0;\n    my $as = 0;\n    my $at = 0;\n    my $au = 0;\n   ",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = 0;\n    my $n = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    my $aa = 0;\n    my $ab = 0;\n    my $ac = 0;\n    my $ad = 0;\n    my $ae = 0;\n    my $af = 0;\n    my $ag = 0;\n    my $ah = 0;\n    my $ai = 0;\n    my $aj = 0;\n    my $ak = 0;\n    my $al = 0;\n    my $am = 0;\n    my $an = 0;\n    my $ao = 0;\n    my $ap = 0;\n    my $aq = 0;\n    my $ar = 0;\n    my $as = 0;\n    my $at = 0;\n    my $au = 0;\n   ",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    my $max = $nums1->[0] * $nums2->[0];\n    my $min = $nums1->[0] * $nums2->[0];\n    while ($i < $m && $j < $n) {\n        my $product = $nums1->[$i] * $nums2->[$j];\n        if ($product > $max) {\n            $max = $product;\n            $result[$k++] = $product;\n        }\n        if ($product < $min) {\n            $min = $product;\n            $result[$k++] = $product;\n        }\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        my $p = $nums1->[$i] * $nums2->[$j];\n        if ($p > $result[-1]) {\n            if (@result < $N) {\n                push @result, $p;\n            } else {\n                shift @result;\n                push @result, $p;\n            }\n        }\n        if ($nums1->[$i] > $nums2->[$j]) {\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    return @result;\n}",
    "    my @products = ();\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    my $max = $nums1->[0] * $nums2->[0];\n    my $min = $nums1->[0] * $nums2->[0];\n    for ($i = 0; $i < $m; $i++) {\n        if ($nums1->[$i] > $max) {\n            $max = $nums1->[$i];\n        }\n        if ($nums1->[$i] < $min) {\n            $min = $nums1->[$i];\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        if ($nums2->[$i] > $max) {\n            $max = $nums2->[$i];\n        }\n        if ($nums2->[$i] < $min) {\n            $min = $nums2->[$i];\n        }\n    }\n    for ($i = 0; $i < $N; $i++) {\n        push @products, $max;\n    }\n    for ($i = 0; $i < $m; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $k = $N - 1;\n            while ($k >= 0 && $products[$k] < $nums1->[$i] * $nums2->[$j]) {\n                $products[$k + 1] = $products[$k];\n                $k--;\n            }\n            $products[$k + 1] = $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    return @products;\n}",
    "    my @products = map { $nums1->[$_] * $nums2->[$_] } 0 .. $#$nums1;\n    my @sorted = sort { $b <=> $a } @products;\n    return @sorted[0 .. $N - 1];\n}",
    "    my @products = map { $nums1->[$_] * $nums2->[$_] } 0..$#$nums1;\n    return (sort { $b <=> $a } @products)[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            push @result, $nums1->[$i] * $nums2->[$j];\n            $i++;\n        } else {\n            push @result, $nums1->[$i] * $nums2->[$j];\n            $j++;\n        }\n    }\n    return @result[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        if ($i + $j == $N) {\n            push @result, [$i, $j];\n        }\n    }\n    return @result;\n}",
    "    my @products = ();\n    for my $n1 (@$nums1) {\n        for my $n2 (@$nums2) {\n            push @products, $n1 * $n2;\n        }\n    }\n    return [sort {$b <=> $a} @products[0..$N-1]];\n}",
    "    my @products;\n    for my $i (0 .. $#$nums1) {\n        for my $j (0 .. $#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    return [ sort { $b <=> $a } @products[0 .. $N - 1] ];\n}",
    "    my @products = map { $_ * $_ } @$nums1;\n    my @sorted = sort { $b <=> $a } @products;\n    return @sorted[0..$N-1];\n}",
    "\n    my @sorted1 = sort {$b <=> $a} @$nums1;\n    my @sorted2 = sort {$b <=> $a} @$nums2;",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar(@$nums1);\n    my $n = scalar(@$nums2);\n    my $product;\n    my $max;\n    my $index;\n    my $flag = 0;\n    while ($i < $m && $j < $n) {\n        $product = $nums1->[$i] * $nums2->[$j];\n        if ($k < $N) {\n            $result[$k] = $product;\n            $k++;\n        } else {\n            $max = $result[0];\n            $index = 0;\n            for (my $l = 1; $l < $k; $l++) {\n                if ($result[$l] > $max) {\n                    $max = $result[$l];\n                    $index = $l;\n                }\n            }\n            if ($product < $max) {\n                $result[$index] = $product;\n            } else {\n                $flag = 1;\n                last;\n            }\n        }\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n    if ($flag == 0) {\n        while ($i < $m) {\n            $product = $nums1->[$i] * $nums2->[$n - 1];\n            if ($k < $N) {\n                $result[$k] = $product;\n                $k++;\n            } else {\n                $max = $result[0];\n                $index = 0;\n                for (my $l = 1; $l < $k; $l++) {\n                    if ($result[$l] > $max) {\n                        $max = $result[$l];\n                        $index = $l;\n                    }\n                }\n                if ($product < $max) {\n                    $result[$index] = $product;\n                } else {\n                    $flag = 1;\n                    last",
    "    my @result = ();\n    my @sorted1 = sort {$b <=> $a} @$nums1;\n    my @sorted2 = sort {$b <=> $a} @$nums2;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @sorted1 && $j < @sorted2 && $N > 0) {\n        my $product = $sorted1[$i] * $sorted2[$j];\n        if ($product > $sorted1[$i+1] * $sorted2[$j] && $product > $sorted1[$i] * $sorted2[$j+1]) {\n            push @result, $product;\n            $N--;\n        }\n        if ($sorted1[$i] > $sorted2[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n    return @result;\n}",
    "    my @products;\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return @products[0..$N-1];\n}",
    "    my @products = ();\n    for my $i (0 .. $#$nums1) {\n        for my $j (0 .. $#$nums2) {\n            my $product = $nums1->[$i] * $nums2->[$j];\n            if (@products < $N) {\n                push @products, $product;\n            }\n            elsif ($product > $products[0]) {\n                $products[0] = $product;\n            }\n            @products = sort {$b <=> $a} @products;\n        }\n    }\n    return @products;\n}",
    "    my @result;",
    "    my @products = ();\n    for my $i (0 .. $#$nums1) {\n        for my $j (0 .. $#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort {$b <=> $a} @products;\n    return @products[0 .. $N-1];\n}",
    "    my @result;\n    my @sorted1 = sort {$b <=> $a} @$nums1;\n    my @sorted2 = sort {$b <=> $a} @$nums2;\n    my $i = 0;\n    my $j = 0;\n    while ($N > 0) {\n        my $product = $sorted1[$i] * $sorted2[$j];\n        if ($product > $sorted1[$i + 1] * $sorted2[$j]) {\n            $i++;\n        } elsif ($product > $sorted1[$i] * $sorted2[$j + 1]) {\n            $j++;\n        } else {\n            $i++;\n            $j++;\n        }\n        push @result, $product;\n        $N--;\n    }\n    return @result;\n}",
    "    my @prods = sort {$b <=> $a} map {$_->[0] * $_->[1]} combinations($nums1, $nums2);\n    return @prods[0..$N-1];\n}",
    "    my @products = sort { $b <=> $a } map { $nums1->[$_] * $nums2->[$_] } 0..$#$nums1;\n    return @products[0..$N-1];\n}",
    "    my @result;\n    my @sorted1 = sort {$b <=> $a} @$nums1;\n    my @sorted2 = sort {$b <=> $a} @$nums2;\n    my $i = 0;\n    my $j = 0;\n    while ($N > 0) {\n        if ($sorted1[$i] * $sorted2[$j] > $sorted1[$i + 1] * $sorted2[$j + 1]) {\n            push @result, [$sorted1[$i], $sorted2[$j]];\n            $i++;\n        } else {\n            push @result, [$sorted1[$i + 1], $sorted2[$j + 1]];\n            $j++;\n        }\n        $N--;\n    }\n    return @result;\n}",
    "    my @products = ();\n    for my $i (0 .. $#$nums1) {\n        for my $j (0 .. $#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return @products[0 .. $N - 1];\n}",
    "    my @products = ();\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort {$b <=> $a} @products;\n    return @products[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar(@$nums1);\n    my $n = scalar(@$nums2);\n    while ($i < $m && $j < $n) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $result[$k++] = $nums1->[$i++];\n        } else {\n            $result[$k++] = $nums2->[$j++];\n        }\n    }\n    while ($i < $m) {\n        $result[$k++] = $nums1->[$i++];\n    }\n    while ($j < $n) {\n        $result[$k++] = $nums2->[$j++];\n    }\n    my $result = 0;\n    for (my $i = 0; $i < $N; $i++) {\n        $result += $result[$i];\n    }\n    return $result;\n}",
    "    my @products = ();\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort {$b <=> $a} @products;\n    return @products[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    my $product;\n    while ($i < $m && $j < $n) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $product = $nums1->[$i] * $nums2->[$j];\n            $i++;\n        } else {\n            $product = $nums1->[$i] * $nums2->[$j];\n            $j++;\n        }\n        if ($k < $N) {\n            $result[$k] = $product;\n            $k++;\n        } else {\n            my $min = $result[0];\n            my $index = 0;\n            for (my $l = 1; $l < $N; $l++) {\n                if ($result[$l] < $min) {\n                    $min = $result[$l];\n                    $index = $l;\n                }\n            }\n            if ($product > $min) {\n                $result[$index] = $product;\n            }\n        }\n    }\n    return \\@result;\n}",
    "    my @products;\n    for my $n1 (@$nums1) {\n        for my $n2 (@$nums2) {\n            push @products, $n1 * $n2;\n        }\n    }\n    @products = sort {$b <=> $a} @products;\n    return @products[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar(@$nums1);\n    my $n = scalar(@$nums2);\n    while($i < $m && $j < $n && $k < $N) {\n        if($nums1->[$i] < $nums2->[$j]) {\n            $result[$k++] = $nums1->[$i++];\n        } else {\n            $result[$k++] = $nums2->[$j++];\n        }\n    }\n    while($i < $m && $k < $N) {\n        $result[$k++] = $nums1->[$i++];\n    }\n    while($j < $n && $k < $N) {\n        $result[$k++] = $nums2->[$j++];\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    while ($k < $N) {\n        if ($i == $m) {\n            $j++;\n        } elsif ($j == $n) {\n            $i++;\n        } elsif ($nums1->[$i] < $nums2->[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        $k++;\n    }\n    $i--;\n    $j--;\n    $k = 0;\n    while ($k < $N) {\n        if ($i < 0) {\n            push @result, $nums2->[$j];\n            $j--;\n        } elsif ($j < 0) {\n            push @result, $nums1->[$i];\n            $i--;\n        } elsif ($nums1->[$i] < $nums2->[$j]) {\n            push @result, $nums2->[$j];\n            $j--;\n        } else {\n            push @result, $nums1->[$i];\n            $i--;\n        }\n        $k++;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my %hash;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        my $product = $nums1->[$i] * $nums2->[$j];\n        if ($i == 0 || $j == 0) {\n            $hash{$product} = [$i, $j];\n        }\n        if ($product < $nums1->[$i + 1] * $nums2->[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n    my @keys = sort {$b <=> $a} keys %hash;\n    for (my $k = 0; $k < $N; $k++) {\n        my $key = $keys[$k];\n        my $index = $hash{$key};\n        push @result, [$nums1->[$index->[0]], $nums2->[$index->[1]]];\n    }\n    return \\@result;\n}",
    "    my @products;\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort {$b <=> $a} @products;\n    return @products[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    while ($k < $N) {\n        my $product = $nums1->[$i] * $nums2->[$j];\n        if ($i == $m - 1 && $j == $n - 1) {\n            push @result, $product;\n            last;\n        }\n        if ($i == $m - 1) {\n            push @result, $product;\n            $j++;\n            $k++;\n            next;\n        }\n        if ($j == $n - 1) {\n            push @result, $product;\n            $i++;\n            $k++;\n            next;\n        }\n        my $product1 = $nums1->[$i] * $nums2->[$j + 1];\n        my $product2 = $nums1->[$i + 1] * $nums2->[$j];\n        if ($product1 > $product2) {\n            push @result, $product;\n            $j++;\n            $k++;\n        } else {\n            push @result, $product;\n            $i++;\n            $k++;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    while($i < @$nums1 && $j < @$nums2) {\n        if($nums1->[$i] > $nums2->[$j]) {\n            push @result, $nums1->[$i] * $nums2->[$j];\n            $j++;\n        } else {\n            push @result, $nums1->[$i] * $nums2->[$j];\n            $i++;\n        }\n    }\n    while($i < @$nums1) {\n        push @result, $nums1->[$i] * $nums2->[-1];\n        $i++;\n    }\n    while($j < @$nums2) {\n        push @result, $nums1->[-1] * $nums2->[$j];\n        $j++;\n    }\n    @result = sort {$b <=> $a} @result;\n    return @result[0..$N-1];\n}",
    "    my @products;\n    for my $i (0 .. $#$nums1) {\n        for my $j (0 .. $#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return @products[0 .. $N - 1];\n}",
    "    my @products = ();\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort {$b <=> $a} @products;\n    return @products[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $product;",
    "    my @products = map { $_ * $_ } @$nums1;\n    my @sorted = sort { $b <=> $a } @products;\n    return @sorted[0..$N-1];\n}",
    "    my $n1 = scalar @$nums1;\n    my $n2 = scalar @$nums2;\n    my $i = 0;\n    my $j = $n2 - 1;\n    my $count = 0;\n    my @result;\n    while ($count < $N) {\n        my $product = $nums1->[$i] * $nums2->[$j];\n        if ($i < $j) {\n            $i++;\n        } else {\n            $j--;\n        }\n        if ($count == 0) {\n            push @result, $product;\n        } else {\n            my $k = $count - 1;\n            while ($k >= 0) {\n                if ($product > $result[$k]) {\n                    $result[$k + 1] = $result[$k];\n                    $k--;\n                } else {\n                    last;\n                }\n            }\n            $result[$k + 1] = $product;\n        }\n        $count++;\n    }\n    return \\@result;\n}",
    "    my @products;\n    for my $n1 (@$nums1) {\n        for my $n2 (@$nums2) {\n            push @products, $n1 * $n2;\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return @products[0..$N-1];\n}",
    "    my @products = ();\n    my $i = 0;\n    my $j = 0;\n    my $n1 = scalar(@$nums1);\n    my $n2 = scalar(@$nums2);\n    while ($i < $n1 && $j < $n2) {\n        my $p = $nums1->[$i] * $nums2->[$j];\n        if ($p < 0) {\n            if ($nums1->[$i] < 0) {\n                $i++;\n            } else {\n                $j++;\n            }\n        } else {\n            if ($nums1->[$i] > 0) {\n                $i++;\n            } else {\n                $j++;\n            }\n        }\n        push @products, $p;\n    }\n    while ($i < $n1) {\n        push @products, $nums1->[$i] * $nums2->[$n2-1];\n        $i++;\n    }\n    while ($j < $n2) {\n        push @products, $nums1->[$n1-1] * $nums2->[$j];\n        $j++;\n    }\n    @products = sort {$b <=> $a} @products;\n    return @products[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar(@$nums1);\n    my $n = scalar(@$nums2);\n    my $max = $nums1->[0] * $nums2->[0];\n    my $min = $max;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $min_i = 0;\n    my $min_j = 0;\n    while ($k < $N) {\n        if ($i < $m && $j < $n) {\n            if ($nums1->[$i] * $nums2->[$j] > $max) {\n                $max = $nums1->[$i] * $nums2->[$j];\n                $max_i = $i;\n                $max_j = $j;\n            }\n            if ($nums1->[$i] * $nums2->[$j] < $min) {\n                $min = $nums1->[$i] * $nums2->[$j];\n                $min_i = $i;\n                $min_j = $j;\n            }\n            if ($nums1->[$i] * $nums2->[$j] > 0) {\n                $i++;\n            } else {\n                $j++;\n            }\n        } elsif ($i < $m) {\n            if ($nums1->[$i] * $nums2->[$max_j] > $max) {\n                $max = $nums1->[$i] * $nums2->[$max_j];\n                $max_i = $i;\n            }\n            if ($nums1->[$i] * $nums2->[$min_j] < $min) {\n                $min = $nums1->[$i] * $nums2->[$min_j];\n                $min_i = $i;\n            }\n            $i++;\n        } else {\n            if",
    "    my @products = ();\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    my @sorted = sort {$b <=> $a} @products;\n    return @sorted[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = 0;\n    my $n = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    my $aa = 0;\n    my $ab = 0;\n    my $ac = 0;\n    my $ad = 0;\n    my $ae = 0;\n    my $af = 0;\n    my $ag = 0;\n    my $ah = 0;\n    my $ai = 0;\n    my $aj = 0;\n    my $ak = 0;\n    my $al = 0;\n    my $am = 0;\n    my $an = 0;\n    my $ao = 0;\n    my $ap = 0;\n    my $aq = 0;\n    my $ar = 0;\n    my $as = 0;\n    my $at = 0;\n    my $au = 0;\n   ",
    "    my @nums1 = sort {$b <=> $a} @$nums1;\n    my @nums2 = sort {$b <=> $a} @$nums2;\n    my @result;\n    my $i = 0;\n    my $j = 0;\n    while ($N > 0) {\n        if ($nums1[$i] * $nums2[$j] > $nums1[$i] * $nums2[$j+1]) {\n            push @result, [$nums1[$i], $nums2[$j]];\n            $j++;\n        } else {\n            push @result, [$nums1[$i], $nums2[$j+1]];\n            $i++;\n        }\n        $N--;\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while($count < $N) {\n        my $product = $nums1->[$i] * $nums2->[$j];\n        if($i == $#$nums1) {\n            push @result, $product;\n            $j++;\n        }\n        elsif($j == $#$nums2) {\n            push @result, $product;\n            $i++;\n        }\n        elsif($nums1->[$i+1] * $nums2->[$j] > $nums1->[$i] * $nums2->[$j+1]) {\n            push @result, $product;\n            $i++;\n        }\n        else {\n            push @result, $product;\n            $j++;\n        }\n        $count++;\n    }\n    return \\@result;\n}",
    "    my @products;\n    for my $i (0 .. $#$nums1) {\n        for my $j (0 .. $#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort {$b <=> $a} @products;\n    return @products[0 .. $N - 1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        if ($i + $j == $N) {\n            push @result, $nums1->[$i-1] * $nums2->[$j-1];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $n = @$nums1;\n    my $m = @$nums2;\n    my $nums1_max = $nums1->[0];\n    my $nums2_max = $nums2->[0];\n    my $nums1_min = $nums1->[0];\n    my $nums2_min = $nums2->[0];\n    while ($i < $n) {\n        if ($nums1->[$i] > $nums1_max) {\n            $nums1_max = $nums1->[$i];\n        }\n        if ($nums1->[$i] < $nums1_min) {\n            $nums1_min = $nums1->[$i];\n        }\n        $i++;\n    }\n    while ($j < $m) {\n        if ($nums2->[$j] > $nums2_max) {\n            $nums2_max = $nums2->[$j];\n        }\n        if ($nums2->[$j] < $nums2_min) {\n            $nums2_min = $nums2->[$j];\n        }\n        $j++;\n    }\n    my $nums1_max_product = $nums1_max * $nums2_max;\n    my $nums1_min_product = $nums1_min * $nums2_min;\n    my $nums2_max_product = $nums1_max * $nums2_min;\n    my $nums2_min_product = $nums1_min * $nums2_max;\n    my $nums1_max_product_index = 0;\n    my $nums1_min_product_index = 0;\n    my $nums2_max_product_index = 0;\n    my $nums2_min_product_index = 0;\n    while ($k < $N) {\n        if ($",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    while ($i < $m && $j < $n) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $result[$k++] = $nums1->[$i++];\n        } else {\n            $result[$k++] = $nums2->[$j++];\n        }\n    }\n    while ($i < $m) {\n        $result[$k++] = $nums1->[$i++];\n    }\n    while ($j < $n) {\n        $result[$k++] = $nums2->[$j++];\n    }\n    return $result[$N - 1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar(@$nums1);\n    my $n = scalar(@$nums2);\n    while ($i < $m && $j < $n && $k < $N) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $result[$k] = $nums1->[$i] * $nums2->[$j];\n            $i++;\n        } else {\n            $result[$k] = $nums1->[$i] * $nums2->[$j];\n            $j++;\n        }\n        $k++;\n    }\n    while ($i < $m && $k < $N) {\n        $result[$k] = $nums1->[$i] * $nums2->[$n - 1];\n        $i++;\n        $k++;\n    }\n    while ($j < $n && $k < $N) {\n        $result[$k] = $nums1->[$m - 1] * $nums2->[$j];\n        $j++;\n        $k++;\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        my $p = $nums1->[$i] * $nums2->[$j];\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        push @result, $p;\n    }\n    @result = sort { $b <=> $a } @result;\n    return @result[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = 0;\n    my $n = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n   ",
    "    my @products;\n    for my $n1 (@$nums1) {\n        for my $n2 (@$nums2) {\n            push @products, $n1 * $n2;\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return @products[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    my $max = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_m = 0;\n    my $max_n = 0;\n    my $max_product = 0;\n    my $product = 0;\n    my $count = 0;\n    my $count_i = 0;\n    my $count_j = 0;\n    my $count_k = 0;\n    my $count_m = 0;\n    my $count_n = 0;\n    my $count_product = 0;\n    my $count_max = 0;\n    my $count_max_i = 0;\n    my $count_max_j = 0;\n    my $count_max_k = 0;\n    my $count_max_m = 0;\n    my $count_max_n = 0;\n    my $count_max_product = 0;\n    my $count_max_product_i = 0;\n    my $count_max_product_j = 0;\n    my $count_max_product_k = 0;\n    my $count_max_product_m = 0;\n    my $count_max_product_n = 0;\n    my $count_max_product_max = 0;\n    my $count_max_product_max_i = 0;\n    my $count_max_product_max_j = 0;\n    my $count_max_product_max_k = 0;\n    my $count_max_product_max_m = 0;\n    my $count_max_product_max_n = 0;\n    my $count_max_product_max_product = 0;\n    my $count_max_product_max_product_i = 0;\n    my $count_max_product_max_product_j = 0;\n    my $count_max_product_max_",
    "    my @res;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        my $p = $nums1->[$i] * $nums2->[$j];\n        if ($p > $nums1->[$i] * $nums2->[$j+1]) {\n            $j++;\n        } else {\n            $i++;\n        }\n        push @res, $p;\n    }\n    return @res[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        if ($nums1->[$i] > $nums2->[$j]) {\n            push @result, [$nums1->[$i], $nums2->[$j]];\n            $j++;\n        } else {\n            push @result, [$nums1->[$i], $nums2->[$j]];\n            $i++;\n        }\n    }\n    while ($i < @$nums1) {\n        push @result, [$nums1->[$i], $nums2->[-1]];\n        $i++;\n    }\n    while ($j < @$nums2) {\n        push @result, [$nums1->[-1], $nums2->[$j]];\n        $j++;\n    }\n    return @result[0..$N-1];\n}",
    "    my @result = ();\n    my @sorted1 = sort {$b <=> $a} @{$nums1};\n    my @sorted2 = sort {$b <=> $a} @{$nums2};\n    my $i = 0;\n    my $j = 0;\n    while($i < @sorted1 && $j < @sorted2 && $N > 0) {\n        my $product = $sorted1[$i] * $sorted2[$j];\n        if($product > $sorted1[$i] * $sorted2[$j+1]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        push @result, $product;\n        $N--;\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        my $p1 = $nums1->[$i];\n        my $p2 = $nums2->[$j];\n        if ($p1 > $p2) {\n            push @result, [$p1, $p2];\n            $j++;\n        } else {\n            push @result, [$p1, $p2];\n            $i++;\n        }\n    }\n    while ($i < @$nums1) {\n        push @result, [$nums1->[$i], $nums2->[-1]];\n        $i++;\n    }\n    while ($j < @$nums2) {\n        push @result, [$nums1->[-1], $nums2->[$j]];\n        $j++;\n    }\n    return @result[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = @$nums1;\n    my $n = @$nums2;\n    while ($i < $m && $j < $n) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $result[$k++] = $nums1->[$i++];\n        } else {\n            $result[$k++] = $nums2->[$j++];\n        }\n    }\n    while ($i < $m) {\n        $result[$k++] = $nums1->[$i++];\n    }\n    while ($j < $n) {\n        $result[$k++] = $nums2->[$j++];\n    }\n    my $result = 1;\n    for (my $i = 0; $i < $N; $i++) {\n        $result *= $result[$i];\n    }\n    return $result;\n}",
    "    my $n1 = scalar @$nums1;\n    my $n2 = scalar @$nums2;\n    my $i = 0;\n    my $j = $n2 - 1;\n    my $k = 0;\n    my @result = ();\n    while ($k < $N) {\n        my $product = $nums1->[$i] * $nums2->[$j];\n        if ($i < $n1 - 1 && $product < $nums1->[$i + 1] * $nums2->[$j]) {\n            $i++;\n        } else {\n            $j--;\n        }\n        push @result, $product;\n        $k++;\n    }\n    return \\@result;\n}",
    "    my @result;",
    "    my @result;\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            my $prod = $nums1->[$i] * $nums2->[$j];\n            if (@result < $N) {\n                push @result, [$prod, $i, $j];\n                @result = sort {$b->[0] <=> $a->[0]} @result;\n            } elsif ($prod > $result[-1][0]) {\n                $result[-1] = [$prod, $i, $j];\n                @result = sort {$b->[0] <=> $a->[0]} @result;\n            }\n        }\n    }\n    return @result;\n}",
    "    my @products;\n    for my $n1 (@$nums1) {\n        for my $n2 (@$nums2) {\n            push @products, $n1 * $n2;\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return @products[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar(@$nums1);\n    my $n = scalar(@$nums2);\n    my $product;\n    while ($i < $m && $j < $n) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $product = $nums1->[$i] * $nums2->[$j];\n            $i++;\n        } else {\n            $product = $nums1->[$i] * $nums2->[$j];\n            $j++;\n        }\n        if ($k < $N) {\n            $result[$k] = $product;\n            $k++;\n        } else {\n            my $min = $result[0];\n            my $min_index = 0;\n            for (my $l = 1; $l < $N; $l++) {\n                if ($result[$l] < $min) {\n                    $min = $result[$l];\n                    $min_index = $l;\n                }\n            }\n            if ($product > $min) {\n                $result[$min_index] = $product;\n            }\n        }\n    }\n    return \\@result;\n}",
    "    my @products = ();\n    for my $i (0 .. $#$nums1) {\n        for my $j (0 .. $#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return @products[0 .. $N - 1];\n}",
    "    my $max = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            my $prod = $nums1->[$i] * $nums2->[$j];\n            if ($prod > $max) {\n                $max = $prod;\n                $max_i = $i;\n                $max_j = $j;\n            }\n        }\n    }\n    my @result = ($max_i, $max_j);\n    for my $k (1..$N-1) {\n        $max = 0;\n        my $max_i = 0;\n        my $max_j = 0;\n        for my $i (0..$#$nums1) {\n            for my $j (0..$#$nums2) {\n                my $prod = $nums1->[$i] * $nums2->[$j];\n                if ($prod > $max && !grep {$_ == $i} @result && !grep {$_ == $j} @result) {\n                    $max = $prod;\n                    $max_i = $i;\n                    $max_j = $j;\n                }\n            }\n        }\n        push @result, $max_i, $max_j;\n    }\n    return @result;\n}",
    "    my @products = map {$_ * $_} @$nums1;\n    my @sorted = sort {$b <=> $a} @products;\n    my @result;\n    for (my $i = 0; $i < $N; $i++) {\n        my $product = $sorted[$i];\n        my $factor = sqrt($product);\n        my $j = 0;\n        while ($j < @$nums2 && $factor * $nums2->[$j] < $product) {\n            $j++;\n        }\n        push @result, [$factor, $nums2->[$j]];\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        my $product = $nums1->[$i] * $nums2->[$j];\n        if ($product > $nums1->[$i] * $nums2->[$j+1]) {\n            $j++;\n        } else {\n            $i++;\n        }\n        push @result, $product;\n    }\n    return @result[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    my $max = $nums1->[0] * $nums2->[0];\n    my $min = $nums1->[0] * $nums2->[0];\n    for my $num1 (@$nums1) {\n        for my $num2 (@$nums2) {\n            my $product = $num1 * $num2;\n            if ($product > $max) {\n                $max = $product;\n                $i = 0;\n                $result[$i] = [$num1, $num2];\n            } elsif ($product == $max) {\n                $i++;\n                $result[$i] = [$num1, $num2];\n            }\n            if ($product < $min) {\n                $min = $product;\n                $j = 0;\n                $result[$j] = [$num1, $num2];\n            } elsif ($product == $min) {\n                $j++;\n                $result[$j] = [$num1, $num2];\n            }\n        }\n    }\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $l = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $",
    "    my @result;",
    "    my @products;\n    for my $i (0 .. $#$nums1) {\n        for my $j (0 .. $#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return @products[0 .. $N - 1];\n}",
    "    my @ret;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    while ($i < $m && $j < $n) {\n        if ($nums1->[$i] > $nums2->[$j]) {\n            $ret[$k++] = $nums1->[$i++];\n        } else {\n            $ret[$k++] = $nums2->[$j++];\n        }\n    }\n    while ($i < $m) {\n        $ret[$k++] = $nums1->[$i++];\n    }\n    while ($j < $n) {\n        $ret[$k++] = $nums2->[$j++];\n    }\n    return @ret[$k-$N..$k-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar(@$nums1);\n    my $m = scalar(@$nums2);\n    my $k = 0;\n    my $product = 0;\n    my $max = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_product = 0;\n    my $max_k = 0;\n    my $max_product_k = 0;\n    my $max_i_k = 0;\n    my $max_j_k = 0;\n    while ($k < $N) {\n        $max = 0;\n        $max_i = 0;\n        $max_j = 0;\n        $max_product = 0;\n        $max_k = 0;\n        $max_product_k = 0;\n        $max_i_k = 0;\n        $max_j_k = 0;\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $m; $j++) {\n                $product = $nums1->[$i] * $nums2->[$j];\n                if ($product > $max_product) {\n                    $max_product = $product;\n                    $max_i = $i;\n                    $max_j = $j;\n                }\n                if ($product > $max_product_k) {\n                    $max_product_k = $product;\n                    $max_i_k = $i;\n                    $max_j_k = $j;\n                }\n            }\n        }\n        push @result, $max_product_k;\n        $nums1->[$max_i_k] = 0;\n        $nums2->[$max_j_k] = 0;\n        $k++;\n    }\n    return \\@result;\n}",
    "    my @products;\n    for my $i (0 .. $#$nums1) {\n        for my $j (0 .. $#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return @products[0..$N-1];\n}",
    "    my @res;\n    my %hash;\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            my $prod = $nums1->[$i] * $nums2->[$j];\n            $hash{$prod} = [$nums1->[$i], $nums2->[$j]];\n            push @res, $prod;\n        }\n    }\n    @res = sort {$b <=> $a} @res;\n    my @ret;\n    for my $i (0..$N-1) {\n        push @ret, $hash{$res[$i]};\n    }\n    return \\@ret;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    my $count = 0;\n    my $product = 0;\n    my $max_product = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    while ($count < $N) {\n        $max_product = 0;\n        for ($i = 0; $i < $m; $i++) {\n            for ($j = 0; $j < $n; $j++) {\n                $product = $nums1->[$i] * $nums2->[$j];\n                if ($product > $max_product) {\n                    $max_product = $product;\n                    $max_i = $i;\n                    $max_j = $j;\n                }\n            }\n        }\n        $result[$count] = $max_product;\n        $nums1->[$max_i] = 0;\n        $nums2->[$max_j] = 0;\n        $count++;\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        if ($nums1->[$i] > $nums2->[$j]) {\n            push @result, $nums1->[$i] * $nums2->[$j];\n            $j++;\n        } else {\n            push @result, $nums1->[$i] * $nums2->[$j];\n            $i++;\n        }\n    }\n    return @result[0..$N-1];\n}",
    "    my @products = ();\n    for my $i (0 .. $#$nums1) {\n        for my $j (0 .. $#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    return [ sort { $b <=> $a } @products[ 0 .. $N - 1 ] ];\n}",
    "    my @products;\n    for my $n1 (@$nums1) {\n        for my $n2 (@$nums2) {\n            push @products, $n1 * $n2;\n        }\n    }\n    return [sort {$b <=> $a} @products[0..$N-1]];\n}",
    "    my $n1 = scalar @$nums1;\n    my $n2 = scalar @$nums2;\n    my $i = 0;\n    my $j = $n2 - 1;\n    my $count = 0;\n    my @result;\n    while ($count < $N) {\n        my $product = $nums1->[$i] * $nums2->[$j];\n        if ($i < $n1 - 1 && $product < $nums1->[$i + 1] * $nums2->[$j]) {\n            $i++;\n        } else {\n            push @result, $product;\n            $count++;\n            $j--;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my %hash;\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            my $product = $nums1->[$i] * $nums2->[$j];\n            $hash{$product} = [$nums1->[$i], $nums2->[$j]];\n        }\n    }\n    my @keys = sort {$b <=> $a} keys %hash;\n    for my $i (0..$N-1) {\n        push @result, $hash{$keys[$i]};\n    }\n    return \\@result;\n}",
    "    my @sorted1 = sort {$b <=> $a} @$nums1;\n    my @sorted2 = sort {$b <=> $a} @$nums2;\n    my @result;\n    for (my $i = 0; $i < $N; $i++) {\n        my $product = $sorted1[$i] * $sorted2[$i];\n        push @result, $product;\n    }\n    return @result;\n}",
    "    my $n1 = scalar(@$nums1);\n    my $n2 = scalar(@$nums2);\n    my $i = 0;\n    my $j = $n2 - 1;\n    my $k = 0;\n    my @result;\n    while ($k < $N) {\n        my $product = $nums1->[$i] * $nums2->[$j];\n        if ($i == $n1 - 1) {\n            push @result, $product;\n            $j--;\n        } elsif ($j == 0) {\n            push @result, $product;\n            $i++;\n        } elsif ($nums1->[$i] < $nums2->[$j]) {\n            push @result, $product;\n            $i++;\n        } else {\n            push @result, $product;\n            $j--;\n        }\n        $k++;\n    }\n    return \\@result;\n}",
    "    my @products;\n    for my $i (0 .. $#$nums1) {\n        for my $j (0 .. $#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return @products[0 .. $N - 1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar(@{$nums1});\n    my $n = scalar(@{$nums2});\n    while ($i < $m && $j < $n && $k < $N) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $result[$k++] = $nums1->[$i++];\n        } else {\n            $result[$k++] = $nums2->[$j++];\n        }\n    }\n    while ($i < $m && $k < $N) {\n        $result[$k++] = $nums1->[$i++];\n    }\n    while ($j < $n && $k < $N) {\n        $result[$k++] = $nums2->[$j++];\n    }\n    return \\@result;\n}",
    "    my @products;\n    for my $i (0 .. $#$nums1) {\n        for my $j (0 .. $#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return [ @products[0 .. $N-1] ];\n}",
    "    my @products = ();\n    for my $n1 (@$nums1) {\n        for my $n2 (@$nums2) {\n            push @products, $n1 * $n2;\n        }\n    }\n    @products = sort {$b <=> $a} @products;\n    return @products[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar(@$nums1);\n    my $n = scalar(@$nums2);\n    while ($i < $m && $j < $n && $k < $N) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $result[$k++] = $nums1->[$i++];\n        } else {\n            $result[$k++] = $nums2->[$j++];\n        }\n    }\n    while ($i < $m && $k < $N) {\n        $result[$k++] = $nums1->[$i++];\n    }\n    while ($j < $n && $k < $N) {\n        $result[$k++] = $nums2->[$j++];\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    my $product = 0;\n    my $max = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_m = 0;\n    my $max_n = 0;\n    my $max_product = 0;\n    my $max_N = 0;\n    my $max_result = 0;\n    my $max_result_i = 0;\n    my $max_result_j = 0;\n    my $max_result_k = 0;\n    my $max_result_m = 0;\n    my $max_result_n = 0;\n    my $max_result_N = 0;\n    my $max_result_product = 0;\n    my $max_result_result = 0;\n    my $max_result_result_i = 0;\n    my $max_result_result_j = 0;\n    my $max_result_result_k = 0;\n    my $max_result_result_m = 0;\n    my $max_result_result_n = 0;\n    my $max_result_result_N = 0;\n    my $max_result_result_product = 0;\n    my $max_result_result_result = 0;\n    my $max_result_result_result_i = 0;\n    my $max_result_result_result_j = 0;\n    my $max_result_result_result_k = 0;\n    my $max_result_result_result_m = 0;\n    my $max_result_result_result_n = 0;\n    my $max_result_result_result_N = 0;\n    my $max_result_result_result_product = 0;\n    my $max_result_result_result_result = 0;\n    my $max_result_result_result_result_i = 0;\n    my $",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    my $max = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_m = 0;\n    my $max_n = 0;\n    my $max_product = 0;\n    my $product = 0;\n    my $max_product_i = 0;\n    my $max_product_j = 0;\n    my $max_product_k = 0;\n    my $max_product_m = 0;\n    my $max_product_n = 0;\n    my $max_product_index = 0;\n    my $max_product_index_i = 0;\n    my $max_product_index_j = 0;\n    my $max_product_index_k = 0;\n    my $max_product_index_m = 0;\n    my $max_product_index_n = 0;\n    my $max_product_index_index = 0;\n    my $max_product_index_index_i = 0;\n    my $max_product_index_index_j = 0;\n    my $max_product_index_index_k = 0;\n    my $max_product_index_index_m = 0;\n    my $max_product_index_index_n = 0;\n    my $max_product_index_index_index = 0;\n    my $max_product_index_index_index_i = 0;\n    my $max_product_index_index_index_j = 0;\n    my $max_product_index_index_index_k = 0;\n    my $max_product_index_index_index_m = 0;\n    my $max_product_index_index_index_n = 0;\n    my $max_product_index_index_index_index = 0;\n    my $max_product_index_index_index_index_i =",
    "    my @products = map {$_ * $_} @$nums1;\n    my @result;\n    for my $i (0 .. $#$nums2) {\n        my $num = $nums2->[$i];\n        my $product = $num * $num;\n        if (@result < $N) {\n            push @result, $product;\n        } else {\n            my $min = min(@result);\n            if ($product > $min) {\n                @result = grep {$_ != $min} @result;\n                push @result, $product;\n            }\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    while ($i < $m && $j < $n) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $result[$k++] = $nums1->[$i++];\n        } else {\n            $result[$k++] = $nums2->[$j++];\n        }\n    }\n    while ($i < $m) {\n        $result[$k++] = $nums1->[$i++];\n    }\n    while ($j < $n) {\n        $result[$k++] = $nums2->[$j++];\n    }\n    return $result[$N - 1];\n}",
    "    my @products = map { $_ * $_ } @$nums1;\n    my @sorted = sort { $b <=> $a } @products;\n    return @sorted[0..$N-1];\n}",
    "    my @res;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    while ($i < $m && $j < $n) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $res[$k++] = $nums1->[$i++];\n        } else {\n            $res[$k++] = $nums2->[$j++];\n        }\n    }\n    while ($i < $m) {\n        $res[$k++] = $nums1->[$i++];\n    }\n    while ($j < $n) {\n        $res[$k++] = $nums2->[$j++];\n    }\n    return $res[$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    while ($i < $m && $j < $n) {\n        if ($nums1->[$i] > $nums2->[$j]) {\n            $result[$k++] = $nums1->[$i++];\n        } else {\n            $result[$k++] = $nums2->[$j++];\n        }\n    }\n    while ($i < $m) {\n        $result[$k++] = $nums1->[$i++];\n    }\n    while ($j < $n) {\n        $result[$k++] = $nums2->[$j++];\n    }\n    return $result[$N - 1];\n}",
    "    my @products = ();\n    for my $n1 (@$nums1) {\n        for my $n2 (@$nums2) {\n            push @products, $n1 * $n2;\n        }\n    }\n    @products = sort {$b <=> $a} @products;\n    return @products[0..$N-1];\n}",
    "    my @products = ();\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort {$b <=> $a} @products;\n    return @products[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $n = @$nums1;\n    my $m = @$nums2;",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = 0;\n    my $n = 0;\n    my $product = 0;\n    my $max = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_m = 0;\n    my $max_n = 0;\n    my $max_product = 0;\n    my $min_i = 0;\n    my $min_j = 0;\n    my $min_k = 0;\n    my $min_m = 0;\n    my $min_n = 0;\n    my $min_product = 0;\n    my $max_heap = Heap::Fibonacci->new;\n    my $min_heap = Heap::Fibonacci->new;\n    for ($i = 0; $i < scalar(@$nums1); $i++) {\n        for ($j = 0; $j < scalar(@$nums1); $j++) {\n            for ($k = 0; $k < scalar(@$nums2); $k++) {\n                for ($m = 0; $m < scalar(@$nums2); $m++) {\n                    for ($n = 0; $n < scalar(@$nums2); $n++) {\n                        $product = $nums1->[$i] * $nums1->[$j] * $nums2->[$k] * $nums2->[$m] * $nums2->[$n];\n                        if ($max_heap->size < $N) {\n                            $max_heap->add($product);\n                        } else {\n                            $max = $max_heap->extract_top;\n                            if ($product > $max) {\n                                $max_heap->add($product);\n                            } else {\n                                $max_heap->add($max);\n                            }\n                        }\n                        if ($min_heap->size < $N) {\n                           ",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar(@$nums1);\n    my $n = scalar(@$nums2);\n    my $max = $nums1->[0] * $nums2->[0];\n    my $min = $nums1->[0] * $nums2->[0];\n    while($i < $m && $j < $n && $k < $N) {\n        my $p1 = $nums1->[$i] * $nums2->[$j];\n        my $p2 = $nums1->[$i] * $nums2->[$j+1];\n        my $p3 = $nums1->[$i+1] * $nums2->[$j];\n        my $p4 = $nums1->[$i+1] * $nums2->[$j+1];\n        if($p1 > $p2 && $p1 > $p3 && $p1 > $p4) {\n            push @result, $p1;\n            $i++;\n            $j++;\n        } elsif($p2 > $p1 && $p2 > $p3 && $p2 > $p4) {\n            push @result, $p2;\n            $j++;\n        } elsif($p3 > $p1 && $p3 > $p2 && $p3 > $p4) {\n            push @result, $p3;\n            $i++;\n        } else {\n            push @result, $p4;\n            $i++;\n            $j++;\n        }\n        $k++;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = 0;\n    my $n = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i1 = 0;\n    my $j1 = 0;\n    my $k1 = 0;\n    my $l = 0;\n    my $m1 = 0;\n    my $n1 = 0;\n    my $o = 0;\n    my $p1 = 0;\n    my $q1 = 0;\n    my $r1 = 0;\n    my $s1 = 0;\n    my $t1 = 0;\n    my $u1 = 0;\n    my $v1 = 0;\n    my $w1 = 0;\n    my $x1 = 0;\n    my $y1 = 0;\n    my $z1 = 0;\n    my $a1 = 0;\n    my $b1 = 0;\n    my $c1 = 0;\n    my $d1 = 0;\n    my $e1 = 0;\n    my $f1 = 0;\n    my $g1 = 0;\n    my $h1 = 0;\n    my $i2 = 0;\n    my $j2 = 0;\n    my $k2 = 0;\n    my $l1 = 0;\n    my $m2 = 0;\n    my $n2 = 0;\n    my $o1 = 0;\n    my $p2 = 0;\n    my $q2 = 0;\n",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    my $max = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    while ($k < $N) {\n        $max = 0;\n        for ($i = 0; $i < $m; $i++) {\n            for ($j = 0; $j < $n; $j++) {\n                if ($nums1->[$i] * $nums2->[$j] > $max) {\n                    $max = $nums1->[$i] * $nums2->[$j];\n                    $max_i = $i;\n                    $max_j = $j;\n                }\n            }\n        }\n        push @result, $max;\n        $nums1->[$max_i] = 0;\n        $nums2->[$max_j] = 0;\n        $k++;\n    }\n    return @result;\n}",
    "    my @result;\n    my @sorted1 = sort {$b <=> $a} @$nums1;\n    my @sorted2 = sort {$b <=> $a} @$nums2;\n    my $i = 0;\n    my $j = 0;\n    while ($N > 0) {\n        my $product = $sorted1[$i] * $sorted2[$j];\n        if ($product > $sorted1[$i+1] * $sorted2[$j]) {\n            push @result, $product;\n            $i++;\n        } elsif ($product > $sorted1[$i] * $sorted2[$j+1]) {\n            push @result, $product;\n            $j++;\n        } else {\n            push @result, $sorted1[$i] * $sorted2[$j];\n            $i++;\n            $j++;\n        }\n        $N--;\n    }\n    return \\@result;\n}",
    "    my @products = ();\n    for my $i (0 .. $#$nums1) {\n        for my $j (0 .. $#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return @products[0 .. $N-1];\n}",
    "    my @products = map {$_ * $_} @$nums1;\n    my @result;\n    for my $num (@$nums2) {\n        my $product = $num * $num;\n        if (@result < $N) {\n            push @result, $product;\n        } elsif ($product > $result[0]) {\n            $result[0] = $product;\n            @result = sort {$b <=> $a} @result;\n        }\n    }\n    return @result;\n}",
    "    my @nums1 = sort { $b <=> $a } @$nums1;\n    my @nums2 = sort { $b <=> $a } @$nums2;\n    my @result;\n    my $i = 0;\n    my $j = 0;\n    while (@result < $N) {\n        my $product = $nums1[$i] * $nums2[$j];\n        if ($i == $j) {\n            push @result, $product;\n            $i++;\n        } elsif ($i < $j) {\n            if ($result[-1] < $product) {\n                $result[-1] = $product;\n                $i++;\n            } else {\n                $j++;\n            }\n        } else {\n            if ($result[-1] < $product) {\n                $result[-1] = $product;\n                $j++;\n            } else {\n                $i++;\n            }\n        }\n    }\n    return \\@result;\n}",
    "    my $n1 = scalar(@$nums1);\n    my $n2 = scalar(@$nums2);\n    my @result = ();\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($k < $N) {\n        my $p1 = $nums1->[$i] * $nums2->[$j];\n        my $p2 = $nums1->[$i] * $nums2->[$j+1];\n        my $p3 = $nums1->[$i+1] * $nums2->[$j];\n        my $p4 = $nums1->[$i+1] * $nums2->[$j+1];\n        if ($p1 >= $p2 && $p1 >= $p3 && $p1 >= $p4) {\n            push @result, $p1;\n            $i++;\n            $j++;\n        } elsif ($p2 >= $p1 && $p2 >= $p3 && $p2 >= $p4) {\n            push @result, $p2;\n            $i++;\n        } elsif ($p3 >= $p1 && $p3 >= $p2 && $p3 >= $p4) {\n            push @result, $p3;\n            $j++;\n        } else {\n            push @result, $p4;\n            $i++;\n            $j++;\n        }\n        $k++;\n    }\n    return \\@result;\n}",
    "    my @products = ();\n    for my $i (0 .. $#$nums1) {\n        for my $j (0 .. $#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return @products[0 .. $N - 1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $n = @$nums1;\n    my $m = @$nums2;\n    while ($i < $n && $j < $m) {\n        if ($nums1->[$i] > $nums2->[$j]) {\n            $result[$k++] = $nums1->[$i++];\n        } else {\n            $result[$k++] = $nums2->[$j++];\n        }\n    }\n    while ($i < $n) {\n        $result[$k++] = $nums1->[$i++];\n    }\n    while ($j < $m) {\n        $result[$k++] = $nums2->[$j++];\n    }\n    return @result[$k - $N .. $k - 1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar(@$nums1);\n    my $n = scalar(@$nums2);\n    while($i < $m && $j < $n && $k < $N) {\n        if($nums1->[$i] < $nums2->[$j]) {\n            $result[$k++] = $nums1->[$i++];\n        } else {\n            $result[$k++] = $nums2->[$j++];\n        }\n    }\n    while($i < $m && $k < $N) {\n        $result[$k++] = $nums1->[$i++];\n    }\n    while($j < $n && $k < $N) {\n        $result[$k++] = $nums2->[$j++];\n    }\n    return @result;\n}",
    "    my @result;\n    my @sorted1 = sort {$b <=> $a} @$nums1;\n    my @sorted2 = sort {$b <=> $a} @$nums2;\n    my $i = 0;\n    my $j = 0;\n    while ($N > 0) {\n        my $product1 = $sorted1[$i] * $sorted2[$j];\n        my $product2 = $sorted1[$i] * $sorted2[$j+1];\n        my $product3 = $sorted1[$i+1] * $sorted2[$j];\n        if ($product1 >= $product2 && $product1 >= $product3) {\n            push @result, $product1;\n            $i++;\n        } elsif ($product2 >= $product1 && $product2 >= $product3) {\n            push @result, $product2;\n            $j++;\n        } else {\n            push @result, $product3;\n            $i++;\n        }\n        $N--;\n    }\n    return \\@result;\n}",
    "    my @products = ();\n    my @sorted1 = sort {$b <=> $a} @$nums1;\n    my @sorted2 = sort {$b <=> $a} @$nums2;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($k < $N) {\n        my $product = $sorted1[$i] * $sorted2[$j];\n        if ($i == $#sorted1) {\n            $j++;\n            $i = 0;\n        } elsif ($j == $#sorted2) {\n            $i++;\n            $j = 0;\n        } elsif ($sorted1[$i] * $sorted2[$j+1] > $sorted1[$i+1] * $sorted2[$j]) {\n            $j++;\n        } else {\n            $i++;\n        }\n        push @products, $product;\n        $k++;\n    }\n    return @products;\n}",
    "    my @products;\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort {$b <=> $a} @products;\n    return @products[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        if ($nums1->[$i] > $nums2->[$j]) {\n            push @result, [$nums1->[$i], $nums2->[$j]];\n            $j++;\n        } else {\n            push @result, [$nums1->[$i], $nums2->[$j]];\n            $i++;\n        }\n    }\n    while ($i < @$nums1) {\n        push @result, [$nums1->[$i], $nums2->[-1]];\n        $i++;\n    }\n    while ($j < @$nums2) {\n        push @result, [$nums1->[-1], $nums2->[$j]];\n        $j++;\n    }\n    return @result[0..$N-1];\n}",
    "    my @result;\n    my @sorted1 = sort {$b <=> $a} @$nums1;\n    my @sorted2 = sort {$b <=> $a} @$nums2;\n    my $i = 0;\n    my $j = 0;\n    while (@result < $N) {\n        if ($sorted1[$i] * $sorted2[$j] > $sorted1[$i] * $sorted2[$j+1]) {\n            push @result, [$sorted1[$i], $sorted2[$j]];\n            $j++;\n        } else {\n            push @result, [$sorted1[$i], $sorted2[$j+1]];\n            $i++;\n        }\n    }\n    return @result;\n}",
    "    my @sorted1 = sort {$b <=> $a} @$nums1;\n    my @sorted2 = sort {$b <=> $a} @$nums2;\n    my @result;\n    for my $i (0..$N-1) {\n        my $j = $N - 1 - $i;\n        my $product1 = $sorted1[$i] * $sorted2[$j];\n        my $product2 = $sorted1[$j] * $sorted2[$i];\n        if ($product1 > $product2) {\n            push @result, [$sorted1[$i], $sorted2[$j]];\n        } else {\n            push @result, [$sorted1[$j], $sorted2[$i]];\n        }\n    }\n    return @result;\n}",
    "    my @products = ();\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort {$b <=> $a} @products;\n    return @products[0..$N-1];\n}",
    "    my @nums1 = sort { $b <=> $a } @$nums1;\n    my @nums2 = sort { $b <=> $a } @$nums2;\n    my @result;\n    my $i = 0;\n    my $j = 0;\n    while (@result < $N) {\n        my $product = $nums1[$i] * $nums2[$j];\n        if ($nums1[$i] > $nums2[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        push @result, $product;\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        my $product = $nums1->[$i] * $nums2->[$j];\n        if ($i < $j) {\n            $i++;\n        } else {\n            $j++;\n        }\n        if (@result < $N) {\n            push @result, $product;\n        } else {\n            my $min = min(@result);\n            if ($product > $min) {\n                my $index = first_index { $_ == $min } @result;\n                $result[$index] = $product;\n            }\n        }\n    }\n    return \\@result;\n}",
    "    my @nums1 = sort {$b <=> $a} @$nums1;\n    my @nums2 = sort {$b <=> $a} @$nums2;\n    my @result;\n    my $i = 0;\n    my $j = 0;\n    while (@result < $N) {\n        if ($nums1[$i] * $nums2[$j] > $nums1[$i+1] * $nums2[$j+1]) {\n            push @result, [$nums1[$i], $nums2[$j]];\n            $j++;\n        } else {\n            push @result, [$nums1[$i+1], $nums2[$j+1]];\n            $i++;\n        }\n    }\n    return @result;\n}",
    "    my @products = ();\n    for my $num1 (@$nums1) {\n        for my $num2 (@$nums2) {\n            push @products, $num1 * $num2;\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return @products[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = 0;\n    my $n = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i1 = 0;\n    my $j1 = 0;\n    my $k1 = 0;\n    my $l = 0;\n    my $m1 = 0;\n    my $n1 = 0;\n    my $o = 0;\n    my $p1 = 0;\n    my $q1 = 0;\n    my $r1 = 0;\n    my $s1 = 0;\n    my $t1 = 0;\n    my $u1 = 0;\n    my $v1 = 0;\n    my $w1 = 0;\n    my $x1 = 0;\n    my $y1 = 0;\n    my $z1 = 0;\n    my $a1 = 0;\n    my $b1 = 0;\n    my $c1 = 0;\n    my $d1 = 0;\n    my $e1 = 0;\n    my $f1 = 0;\n    my $g1 = 0;\n    my $h1 = 0;\n    my $i2 = 0;\n    my $j2 = 0;\n    my $k2 = 0;\n    my $l1 = 0;\n    my $m2 = 0;\n    my $n2 = 0;\n    my $o1 = 0;\n    my $p2 = 0;\n    my $q2 = 0;\n",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar(@$nums1);\n    my $n = scalar(@$nums2);\n    my $product = $nums1->[$i] * $nums2->[$j];\n    my $next_product;\n    my $next_i;\n    my $next_j;\n    while ($k < $N) {\n        $next_i = $i;\n        $next_j = $j;\n        if ($i < $m - 1 && $j < $n - 1) {\n            if ($nums1->[$i + 1] * $nums2->[$j] > $nums1->[$i] * $nums2->[$j + 1]) {\n                $next_i = $i + 1;\n            } else {\n                $next_j = $j + 1;\n            }\n        } elsif ($i < $m - 1) {\n            $next_i = $i + 1;\n        } elsif ($j < $n - 1) {\n            $next_j = $j + 1;\n        }\n        $next_product = $nums1->[$next_i] * $nums2->[$next_j];\n        if ($next_product != $product) {\n            push @result, $product;\n            $k++;\n        }\n        $i = $next_i;\n        $j = $next_j;\n        $product = $next_product;\n    }\n    return \\@result;\n}",
    "    my @products = ();\n    for my $i (0 .. $#$nums1) {\n        for my $j (0 .. $#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return @products[0 .. $N-1];\n}",
    "    my @result;\n    my %hash;\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            my $product = $nums1->[$i] * $nums2->[$j];\n            $hash{$product} = [$nums1->[$i], $nums2->[$j]];\n        }\n    }\n    my @sorted = sort {$b <=> $a} keys %hash;\n    for my $i (0..$N-1) {\n        push @result, $hash{$sorted[$i]};\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    while ($i < $m && $j < $n) {\n        if ($nums1->[$i] > $nums2->[$j]) {\n            $result[$k++] = $nums1->[$i++];\n        } else {\n            $result[$k++] = $nums2->[$j++];\n        }\n    }\n    while ($i < $m) {\n        $result[$k++] = $nums1->[$i++];\n    }\n    while ($j < $n) {\n        $result[$k++] = $nums2->[$j++];\n    }\n    return $result[$N - 1];\n}",
    "    my @products;\n    for my $n1 (@$nums1) {\n        for my $n2 (@$nums2) {\n            push @products, $n1 * $n2;\n        }\n    }\n    return [sort {$b <=> $a} @products[0..$N-1]];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while ($count < $N) {\n        my $product = $nums1->[$i] * $nums2->[$j];\n        if ($product > $nums1->[$i+1] * $nums2->[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        $count++;\n    }\n    return $nums1->[$i] * $nums2->[$j];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar(@$nums1);\n    my $n = scalar(@$nums2);\n    my $product;\n    my $last_product;\n    my $last_i;\n    my $last_j;\n    my $last_k;\n    my $last_m;\n    my $last_n;\n    my $last_result;\n    my $last_result_size;\n    my $last_result_size_minus_one;\n    my $last_result_last;\n    my $last_result_last_minus_one;\n    my $last_result_last_minus_two;\n    my $last_result_last_minus_three;\n    my $last_result_last_minus_four;\n    my $last_result_last_minus_five;\n    my $last_result_last_minus_six;\n    my $last_result_last_minus_seven;\n    my $last_result_last_minus_eight;\n    my $last_result_last_minus_nine;\n    my $last_result_last_minus_ten;\n    my $last_result_last_minus_eleven;\n    my $last_result_last_minus_twelve;\n    my $last_result_last_minus_thirteen;\n    my $last_result_last_minus_fourteen;\n    my $last_result_last_minus_fifteen;\n    my $last_result_last_minus_sixteen;\n    my $last_result_last_minus_seventeen;\n    my $last_result_last_minus_eighteen;\n    my $last_result_last_minus_nineteen;\n    my $last_result_last_minus_twenty;\n    my $last_result_last_minus_twenty_one;\n    my $last_result_last_minus_twenty_two;\n    my $last_result_last_minus_twenty_three;\n    my $last_result_last_minus_twenty",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        my $p1 = $nums1->[$i];\n        my $p2 = $nums2->[$j];\n        if ($p1 < $p2) {\n            $i++;\n        } else {\n            $j++;\n        }\n        unshift @result, $p1 * $p2;\n    }\n    return @result[0..$N-1];\n}",
    "    my @products;\n    for my $n1 (@$nums1) {\n        for my $n2 (@$nums2) {\n            push @products, $n1 * $n2;\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return @products[0..$N-1];\n}",
    "    my @products = ();\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $n1 = scalar(@$nums1);\n    my $n2 = scalar(@$nums2);\n    while ($i < $n1 && $j < $n2) {\n        my $p = $nums1->[$i] * $nums2->[$j];\n        if ($k < $N) {\n            push @products, $p;\n            $k++;\n        } else {\n            if ($p > $products[0]) {\n                $products[0] = $p;\n            }\n        }\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n    while ($i < $n1 && $k < $N) {\n        my $p = $nums1->[$i] * $nums2->[-1];\n        push @products, $p;\n        $i++;\n        $k++;\n    }\n    while ($j < $n2 && $k < $N) {\n        my $p = $nums1->[-1] * $nums2->[$j];\n        push @products, $p;\n        $j++;\n        $k++;\n    }\n    @products = sort {$b <=> $a} @products;\n    return @products;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        my $product = $nums1->[$i] * $nums2->[$j];\n        if ($product > $result[-1]) {\n            push @result, $product;\n            @result = sort {$b <=> $a} @result;\n            pop @result if @result > $N;\n        }\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n    return \\@result;\n}",
    "    my @products = map {$nums1->[$_] * $nums2->[$_]} (0 .. $#$nums1);\n    return [sort {$b <=> $a} @products[0 .. $N - 1]];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = 0;\n    my $n = 0;\n    my $product = 0;\n    my $max = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_m = 0;\n    my $max_n = 0;\n    my $max_product = 0;\n    my $min_product = 0;\n    my $min_i = 0;\n    my $min_j = 0;\n    my $min_k = 0;\n    my $min_m = 0;\n    my $min_n = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;\n    my $min_product = 0;",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar(@$nums1);\n    my $n = scalar(@$nums2);\n    my $product = 0;\n    my $max = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_m = 0;\n    my $max_n = 0;\n    my $max_product = 0;\n    my $max_count = 0;\n    my $count = 0;\n    my $flag = 0;\n    my $flag1 = 0;\n    my $flag2 = 0;\n    my $flag3 = 0;\n    my $flag4 = 0;\n    my $flag5 = 0;\n    my $flag6 = 0;\n    my $flag7 = 0;\n    my $flag8 = 0;\n    my $flag9 = 0;\n    my $flag10 = 0;\n    my $flag11 = 0;\n    my $flag12 = 0;\n    my $flag13 = 0;\n    my $flag14 = 0;\n    my $flag15 = 0;\n    my $flag16 = 0;\n    my $flag17 = 0;\n    my $flag18 = 0;\n    my $flag19 = 0;\n    my $flag20 = 0;\n    my $flag21 = 0;\n    my $flag22 = 0;\n    my $flag23 = 0;\n    my $flag24 = 0;\n    my $flag25 = 0;\n    my $flag26 = 0;\n    my $flag27 = 0;\n    my $flag28 = 0;\n    my $flag29 = 0;\n    my $flag30 = 0;\n    my $flag31 = 0;\n    my $flag32 = 0;\n    my $flag33 = 0;\n    my $flag34 = 0;\n    my $flag35 = 0;\n    my $flag36 = 0;\n    my $flag37 = 0;\n    my $flag38 = 0;\n    my $flag39 = 0",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $n = @$nums1;\n    my $m = @$nums2;\n    my $product;\n    while ($i < $n && $j < $m) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $product = $nums1->[$i] * $nums2->[$j];\n            $i++;\n        } else {\n            $product = $nums1->[$i] * $nums2->[$j];\n            $j++;\n        }\n        if ($k < $N) {\n            $result[$k] = $product;\n            $k++;\n        } else {\n            my $min = $result[0];\n            my $index = 0;\n            for (my $i = 1; $i < $N; $i++) {\n                if ($min > $result[$i]) {\n                    $min = $result[$i];\n                    $index = $i;\n                }\n            }\n            if ($product > $min) {\n                $result[$index] = $product;\n            }\n        }\n    }\n    return \\@result;\n}",
    "    my @products = map { $nums1->[$_] * $nums2->[$_] } 0..$#$nums1;\n    return sort { $b <=> $a } @products[0..$N-1];\n}",
    "    my @products;\n    for my $n1 (@$nums1) {\n        for my $n2 (@$nums2) {\n            push @products, $n1 * $n2;\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return @products[0..$N-1];\n}",
    "    my @products = ();\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort {$b <=> $a} @products;\n    return @products[0..$N-1];\n}",
    "    my $n1 = @$nums1;\n    my $n2 = @$nums2;\n    my $i = 0;\n    my $j = $n2 - 1;\n    my $k = 0;\n    my @result;\n    while ($k < $N) {\n        my $product = $nums1->[$i] * $nums2->[$j];\n        if ($i < $n1 - 1 && $product < $nums1->[$i + 1] * $nums2->[$j]) {\n            $i++;\n        }\n        elsif ($j > 0 && $product < $nums1->[$i] * $nums2->[$j - 1]) {\n            $j--;\n        }\n        else {\n            push @result, $product;\n            $i++;\n            $j--;\n            $k++;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    while ($i < $m && $j < $n && $k < $N) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $result[$k++] = $nums1->[$i++];\n        } else {\n            $result[$k++] = $nums2->[$j++];\n        }\n    }\n    while ($i < $m && $k < $N) {\n        $result[$k++] = $nums1->[$i++];\n    }\n    while ($j < $n && $k < $N) {\n        $result[$k++] = $nums2->[$j++];\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar(@$nums1);\n    my $n = scalar(@$nums2);\n    while ($i < $m && $j < $n) {\n        my $product = $nums1->[$i] * $nums2->[$j];\n        if ($k < $N) {\n            $result[$k] = $product;\n            $k++;\n        } else {\n            my $min_index = 0;\n            for (my $l = 1; $l < $N; $l++) {\n                if ($result[$l] < $result[$min_index]) {\n                    $min_index = $l;\n                }\n            }\n            if ($product > $result[$min_index]) {\n                $result[$min_index] = $product;\n            }\n        }\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar(@$nums1);\n    my $n = scalar(@$nums2);\n    my $max = 0;\n    my $min = 0;\n    my $max_i = 0;\n    my $min_i = 0;\n    my $max_j = 0;\n    my $min_j = 0;\n    while ($k < $N) {\n        $max = 0;\n        $min = 0;\n        $max_i = 0;\n        $min_i = 0;\n        $max_j = 0;\n        $min_j = 0;\n        for (my $i = 0; $i < $m; $i++) {\n            for (my $j = 0; $j < $n; $j++) {\n                if ($nums1->[$i] * $nums2->[$j] > $max) {\n                    $max = $nums1->[$i] * $nums2->[$j];\n                    $max_i = $i;\n                    $max_j = $j;\n                }\n                if ($nums1->[$i] * $nums2->[$j] < $min) {\n                    $min = $nums1->[$i] * $nums2->[$j];\n                    $min_i = $i;\n                    $min_j = $j;\n                }\n            }\n        }\n        push @result, $max;\n        $nums1->[$max_i] = $min;\n        $nums2->[$max_j] = $min;\n        $k++;\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    while ($i < $m && $j < $n && $k < $N) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $result[$k++] = $nums1->[$i++];\n        } else {\n            $result[$k++] = $nums2->[$j++];\n        }\n    }\n    while ($i < $m && $k < $N) {\n        $result[$k++] = $nums1->[$i++];\n    }\n    while ($j < $n && $k < $N) {\n        $result[$k++] = $nums2->[$j++];\n    }\n    return @result;\n}",
    "    my @products = map { $nums1->[$_] * $nums2->[$_] } 0 .. $#$nums1;\n    return sort { $b <=> $a } @products[0 .. $N-1];\n}",
    "    my @products = ();\n    for my $i (0 .. $#$nums1) {\n        for my $j (0 .. $#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return @products[0 .. $N - 1];\n}",
    "    my @products;\n    for my $n1 (@$nums1) {\n        for my $n2 (@$nums2) {\n            push @products, $n1 * $n2;\n        }\n    }\n    return [sort {$b <=> $a} @products[0..$N-1]];\n}",
    "    my @products = map { $nums1->[$_] * $nums2->[$_] } 0..$#$nums1;\n    my @sorted = sort { $b <=> $a } @products;\n    return @sorted[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        my $product = $nums1->[$i] * $nums2->[$j];\n        if ($i == 0 || $j == 0 || $product > $result[-1]) {\n            push @result, $product;\n            if (@result > $N) {\n                shift @result;\n            }\n        }\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n    return \\@result;\n}",
    "    my @res;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 and $j < @$nums2) {\n        my $p = $nums1->[$i] * $nums2->[$j];\n        if ($i + 1 < @$nums1 and $j + 1 < @$nums2) {\n            if ($nums1->[$i + 1] * $nums2->[$j] > $nums1->[$i] * $nums2->[$j + 1]) {\n                $i++;\n            } else {\n                $j++;\n            }\n        } elsif ($i + 1 < @$nums1) {\n            $i++;\n        } else {\n            $j++;\n        }\n        push @res, $p;\n    }\n    return @res[0 .. $N - 1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    my $product = $nums1->[$i] * $nums2->[$j];\n    my $next_product = $nums1->[$i+1] * $nums2->[$j];\n    my $next_product2 = $nums1->[$i] * $nums2->[$j+1];\n    while ($k < $N) {\n        if ($next_product > $next_product2) {\n            $i++;\n            $product = $next_product;\n            $next_product = $nums1->[$i+1] * $nums2->[$j];\n        } else {\n            $j++;\n            $product = $next_product2;\n            $next_product2 = $nums1->[$i] * $nums2->[$j+1];\n        }\n        $result[$k] = $product;\n        $k++;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        if ($nums1->[$i] > $nums2->[$j]) {\n            push @result, [$nums1->[$i], $nums2->[$j]];\n            $j++;\n        } else {\n            push @result, [$nums1->[$i], $nums2->[$j]];\n            $i++;\n        }\n    }\n    return @result[0..$N-1];\n}",
    "    my @products = ();\n    for my $i (0 .. $#$nums1) {\n        for my $j (0 .. $#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return @products[0 .. $N-1];\n}",
    "    my @nums1 = sort {$b <=> $a} @$nums1;\n    my @nums2 = sort {$b <=> $a} @$nums2;\n    my @products;\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            push @products, $nums1[$i] * $nums2[$j];\n        }\n    }\n    @products = sort {$b <=> $a} @products;\n    return @products[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar(@$nums1);\n    my $n = scalar(@$nums2);\n    while ($k < $N) {\n        my $product = $nums1->[$i] * $nums2->[$j];\n        if ($i == $m - 1) {\n            $j++;\n        } elsif ($j == $n - 1) {\n            $i++;\n        } elsif ($nums1->[$i] < $nums2->[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        $result[$k++] = $product;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = 0;\n    my $n = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    my $aa = 0;\n    my $ab = 0;\n    my $ac = 0;\n    my $ad = 0;\n    my $ae = 0;\n    my $af = 0;\n    my $ag = 0;\n    my $ah = 0;\n    my $ai = 0;\n    my $aj = 0;\n    my $ak = 0;\n    my $al = 0;\n    my $am = 0;\n    my $an = 0;\n    my $ao = 0;\n    my $ap = 0;\n    my $aq = 0;\n    my $ar = 0;\n    my $as = 0;\n    my $at = 0;\n    my $au = 0;\n   ",
    "    my @products = map {$_->[0] * $_->[1]}\n                   sort {$b->[0] <=> $a->[0]}\n                   map {[$_, $_]} @$nums1;\n    my @sorted = sort {$b <=> $a} @products;\n    return @sorted[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = 0;\n    my $n = 0;\n    my $product = 0;\n    my $max = 0;\n    my $max_index = 0;\n    my $max_index_2 = 0;\n    my $max_index_3 = 0;\n    my $max_index_4 = 0;\n    my $max_index_5 = 0;\n    my $max_index_6 = 0;\n    my $max_index_7 = 0;\n    my $max_index_8 = 0;\n    my $max_index_9 = 0;\n    my $max_index_10 = 0;\n    my $max_index_11 = 0;\n    my $max_index_12 = 0;\n    my $max_index_13 = 0;\n    my $max_index_14 = 0;\n    my $max_index_15 = 0;\n    my $max_index_16 = 0;\n    my $max_index_17 = 0;\n    my $max_index_18 = 0;\n    my $max_index_19 = 0;\n    my $max_index_20 = 0;\n    my $max_index_21 = 0;\n    my $max_index_22 = 0;\n    my $max_index_23 = 0;\n    my $max_index_24 = 0;\n    my $max_index_25 = 0;\n    my $max_index_26 = 0;\n    my $max_index_27 = 0;\n    my $max_index_28 = 0;\n    my $max_index_29 = 0;\n    my $max_index_30 = 0;\n    my $max_index_31 = 0;\n    my $max_index_32 = 0;\n    my $max_index_33 = 0;\n    my $max_index_34 = 0;\n    my $max_index_35 = 0;\n    my $max_index_36 = 0;\n    my $max_index_37 = 0;\n    my $max_index_",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    while ($i < $m && $j < $n) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $result[$k++] = $nums1->[$i++];\n        } else {\n            $result[$k++] = $nums2->[$j++];\n        }\n    }\n    while ($i < $m) {\n        $result[$k++] = $nums1->[$i++];\n    }\n    while ($j < $n) {\n        $result[$k++] = $nums2->[$j++];\n    }\n    my $product = 1;\n    for (my $i = $k - 1; $i >= $k - $N; $i--) {\n        $product *= $result[$i];\n    }\n    return $product;\n}",
    "    my @products = ();\n    for my $i (0..$#{$nums1}) {\n        for my $j (0..$#{$nums2}) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort {$b <=> $a} @products;\n    return @products[0..$N-1];\n}",
    "    my @products;\n    for my $i (0 .. $#$nums1) {\n        for my $j (0 .. $#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return @products[0 .. $N - 1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    while ($i < $m && $j < $n) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $result[$k++] = $nums1->[$i++];\n        } else {\n            $result[$k++] = $nums2->[$j++];\n        }\n    }\n    while ($i < $m) {\n        $result[$k++] = $nums1->[$i++];\n    }\n    while ($j < $n) {\n        $result[$k++] = $nums2->[$j++];\n    }\n    my $result = 1;\n    for (my $i = $k - 1; $i >= $k - $N; $i--) {\n        $result *= $result[$i];\n    }\n    return $result;\n}",
    "    my @products = ();\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort {$b <=> $a} @products;\n    return @products[0..$N-1];\n}",
    "    my @products = ();\n    for my $i (0 .. $#$nums1) {\n        for my $j (0 .. $#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort {$b <=> $a} @products;\n    return @products[0 .. $N - 1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    while ($i < $m && $j < $n) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $result[$k++] = $nums1->[$i++];\n        } else {\n            $result[$k++] = $nums2->[$j++];\n        }\n    }\n    while ($i < $m) {\n        $result[$k++] = $nums1->[$i++];\n    }\n    while ($j < $n) {\n        $result[$k++] = $nums2->[$j++];\n    }\n    my $result = 1;\n    for (my $i = $k - 1; $i >= $k - $N; $i--) {\n        $result *= $result[$i];\n    }\n    return $result;\n}",
    "    my $max = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $i = 0;\n    my $j = 0;\n    my $product = 0;\n    my $result = [];\n    for my $num1 (@$nums1) {\n        for my $num2 (@$nums2) {\n            $product = $num1 * $num2;\n            if ($product > $max) {\n                $max = $product;\n                $max_i = $i;\n                $max_j = $j;\n            }\n            $j++;\n        }\n        $i++;\n    }\n    push @$result, $max_i, $max_j;\n    return $result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        my $product = $nums1->[$i] * $nums2->[$j];\n        if ($i == 0 && $j == 0) {\n            push @result, $product;\n        } else {\n            if ($product > $result[0]) {\n                shift @result;\n                push @result, $product;\n            }\n        }\n        if ($nums1->[$i] > $nums2->[$j]) {\n            $j++;\n        } else {\n            $i++;\n        }\n    }\n    return \\@result;\n}",
    "    my @products = map { $nums1->[$_] * $nums2->[$_] } (0..$#$nums1);\n    my @sorted = sort { $b <=> $a } @products;\n    return @sorted[0..$N-1];\n}",
    "    my @products = ();\n    for my $n1 (@$nums1) {\n        for my $n2 (@$nums2) {\n            push @products, $n1 * $n2;\n        }\n    }\n    @products = sort { $b <=> $a } @products;\n    return @products[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = 0;\n    my $n = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i1 = 0;\n    my $j1 = 0;\n    my $k1 = 0;\n    my $l = 0;\n    my $m1 = 0;\n    my $n1 = 0;\n    my $o = 0;\n    my $p1 = 0;\n    my $q1 = 0;\n    my $r1 = 0;\n    my $s1 = 0;\n    my $t1 = 0;\n    my $u1 = 0;\n    my $v1 = 0;\n    my $w1 = 0;\n    my $x1 = 0;\n    my $y1 = 0;\n    my $z1 = 0;\n    my $a1 = 0;\n    my $b1 = 0;\n    my $c1 = 0;\n    my $d1 = 0;\n    my $e1 = 0;\n    my $f1 = 0;\n    my $g1 = 0;\n    my $h1 = 0;\n    my $i2 = 0;\n    my $j2 = 0;\n    my $k2 = 0;\n    my $l1 = 0;\n    my $m2 = 0;\n    my $n2 = 0;\n    my $o1 = 0;\n    my $p2 = 0;\n    my $q2 = 0;\n",
    "    my @products;\n    for my $n1 (@$nums1) {\n        for my $n2 (@$nums2) {\n            push @products, $n1 * $n2;\n        }\n    }\n    return [ sort { $b <=> $a } @products[0..$N-1] ];\n}"
  ]
}