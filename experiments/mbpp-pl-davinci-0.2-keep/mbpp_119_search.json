{
  "name": "mbpp_119_search",
  "language": "pl",
  "prompt": "# Write a python function to find the element that appears only once in a sorted array.\nsub search {\n    my($arr) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&search;\n        if(eq_deeply($candidate->([1, 1, 2, 2, 3]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 2, 3, 3, 4, 4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $size = scalar(@$arr);\n    my $low = 0;\n    my $high = $size - 1;\n    while($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if($mid == 0 or $mid == $size - 1) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] != $arr->[$mid - 1] and $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] == $arr->[$mid - 1]) {\n            if($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}",
    "    my $n = scalar(@$arr);\n    my $low = 0;\n    my $high = $n - 1;\n    while($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if($mid == 0 || $mid == $n - 1) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if($mid % 2 == 0) {\n            if($arr->[$mid] == $arr->[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 2;\n            }\n        } else {\n            if($arr->[$mid] == $arr->[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}",
    "    my $n = scalar(@$arr);\n    my $i = 0;\n    while($i < $n) {\n        if($i == $n-1) {\n            return $arr->[$i];\n        }\n        if($arr->[$i] == $arr->[$i+1]) {\n            $i += 2;\n        } else {\n            return $arr->[$i];\n        }\n    }\n}",
    "    my $low = 0;\n    my $high = scalar(@$arr) - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($mid == 0 || $mid == scalar(@$arr) - 1) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if ($mid % 2 == 0) {\n            if ($arr->[$mid] == $arr->[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 2;\n            }\n        } else {\n            if ($arr->[$mid] == $arr->[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n}",
    "    my $low = 0;\n    my $high = scalar(@$arr) - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($mid == 0 || $mid == scalar(@$arr) - 1) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] == $arr->[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}",
    "    my $size = scalar(@$arr);\n    my $low = 0;\n    my $high = $size - 1;\n    my $mid = 0;\n    while($low <= $high) {\n        $mid = int(($low + $high) / 2);\n        if($mid == 0 || $mid == $size - 1) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] == $arr->[$mid - 1]) {\n            if($mid % 2 == 0) {\n                $high = $mid - 2;\n            }\n            else {\n                $low = $mid + 1;\n            }\n        }\n        else {\n            if($mid % 2 == 0) {\n                $low = $mid + 2;\n            }\n            else {\n                $high = $mid - 1;\n            }\n        }\n    }\n}",
    "    my $n = scalar(@$arr);\n    my $low = 0;\n    my $high = $n - 1;\n    while($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if($mid == 0 || $mid == $n - 1) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] == $arr->[$mid - 1]) {\n            if($mid % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if($mid % 2 == 0) {\n                $high = $mid - 1;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n    }\n    return -1;\n}",
    "    my $low = 0;\n    my $high = scalar(@$arr) - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($mid == 0 || $mid == scalar(@$arr) - 1) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] == $arr->[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $high = $mid - 1;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n    }\n}",
    "    my $low = 0;\n    my $high = @$arr - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($mid == 0 or $arr->[$mid] != $arr->[$mid - 1]) {\n            if ($mid == @$arr - 1 or $arr->[$mid] != $arr->[$mid + 1]) {\n                return $arr->[$mid];\n            }\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return -1;\n}",
    "    my $low = 0;\n    my $high = scalar(@$arr) - 1;\n    while($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if($mid == 0 || $mid == scalar(@$arr) - 1) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] == $arr->[$mid - 1]) {\n            if($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n        if($arr->[$mid] == $arr->[$mid + 1]) {\n            if($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n}",
    "    my $n = scalar(@$arr);\n    my $low = 0;\n    my $high = $n - 1;\n    while ($low <= $high) {\n        my $mid = ($low + $high) / 2;\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if ($mid % 2 == 0) {\n            if ($arr->[$mid] == $arr->[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 2;\n            }\n        } else {\n            if ($arr->[$mid] == $arr->[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}",
    "    my $n = scalar(@$arr);\n    my $low = 0;\n    my $high = $n - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] == $arr->[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}",
    "    my $n = scalar(@$arr);\n    my $i = 0;\n    while($i < $n) {\n        if($i == $n-1) {\n            return $arr->[$i];\n        }\n        if($arr->[$i] != $arr->[$i+1]) {\n            return $arr->[$i];\n        }\n        $i += 2;\n    }\n}",
    "    my $n = scalar(@$arr);\n    my $low = 0;\n    my $high = $n - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] == $arr->[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}",
    "    my $n = scalar(@$arr);\n    my $i = 0;\n    while($i < $n) {\n        if($i == $n-1) {\n            return $arr->[$i];\n        }\n        if($arr->[$i] != $arr->[$i+1]) {\n            return $arr->[$i];\n        }\n        $i += 2;\n    }\n}",
    "    my $n = scalar(@$arr);\n    my $low = 0;\n    my $high = $n-1;\n    while($low <= $high) {\n        my $mid = int(($low+$high)/2);\n        if($mid == 0 || $mid == $n-1) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] != $arr->[$mid-1] && $arr->[$mid] != $arr->[$mid+1]) {\n            return $arr->[$mid];\n        }\n        if($mid%2 == 0) {\n            if($arr->[$mid] == $arr->[$mid+1]) {\n                $low = $mid+2;\n            }\n            else {\n                $high = $mid-2;\n            }\n        }\n        else {\n            if($arr->[$mid] == $arr->[$mid-1]) {\n                $low = $mid+1;\n            }\n            else {\n                $high = $mid-1;\n            }\n        }\n    }\n    return -1;\n}",
    "    my $n = scalar(@$arr);\n    my $low = 0;\n    my $high = $n - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($mid == 0 or $arr->[$mid] != $arr->[$mid - 1]) {\n            if ($mid == $n - 1 or $arr->[$mid] != $arr->[$mid + 1]) {\n                return $arr->[$mid];\n            }\n            $low = $mid + 1;\n        }\n        else {\n            $high = $mid - 1;\n        }\n    }\n    return -1;\n}",
    "    my $low = 0;\n    my $high = scalar(@$arr) - 1;\n    while($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if($mid == 0 || $mid == scalar(@$arr) - 1) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] == $arr->[$mid - 1]) {\n            if($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n}",
    "    my $n = scalar(@$arr);\n    my $low = 0;\n    my $high = $n - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] == $arr->[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $high = $mid - 1;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n    }\n    return -1;\n}",
    "    my $start = 0;\n    my $end = scalar(@$arr) - 1;\n    while($start <= $end) {\n        my $mid = int(($start + $end) / 2);\n        if($mid == 0 || $mid == scalar(@$arr) - 1) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if($mid % 2 == 0) {\n            if($arr->[$mid] == $arr->[$mid + 1]) {\n                $start = $mid + 2;\n            } else {\n                $end = $mid - 2;\n            }\n        } else {\n            if($arr->[$mid] == $arr->[$mid - 1]) {\n                $start = $mid + 1;\n            } else {\n                $end = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}"
  ]
}