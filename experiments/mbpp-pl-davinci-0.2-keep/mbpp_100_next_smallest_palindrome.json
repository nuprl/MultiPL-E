{
  "name": "mbpp_100_next_smallest_palindrome",
  "language": "pl",
  "prompt": "# Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nsub next_smallest_palindrome {\n    my($num) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&next_smallest_palindrome;\n        if(eq_deeply($candidate->(99),101)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1221),1331)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),121)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $len = length($num);\n    my $mid = int($len / 2);\n    my $left = substr($num, 0, $mid);\n    my $right = substr($num, $len % 2 ? $mid + 1 : $mid);\n    my $next_left = $left;\n    my $next_right = reverse $left;\n    if ($right < $next_right) {\n        $next_left++;\n        $next_right = reverse $next_left;\n    }\n    return $next_left . ($len % 2 ? substr($next_right, 1) : $next_right);\n}",
    "    my $num_str = $num;\n    my $len = length($num_str);\n    my $left = substr($num_str, 0, int($len/2));\n    my $right = substr($num_str, int($len/2));\n    my $left_rev = reverse($left);\n    if ($len % 2 == 1) {\n        $right = substr($right, 1);\n    }\n    my $left_rev_num = int($left_rev);\n    my $right_num = int($right);\n    if ($left_rev_num < $right_num) {\n        $left_rev_num++;\n        $left_rev = $left_rev_num;\n    }\n    $left_rev = reverse($left_rev);\n    if ($len % 2 == 1) {\n        return $left.$left_rev;\n    } else {\n        return $left.$left_rev;\n    }\n}",
    "    my $len = length($num);\n    my $half = int($len / 2);\n    my $left = substr($num, 0, $half);\n    my $right = substr($num, $len - $half);\n    my $left_rev = reverse($left);\n    my $right_rev = reverse($right);\n    my $left_int = int($left);\n    my $right_int = int($right);\n    my $left_rev_int = int($left_rev);\n    my $right_rev_int = int($right_rev);\n    my $next_left = $left_int;\n    my $next_right = $right_int;\n    if ($left_int == $right_rev_int) {\n        if ($left_int == $right_int) {\n            $next_left++;\n            $next_right++;\n        }\n        else {\n            $next_left = $left_rev_int;\n            $next_right = $right_rev_int;\n        }\n    }\n    else {\n        if ($left_int < $right_rev_int) {\n            $next_left = $left_rev_int;\n            $next_right = $right_rev_int;\n        }\n        else {\n            $next_left++;\n            $next_right++;\n        }\n    }\n    my $next_left_str = sprintf(\"%0${half}d\", $next_left);\n    my $next_right_str = sprintf(\"%0${half}d\", $next_right);\n    my $next_palindrome = $next_left_str . $next_right_str;\n    if ($len % 2 == 1) {\n        $next_palindrome = $next_left_str . substr($num, $half, 1) . $next_right_str;\n    }\n    return $next_palindrome;\n}",
    "    my $len = length($num);\n    my $half = int($len / 2);\n    my $left = substr($num, 0, $half);\n    my $right = substr($num, $len % 2 ? $half + 1 : $half);\n    my $left_rev = reverse($left);\n    if ($left_rev gt $right) {\n        return $left . ( $len % 2 ? substr($left, 0, 1) : '' ) . $left_rev;\n    }\n    else {\n        my $next_left = $left + 1;\n        my $next_left_rev = reverse($next_left);\n        return $next_left . ( $len % 2 ? substr($next_left, 0, 1) : '' ) . $next_left_rev;\n    }\n}",
    "    my $len = length($num);\n    my $half = int($len / 2);\n    my $left = substr($num, 0, $half);\n    my $right = substr($num, $len % 2 ? $half + 1 : $half);\n    my $next_left = $left + 1;\n    my $next_right = reverse($next_left);\n    my $next_palindrome = $next_left . substr($num, $half, $len % 2) . $next_right;\n    return $next_palindrome;\n}",
    "\n    # If the number is already a palindrome, just increment it.\n    return $num + 1 if is_palindrome($num);",
    "    my $len = length($num);\n    my $left = int($len / 2);\n    my $right = $len - $left - 1;\n    my $left_num = substr($num, 0, $left);\n    my $right_num = substr($num, $right + 1);\n    my $left_num_rev = reverse($left_num);\n    my $right_num_rev = reverse($right_num);\n    my $left_num_rev_int = int($left_num_rev);\n    my $right_num_rev_int = int($right_num_rev);\n    my $left_num_int = int($left_num);\n    my $right_num_int = int($right_num);\n    my $next_palindrome;\n    if ($left_num_rev_int > $right_num_rev_int) {\n        $next_palindrome = $left_num_rev . $right_num_rev;\n    } elsif ($left_num_rev_int < $right_num_rev_int) {\n        $next_palindrome = $left_num_rev . $right_num_rev;\n        if ($left_num_int == 9) {\n            $next_palindrome = '1' . '0' x ($len - 1) . '1';\n        } else {\n            $next_palindrome = $left_num_rev + 1 . $right_num_rev;\n        }\n    } elsif ($left_num_rev_int == $right_num_rev_int) {\n        if ($left_num_int == 9) {\n            $next_palindrome = '1' . '0' x ($len - 1) . '1';\n        } else {\n            $next_palindrome = $left_num_rev + 1 . $right_num_rev;\n        }\n    }\n    return $next_palindrome;\n}",
    "    my $len = length($num);\n    my $left = substr($num, 0, $len / 2);\n    my $right = substr($num, $len / 2 + $len % 2);\n    my $next_left = $left + 1;\n    my $next_right = reverse($next_left);\n    my $next_num = $next_left . $next_right;\n    return $next_num;\n}",
    "    my $n = $num;\n    my $len = length($num);\n    my $half = int($len / 2);\n    my $left = substr($num, 0, $half);\n    my $right = substr($num, $len - $half);\n    my $left_rev = reverse($left);\n    if ($left_rev gt $right) {\n        $n = $left . $left_rev;\n    } else {\n        my $left_inc = $left + 1;\n        my $left_inc_rev = reverse($left_inc);\n        $n = $left_inc . $left_inc_rev;\n    }\n    return $n;\n}",
    "    my $palindrome = $num;\n    my $length = length($num);\n    my $half_length = int($length / 2);\n    my $left_half = substr($num, 0, $half_length);\n    my $right_half = substr($num, $length - $half_length);\n    my $left_half_incremented = $left_half + 1;\n    my $left_half_incremented_length = length($left_half_incremented);\n    my $left_half_incremented_length_diff = $half_length - $left_half_incremented_length;\n    if ($left_half_incremented_length_diff > 0) {\n        $left_half_incremented = '0' x $left_half_incremented_length_diff . $left_half_incremented;\n    }\n    my $left_half_incremented_reversed = reverse($left_half_incremented);\n    if ($left_half_incremented_reversed eq $right_half) {\n        $palindrome = $left_half_incremented . $left_half_incremented_reversed;\n    }\n    else {\n        $palindrome = $left_half . $right_half;\n    }\n    return $palindrome;\n}",
    "    my $num_str = $num;\n    my $len = length($num_str);\n    my $is_odd = $len % 2;\n    my $mid = int($len / 2);\n    my $left = substr($num_str, 0, $mid);\n    my $right = substr($num_str, $mid + $is_odd);\n    my $left_rev = reverse($left);\n    my $right_rev = reverse($right);\n    my $left_rev_num = int($left_rev);\n    my $right_rev_num = int($right_rev);\n    my $left_num = int($left);\n    my $right_num = int($right);\n    my $next_palindrome = 0;\n    if ($left_rev_num > $right_num) {\n        $next_palindrome = $left_rev_num;\n    } else {\n        $next_palindrome = $left_num;\n    }\n    $next_palindrome = $next_palindrome . reverse($next_palindrome);\n    return $next_palindrome;\n}",
    "    my $len = length($num);\n    my $left = int($len / 2);\n    my $right = $len - $left;\n    my $left_num = substr($num, 0, $left);\n    my $right_num = substr($num, $right);\n    my $left_num_rev = reverse($left_num);\n    if ($left_num_rev lt $right_num) {\n        $left_num++;\n        $left_num_rev = reverse($left_num);\n    }\n    return $left_num . $left_num_rev;\n}",
    "    my $str = $num;\n    my $len = length($str);\n    my $left = substr($str, 0, $len / 2);\n    my $right = substr($str, $len / 2 + $len % 2);\n    my $next_left = $left;\n    my $next_right = $right;\n    if ($left eq $right) {\n        $next_left++;\n        $next_right = reverse($next_left);\n    }\n    else {\n        $next_right = reverse($next_left);\n    }\n    return $next_left . $next_right;\n}",
    "    my $len = length($num);\n    my $left = substr($num, 0, $len / 2);\n    my $right = substr($num, $len / 2 + $len % 2);\n    my $next_left = $left + 1;\n    my $next_right = reverse $next_left;\n    my $next_num = $next_left . $next_right;\n    return $next_num;\n}",
    "    my $num_str = $num;\n    my $len = length($num_str);\n    my $mid = int($len / 2);\n    my $left = substr($num_str, 0, $mid);\n    my $right = substr($num_str, $mid + ($len % 2));\n    my $left_rev = reverse($left);\n    if ($left_rev lt $right) {\n        $left = $left + 1;\n        $left_rev = reverse($left);\n    }\n    return $left . $left_rev;\n}",
    "    my $len = length($num);\n    my $half = int($len / 2);\n    my $left = substr($num, 0, $half);\n    my $right = substr($num, $len - $half);\n    my $next = $left + 1;\n    my $next_palindrome = $next . reverse($next);\n    while (length($next_palindrome) != $len) {\n        $next_palindrome = \"0\" . $next_palindrome;\n    }\n    return $next_palindrome;\n}",
    "    my $palindrome = $num;\n    while (!is_palindrome($palindrome)) {\n        $palindrome++;\n    }\n    return $palindrome;\n}",
    "    my $len = length($num);\n    my $half = int($len / 2);\n    my $left = substr($num, 0, $half);\n    my $right = substr($num, $len - $half);\n    my $next_left = $left + 1;\n    my $next_right = reverse($next_left);\n    my $next_palindrome = $next_left . $next_right;\n    return $next_palindrome;\n}",
    "    my $len = length($num);\n    my $half = int($len / 2);\n    my $left = substr($num, 0, $half);\n    my $right = substr($num, $len - $half);\n    my $left_inc = $left + 1;\n    my $left_dec = $left - 1;\n    my $left_inc_rev = reverse $left_inc;\n    my $left_dec_rev = reverse $left_dec;\n    my $left_inc_pal = $left_inc . $left_inc_rev;\n    my $left_dec_pal = $left_dec . $left_dec_rev;\n    my $left_pal = $left . reverse $left;\n    my $left_inc_pal_odd = $left_inc . substr($left_inc_rev, 1);\n    my $left_dec_pal_odd = $left_dec . substr($left_dec_rev, 1);\n    my $left_pal_odd = $left . substr(reverse $left, 1);\n    if ($len % 2 == 0) {\n        if ($left_pal > $num) {\n            return $left_pal;\n        }\n        elsif ($left_inc_pal > $num) {\n            return $left_inc_pal;\n        }\n        else {\n            return $left_dec_pal;\n        }\n    }\n    else {\n        if ($left_pal_odd > $num) {\n            return $left_pal_odd;\n        }\n        elsif ($left_inc_pal_odd > $num) {\n            return $left_inc_pal_odd;\n        }\n        else {\n            return $left_dec_pal_odd;\n        }\n    }\n}",
    "    my $len = length($num);\n    my $half = int($len / 2);\n    my $left = substr($num, 0, $half);\n    my $right = substr($num, $len - $half);\n    my $next_left = $left + 1;\n    my $next_right = reverse($next_left);\n    if ($len % 2 == 1) {\n        $next_right = substr($next_right, 1);\n    }\n    return $next_left . $next_right;\n}"
  ]
}