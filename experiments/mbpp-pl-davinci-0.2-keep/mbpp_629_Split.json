{
  "name": "mbpp_629_Split",
  "language": "pl",
  "prompt": "# Write a python function to find even numbers from a list of numbers.\nsub Split {\n    my($list) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Split;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),[2, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 12, 15, 19]),[8, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @even;\n    my @odd;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        } else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even;\n    foreach my $i (@$list) {\n        if ($i % 2 == 0) {\n            push @even, $i;\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    my @odd;\n    foreach my $i (@$list) {\n        if ($i % 2 == 0) {\n            push @even, $i;\n        } else {\n            push @odd, $i;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @evens = ();\n    my @odds = ();\n    foreach my $number (@$list) {\n        if ($number % 2 == 0) {\n            push(@evens, $number);\n        } else {\n            push(@odds, $number);\n        }\n    }\n    return (\\@evens, \\@odds);\n}",
    "    my(@list) = split(/,/, $list);\n    my(@even);\n    foreach my $number (@list) {\n        if ($number % 2 == 0) {\n            push(@even, $number);\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    my @odd;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        } else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @numbers = split(/,/, $list);\n    my @even_numbers = grep { $_ % 2 == 0 } @numbers;\n    return @even_numbers;\n}",
    "    my @even_numbers = grep { $_ % 2 == 0 } @$list;\n    return @even_numbers;\n}",
    "    my @numbers = split(/,/, $list);\n    my @even;\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push @even, $number;\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    my @odd;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n        else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even_list;\n    my @odd_list;\n    foreach my $i (@$list) {\n        if ($i % 2 == 0) {\n            push @even_list, $i;\n        }\n        else {\n            push @odd_list, $i;\n        }\n    }\n    return (\\@even_list, \\@odd_list);\n}",
    "    my @numbers = split(/,/, $list);\n    my @even;\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push @even, $number;\n        }\n    }\n    return @even;\n}",
    "    my @evens = ();\n    my @odds = ();\n    foreach my $item (@$list) {\n        if ($item % 2 == 0) {\n            push @evens, $item;\n        } else {\n            push @odds, $item;\n        }\n    }\n    return (\\@evens, \\@odds);\n}",
    "    my @even;\n    my @odd;\n    foreach my $i (@$list) {\n        if ($i % 2 == 0) {\n            push @even, $i;\n        } else {\n            push @odd, $i;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @numbers = split(/ /,$list);\n    my @even;\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push @even, $number;\n        }\n    }\n    return @even;\n}",
    "    my @even = ();\n    my @odd = ();\n    foreach my $number (@$list) {\n        if ($number % 2 == 0) {\n            push @even, $number;\n        } else {\n            push @odd, $number;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @list = split(/,/,$list);\n    my @even;\n    foreach my $num (@list) {\n        if ($num % 2 == 0) {\n            push(@even,$num);\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    foreach my $i (@$list) {\n        if ($i % 2 == 0) {\n            push @even, $i;\n        }\n    }\n    return @even;\n}",
    "    my @numbers = split(/,/, $list);\n    my @even_numbers = ();\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push(@even_numbers, $number);\n        }\n    }\n    return @even_numbers;\n}"
  ]
}