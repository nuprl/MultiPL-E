{
  "name": "mbpp_131_reverse_vowels",
  "language": "pl",
  "prompt": "# Write a python function to reverse only the vowels of a given string (where y is not a vowel).\nsub reverse_vowels {\n    my($str1) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&reverse_vowels;\n        if(eq_deeply($candidate->(\"Python\"),\"Python\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"USA\"),\"ASU\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"ab\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @vowels = ($str1 =~ /[aeiou]/g);\n    my $vowels = join('', @vowels);\n    $str1 =~ s/[aeiou]/$vowels/g;\n    return $str1;\n}",
    "    my @vowels = $str1 =~ /[aeiou]/g;\n    my $vowels = join '', reverse @vowels;\n    $str1 =~ s/[aeiou]/$vowels/g;\n    return $str1;\n}",
    "    my @vowels = $str1 =~ /[aeiou]/gi;\n    my $vowels = join('', @vowels);\n    $str1 =~ s/[aeiou]/$vowels/gi;\n    return $str1;\n}",
    "    my @vowels = ($str1 =~ /[aeiou]/gi);\n    my $vowels = join('', @vowels);\n    $str1 =~ s/[aeiou]/$vowels/gi;\n    return $str1;\n}",
    "    my @vowels = $str1 =~ /[aeiou]/gi;\n    my $vowels = join('', reverse @vowels);\n    $str1 =~ s/[aeiou]/$vowels/gi;\n    return $str1;\n}",
    "    my @vowels = ($str1 =~ /[aeiou]/gi);\n    my $vowels = join(\"\", @vowels);\n    my $reverse_vowels = reverse($vowels);\n    my $i = 0;\n    $str1 =~ s/[aeiou]/$reverse_vowels[$i++]/gie;\n    return $str1;\n}",
    "    my @vowels = $str1 =~ /[aeiou]/gi;\n    my $vowels = join '', @vowels;\n    $str1 =~ s/[aeiou]/$vowels/gi;\n    return $str1;\n}",
    "    my @vowels = $str1 =~ /[aeiou]/gi;\n    my $vowels = join('', reverse(@vowels));\n    my $i = 0;\n    $str1 =~ s/[aeiou]/$vowels[$i++]/gei;\n    return $str1;\n}",
    "    my @vowels = ($str1 =~ /[aeiou]/g);\n    my $vowels = join(\"\", reverse @vowels);\n    $str1 =~ s/[aeiou]/$vowels/g;\n    return $str1;\n}",
    "    my @vowels = $str1 =~ /[aeiou]/gi;\n    my $vowels = join('', @vowels);\n    $str1 =~ s/[aeiou]/$vowels/gi;\n    return $str1;\n}",
    "    my @vowels = $str1 =~ /[aeiou]/gi;\n    my $vowels = join '', reverse @vowels;\n    $str1 =~ s/[aeiou]/$vowels/gi;\n    return $str1;\n}",
    "    my @vowels = ($str1 =~ /[aeiou]/gi);\n    my @chars = split(//, $str1);\n    for my $i (0..$#chars) {\n        if ($chars[$i] =~ /[aeiou]/i) {\n            $chars[$i] = pop @vowels;\n        }\n    }\n    return join('', @chars);\n}",
    "    my @vowels = $str1 =~ /[aeiou]/g;\n    my $vowels = join '', reverse @vowels;\n    $str1 =~ s/[aeiou]/$vowels/eg;\n    return $str1;\n}",
    "    my @vowels = $str1 =~ /[aeiou]/gi;\n    my $vowels = join('', reverse(@vowels));\n    $str1 =~ s/[aeiou]/$vowels/gi;\n    return $str1;\n}",
    "    my @vowels = ($str1 =~ /[aeiou]/gi);\n    my $vowels = join('', @vowels);\n    my $rev_vowels = reverse($vowels);\n    my $i = 0;\n    $str1 =~ s/[aeiou]/$rev_vowels[$i++]/gie;\n    return $str1;\n}",
    "    my @vowels = ($str1 =~ /[aeiou]/gi);\n    my @str = split(//, $str1);\n    my $i = 0;\n    foreach my $char (@str) {\n        if ($char =~ /[aeiou]/i) {\n            $char = pop(@vowels);\n        }\n        $i++;\n    }\n    return join('', @str);\n}",
    "    my @vowels = ($str1 =~ /[aeiou]/gi);\n    my $vowels = join('', @vowels);\n    $str1 =~ s/[aeiou]/$vowels/gi;\n    return $str1;\n}",
    "    my @vowels = ($str1 =~ /[aeiou]/gi);\n    my $vowels = join('', @vowels);\n    $str1 =~ s/[aeiou]/$vowels/gi;\n    return $str1;\n}",
    "    my @vowels = $str1 =~ /[aeiou]/gi;\n    my $vowels = join '', @vowels;\n    my $reverse_vowels = reverse $vowels;\n    $str1 =~ s/[aeiou]/$reverse_vowels/gi;\n    return $str1;\n}",
    "    my @vowels = $str1 =~ /[aeiou]/gi;\n    my $vowels = join('', @vowels);\n    $str1 =~ s/[aeiou]/$vowels/gi;\n    return $str1;\n}"
  ]
}