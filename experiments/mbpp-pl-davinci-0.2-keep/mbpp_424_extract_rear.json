{
  "name": "mbpp_424_extract_rear",
  "language": "pl",
  "prompt": "# Write a function to extract only the rear index element of each string in the given tuple.\nsub extract_rear {\n    my($test_tuple) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&extract_rear;\n        if(eq_deeply($candidate->([\"Mers\", \"for\", \"Vers\"]),[\"s\", \"r\", \"s\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"Avenge\", \"for\", \"People\"]),[\"e\", \"r\", \"e\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"Gotta\", \"get\", \"go\"]),[\"a\", \"t\", \"o\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @rear_index_elements;\n    foreach my $element (@$test_tuple) {\n        my $rear_index_element = substr($element, -1);\n        push @rear_index_elements, $rear_index_element;\n    }\n    return \\@rear_index_elements;\n}",
    "    my @rear_index_elements;\n    foreach my $element (@$test_tuple) {\n        my $rear_index_element = substr($element, -1);\n        push @rear_index_elements, $rear_index_element;\n    }\n    return @rear_index_elements;\n}",
    "    my @rear_index_elements;\n    foreach my $element (@$test_tuple) {\n        my $rear_index_element = substr($element, -1);\n        push @rear_index_elements, $rear_index_element;\n    }\n    return @rear_index_elements;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        push @result, $element->[-1];\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $str (@$test_tuple) {\n        push @result, substr($str, -1);\n    }\n    return @result;\n}",
    "    my @rear_index_elements;\n    foreach my $element (@$test_tuple) {\n        push @rear_index_elements, substr($element, -1);\n    }\n    return \\@rear_index_elements;\n}",
    "    my @rear_index_elements;\n    foreach my $element (@$test_tuple) {\n        my $rear_index_element = substr($element, -1);\n        push @rear_index_elements, $rear_index_element;\n    }\n    return @rear_index_elements;\n}",
    "    my @rear_index_elements = map { substr($_, -1) } @$test_tuple;\n    return @rear_index_elements;\n}",
    "    my @rear_index_elements = ();\n    foreach my $string (@$test_tuple) {\n        push @rear_index_elements, substr($string, -1, 1);\n    }\n    return @rear_index_elements;\n}",
    "    my @rear_index_elements;\n    foreach my $element (@$test_tuple) {\n        my $rear_index_element = substr($element, -1);\n        push @rear_index_elements, $rear_index_element;\n    }\n    return \\@rear_index_elements;\n}",
    "    my @rear_index_elements = ();\n    foreach my $string (@$test_tuple) {\n        my $rear_index_element = substr($string, -1);\n        push @rear_index_elements, $rear_index_element;\n    }\n    return @rear_index_elements;\n}",
    "    my @rear_index_elements = ();\n    foreach my $element (@$test_tuple) {\n        my $rear_index_element = substr($element, -1);\n        push(@rear_index_elements, $rear_index_element);\n    }\n    return @rear_index_elements;\n}",
    "    my @rear_index_element;\n    foreach my $element (@$test_tuple) {\n        push @rear_index_element, substr($element, -1);\n    }\n    return @rear_index_element;\n}",
    "    my @rear_index;\n    foreach my $string (@$test_tuple) {\n        my $rear_index = substr($string, -1);\n        push @rear_index, $rear_index;\n    }\n    return @rear_index;\n}",
    "    my @rear_index = ();\n    foreach my $element (@$test_tuple) {\n        my $rear_index = substr($element, -1);\n        push @rear_index, $rear_index;\n    }\n    return @rear_index;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        push @result, substr($element, -1);\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $item (@$test_tuple) {\n        push @result, substr($item, -1);\n    }\n    return @result;\n}",
    "    my @result = ();\n    foreach my $str (@$test_tuple) {\n        my $rear = substr($str, -1);\n        push @result, $rear;\n    }\n    return @result;\n}",
    "    my @rear_indices = ();\n    foreach my $string (@$test_tuple) {\n        my $rear_index = substr($string, -1);\n        push @rear_indices, $rear_index;\n    }\n    return @rear_indices;\n}",
    "    my @result;\n    foreach my $str (@$test_tuple) {\n        push @result, substr($str, -1);\n    }\n    return @result;\n}"
  ]
}