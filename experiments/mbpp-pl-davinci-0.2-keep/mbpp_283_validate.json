{
  "name": "mbpp_283_validate",
  "language": "pl",
  "prompt": "# Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nsub validate {\n    my($n) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&validate;\n        if(eq_deeply($candidate->(1234),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(51241),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(321),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my %count;\n    my @digits = split(//,$n);\n    foreach my $digit (@digits) {\n        $count{$digit}++;\n    }\n    foreach my $digit (@digits) {\n        if ($count{$digit} > $digit) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $flag = 1;\n    my %hash;\n    my @arr = split(//,$n);\n    foreach my $i(@arr) {\n        $hash{$i}++;\n    }\n    foreach my $i(keys %hash) {\n        if($hash{$i} > $i) {\n            $flag = 0;\n            last;\n        }\n    }\n    return $flag;\n}",
    "    my $flag = 1;\n    my @arr = split('',$n);\n    my %hash;\n    foreach my $i (@arr) {\n        if(exists($hash{$i})) {\n            $hash{$i}++;\n        } else {\n            $hash{$i} = 1;\n        }\n    }\n    foreach my $i (@arr) {\n        if($hash{$i} > $i) {\n            $flag = 0;\n            last;\n        }\n    }\n    return $flag;\n}",
    "    my @digits = split(//, $n);\n    my %count;\n    foreach my $digit (@digits) {\n        $count{$digit}++;\n    }\n    foreach my $digit (@digits) {\n        return 0 if $count{$digit} > $digit;\n    }\n    return 1;\n}",
    "    my @digits = split(//, $n);\n    my %count;\n    foreach my $digit (@digits) {\n        $count{$digit}++;\n    }\n    foreach my $digit (keys %count) {\n        if ($count{$digit} > $digit) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my %count;\n    my $flag = 1;\n    while($n > 0) {\n        my $rem = $n % 10;\n        $count{$rem}++;\n        $n = int($n / 10);\n    }\n    foreach my $key (keys %count) {\n        if($count{$key} > $key) {\n            $flag = 0;\n            last;\n        }\n    }\n    return $flag;\n}",
    "    my @digits = split(//,$n);\n    my %count;\n    foreach my $digit (@digits) {\n        $count{$digit}++;\n    }\n    foreach my $digit (@digits) {\n        if($count{$digit} > $digit) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my %hash;\n    my @arr = split(\"\", $n);\n    foreach my $i (@arr) {\n        $hash{$i}++;\n    }\n    foreach my $i (@arr) {\n        if($hash{$i} > $i) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my %count;\n    my @digits = split(//, $n);\n    foreach my $d (@digits) {\n        $count{$d}++;\n    }\n    foreach my $d (@digits) {\n        if ($count{$d} > $d) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my @digits = split(//, $n);\n    my %count;\n    foreach my $digit (@digits) {\n        $count{$digit}++;\n    }\n    foreach my $digit (@digits) {\n        if ($count{$digit} > $digit) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my @digits = split(//, $n);\n    my %count;\n    foreach my $digit (@digits) {\n        $count{$digit}++;\n    }\n    foreach my $digit (@digits) {\n        if ($count{$digit} > $digit) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my %count;\n    $count{$_}++ for @digits;\n    for my $digit (@digits) {\n        return 0 if $count{$digit} > $digit;\n    }\n    return 1;\n}",
    "    my @digits = split(//, $n);\n    my %count;\n    foreach my $digit (@digits) {\n        $count{$digit}++;\n    }\n    foreach my $digit (@digits) {\n        if ($count{$digit} > $digit) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my @digits = split(//,$n);\n    my %count;\n    ++$count{$_} for @digits;\n    foreach my $digit (keys %count) {\n        if ($count{$digit} > $digit) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my @digits = split(//,$n);\n    my $flag = 1;\n    foreach my $d (@digits) {\n        my $freq = grep(/$d/,@digits);\n        if ($freq > $d) {\n            $flag = 0;\n            last;\n        }\n    }\n    return $flag;\n}",
    "    my %count;\n    my @digits = split(//, $n);\n    foreach my $digit (@digits) {\n        $count{$digit}++;\n    }\n    foreach my $digit (@digits) {\n        if ($count{$digit} > $digit) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my %freq;\n    my $temp = $n;\n    while($temp > 0) {\n        my $digit = $temp % 10;\n        $freq{$digit}++;\n        $temp = int($temp / 10);\n    }\n    foreach my $key (keys %freq) {\n        if($freq{$key} > $key) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my @digits = split(//, $n);\n    my %count;\n    foreach my $digit (@digits) {\n        $count{$digit}++;\n    }\n    foreach my $digit (@digits) {\n        if ($count{$digit} > $digit) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $flag = 1;\n    my $temp = $n;\n    my %hash;\n    while($temp > 0) {\n        my $rem = $temp % 10;\n        $hash{$rem}++;\n        $temp = int($temp / 10);\n    }\n    foreach my $key (keys %hash) {\n        if($hash{$key} > $key) {\n            $flag = 0;\n            last;\n        }\n    }\n    return $flag;\n}",
    "    my %count;\n    my @digits = split(//, $n);\n    foreach my $digit (@digits) {\n        $count{$digit}++;\n    }\n    foreach my $digit (@digits) {\n        if ($count{$digit} > $digit) {\n            return 0;\n        }\n    }\n    return 1;\n}"
  ]
}