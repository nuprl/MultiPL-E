{
  "name": "mbpp_96_divisor",
  "language": "pl",
  "prompt": "# Write a python function to find the number of divisors of a given integer.\nsub divisor {\n    my($n) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&divisor;\n        if(eq_deeply($candidate->(15),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $count = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for(my $i=1; $i<=$n; $i++) {\n        if($n % $i == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for(my $i = 1; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for(my $i = 1; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for(my $i = 1; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for(my $i = 1; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for(my $i = 1; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for(my $i = 1; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $divisor = 0;\n    for(my $i = 1; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $divisor++;\n        }\n    }\n    return $divisor;\n}",
    "    my $count = 0;\n    for(my $i=1; $i<=$n; $i++) {\n        if($n % $i == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for(my $i = 1; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for(my $i = 1; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for(my $i = 1; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for(my $i = 1; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for(my $i = 1; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}"
  ]
}