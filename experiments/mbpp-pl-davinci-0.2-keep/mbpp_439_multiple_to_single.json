{
  "name": "mbpp_439_multiple_to_single",
  "language": "pl",
  "prompt": "# Write a function to join a list of multiple integers into a single integer.\nsub multiple_to_single {\n    my($L) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&multiple_to_single;\n        if(eq_deeply($candidate->([11, 33, 50]),113350)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 2, 3, 4, 5, 6]),-123456)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 15, 20, 25]),10152025)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $result = 0;\n    foreach my $i (@$L) {\n        $result = $result * 10 + $i;\n    }\n    return $result;\n}",
    "    my $result = 0;\n    foreach my $i (@$L) {\n        $result = $result * 10 + $i;\n    }\n    return $result;\n}",
    "    my $s = \"\";\n    foreach my $i (@$L) {\n        $s .= $i;\n    }\n    return $s;\n}",
    "    my $result = 0;\n    foreach my $i (@$L) {\n        $result = $result * 10 + $i;\n    }\n    return $result;\n}",
    "    my $s = \"\";\n    foreach my $i (@$L) {\n        $s .= $i;\n    }\n    return $s;\n}",
    "    my $s = '';\n    foreach my $i (@$L) {\n        $s .= $i;\n    }\n    return $s;\n}",
    "    my $s = '';\n    foreach my $i (@$L) {\n        $s .= $i;\n    }\n    return $s;\n}",
    "    my $result = 0;\n    foreach my $i (@$L) {\n        $result = $result * 10 + $i;\n    }\n    return $result;\n}",
    "    my $s = \"\";\n    foreach my $i (@$L) {\n        $s .= $i;\n    }\n    return $s;\n}",
    "    my $s = \"\";\n    foreach my $i (@$L) {\n        $s .= $i;\n    }\n    return $s;\n}",
    "    my $s = '';\n    foreach my $i (@$L) {\n        $s .= $i;\n    }\n    return $s;\n}",
    "    my $s = '';\n    foreach my $i (@$L) {\n        $s .= $i;\n    }\n    return $s;\n}",
    "    my $s = '';\n    foreach my $i (@$L) {\n        $s .= $i;\n    }\n    return $s;\n}",
    "    my $result = 0;\n    foreach my $i (@$L) {\n        $result = $result * 10 + $i;\n    }\n    return $result;\n}",
    "    my $result = 0;\n    foreach my $i (@$L) {\n        $result = $result * 10 + $i;\n    }\n    return $result;\n}",
    "    my $s = '';\n    foreach my $i (@$L) {\n        $s .= $i;\n    }\n    return $s;\n}",
    "    my $s = '';\n    foreach my $i (@$L) {\n        $s .= $i;\n    }\n    return $s;\n}",
    "    my $result = '';\n    foreach my $i (@$L) {\n        $result .= $i;\n    }\n    return $result;\n}",
    "    my $s = \"\";\n    foreach my $i (@$L) {\n        $s .= $i;\n    }\n    return $s;\n}",
    "    my $sum = 0;\n    foreach my $i (@$L) {\n        $sum = $sum * 10 + $i;\n    }\n    return $sum;\n}"
  ]
}