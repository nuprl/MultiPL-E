{
  "name": "mbpp_580_extract_even",
  "language": "pl",
  "prompt": "# Write a function to remove uneven elements in the nested mixed tuple.\nsub extract_even {\n    my($test_tuple) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&extract_even;\n        if(eq_deeply($candidate->([4, 5, [7, 6, [2, 4]], 6, 8]),[4, [6, [2, 4]], 6, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, [8, 7, [4, 8]], 7, 9]),[6, [8, [4, 8]]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, [9, 8, [4, 6]], 8, 10]),[6, [8, [4, 6]], 8, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @even_tuple;\n    for my $i (@$test_tuple) {\n        if (ref $i) {\n            push @even_tuple, extract_even($i);\n        } else {\n            push @even_tuple, $i if $i % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @result;\n    for my $elem (@$test_tuple) {\n        if (ref $elem) {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $aa = 0;\n    my $bb = 0;\n    my $cc = 0;\n    my $dd = 0;\n    my $ee = 0;\n    my $ff = 0;\n    my $gg = 0;\n    my $hh = 0;\n    my $ii = 0;\n    my $jj = 0;\n    my $kk = 0;\n    my $ll = 0;\n    my $mm = 0;\n    my $nn = 0;\n    my $oo = 0;\n    my $pp = 0;\n    my $qq = 0;\n    my $rr = 0;\n    my $ss = 0;\n    my $tt = 0;\n    my $uu = 0;\n    my $vv = 0;\n    my $ww = 0;\n    my $xx = 0;\n    my $yy = 0;\n    my $zz = 0;\n    my $aaa = 0;\n    my $bbb = 0;\n    my $ccc = 0;\n    my $ddd = 0;\n    my $eee = 0;\n    my $fff = 0;\n    my $ggg = 0;\n    my $hhh = 0;\n    my $iii = 0;\n    my $jjj = 0;\n    my $kkk = 0;\n    my $lll = 0;\n    my $mmm = 0;\n    my $nnn = 0;\n    my $ooo = 0;\n    my $ppp = 0;\n    my $qqq = 0;\n    my $",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            my @even_array = extract_even($element);\n            push @even_tuple, \\@even_array;\n        } elsif (ref($element) eq 'HASH') {\n            my %even_hash = extract_even($element);\n            push @even_tuple, \\%even_hash;\n        } elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_tuple;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_tuple, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_tuple;\n    for my $elem (@$test_tuple) {\n        if (ref $elem eq 'ARRAY') {\n            push @even_tuple, extract_even($elem);\n        } elsif (ref $elem eq 'HASH') {\n            push @even_tuple, extract_even($elem);\n        } elsif ($elem % 2 == 0) {\n            push @even_tuple, $elem;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @even_array;",
    "    my @result = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element)) {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $elem (@$test_tuple) {\n        if (ref($elem) eq 'ARRAY') {\n            push @result, extract_even($elem);\n        }\n        elsif ($elem % 2 == 0) {\n            push @result, $elem;\n        }\n    }\n    return @result;\n}",
    "    my @even_list = ();\n    foreach my $item (@$test_tuple) {\n        if (ref($item) eq 'ARRAY') {\n            my @new_list = extract_even($item);\n            push @even_list, \\@new_list;\n        } else {\n            push @even_list, $item if $item % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_tuple = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        } else {\n            push @even_tuple, $element if ($element % 2 == 0);\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @result;\n    for my $item (@$test_tuple) {\n        if (ref $item eq 'ARRAY') {\n            push @result, extract_even($item);\n        } elsif ($item % 2 == 0) {\n            push @result, $item;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple = ();\n    for my $i (0..$#{$test_tuple}) {\n        if (ref $test_tuple->[$i] eq 'ARRAY') {\n            push @even_tuple, extract_even($test_tuple->[$i]);\n        } elsif ($test_tuple->[$i] % 2 == 0) {\n            push @even_tuple, $test_tuple->[$i];\n        }\n    }\n    return @even_tuple;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @result, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @result, $element;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @result, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @result, $element;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple = ();\n    for my $i (@$test_tuple) {\n        if (ref $i eq 'ARRAY') {\n            push @even_tuple, extract_even($i);\n        }\n        elsif ($i % 2 == 0) {\n            push @even_tuple, $i;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @even_tuple;\n    for my $elem (@$test_tuple) {\n        if (ref $elem) {\n            push @even_tuple, extract_even($elem);\n        }\n        else {\n            push @even_tuple, $elem if $elem % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_list = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_list, $element;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_tuple;\n    for my $item (@$test_tuple) {\n        if (ref $item eq 'ARRAY') {\n            push @even_tuple, extract_even($item);\n        }\n        elsif (ref $item eq 'HASH') {\n            push @even_tuple, extract_even($item);\n        }\n        elsif (ref $item eq 'SCALAR') {\n            push @even_tuple, extract_even($item);\n        }\n        elsif ($item % 2 == 0) {\n            push @even_tuple, $item;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_elements = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        } elsif (ref($element) eq 'HASH') {\n            push @even_elements, extract_even($element);\n        } elsif ($element % 2 == 0) {\n            push @even_elements, $element;\n        }\n    }\n    return @even_elements;\n}",
    "    my $result_tuple = ();\n    my $i = 0;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            $result_tuple->[$i] = extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            $result_tuple->[$i] = $element;\n        }\n        $i++;\n    }\n    return $result_tuple;\n}",
    "    my @even_tuple;\n    for my $elem (@$test_tuple) {\n        if (ref $elem) {\n            push @even_tuple, extract_even($elem);\n        } else {\n            push @even_tuple, $elem if $elem % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_tuple;\n    for my $i (0 .. $#{$test_tuple}) {\n        if (ref $test_tuple->[$i] eq 'ARRAY') {\n            my @even_array;\n            for my $j (0 .. $#{$test_tuple->[$i]}) {\n                if ($test_tuple->[$i][$j] % 2 == 0) {\n                    push @even_array, $test_tuple->[$i][$j];\n                }\n            }\n            push @even_tuple, \\@even_array;\n        }\n        elsif ($test_tuple->[$i] % 2 == 0) {\n            push @even_tuple, $test_tuple->[$i];\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @even_tuple;\n    my $i = 0;\n    while ($i < scalar(@$test_tuple)) {\n        if (ref($test_tuple->[$i]) eq 'ARRAY') {\n            push @even_tuple, extract_even($test_tuple->[$i]);\n        } elsif ($test_tuple->[$i] % 2 == 0) {\n            push @even_tuple, $test_tuple->[$i];\n        }\n        $i++;\n    }\n    return \\@even_tuple;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_list = ();\n    my $i = 0;\n    my $j = 0;\n    for ($i = 0; $i < scalar(@$test_tuple); $i++) {\n        if (ref($test_tuple->[$i]) eq 'ARRAY') {\n            my @inner_list = ();\n            for ($j = 0; $j < scalar(@{$test_tuple->[$i]}); $j++) {\n                if ($test_tuple->[$i][$j] % 2 == 0) {\n                    push(@inner_list, $test_tuple->[$i][$j]);\n                }\n            }\n            push(@even_list, \\@inner_list);\n        } else {\n            if ($test_tuple->[$i] % 2 == 0) {\n                push(@even_list, $test_tuple->[$i]);\n            }\n        }\n    }\n    return \\@even_list;\n}",
    "    my @even_list = ();\n    for my $item (@$test_tuple) {\n        if (ref $item) {\n            push @even_list, extract_even($item);\n        } else {\n            push @even_list, $item if $item % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif (ref($element) eq 'HASH') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @even_elements = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        } else {\n            push @even_elements, $element if $element % 2 == 0;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_tuple;\n    my $i = 0;\n    while($i < scalar(@$test_tuple)) {\n        if(ref($test_tuple->[$i]) eq 'ARRAY') {\n            my $j = 0;\n            while($j < scalar(@{$test_tuple->[$i]})) {\n                if($test_tuple->[$i][$j] % 2 == 0) {\n                    push @even_tuple, $test_tuple->[$i][$j];\n                }\n                $j++;\n            }\n        }\n        elsif($test_tuple->[$i] % 2 == 0) {\n            push @even_tuple, $test_tuple->[$i];\n        }\n        $i++;\n    }\n    return @even_tuple;\n}",
    "    my @even_tuple = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif (ref($element) eq 'HASH') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @even_list;\n    my $i = 0;\n    while ($i < scalar(@$test_tuple)) {\n        if (ref($test_tuple->[$i]) eq \"ARRAY\") {\n            push @even_list, extract_even($test_tuple->[$i]);\n        } elsif ($test_tuple->[$i] % 2 == 0) {\n            push @even_list, $test_tuple->[$i];\n        }\n        $i++;\n    }\n    return @even_list;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @even_tuple = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_list;\n    foreach my $item (@$test_tuple) {\n        if (ref $item) {\n            push @even_list, extract_even($item);\n        } else {\n            push @even_list, $item if $item % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @result;\n    for my $elem (@$test_tuple) {\n        if (ref $elem) {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return \\@result;\n}",
    "    my $result = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @$result, extract_even($element);\n        } elsif ($element % 2 == 0) {\n            push @$result, $element;\n        }\n    }\n    return $result;\n}",
    "    my @even_tuple;\n    for my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @even_list = ();\n    my $i = 0;\n    for my $item (@$test_tuple) {\n        if ($i % 2 == 0) {\n            push @even_list, $item;\n        }\n        $i++;\n    }\n    return @even_list;\n}",
    "    my @even_tuple;\n    foreach my $item (@$test_tuple) {\n        if (ref $item eq 'ARRAY') {\n            push @even_tuple, extract_even($item);\n        } else {\n            push @even_tuple, $item if $item % 2 == 0;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @result;\n    for my $item (@$test_tuple) {\n        if (ref $item) {\n            push @result, extract_even($item);\n        } else {\n            push @result, $item if $item % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple;\n    for my $item (@$test_tuple) {\n        if (ref $item eq 'ARRAY') {\n            push @even_tuple, extract_even($item);\n        }\n        elsif ($item % 2 == 0) {\n            push @even_tuple, $item;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my $result = ();\n    foreach my $i (@$test_tuple) {\n        if (ref($i) eq 'ARRAY') {\n            push @$result, extract_even($i);\n        } elsif (ref($i) eq 'HASH') {\n            push @$result, extract_even($i);\n        } elsif (ref($i) eq 'TUPLE') {\n            push @$result, extract_even($i);\n        } elsif ($i % 2 == 0) {\n            push @$result, $i;\n        }\n    }\n    return $result;\n}",
    "    my @result = ();\n    for my $elem (@$test_tuple) {\n        if (ref $elem eq 'ARRAY') {\n            push @result, extract_even($elem);\n        }\n        elsif ($elem % 2 == 0) {\n            push @result, $elem;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $elem (@$test_tuple) {\n        if (ref $elem eq 'ARRAY') {\n            push @result, extract_even($elem);\n        } elsif ($elem % 2 == 0) {\n            push @result, $elem;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref $element) {\n            push @result, extract_even($element);\n        }\n        else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_list = ();\n    for my $i (@{$test_tuple}) {\n        if(ref($i) eq 'ARRAY') {\n            push @even_list, extract_even($i);\n        }\n        elsif($i % 2 == 0) {\n            push @even_list, $i;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_tuple;\n    for my $item (@$test_tuple) {\n        if (ref $item eq 'ARRAY') {\n            push @even_tuple, extract_even($item);\n        } elsif (ref $item eq 'HASH') {\n            push @even_tuple, extract_even([values %$item]);\n        } elsif ($item % 2 == 0) {\n            push @even_tuple, $item;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_tuple;\n    for my $elem (@$test_tuple) {\n        if (ref $elem) {\n            push @even_tuple, extract_even($elem);\n        } else {\n            push @even_tuple, $elem if $elem % 2 == 0;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @result;\n    foreach my $elem (@$test_tuple) {\n        if (ref $elem) {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @result, extract_even($element);\n        }\n        elsif (!($element % 2)) {\n            push @result, $element;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $elem (@{$test_tuple}) {\n        if (ref $elem) {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return \\@result;\n}",
    "    my @even_tuple;\n    for my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @result, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @result, $element;\n        }\n    }\n    return \\@result;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_tuple, extract_even($element);\n        }\n        else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @result;\n    my $i = 0;\n    while ($i < @$test_tuple) {\n        if (ref $test_tuple->[$i]) {\n            push @result, extract_even($test_tuple->[$i]);\n        }\n        else {\n            push @result, $test_tuple->[$i] if $test_tuple->[$i] % 2 == 0;\n        }\n        $i++;\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $item (@$test_tuple) {\n        if (ref($item) eq 'ARRAY') {\n            push @result, extract_even($item);\n        }\n        elsif ($item % 2 == 0) {\n            push @result, $item;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $item (@$test_tuple) {\n        if (ref $item eq 'ARRAY') {\n            push @result, extract_even($item);\n        }\n        elsif ($item % 2 == 0) {\n            push @result, $item;\n        }\n    }\n    return @result;\n}",
    "    my @even_list;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_list, $element;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_elements;\n    foreach my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_elements, extract_even($element);\n        }\n        else {\n            push @even_elements, $element if $element % 2 == 0;\n        }\n    }\n    return @even_elements;\n}",
    "    my @result;\n    for my $elem (@$test_tuple) {\n        if (ref $elem) {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $item (@$test_tuple) {\n        if (ref $item) {\n            push @result, extract_even($item);\n        }\n        else {\n            push @result, $item if $item % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_elements = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        }\n        elsif (ref($element) eq 'HASH') {\n            push @even_elements, extract_even($element);\n        }\n        elsif (ref($element) eq 'TUPLE') {\n            push @even_elements, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_elements, $element;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_tuple;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_tuple, extract_even($element);\n        } else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @result;\n    for my $elem (@$test_tuple) {\n        if (ref $elem) {\n            push @result, extract_even($elem);\n        }\n        else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return \\@result;\n}",
    "    my @even_list;\n    foreach my $item (@$test_tuple) {\n        if (ref $item eq 'ARRAY') {\n            push @even_list, extract_even($item);\n        } elsif (ref $item eq 'HASH') {\n            push @even_list, extract_even($item);\n        } else {\n            push @even_list, $item if $item % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @result;\n    for my $item (@$test_tuple) {\n        if (ref $item) {\n            push @result, extract_even($item);\n        }\n        else {\n            push @result, $item if $item % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_elements;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_elements, extract_even($element);\n        }\n        else {\n            push @even_elements, $element if $element % 2 == 0;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif (ref($element) eq 'HASH') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @result;\n    for my $elem (@$test_tuple) {\n        if (ref $elem) {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            my @even_subtuple = extract_even($element);\n            push @even_tuple, \\@even_subtuple;\n        } elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @result = ();\n    for my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @result, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @result, $element;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @result, extract_even($element);\n        } elsif (ref($element) eq 'HASH') {\n            push @result, extract_even($element);\n        } elsif (!ref($element) && $element % 2 == 0) {\n            push @result, $element;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $item (@$test_tuple) {\n        if (ref $item eq 'ARRAY') {\n            push @result, extract_even($item);\n        }\n        elsif ($item % 2 == 0) {\n            push @result, $item;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @result, extract_even($element);\n        }\n        elsif (ref $element eq 'HASH') {\n            push @result, extract_even($element);\n        }\n        else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_list;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        } elsif ($element % 2 == 0) {\n            push @even_list, $element;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_tuple;\n    for my $i (0 .. $#{$test_tuple}) {\n        if (ref($test_tuple->[$i]) eq 'ARRAY') {\n            my @even_array;\n            for my $j (0 .. $#{$test_tuple->[$i]}) {\n                push(@even_array, $test_tuple->[$i][$j]) if ($test_tuple->[$i][$j] % 2 == 0);\n            }\n            push(@even_tuple, \\@even_array);\n        } else {\n            push(@even_tuple, $test_tuple->[$i]) if ($test_tuple->[$i] % 2 == 0);\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @even_list = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_list, $element;\n        }\n    }\n    return @even_list;\n}",
    "    my @result;\n    foreach my $item (@$test_tuple) {\n        if (ref $item) {\n            push @result, extract_even($item);\n        } else {\n            push @result, $item if $item % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result = ();\n    foreach my $element (@$test_tuple) {\n        if (ref $element) {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_list = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_list, $element;\n        }\n    }\n    return @even_list;\n}",
    "    my @result;\n    for my $elem (@$test_tuple) {\n        if (ref $elem) {\n            push @result, extract_even($elem);\n        }\n        else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_list = ();\n    foreach my $item (@$test_tuple) {\n        if (ref($item) eq 'ARRAY') {\n            push @even_list, extract_even($item);\n        } elsif ($item % 2 == 0) {\n            push @even_list, $item;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_list;\n    if (ref($test_tuple) eq 'ARRAY') {\n        foreach my $element (@$test_tuple) {\n            if (ref($element) eq 'ARRAY') {\n                push @even_list, extract_even($element);\n            } else {\n                push @even_list, $element if ($element % 2 == 0);\n            }\n        }\n    }\n    return @even_list;\n}",
    "    my @even_list = ();\n    foreach my $item (@$test_tuple) {\n        if (ref($item) eq 'ARRAY') {\n            push @even_list, extract_even($item);\n        }\n        elsif ($item % 2 == 0) {\n            push @even_list, $item;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_tuple;\n    for my $i (0 .. $#{$test_tuple}) {\n        if (ref $test_tuple->[$i] eq 'ARRAY') {\n            push @even_tuple, extract_even($test_tuple->[$i]);\n        }\n        elsif ($test_tuple->[$i] % 2 == 0) {\n            push @even_tuple, $test_tuple->[$i];\n        }\n    }\n    return @even_tuple;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_elements;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        }\n        elsif (ref $element eq 'HASH') {\n            push @even_elements, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_elements, $element;\n        }\n    }\n    return @even_elements;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref $element) {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple;\n    foreach my $elem (@$test_tuple) {\n        if (ref $elem) {\n            push @even_tuple, extract_even($elem);\n        }\n        else {\n            push @even_tuple, $elem if $elem % 2 == 0;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @even_tuple;\n    for my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @result, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @result, $element;\n        }\n    }\n    return @result;\n}",
    "    my @result = ();\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @result, extract_even($element);\n        }\n        else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_elements;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        } else {\n            push @even_elements, $element if $element % 2 == 0;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_elements;\n    my $i = 0;\n    while ($i < scalar @$test_tuple) {\n        if (ref $test_tuple->[$i] eq 'ARRAY') {\n            push @even_elements, extract_even($test_tuple->[$i]);\n        } elsif ($test_tuple->[$i] % 2 == 0) {\n            push @even_elements, $test_tuple->[$i];\n        }\n        $i++;\n    }\n    return @even_elements;\n}",
    "    my @even_tuple = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif (ref($element) eq 'HASH') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif (ref($element) eq 'TUPLE') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @even_elements;\n    foreach my $element (@{$test_tuple}) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_elements, $element;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_list;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        } elsif (ref $element eq 'HASH') {\n            push @even_list, extract_even($element);\n        } else {\n            push @even_list, $element if $element % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @result;\n    foreach my $item (@$test_tuple) {\n        if (ref $item) {\n            push @result, extract_even($item);\n        } else {\n            push @result, $item if $item % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        } else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_tuple;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_tuple, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_elements = ();\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_elements, extract_even($element);\n        } else {\n            push @even_elements, $element if $element % 2 == 0;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        } elsif (ref $element eq 'HASH') {\n            push @even_tuple, extract_even($element);\n        } elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_tuple = ();\n    my $i = 0;\n    while ($i < @$test_tuple) {\n        if (ref($test_tuple->[$i]) eq 'ARRAY') {\n            push @even_tuple, extract_even($test_tuple->[$i]);\n        } elsif ($test_tuple->[$i] % 2 == 0) {\n            push @even_tuple, $test_tuple->[$i];\n        }\n        $i++;\n    }\n    return @even_tuple;\n}",
    "    my @even_tuple = ();\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif (ref $element eq 'HASH') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @result;\n    foreach my $item (@$test_tuple) {\n        if (ref $item eq 'ARRAY') {\n            push @result, extract_even($item);\n        }\n        elsif ($item % 2 == 0) {\n            push @result, $item;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @result, extract_even($element);\n        }\n        else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $elem (@$test_tuple) {\n        if (ref $elem) {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_list = ();\n    for my $elem (@$test_tuple) {\n        if (ref($elem) eq 'ARRAY') {\n            push @even_list, extract_even($elem);\n        } elsif (ref($elem) eq 'HASH') {\n            push @even_list, extract_even($elem);\n        } elsif ($elem % 2 == 0) {\n            push @even_list, $elem;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_list;\n    for my $item (@$test_tuple) {\n        if (ref $item eq 'ARRAY') {\n            push @even_list, extract_even($item);\n        }\n        elsif (ref $item eq 'HASH') {\n            push @even_list, extract_even([values %$item]);\n        }\n        elsif ($item % 2 == 0) {\n            push @even_list, $item;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_elements;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_elements, $element;\n        }\n    }\n    return @even_elements;\n}",
    "    my $result = ();\n    if (ref($test_tuple) eq 'ARRAY') {\n        foreach my $element (@$test_tuple) {\n            if (ref($element) eq 'ARRAY') {\n                push @$result, extract_even($element);\n            } else {\n                push @$result, $element if $element % 2 == 0;\n            }\n        }\n    }\n    return $result;\n}",
    "    my @result = ();\n    for my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @result, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @result, $element;\n        }\n    }\n    return @result;\n}",
    "    my @result = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @result, extract_even($element);\n        } elsif (ref($element) eq 'HASH') {\n            push @result, extract_even($element);\n        } elsif ($element % 2 == 0) {\n            push @result, $element;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $item (@$test_tuple) {\n        if (ref $item eq 'ARRAY') {\n            push @result, extract_even($item);\n        }\n        elsif ($item % 2 == 0) {\n            push @result, $item;\n        }\n    }\n    return @result;\n}",
    "    my @even_list = ();\n    for my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_list, $element;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_tuple;\n    for my $elem (@$test_tuple) {\n        if (ref $elem) {\n            push @even_tuple, extract_even($elem);\n        } else {\n            push @even_tuple, $elem if $elem % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_numbers;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_numbers, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_numbers, $element;\n        }\n    }\n    return @even_numbers;\n}",
    "    my @even_list;\n    foreach my $item (@$test_tuple) {\n        if (ref $item eq 'ARRAY') {\n            push @even_list, extract_even($item);\n        }\n        elsif ($item % 2 == 0) {\n            push @even_list, $item;\n        }\n    }\n    return @even_list;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @result, extract_even($element);\n        }\n        else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return \\@result;\n}",
    "    my @even_tuple = ();\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        } elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_tuple, extract_even($element);\n        } else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_tuple = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            my @even_array = ();\n            foreach my $sub_element (@$element) {\n                if ($sub_element % 2 == 0) {\n                    push @even_array, $sub_element;\n                }\n            }\n            push @even_tuple, \\@even_array;\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my $result = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            my $sub_result = extract_even($element);\n            push @$result, $sub_result if @$sub_result;\n        }\n        elsif ($element % 2 == 0) {\n            push @$result, $element;\n        }\n    }\n    return $result;\n}",
    "    my @result;\n    my $i = 0;\n    while ($i < @$test_tuple) {\n        if ($test_tuple->[$i] % 2 == 0) {\n            push @result, $test_tuple->[$i];\n        }\n        $i++;\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $item (@$test_tuple) {\n        if (ref($item) eq 'ARRAY') {\n            push @result, extract_even($item);\n        }\n        elsif ($item % 2 == 0) {\n            push @result, $item;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $elem (@$test_tuple) {\n        if (ref $elem) {\n            push @result, extract_even($elem);\n        }\n        else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result = ();\n    foreach my $item (@$test_tuple) {\n        if (ref $item eq 'ARRAY') {\n            push @result, extract_even($item);\n        }\n        elsif (ref $item eq 'HASH') {\n            push @result, extract_even($item);\n        }\n        elsif ($item % 2 == 0) {\n            push @result, $item;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif (ref $element eq 'HASH') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif (ref $element eq 'SCALAR') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return @even_tuple;\n}",
    "    my $result_tuple = ();\n    for my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            my $sub_result = extract_even($element);\n            push @$result_tuple, $sub_result if @$sub_result;\n        }\n        elsif ($element % 2 == 0) {\n            push @$result_tuple, $element;\n        }\n    }\n    return $result_tuple;\n}",
    "    my @even_tuple;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_tuple, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_elements = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_elements, $element;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_list;\n    foreach my $element (@{$test_tuple}) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_list, $element;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_tuple = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        } else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @result, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @result, $element;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @result;\n    for my $item (@$test_tuple) {\n        if (ref $item) {\n            push @result, extract_even($item);\n        }\n        else {\n            push @result, $item if $item % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_tuple, extract_even($element);\n        }\n        else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @even_list;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        }\n        elsif (ref($element) eq 'HASH') {\n            push @even_list, extract_even($element);\n        }\n        elsif (ref($element) eq 'TUPLE') {\n            push @even_list, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_list, $element;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_tuple, extract_even($element);\n        }\n        else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_list = ();\n    foreach my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_list, extract_even($element);\n        } else {\n            push @even_list, $element if $element % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_elements;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_elements, extract_even($element);\n        }\n        else {\n            push @even_elements, $element if $element % 2 == 0;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_tuple = ();\n    foreach my $elem (@$test_tuple) {\n        if (ref($elem) eq 'ARRAY') {\n            push @even_tuple, extract_even($elem);\n        }\n        elsif ($elem % 2 == 0) {\n            push @even_tuple, $elem;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @even_tuple;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_tuple, extract_even($element);\n        } else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_tuple;\n    foreach my $elem (@$test_tuple) {\n        if (ref($elem) eq 'ARRAY') {\n            my @even_array = extract_even($elem);\n            push @even_tuple, \\@even_array;\n        } elsif (ref($elem) eq 'HASH') {\n            my %even_hash = extract_even($elem);\n            push @even_tuple, \\%even_hash;\n        } elsif (ref($elem) eq 'TUPLE') {\n            my @even_tuple = extract_even($elem);\n            push @even_tuple, \\@even_tuple;\n        } elsif ($elem % 2 == 0) {\n            push @even_tuple, $elem;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        } else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref $element) {\n            push @result, extract_even($element);\n        }\n        else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_list = ();\n    for my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        } elsif (ref($element) eq 'HASH') {\n            push @even_list, extract_even($element);\n        } elsif (ref($element) eq 'TUPLE') {\n            push @even_list, extract_even($element);\n        } elsif ($element % 2 == 0) {\n            push @even_list, $element;\n        }\n    }\n    return @even_list;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result = ();\n    for my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple;\n    for my $element (@{$test_tuple}) {\n        if (ref $element eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif (ref $element eq 'HASH') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @even_elements = ();\n    foreach my $element (@{$test_tuple}) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        } elsif ($element % 2 == 0) {\n            push @even_elements, $element;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_tuple = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        } else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @even_elements;\n    my $i = 0;\n    while ($i < scalar @$test_tuple) {\n        if (ref $test_tuple->[$i]) {\n            push @even_elements, extract_even($test_tuple->[$i]);\n        } else {\n            push @even_elements, $test_tuple->[$i] if $test_tuple->[$i] % 2 == 0;\n        }\n        $i++;\n    }\n    return \\@even_elements;\n}",
    "    my @result;\n    if (ref($test_tuple) eq 'ARRAY') {\n        foreach my $element (@{$test_tuple}) {\n            if (ref($element) eq 'ARRAY') {\n                push @result, extract_even($element);\n            } elsif ($element % 2 == 0) {\n                push @result, $element;\n            }\n        }\n    } elsif ($test_tuple % 2 == 0) {\n        push @result, $test_tuple;\n    }\n    return @result;\n}",
    "    my @even_elements;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_elements, extract_even($element);\n        }\n        else {\n            push @even_elements, $element if $element % 2 == 0;\n        }\n    }\n    return @even_elements;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_elements;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_elements, extract_even($element);\n        } else {\n            push @even_elements, $element if $element % 2 == 0;\n        }\n    }\n    return @even_elements;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @result, extract_even($element);\n        } elsif (ref($element) eq 'HASH') {\n            push @result, extract_even($element);\n        } elsif (ref($element) eq 'TUPLE') {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @result, extract_even($element);\n        } elsif (ref $element eq 'HASH') {\n            push @result, extract_even($element);\n        } elsif ($element % 2 == 0) {\n            push @result, $element;\n        }\n    }\n    return @result;\n}",
    "    my @even_list = ();\n    for my $i (0 .. $#{$test_tuple}) {\n        if (ref($test_tuple->[$i]) eq 'ARRAY') {\n            push @even_list, extract_even($test_tuple->[$i]);\n        } elsif ($test_tuple->[$i] % 2 == 0) {\n            push @even_list, $test_tuple->[$i];\n        }\n    }\n    return @even_list;\n}",
    "    my @even_numbers = ();\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_numbers, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_numbers, $element;\n        }\n    }\n    return @even_numbers;\n}",
    "    my @even_tuple;\n    for my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @even_list = ();\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        }\n        elsif (ref $element eq 'HASH') {\n            push @even_list, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_list, $element;\n        }\n    }\n    return @even_list;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @result, extract_even($element);\n        }\n        else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_list;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_list, $element;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_array = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push(@even_array, extract_even($element));\n        } else {\n            push(@even_array, $element) if ($element % 2 == 0);\n        }\n    }\n    return \\@even_array;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        } elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @result;\n    foreach my $elem (@$test_tuple) {\n        if (ref $elem) {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            my @sub_result = extract_even($element);\n            push @result, \\@sub_result;\n        }\n        elsif (ref($element) eq 'HASH') {\n            my %sub_result = extract_even($element);\n            push @result, \\%sub_result;\n        }\n        elsif ($element % 2 == 0) {\n            push @result, $element;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @even_tuple;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif (ref $element eq 'HASH') {\n            push @even_tuple, extract_even([%$element]);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @result, extract_even($element);\n        } elsif ($element % 2 == 0) {\n            push @result, $element;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        } elsif (ref($element) eq 'HASH') {\n            push @even_tuple, extract_even($element);\n        } elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_numbers;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_numbers, extract_even($element);\n        }\n        else {\n            push @even_numbers, $element if $element % 2 == 0;\n        }\n    }\n    return @even_numbers;\n}",
    "    my @result;\n    for my $item (@$test_tuple) {\n        if (ref($item) eq 'ARRAY') {\n            push @result, extract_even($item);\n        } else {\n            push @result, $item if $item % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my $result = ();\n    for my $elem (@$test_tuple) {\n        if (ref $elem) {\n            push @$result, extract_even($elem);\n        } else {\n            push @$result, $elem if $elem % 2 == 0;\n        }\n    }\n    return $result;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @even_elements;\n    foreach my $elem (@$test_tuple) {\n        if (ref($elem) eq 'ARRAY') {\n            push @even_elements, extract_even($elem);\n        } elsif ($elem % 2 == 0) {\n            push @even_elements, $elem;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_list = ();\n    foreach my $elem (@$test_tuple) {\n        if (ref($elem) eq 'ARRAY') {\n            push @even_list, extract_even($elem);\n        }\n        elsif (ref($elem) eq 'HASH') {\n            push @even_list, extract_even($elem);\n        }\n        elsif (ref($elem) eq 'TUPLE') {\n            push @even_list, extract_even($elem);\n        }\n        else {\n            push @even_list, $elem if $elem % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_elements;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_elements, $element;\n        }\n    }\n    return @even_elements;\n}",
    "    my @result = ();\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @result, extract_even($element);\n        } elsif (ref $element eq 'HASH') {\n            push @result, extract_even($element);\n        } elsif ($element % 2 == 0) {\n            push @result, $element;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            my @even_array = extract_even($element);\n            push @even_tuple, \\@even_array;\n        } elsif (ref($element) eq 'HASH') {\n            my %even_hash = extract_even($element);\n            push @even_tuple, \\%even_hash;\n        } elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_list;\n    for my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        }\n        elsif (ref($element) eq 'HASH') {\n            push @even_list, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_list, $element;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_list;\n    if (ref($test_tuple) eq 'ARRAY') {\n        for my $elem (@$test_tuple) {\n            if (ref($elem) eq 'ARRAY') {\n                push @even_list, extract_even($elem);\n            }\n            elsif ($elem % 2 == 0) {\n                push @even_list, $elem;\n            }\n        }\n    }\n    else {\n        if ($test_tuple % 2 == 0) {\n            push @even_list, $test_tuple;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_tuple = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        } else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_tuple, extract_even($element);\n        }\n        else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @result, extract_even($element);\n        }\n        else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            my @even_subtuple = extract_even($element);\n            push @even_tuple, \\@even_subtuple;\n        } elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_elements;\n    if (ref $test_tuple eq 'ARRAY') {\n        foreach my $element (@{$test_tuple}) {\n            if (ref $element eq 'ARRAY') {\n                push @even_elements, extract_even($element);\n            }\n            elsif ($element % 2 == 0) {\n                push @even_elements, $element;\n            }\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_tuple;\n    for my $elem (@$test_tuple) {\n        if (ref $elem) {\n            push @even_tuple, extract_even($elem);\n        }\n        else {\n            push @even_tuple, $elem if $elem % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}"
  ]
}