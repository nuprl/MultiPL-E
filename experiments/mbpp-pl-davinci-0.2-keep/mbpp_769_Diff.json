{
  "name": "mbpp_769_Diff",
  "language": "pl",
  "prompt": "# Write a python function to get the difference between two lists.\nsub Diff {\n    my($li1, $li2) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Diff;\n        if(eq_deeply($candidate->([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]),[10, 20, 30, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5], [6, 7, 1]),[2, 3, 4, 5, 6, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3], [6, 7, 1]),[2, 3, 6, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my(%union, %isect, %diff);\n    my(@dif);\n    %union = map { $_, 1 } @$li1, @$li2;\n    %isect = map { $_, 1 } @$li1, @$li2;\n    delete @isect{@$li1};\n    delete @isect{@$li2};\n    @dif = keys %isect;\n    return @dif;\n}",
    "    my(%union, %isect, %diff);\n    my($elem);",
    "    my %h1 = map { $_ => 1 } @$li1;\n    my %h2 = map { $_ => 1 } @$li2;\n    my @diff;\n    foreach my $e (keys %h1, keys %h2) {\n        push(@diff, $e) if exists $h1{$e} != exists $h2{$e};\n    }\n    return @diff;\n}",
    "    my(%h, @diff);\n    foreach $e (@$li1, @$li2) { $h{$e}++ }\n    foreach $e (keys %h) {\n        push(@diff, $e) if $h{$e} == 1;\n    }\n    return @diff;\n}",
    "    my(%hash) = map { $_, 1 } @$li2;\n    return [ grep { ! $hash{$_} } @$li1 ];\n}",
    "    my(%union, %isect, %diff);\n    my(@dif);\n    %union = map { $_, 1 } @$li1, @$li2;\n    %isect = map { $_, 1 } @$li1, @$li2;\n    delete @isect{@$li1};\n    delete @isect{@$li2};\n    @dif = keys %isect;\n    return @dif;\n}",
    "    my(%union, %isect, %diff);\n    my(@dif);\n    %union = map { $_, 1 } @$li1, @$li2;\n    %isect = map { $_, 1 } @$li1, @$li2;\n    delete @isect{@$li1};\n    delete @isect{@$li2};\n    @dif = keys %isect;\n    return @dif;\n}",
    "    my %count;\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [ grep { $count{$_} == 1 } keys %count ];\n}",
    "    my(%hash) = map { $_, 1 } @$li2;\n    my(@diff) = grep(!exists($hash{$_}), @$li1);\n    return @diff;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(@li3) = ();\n    my(%count) = ();\n    foreach my $element (@$li1, @$li2) { $count{$element}++ }\n    foreach my $element (keys %count) {\n        push(@li3, $element) if $count{$element} == 1;\n    }\n    return @li3;\n}",
    "    my %h;\n    foreach my $e (@$li1, @$li2) { $h{$e}++ }\n    return [ grep { $h{$_} == 1 } keys %h ];\n}",
    "    my(%hash) = map { $_, 1 } @$li2;\n    return [grep(!exists($hash{$_}), @$li1)];\n}",
    "    my(%union, %isect, %diff);\n    my(@dif);\n    %union = map { $_, 1 } @$li1, @$li2;\n    %isect = map { $_, 1 } @$li1, @$li2;\n    delete @isect{@$li1};\n    delete @isect{@$li2};\n    @dif = keys %isect;\n    return @dif;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [ grep { $count{$_} == 1 } keys %count ];\n}",
    "    my(%union, %isect, %diff);\n    my(@dif);\n    %union = map { $_, 1 } @$li1, @$li2;\n    %isect = map { $_, 1 } @$li1, @$li2;\n    delete @isect{@$li1};\n    delete @isect{@$li2};\n    @dif = keys %isect;\n    return @dif;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    my @dif;\n    push @dif, $_ foreach (grep { $li1{$_} != $li2{$_} } keys %li1, keys %li2);\n    return @dif;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%union, %isect, %diff);\n    my($elem);\n    foreach $elem (@$li1, @$li2) { $union{$elem}++ && $isect{$elem}++ }\n    foreach $elem (keys %union) {\n        $diff{$elem}++ if $isect{$elem} != 2;\n    }\n    return [keys %diff];\n}",
    "    my(%li1, %li2);\n    foreach $e (@$li1) { $li1{$e} = 1 }\n    foreach $e (@$li2) { $li2{$e} = 1 }\n    my(@d);\n    foreach $e (keys %li1, keys %li2) {\n\tpush(@d, $e) if exists $li1{$e} && !exists $li2{$e};\n    }\n    return @d;\n}"
  ]
}