{
  "name": "mbpp_757_count_reverse_pairs",
  "language": "pl",
  "prompt": "# Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nsub count_reverse_pairs {\n    my($test_list) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_reverse_pairs;\n        if(eq_deeply($candidate->([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"geeks\", \"best\", \"for\", \"skeeg\"]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $count = 0;\n    for(my $i = 0; $i < scalar(@{$test_list}); $i++) {\n        for(my $j = $i + 1; $j < scalar(@{$test_list}); $j++) {\n            if($test_list->[$i] eq reverse($test_list->[$j])) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for my $i (0..$#{$test_list}) {\n        for my $j ($i+1..$#{$test_list}) {\n            if ($test_list->[$i] eq reverse($test_list->[$j])) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my %hash;\n    foreach my $str (@$test_list) {\n        my $rev_str = reverse $str;\n        if (exists $hash{$rev_str}) {\n            $count++;\n        }\n        $hash{$str} = 1;\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len = scalar @{$test_list};\n    for ($i = 0; $i < $len; $i++) {\n        for ($j = $i + 1; $j < $len; $j++) {\n            if ($test_list->[$i] eq reverse($test_list->[$j])) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for (my $i = 0; $i < scalar @$test_list; $i++) {\n        for (my $j = $i + 1; $j < scalar @$test_list; $j++) {\n            if ($test_list->[$i] eq reverse $test_list->[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for(my $i = 0; $i < scalar(@$test_list); $i++) {\n        for(my $j = $i + 1; $j < scalar(@$test_list); $j++) {\n            if($test_list->[$i] eq reverse($test_list->[$j])) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for (my $i = 0; $i < scalar @$test_list; $i++) {\n        for (my $j = $i + 1; $j < scalar @$test_list; $j++) {\n            if ($test_list->[$i] eq reverse $test_list->[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my %hash;\n    foreach my $word (@$test_list) {\n        my $reverse_word = reverse $word;\n        if (exists $hash{$reverse_word}) {\n            $count++;\n        }\n        else {\n            $hash{$word} = 1;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    foreach my $i (0..$#{$test_list}) {\n        foreach my $j ($i+1..$#{$test_list}) {\n            if ($test_list->[$i] eq reverse($test_list->[$j])) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my %hash = ();\n    foreach my $word (@$test_list) {\n        my $reverse = reverse $word;\n        if (exists $hash{$reverse}) {\n            $count++;\n        }\n        $hash{$word} = 1;\n    }\n    return $count;\n}",
    "    my $count = 0;\n    foreach my $i (0..$#{$test_list}) {\n        foreach my $j ($i+1..$#{$test_list}) {\n            if ($test_list->[$i] eq reverse($test_list->[$j])) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for(my $i = 0; $i < scalar(@$test_list); $i++) {\n        for(my $j = $i + 1; $j < scalar(@$test_list); $j++) {\n            if($test_list->[$i] eq reverse($test_list->[$j])) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for(my $i = 0; $i < @$test_list; $i++) {\n        for(my $j = $i+1; $j < @$test_list; $j++) {\n            if($test_list->[$i] eq reverse($test_list->[$j])) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my $len = scalar(@$test_list);\n    for (my $i = 0; $i < $len; $i++) {\n        for (my $j = $i + 1; $j < $len; $j++) {\n            if ($test_list->[$i] eq reverse($test_list->[$j])) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for(my $i=0; $i<@$test_list; $i++) {\n        for(my $j=$i+1; $j<@$test_list; $j++) {\n            if($test_list->[$i] eq reverse($test_list->[$j])) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for(my $i = 0; $i < scalar(@$test_list); $i++) {\n        for(my $j = $i + 1; $j < scalar(@$test_list); $j++) {\n            if($test_list->[$i] eq reverse($test_list->[$j])) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    foreach my $i (0..$#{$test_list}) {\n        foreach my $j ($i+1..$#{$test_list}) {\n            if ($test_list->[$i] eq reverse($test_list->[$j])) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my $len = scalar @$test_list;\n    for(my $i = 0; $i < $len; $i++) {\n        for(my $j = $i + 1; $j < $len; $j++) {\n            if($test_list->[$i] eq reverse $test_list->[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for my $i (0 .. $#{$test_list}) {\n        for my $j ($i+1 .. $#{$test_list}) {\n            $count++ if $test_list->[$i] eq reverse $test_list->[$j];\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for(my $i = 0; $i < scalar(@$test_list); $i++) {\n        for(my $j = $i + 1; $j < scalar(@$test_list); $j++) {\n            if($test_list->[$i] eq reverse($test_list->[$j])) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}"
  ]
}