{
  "name": "mbpp_237_check_occurences",
  "language": "pl",
  "prompt": "# Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nsub check_occurences {\n    my($test_list) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_occurences;\n        if(eq_deeply($candidate->([[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]]),{[1, 3] => 2, [2, 5] => 2, [3, 6] => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[4, 2], [2, 4], [3, 6], [6, 3], [7, 4]]),{[2, 4] => 2, [3, 6] => 2, [4, 7] => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[13, 2], [11, 23], [12, 25], [25, 12], [16, 23]]),{[2, 13] => 1, [11, 23] => 1, [12, 25] => 2, [16, 23] => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my %occurences = ();\n    foreach my $item (@$test_list) {\n        if (exists $occurences{$item}) {\n            $occurences{$item}++;\n        } else {\n            $occurences{$item} = 1;\n        }\n    }\n    return %occurences;\n}",
    "    my %test_hash = ();\n    foreach my $test_tuple (@$test_list) {\n        $test_hash{$test_tuple}++;\n    }\n    return %test_hash;\n}",
    "    my %result;\n    foreach my $item (@$test_list) {\n        $result{$item}++;\n    }\n    return %result;\n}",
    "    my %occurences;\n    foreach my $tuple (@$test_list) {\n        $occurences{$tuple}++;\n    }\n    return \\%occurences;\n}",
    "    my %hash = ();\n    foreach my $item (@$test_list) {\n        $hash{$item}++;\n    }\n    return %hash;\n}",
    "    my %hash = ();\n    foreach my $tuple (@$test_list) {\n        if (exists $hash{$tuple}) {\n            $hash{$tuple} += 1;\n        } else {\n            $hash{$tuple} = 1;\n        }\n    }\n    return %hash;\n}",
    "    my %occurences = ();\n    foreach my $tuple (@$test_list) {\n        if (exists $occurences{$tuple}) {\n            $occurences{$tuple}++;\n        } else {\n            $occurences{$tuple} = 1;\n        }\n    }\n    return \\%occurences;\n}",
    "    my %count;\n    foreach my $tuple (@$test_list) {\n        $count{$tuple}++;\n    }\n    return %count;\n}",
    "    my %count;\n    foreach my $tuple (@$test_list) {\n        $count{$tuple}++;\n    }\n    return %count;\n}",
    "    my %count;\n    foreach my $item (@$test_list) {\n        $count{$item}++;\n    }\n    return %count;\n}",
    "    my %occurences = ();\n    foreach my $tuple (@$test_list) {\n        if (exists $occurences{$tuple}) {\n            $occurences{$tuple} += 1;\n        } else {\n            $occurences{$tuple} = 1;\n        }\n    }\n    return %occurences;\n}",
    "    my %occurences;\n    foreach my $item (@$test_list) {\n        if (exists $occurences{$item}) {\n            $occurences{$item}++;\n        } else {\n            $occurences{$item} = 1;\n        }\n    }\n    return %occurences;\n}",
    "    my %count;\n    foreach my $tuple (@$test_list) {\n        $count{$tuple}++;\n    }\n    return %count;\n}",
    "    my %occurences;\n    foreach my $item (@$test_list) {\n        if (exists($occurences{$item})) {\n            $occurences{$item} += 1;\n        } else {\n            $occurences{$item} = 1;\n        }\n    }\n    return %occurences;\n}",
    "    my %occurences;\n    foreach my $tuple (@$test_list) {\n        if (exists $occurences{$tuple}) {\n            $occurences{$tuple} += 1;\n        } else {\n            $occurences{$tuple} = 1;\n        }\n    }\n    return %occurences;\n}",
    "    my %count;\n    foreach my $item (@$test_list) {\n        $count{$item}++;\n    }\n    return %count;\n}",
    "    my %count;\n    foreach my $tuple (@$test_list) {\n        $count{$tuple}++;\n    }\n    return %count;\n}",
    "    my %hash;\n    foreach my $item (@$test_list) {\n        $hash{$item}++;\n    }\n    return %hash;\n}",
    "    my %occurences;\n    foreach my $tuple (@$test_list) {\n        $occurences{$tuple}++;\n    }\n    return %occurences;\n}",
    "    my %occurences;\n    foreach my $tuple (@$test_list) {\n        $occurences{$tuple}++;\n    }\n    return \\%occurences;\n}"
  ]
}