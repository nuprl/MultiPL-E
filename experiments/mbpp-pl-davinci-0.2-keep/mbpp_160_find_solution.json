{
  "name": "mbpp_160_find_solution",
  "language": "pl",
  "prompt": "# Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nsub find_solution {\n    my($a, $b, $n) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_solution;\n        if(eq_deeply($candidate->(2, 3, 7),[2, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 2, 7),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 13, 17),[4, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    return unless $n % gcd($a, $b) == 0;\n    my($x, $y) = (0, 1);\n    ($x, $y) = ($y, $x - int($a / $b) * $y) while $b;\n    return ($x * ($n / gcd($a, $b)), $y * ($n / gcd($a, $b)));\n}",
    "    for my $x (0 .. $n) {\n        for my $y (0 .. $n) {\n            return ($x, $y) if $a * $x + $b * $y == $n;\n        }\n    }\n    return;\n}",
    "    my $x = 0;\n    my $y = 0;\n    while ($x * $a <= $n) {\n        if (($n - $x * $a) % $b == 0) {\n            $y = ($n - $x * $a) / $b;\n            return ($x, $y);\n        }\n        $x++;\n    }\n    return undef;\n}",
    "    if ($n % gcd($a, $b) != 0) {\n        return;\n    }\n    my $x = mult_inv($a, $b);\n    my $y = mult_inv($b, $a);\n    return ($b * $x * ($n / gcd($a, $b)) , $a * $y * ($n / gcd($a, $b)));\n}",
    "    my $x = 0;\n    my $y = 0;\n    while ($a * $x <= $n) {\n        my $r = $n - $a * $x;\n        if ($r % $b == 0) {\n            $y = $r / $b;\n            return ($x, $y);\n        }\n        $x++;\n    }\n    return undef;\n}",
    "    my $x = 0;\n    my $y = 0;\n    while (1) {\n        my $nx = $b * $y;\n        my $ny = $a * $x + $n;\n        return ($x, $y) if $nx == $ny;\n        if ($nx > $ny) {\n            $y++;\n        } else {\n            $x++;\n        }\n    }\n}",
    "    return unless $a and $b and $n;\n    return unless $a > 0 and $b > 0;\n    return unless $n % gcd($a, $b) == 0;",
    "    for my $x (0 .. $n) {\n        for my $y (0 .. $n) {\n            return ($x, $y) if $a * $x + $b * $y == $n;\n        }\n    }\n    return;\n}",
    "    for my $x (0..$n) {\n        for my $y (0..$n) {\n            return ($x, $y) if $a * $x + $b * $y == $n;\n        }\n    }\n    return undef;\n}",
    "\n    for my $x (0 .. $n) {\n        for my $y (0 .. $n) {\n            if ($a * $x + $b * $y == $n) {\n                return ($x, $y);\n            }\n        }\n    }",
    "    if ($a < $b) {\n        ($a, $b) = ($b, $a);\n    }\n    if ($n % gcd($a, $b) != 0) {\n        return undef;\n    }\n    my $x = 0;\n    my $y = $n / $b;\n    while ($a * $x + $b * $y != $n) {\n        if ($a * $x + $b * $y < $n) {\n            $x++;\n        } else {\n            $y--;\n        }\n    }\n    return ($x, $y);\n}",
    "    if ($a < $b) {\n        return find_solution($b, $a, $n);\n    }\n    if ($b == 0) {\n        return ($n / $a, 0);\n    }\n    my($x, $y) = find_solution($b, $a % $b, $n);\n    return ($y, $x - int($a / $b) * $y);\n}",
    "    return unless $n % gcd($a, $b) == 0;\n    my($x, $y) = (0, 1);\n    ($x, $y) = (1, -int($a / $b)) if $b > $a;\n    my $d = gcd($b, $a % $b);\n    return ($d * $x, $d * $y);\n}",
    "    if ($n % gcd($a, $b) == 0) {\n        my $x = $n / $a;\n        my $y = 0;\n        while ($x >= 0) {\n            if (($n - $a * $x) % $b == 0) {\n                $y = ($n - $a * $x) / $b;\n                return ($x, $y);\n            }\n            $x--;\n        }\n    }\n    return undef;\n}",
    "    return unless $n % gcd($a, $b) == 0;\n    my($x, $y) = (0, 1);\n    while ($a > 0) {\n        my $q = int($b / $a);\n        ($a, $b, $x, $y) = ($b % $a, $a, $y - $q * $x, $x);\n    }\n    return ($x * $n / $b, $y * $n / $b);\n}",
    "    return unless $n % gcd($a, $b) == 0;\n    my $x = $n * inverse($a, $b) % $b;\n    return ($x, ($n - $a * $x) / $b);\n}",
    "    my $x = 0;\n    my $y = 0;\n    while ($x * $a <= $n) {\n        my $remainder = $n - $x * $a;\n        if ($remainder % $b == 0) {\n            $y = $remainder / $b;\n            return ($x, $y);\n        }\n        $x++;\n    }\n    return undef;\n}",
    "    return unless $a and $b and $n;\n    my $x = 0;\n    my $y = 0;\n    my $d = gcd($a, $b);\n    return unless $n % $d == 0;\n    ($x, $y) = ext_gcd($a, $b);\n    $x *= $n / $d;\n    $y *= $n / $d;\n    return ($x, $y);\n}",
    "    for my $x (0..$n) {\n        for my $y (0..$n) {\n            return ($x, $y) if $a * $x + $b * $y == $n;\n        }\n    }\n    return;\n}",
    "    for my $x (0 .. $n) {\n        for my $y (0 .. $n) {\n            return ($x, $y) if $a * $x + $b * $y == $n;\n        }\n    }\n    return;\n}"
  ]
}