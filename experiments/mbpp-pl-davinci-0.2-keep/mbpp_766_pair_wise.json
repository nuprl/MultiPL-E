{
  "name": "mbpp_766_pair_wise",
  "language": "pl",
  "prompt": "# Write a function to return a list of all pairs of consecutive items in a given list.\nsub pair_wise {\n    my($l1) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pair_wise;\n        if(eq_deeply($candidate->([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @l2 = ();\n    for (my $i = 0; $i < @$l1 - 1; $i++) {\n        push @l2, [@$l1[$i, $i+1]];\n    }\n    return @l2;\n}",
    "    my @l2 = ();\n    for (my $i = 0; $i < @$l1 - 1; $i++) {\n        push @l2, [$$l1[$i], $$l1[$i + 1]];\n    }\n    return @l2;\n}",
    "    my @l2;\n    for (my $i = 0; $i < @$l1 - 1; $i++) {\n        push @l2, [$l1->[$i], $l1->[$i+1]];\n    }\n    return \\@l2;\n}",
    "    my @l2;\n    for (my $i = 0; $i < @$l1 - 1; $i++) {\n        push @l2, [@$l1[$i, $i + 1]];\n    }\n    return @l2;\n}",
    "    my @l2 = ();\n    for (my $i = 0; $i < @$l1 - 1; $i++) {\n        push @l2, [$l1->[$i], $l1->[$i+1]];\n    }\n    return @l2;\n}",
    "    my $l2 = [];\n    for (my $i = 0; $i < @$l1 - 1; $i++) {\n        push @$l2, [$l1->[$i], $l1->[$i + 1]];\n    }\n    return $l2;\n}",
    "    my @l2;\n    for (my $i = 0; $i < @$l1 - 1; $i++) {\n        push @l2, [$l1->[$i], $l1->[$i + 1]];\n    }\n    return @l2;\n}",
    "    my @l2 = ();\n    for (my $i = 0; $i < @$l1 - 1; $i++) {\n        push @l2, [$l1->[$i], $l1->[$i+1]];\n    }\n    return @l2;\n}",
    "    my @l2 = ();\n    for(my $i = 0; $i < @$l1 - 1; $i++) {\n        push @l2, [$l1->[$i], $l1->[$i+1]];\n    }\n    return @l2;\n}",
    "    my @l2;\n    for (my $i = 0; $i < @$l1 - 1; $i++) {\n        push @l2, [$l1->[$i], $l1->[$i + 1]];\n    }\n    return @l2;\n}",
    "    my @l2 = ();\n    for (my $i = 0; $i < @$l1 - 1; $i++) {\n        push @l2, [$l1->[$i], $l1->[$i+1]];\n    }\n    return @l2;\n}",
    "    my @l2;\n    for(my $i = 0; $i < @$l1 - 1; $i++) {\n        push @l2, [$l1->[$i], $l1->[$i+1]];\n    }\n    return \\@l2;\n}",
    "    my @l2;\n    for (my $i = 0; $i < @$l1 - 1; $i++) {\n        push @l2, [@$l1[$i, $i + 1]];\n    }\n    return \\@l2;\n}",
    "    my @l2 = ();\n    for (my $i = 0; $i < scalar(@$l1) - 1; $i++) {\n        push @l2, [@$l1[$i, $i+1]];\n    }\n    return @l2;\n}",
    "    my @l2 = ();\n    for (my $i = 0; $i < scalar(@$l1) - 1; $i++) {\n        push @l2, [@$l1[$i, $i+1]];\n    }\n    return @l2;\n}",
    "    my @pairs = ();\n    for (my $i = 0; $i < @$l1 - 1; $i++) {\n        push @pairs, [$l1->[$i], $l1->[$i+1]];\n    }\n    return @pairs;\n}",
    "    my @l2 = ();\n    for (my $i = 0; $i < scalar(@$l1) - 1; $i++) {\n        push @l2, [$l1->[$i], $l1->[$i + 1]];\n    }\n    return @l2;\n}",
    "    my $l2 = [];\n    for (my $i = 0; $i < @$l1 - 1; $i++) {\n        push @$l2, [$l1->[$i], $l1->[$i + 1]];\n    }\n    return $l2;\n}",
    "    my @l2 = ();\n    for (my $i = 0; $i < @$l1 - 1; $i++) {\n        push @l2, [$l1->[$i], $l1->[$i + 1]];\n    }\n    return @l2;\n}",
    "    my @l2;\n    for (my $i = 0; $i < scalar(@$l1) - 1; $i++) {\n        push @l2, [$l1->[$i], $l1->[$i + 1]];\n    }\n    return @l2;\n}"
  ]
}