{
  "name": "mbpp_625_swap_List",
  "language": "pl",
  "prompt": "# Write a python function to interchange the first and last element in a given list.\nsub swap_List {\n    my($newList) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&swap_List;\n        if(eq_deeply($candidate->([1, 2, 3]),[3, 2, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 4]),[4, 2, 3, 4, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6]),[6, 5, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $first = $newList->[0];\n    my $last = $newList->[-1];\n    $newList->[0] = $last;\n    $newList->[-1] = $first;\n    return $newList;\n}",
    "    my $temp = $newList->[0];\n    $newList->[0] = $newList->[-1];\n    $newList->[-1] = $temp;\n    return $newList;\n}",
    "    my $temp = $newList->[0];\n    $newList->[0] = $newList->[$#{$newList}];\n    $newList->[$#{$newList}] = $temp;\n    return $newList;\n}",
    "    my $temp = $newList->[0];\n    $newList->[0] = $newList->[$#{$newList}];\n    $newList->[$#{$newList}] = $temp;\n    return $newList;\n}",
    "    my $size = scalar(@$newList);\n    my $temp = $newList->[0];\n    $newList->[0] = $newList->[$size-1];\n    $newList->[$size-1] = $temp;\n    return $newList;\n}",
    "    my $first = $newList->[0];\n    my $last = $newList->[-1];\n    $newList->[0] = $last;\n    $newList->[-1] = $first;\n    return $newList;\n}",
    "    my $temp = $newList->[0];\n    $newList->[0] = $newList->[$#{$newList}];\n    $newList->[$#{$newList}] = $temp;\n    return $newList;\n}",
    "    my $temp = $newList->[0];\n    $newList->[0] = $newList->[$#{$newList}];\n    $newList->[$#{$newList}] = $temp;\n    return $newList;\n}",
    "    my $temp = $newList->[0];\n    $newList->[0] = $newList->[$#{$newList}];\n    $newList->[$#{$newList}] = $temp;\n    return $newList;\n}",
    "    my $temp = $newList->[0];\n    $newList->[0] = $newList->[$#{$newList}];\n    $newList->[$#{$newList}] = $temp;\n    return $newList;\n}",
    "    my $temp = $newList->[0];\n    $newList->[0] = $newList->[$#{$newList}];\n    $newList->[$#{$newList}] = $temp;\n    return $newList;\n}",
    "    my $temp = $newList->[0];\n    $newList->[0] = $newList->[$#{$newList}];\n    $newList->[$#{$newList}] = $temp;\n    return $newList;\n}",
    "    my $temp = $newList->[0];\n    $newList->[0] = $newList->[$#{$newList}];\n    $newList->[$#{$newList}] = $temp;\n    return $newList;\n}",
    "    my $temp = $newList->[0];\n    $newList->[0] = $newList->[$#{$newList}];\n    $newList->[$#{$newList}] = $temp;\n    return $newList;\n}",
    "    my $first = shift @$newList;\n    my $last = pop @$newList;\n    push(@$newList, $first);\n    unshift(@$newList, $last);\n    return $newList;\n}",
    "    my $first = $newList->[0];\n    my $last = $newList->[-1];\n    $newList->[0] = $last;\n    $newList->[-1] = $first;\n    return $newList;\n}",
    "    my $temp = $newList->[0];\n    $newList->[0] = $newList->[$#{$newList}];\n    $newList->[$#{$newList}] = $temp;\n    return $newList;\n}",
    "    my $temp = $newList->[0];\n    $newList->[0] = $newList->[$#{$newList}];\n    $newList->[$#{$newList}] = $temp;\n    return $newList;\n}",
    "    my $first = $newList->[0];\n    my $last = $newList->[-1];\n    $newList->[0] = $last;\n    $newList->[-1] = $first;\n    return $newList;\n}",
    "    my $first = $newList->[0];\n    my $last = $newList->[-1];\n    $newList->[0] = $last;\n    $newList->[-1] = $first;\n    return $newList;\n}"
  ]
}