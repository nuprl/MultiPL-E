{
  "name": "mbpp_444_trim_tuple",
  "language": "pl",
  "prompt": "# Write a function to trim each tuple by k in the given tuple list.\nsub trim_tuple {\n    my($test_list, $K) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&trim_tuple;\n        if(eq_deeply($candidate->([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2),\"[(2,), (9,), (2,), (2,)]\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1),\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1),\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $elem (@$tuple) {\n                push @trimmed_tuple, $elem if $elem <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $test_tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $test_value (@$test_tuple) {\n            my $trimmed_value = $test_value;\n            if ($test_value > $K) {\n                $trimmed_value = $K;\n            }\n            push(@trimmed_tuple, $trimmed_value);\n        }\n        push(@trimmed_list, \\@trimmed_tuple);\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $elem (@$tuple) {\n                push @trimmed_tuple, $elem if $elem <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $element (@$tuple) {\n            if ($element > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $element;\n            }\n        }\n        push @result, \\@trimmed_tuple;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item > $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if ($item >= $K);\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $element (@$tuple) {\n                push @trimmed_tuple, $element if $element <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@$tuple) {\n            my $trimmed_elem = $elem;\n            if ($elem =~ /^\\d+$/) {\n                $trimmed_elem = $elem - $K;\n            }\n            push(@trimmed_tuple, $trimmed_elem);\n        }\n        push(@trimmed_list, \\@trimmed_tuple);\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $element (@$tuple) {\n            if ($element > $K) {\n                push @trimmed_tuple, $element;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $elem (@$tuple) {\n                if ($elem >= $K) {\n                    push @trimmed_tuple, $elem - $K;\n                }\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@$tuple) {\n            push @trimmed_tuple, $elem if ($elem <= $K);\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if ($item >= $K);\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @test_trimmed;\n        foreach my $test_elem (@$test) {\n            if ($test_elem > $K) {\n                push @test_trimmed, $test_elem;\n            }\n        }\n        push @trimmed_list, \\@test_trimmed;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $value (@$tuple) {\n            push @trimmed_tuple, $value if $value <= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item <= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $element (@$tuple) {\n            if ($element > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $element;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $elem (@$tuple) {\n            if (length($elem) > $K) {\n                push @trimmed_tuple, substr($elem, 0, $K);\n            } else {\n                push @trimmed_tuple, $elem;\n            }\n        }\n        push @result, \\@trimmed_tuple;\n    }\n    return \\@result;\n}",
    "    my @new_list = ();\n    foreach my $tuple (@$test_list) {\n        my @new_tuple = ();\n        foreach my $item (@$tuple) {\n            push @new_tuple, $item if ($item > $K);\n        }\n        push @new_list, \\@new_tuple;\n    }\n    return \\@new_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $element (@$tuple) {\n            if ($element > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $element;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $test_value (@$test_tuple) {\n            if ($test_value > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $test_value;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}"
  ]
}