{
  "name": "mbpp_444_trim_tuple",
  "language": "pl",
  "prompt": "# Write a function to trim each tuple by k in the given tuple list.\nsub trim_tuple {\n    my($test_list, $K) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&trim_tuple;\n        if(eq_deeply($candidate->([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2),\"[(2,), (9,), (2,), (2,)]\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1),\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1),\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $elem (@$tuple) {\n                push @trimmed_tuple, $elem if $elem <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $test_tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $test_value (@$test_tuple) {\n            my $trimmed_value = $test_value;\n            if ($test_value > $K) {\n                $trimmed_value = $K;\n            }\n            push(@trimmed_tuple, $trimmed_value);\n        }\n        push(@trimmed_list, \\@trimmed_tuple);\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $elem (@$tuple) {\n                push @trimmed_tuple, $elem if $elem <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $element (@$tuple) {\n            if ($element > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $element;\n            }\n        }\n        push @result, \\@trimmed_tuple;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item > $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if ($item >= $K);\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $element (@$tuple) {\n                push @trimmed_tuple, $element if $element <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@$tuple) {\n            my $trimmed_elem = $elem;\n            if ($elem =~ /^\\d+$/) {\n                $trimmed_elem = $elem - $K;\n            }\n            push(@trimmed_tuple, $trimmed_elem);\n        }\n        push(@trimmed_list, \\@trimmed_tuple);\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $element (@$tuple) {\n            if ($element > $K) {\n                push @trimmed_tuple, $element;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $elem (@$tuple) {\n                if ($elem >= $K) {\n                    push @trimmed_tuple, $elem - $K;\n                }\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@$tuple) {\n            push @trimmed_tuple, $elem if ($elem <= $K);\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if ($item >= $K);\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @test_trimmed;\n        foreach my $test_elem (@$test) {\n            if ($test_elem > $K) {\n                push @test_trimmed, $test_elem;\n            }\n        }\n        push @trimmed_list, \\@test_trimmed;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $value (@$tuple) {\n            push @trimmed_tuple, $value if $value <= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item <= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $element (@$tuple) {\n            if ($element > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $element;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $elem (@$tuple) {\n            if (length($elem) > $K) {\n                push @trimmed_tuple, substr($elem, 0, $K);\n            } else {\n                push @trimmed_tuple, $elem;\n            }\n        }\n        push @result, \\@trimmed_tuple;\n    }\n    return \\@result;\n}",
    "    my @new_list = ();\n    foreach my $tuple (@$test_list) {\n        my @new_tuple = ();\n        foreach my $item (@$tuple) {\n            push @new_tuple, $item if ($item > $K);\n        }\n        push @new_list, \\@new_tuple;\n    }\n    return \\@new_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $element (@$tuple) {\n            if ($element > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $element;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $test_value (@$test_tuple) {\n            if ($test_value > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $test_value;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $element (@$tuple) {\n                push @trimmed_tuple, substr($element, 0, $K);\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            if ($item >= $K) {\n                push @trimmed_tuple, $item;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $item (@$tuple) {\n                push @trimmed_tuple, $item if $item >= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @new_list;\n    foreach my $tuple (@$test_list) {\n        my $new_tuple = trim_tuple_by_k($tuple, $K);\n        push @new_list, $new_tuple;\n    }\n    return \\@new_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $elem (@$tuple) {\n                push @trimmed_tuple, $elem if $elem <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $element (@$tuple) {\n            if ($element > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $element;\n            }\n        }\n        push @result, \\@trimmed_tuple;\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    foreach my $tuple (@$test_list) {\n        my @tuple_list = ();\n        foreach my $item (@$tuple) {\n            push(@tuple_list, $item);\n        }\n        my $len = scalar(@tuple_list);\n        if ($len > $K) {\n            @tuple_list = @tuple_list[0..($K-1)];\n        }\n        push(@result, \\@tuple_list);\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test_tuple (@$test_list) {\n        my $trimmed_tuple = trim_tuple_by_k($test_tuple, $K);\n        push @trimmed_list, $trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item <= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $test (@$test_list) {\n        my @trimmed_test = ();\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple = ();\n            foreach my $item (@$tuple) {\n                if($item > $K) {\n                    push @trimmed_tuple, $item;\n                }\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $test (@$test_list) {\n        my @trimmed_test = ();\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple = ();\n            foreach my $elem (@$tuple) {\n                push @trimmed_tuple, $elem if $elem >= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $test_tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $test_value (@$test_tuple) {\n            my $trimmed_value = $test_value;\n            if ($test_value > $K) {\n                $trimmed_value = $K;\n            }\n            push(@trimmed_tuple, $trimmed_value);\n        }\n        push(@trimmed_list, \\@trimmed_tuple);\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my $trimmed_tuple = [];\n        for (my $i = 0; $i < $K; $i++) {\n            push @$trimmed_tuple, $tuple->[$i];\n        }\n        push @trimmed_list, $trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@$tuple) {\n            push(@trimmed_tuple, $elem) if ($elem <= $K);\n        }\n        push(@trimmed_list, \\@trimmed_tuple);\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my @tuple = @$tuple;\n        my $len = scalar @tuple;\n        if ($len > $K) {\n            splice @tuple, $K;\n        }\n        push @result, \\@tuple;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $elem (@$tuple) {\n                push @trimmed_tuple, $elem if $elem <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@{$test_list}) {\n        my @trimmed_tuple;\n        foreach my $element (@{$tuple}) {\n            push @trimmed_tuple, $element if $element <= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@$tuple) {\n            if ($elem > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $elem;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@$tuple) {\n            push(@trimmed_tuple, $elem) if ($elem <= $K);\n        }\n        push(@trimmed_list, \\@trimmed_tuple);\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@$tuple) {\n            if ($elem >= $K) {\n                push @trimmed_tuple, $elem;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = @$tuple;\n        splice(@trimmed_tuple, $K);\n        push @result, \\@trimmed_tuple;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@$tuple) {\n            if ($elem > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $elem;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@$tuple) {\n            push @trimmed_tuple, $elem if $elem <= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @new_test;\n        foreach my $tuple (@$test) {\n            my @new_tuple;\n            foreach my $element (@$tuple) {\n                push @new_tuple, $element if $element <= $K;\n            }\n            push @new_test, \\@new_tuple;\n        }\n        push @trimmed_list, \\@new_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $elem (@$tuple) {\n                push @trimmed_tuple, $elem if $elem >= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $elem (@$tuple) {\n            push @trimmed_tuple, $elem if $elem >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $elem (@$tuple) {\n            push @trimmed_tuple, $elem if $elem <= $K;\n        }\n        push @result, \\@trimmed_tuple;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $value (@$tuple) {\n                push @trimmed_tuple, $value if $value < $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@$tuple) {\n            if ($elem > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $elem;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            if ($item > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $item;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $element (@$tuple) {\n            push @trimmed_tuple, $element if $element <= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $elem (@$tuple) {\n                push(@trimmed_tuple, $elem) if ($elem <= $K);\n            }\n            push(@trimmed_test, \\@trimmed_tuple);\n        }\n        push(@trimmed_list, \\@trimmed_test);\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            if (length($item) > $K) {\n                $item = substr($item, 0, $K);\n            }\n            push(@trimmed_tuple, $item);\n        }\n        push(@trimmed_list, \\@trimmed_tuple);\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            if ($item > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $item;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result = ();\n    foreach my $tuple (@$test_list) {\n        my @new_tuple = ();\n        foreach my $item (@$tuple) {\n            push @new_tuple, $item if $item >= $K;\n        }\n        push @result, \\@new_tuple;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list = ();\n    foreach my $test (@$test_list) {\n        my @trimmed_test = ();\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple = ();\n            foreach my $item (@$tuple) {\n                if ($item >= $K) {\n                    push @trimmed_tuple, $item - $K;\n                }\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $elem (@$tuple) {\n            push @trimmed_tuple, $elem if $elem <= $K;\n        }\n        push @result, \\@trimmed_tuple;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            if (length($item) > $K) {\n                $item = substr($item, 0, $K);\n            }\n            push @trimmed_tuple, $item;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@$tuple) {\n            if ($elem > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $elem;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@$tuple) {\n            if ($elem > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $elem;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $elem (@$tuple) {\n                if ($elem >= $K) {\n                    push @trimmed_tuple, $elem - $K;\n                }\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            if ($item > $K) {\n                push @trimmed_tuple, $item;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $element (@$tuple) {\n            if (length($element) > $K) {\n                $element = substr($element, 0, $K);\n            }\n            push @trimmed_tuple, $element;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $elem (@$tuple) {\n            push @trimmed_tuple, $elem if $elem > $K;\n        }\n        push @result, \\@trimmed_tuple;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $element (@$tuple) {\n            push @trimmed_tuple, $element if ($element >= $K);\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            if ($item >= $K) {\n                push @trimmed_tuple, $item - $K;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my $trimmed_test = [];\n        foreach my $tuple (@$test) {\n            push @$trimmed_test, [@$tuple[0..$K-1]];\n        }\n        push @trimmed_list, $trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@$tuple) {\n            push(@trimmed_tuple, $elem) if ($elem <= $K);\n        }\n        push(@trimmed_list, \\@trimmed_tuple);\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $element (@$tuple) {\n                push @trimmed_tuple, $element if $element <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $element (@$tuple) {\n            push @trimmed_tuple, substr($element, 0, $K);\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            for (my $i = 0; $i < $K; $i++) {\n                push @trimmed_tuple, $tuple->[$i];\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $elem (@$tuple) {\n                push @trimmed_tuple, $elem if $elem <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_tuple_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            if ($item > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $item;\n            }\n        }\n        push @trimmed_tuple_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_tuple_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $test_value (@$test_tuple) {\n            push @trimmed_tuple, $test_value % $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $element (@$tuple) {\n            push @trimmed_tuple, $element if $element <= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $element (@$tuple) {\n            my $trimmed_element = substr($element, 0, $K);\n            push @trimmed_tuple, $trimmed_element;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $test (@$test_list) {\n        my @trimmed_test = ();\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple = ();\n            for (my $i = 0; $i < $K; $i++) {\n                push @trimmed_tuple, $tuple->[$i];\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $test_tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $test_value (@$test_tuple) {\n            push @trimmed_tuple, $test_value if ($test_value <= $K);\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $item (@$tuple) {\n                push @trimmed_tuple, $item if $item <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $i (@$tuple) {\n            push @trimmed_tuple, $i if ($i >= $K);\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $test (@$test_list) {\n        my @trimmed_test = ();\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple = ();\n            foreach my $elem (@$tuple) {\n                push @trimmed_tuple, $elem if $elem <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $elem (@$tuple) {\n            push @trimmed_tuple, $elem if $elem <= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = @$tuple;\n        splice(@trimmed_tuple, $K);\n        push @result, \\@trimmed_tuple;\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item <= $K;\n        }\n        push @result, \\@trimmed_tuple;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@{$test_list}) {\n        my $trimmed_tuple = [];\n        foreach my $item (@{$tuple}) {\n            if ($item > $K) {\n                push @{$trimmed_tuple}, $item;\n            }\n        }\n        push @trimmed_list, $trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $elem (@$tuple) {\n                push @trimmed_tuple, $elem if $elem <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $item (@$tuple) {\n            if ($item >= $K) {\n                push @trimmed_tuple, $item;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $test (@$test_list) {\n        my @trimmed_test = ();\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple = ();\n            foreach my $item (@$tuple) {\n                if ($item > $K) {\n                    push @trimmed_tuple, $item;\n                }\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        my $i = 0;\n        foreach my $tuple (@$test) {\n            if ($i < $K) {\n                push @trimmed_test, $tuple;\n            }\n            $i++;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@{$test_list}) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@{$tuple}) {\n            push @trimmed_tuple, $elem if ($elem >= $K);\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result = ();\n    foreach my $tuple (@$test_list) {\n        my @tuple_list = @$tuple;\n        my @trim_tuple = ();\n        for (my $i = 0; $i < $K; $i++) {\n            push @trim_tuple, $tuple_list[$i];\n        }\n        push @result, \\@trim_tuple;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $element (@$tuple) {\n            push @trimmed_tuple, $element if $element <= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, substr($item, 0, $K);\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_tuple (@$test_list) {\n        my @trimmed_tuple = @$test_tuple;\n        splice(@trimmed_tuple, $K);\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $elem (@$tuple) {\n            push @trimmed_tuple, $elem if $elem <= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $test (@$test_list) {\n        my @trimmed_test = ();\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple = ();\n            foreach my $item (@$tuple) {\n                if ($item > $K) {\n                    push @trimmed_tuple, $item;\n                }\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $elem (@$tuple) {\n            push(@trimmed_tuple, $elem) if $elem <= $K;\n        }\n        push(@trimmed_list, \\@trimmed_tuple);\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $elem (@$tuple) {\n            push @trimmed_tuple, $elem if $elem >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $element (@$tuple) {\n                if (length($element) > $K) {\n                    push @trimmed_tuple, substr($element, 0, $K);\n                } else {\n                    push @trimmed_tuple, $element;\n                }\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = @$tuple[0..$K-1];\n        push @result, \\@trimmed_tuple;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $elem (@$tuple) {\n            push @trimmed_tuple, $elem if $elem <= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $test_value (@$test_tuple) {\n            my $trimmed_value = $test_value;\n            if (length($test_value) > $K) {\n                $trimmed_value = substr($test_value, 0, $K);\n            }\n            push @trimmed_tuple, $trimmed_value;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            if ($item > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $item;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $test_tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $test_item (@$test_tuple) {\n            if (length($test_item) > $K) {\n                push @trimmed_tuple, substr($test_item, 0, $K);\n            } else {\n                push @trimmed_tuple, $test_item;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $elem (@$tuple) {\n            if ($elem > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $elem;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $test (@$test_list) {\n        my @trimmed_test = ();\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple = ();\n            foreach my $item (@$tuple) {\n                if ($item > $K) {\n                    push(@trimmed_tuple, $item);\n                }\n            }\n            push(@trimmed_test, \\@trimmed_tuple);\n        }\n        push(@trimmed_list, \\@trimmed_test);\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@$tuple) {\n            push @trimmed_tuple, $elem if ($elem >= $K);\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $elem (@$tuple) {\n                push(@trimmed_tuple, $elem) if ($elem <= $K);\n            }\n            push(@trimmed_test, \\@trimmed_tuple);\n        }\n        push(@trimmed_list, \\@trimmed_test);\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $element (@$tuple) {\n                push @trimmed_tuple, $element if $element <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $item (@$tuple) {\n            push(@trimmed_tuple, $item) if ($item <= $K);\n        }\n        push(@trimmed_list, \\@trimmed_tuple);\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            if ($item >= $K) {\n                push @trimmed_tuple, $item;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $element (@$tuple) {\n            push @trimmed_tuple, $element if $element >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my $trimmed_test = trim_test($test, $K);\n        push @trimmed_list, $trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $item (@$tuple) {\n                if (length($item) > $K) {\n                    push @trimmed_tuple, substr($item, 0, $K);\n                }\n                else {\n                    push @trimmed_tuple, $item;\n                }\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            if ($item > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $item;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            if ($item > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $item;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $element (@$tuple) {\n            push @trimmed_tuple, $element;\n            if (@trimmed_tuple == $K) {\n                push @trimmed_list, \\@trimmed_tuple;\n                @trimmed_tuple = ();\n            }\n        }\n        if (@trimmed_tuple) {\n            push @trimmed_list, \\@trimmed_tuple;\n        }\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $elem (@$tuple) {\n            push @trimmed_tuple, $elem if $elem <= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $test_value (@$test_tuple) {\n            push @trimmed_tuple, $test_value % $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my $trimmed_tuple = trim_tuple_by_k($tuple, $K);\n        push @trimmed_list, $trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my $trimmed_tuple = [];\n        foreach my $item (@$tuple) {\n            my $trimmed_item = substr($item, 0, $K);\n            push(@$trimmed_tuple, $trimmed_item);\n        }\n        push(@trimmed_list, $trimmed_tuple);\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@$tuple) {\n            push @trimmed_tuple, $elem if $elem >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = @$tuple[0..$K-1];\n        push @result, \\@trimmed_tuple;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my $tuple_len = scalar(@$tuple);\n        if ($tuple_len > $K) {\n            my @trimmed_tuple = @$tuple[0..$K-1];\n            push @result, \\@trimmed_tuple;\n        }\n        else {\n            push @result, $tuple;\n        }\n    }\n    return \\@result;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $element (@$tuple) {\n            if ($element > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $element;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $item (@$tuple) {\n                push @trimmed_tuple, $item if $item >= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            if ($item > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $item;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $element (@$tuple) {\n                push @trimmed_tuple, $element if $element <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, substr($item, 0, $K);\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result = ();\n    foreach my $test (@$test_list) {\n        my @test_array = @$test;\n        my @trimmed_test = ();\n        for (my $i = 0; $i < $K; $i++) {\n            push @trimmed_test, $test_array[$i];\n        }\n        push @result, \\@trimmed_test;\n    }\n    return \\@result;\n}",
    "    my $trimmed_list = [];\n    foreach my $tuple (@$test_list) {\n        my $trimmed_tuple = [];\n        foreach my $item (@$tuple) {\n            push @$trimmed_tuple, $item if $item >= $K;\n        }\n        push @$trimmed_list, $trimmed_tuple;\n    }\n    return $trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            if (length($item) > $K) {\n                $item = substr($item, 0, $K);\n            }\n            push(@trimmed_tuple, $item);\n        }\n        push(@trimmed_list, \\@trimmed_tuple);\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@$tuple) {\n            if ($elem >= $K) {\n                push @trimmed_tuple, $elem - $K;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $item (@$tuple) {\n                push @trimmed_tuple, $item if $item <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result = ();\n    foreach my $tuple (@$test_list) {\n        my @tuple_list = @$tuple;\n        my @new_tuple = ();\n        foreach my $item (@tuple_list) {\n            if ($item > $K) {\n                push @new_tuple, $item;\n            }\n        }\n        push @result, \\@new_tuple;\n    }\n    return \\@result;\n}",
    "    my $trimmed_list = [];\n    foreach my $tuple (@$test_list) {\n        my $trimmed_tuple = [];\n        foreach my $item (@$tuple) {\n            push @$trimmed_tuple, substr($item, 0, $K);\n        }\n        push @$trimmed_list, $trimmed_tuple;\n    }\n    return $trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@$tuple) {\n            push @trimmed_tuple, $elem if $elem <= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    for my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        for my $item (@$tuple) {\n            push @trimmed_tuple, substr($item, 0, $K);\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $elem (@$tuple) {\n                push @trimmed_tuple, $elem if $elem <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@$tuple) {\n            push @trimmed_tuple, $elem if $elem <= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@$tuple) {\n            if ($elem > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $elem;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $elem (@$tuple) {\n                push @trimmed_tuple, $elem if $elem <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $test (@$test_list) {\n        my @trimmed_test = ();\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple = ();\n            foreach my $elem (@$tuple) {\n                push @trimmed_tuple, $elem if ($elem <= $K);\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $elem (@$tuple) {\n                push @trimmed_tuple, $elem if $elem >= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $element (@$tuple) {\n            if ($element > $K) {\n                push @trimmed_tuple, $element;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result = ();\n    foreach my $tuple (@$test_list) {\n        my @new_tuple = ();\n        foreach my $item (@$tuple) {\n            if ($item > $K) {\n                push @new_tuple, $K;\n            } else {\n                push @new_tuple, $item;\n            }\n        }\n        push @result, \\@new_tuple;\n    }\n    return \\@result;\n}",
    "    my @result_list;\n    foreach my $tuple (@$test_list) {\n        my @tuple_list;\n        foreach my $item (@$tuple) {\n            if (length($item) > $K) {\n                push @tuple_list, substr($item, 0, $K);\n            } else {\n                push @tuple_list, $item;\n            }\n        }\n        push @result_list, \\@tuple_list;\n    }\n    return \\@result_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $test_value (@$test_tuple) {\n            push @trimmed_tuple, $test_value % $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $elem (@$tuple) {\n                push @trimmed_tuple, $elem if $elem <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $elem (@$tuple) {\n            if ($elem >= $K) {\n                push @trimmed_tuple, $elem - $K;\n            }\n        }\n        push @result, \\@trimmed_tuple;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $elem (@$tuple) {\n            push @trimmed_tuple, $elem if $elem <= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            if ($item > $K) {\n                push @trimmed_tuple, $item;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $elem (@$tuple) {\n            push @trimmed_tuple, $elem if $elem <= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $element (@$tuple) {\n            push @trimmed_tuple, $element if $element <= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            for (my $i = 0; $i < $K; $i++) {\n                push @trimmed_tuple, $tuple->[$i];\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            if ($item >= $K) {\n                push @trimmed_tuple, $item - $K;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            my $trimmed_item = substr($item, 0, $K);\n            push @trimmed_tuple, $trimmed_item;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            my $trimmed_item = substr($item, 0, $K);\n            push @trimmed_tuple, $trimmed_item;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            if ($item > $K) {\n                push @trimmed_tuple, $item;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            if (length($item) > $K) {\n                push @trimmed_tuple, substr($item, 0, $K) . \"...\";\n            } else {\n                push @trimmed_tuple, $item;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my @new_tuple;\n        foreach my $elem (@$tuple) {\n            push @new_tuple, $elem if $elem <= $K;\n        }\n        push @result, \\@new_tuple;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list = ();\n    foreach my $test (@$test_list) {\n        my @trimmed_test = ();\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple = ();\n            foreach my $elem (@$tuple) {\n                push(@trimmed_tuple, $elem) if ($elem >= $K);\n            }\n            push(@trimmed_test, \\@trimmed_tuple);\n        }\n        push(@trimmed_list, \\@trimmed_test);\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            if ($item > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $item;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $item (@$tuple) {\n            if ($item > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $item;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $test_value (@$test_tuple) {\n            if ($test_value > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $test_value;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $element (@$tuple) {\n            push @trimmed_tuple, $element if $element <= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $element (@$tuple) {\n            if ($element > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $element;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@$tuple) {\n            if ($elem > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $elem;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@$tuple) {\n            push(@trimmed_tuple, $elem) if ($elem <= $K);\n        }\n        push(@trimmed_list, \\@trimmed_tuple);\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            if ($item > $K) {\n                push @trimmed_tuple, $K;\n            } else {\n                push @trimmed_tuple, $item;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $test (@$test_list) {\n        my @trimmed_test = ();\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple = ();\n            for (my $i = 0; $i < $K; $i++) {\n                push @trimmed_tuple, $tuple->[$i];\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test = @$test;\n        splice(@trimmed_test, 0, $K);\n        splice(@trimmed_test, -$K, $K);\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@{$test_list}) {\n        my @trimmed_tuple = ();\n        foreach my $elem (@{$tuple}) {\n            push(@trimmed_tuple, $elem) if ($elem <= $K);\n        }\n        push(@trimmed_list, \\@trimmed_tuple);\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push(@trimmed_tuple, $item) if ($item <= $K);\n        }\n        push(@trimmed_list, \\@trimmed_tuple);\n    }\n    return \\@trimmed_list;\n}",
    "    my @new_list;\n    foreach my $tuple (@$test_list) {\n        my @new_tuple;\n        foreach my $item (@$tuple) {\n            if ($item >= $K) {\n                push @new_tuple, $item - $K;\n            }\n        }\n        push @new_list, \\@new_tuple;\n    }\n    return \\@new_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $test (@$test_list) {\n        my @trimmed_test = ();\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple = ();\n            foreach my $elem (@$tuple) {\n                push @trimmed_tuple, $elem if $elem <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $element (@$tuple) {\n            push @trimmed_tuple, $element if $element <= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $element (@$tuple) {\n            if ($element >= $K) {\n                push @trimmed_tuple, $element;\n            }\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my $trimmed_test = [@$test];\n        for (my $i = 0; $i < $K; $i++) {\n            pop @$trimmed_test;\n        }\n        push @trimmed_list, $trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $elem (@$tuple) {\n            push(@trimmed_tuple, $elem) if $elem <= $K;\n        }\n        push(@trimmed_list, \\@trimmed_tuple);\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $elem (@$tuple) {\n            push @trimmed_tuple, $elem if $elem <= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}"
  ]
}