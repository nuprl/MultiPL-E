{
  "name": "mbpp_776_count_vowels",
  "language": "pl",
  "prompt": "# Write a function to count those characters which have vowels as their neighbors in the given string.\nsub count_vowels {\n    my($test_str) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_vowels;\n        if(eq_deeply($candidate->(\"bestinstareels\"),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"partofthejourneyistheend\"),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"amazonprime\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $count = 0;\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my @chars = split(//, $test_str);\n    for (my $i = 0; $i < scalar(@chars); $i++) {\n        if (grep(/^$chars[$i]$/, @vowels)) {\n            if ($i > 0 && grep(/^$chars[$i-1]$/, @vowels)) {\n                $count++;\n            }\n            if ($i < scalar(@chars) - 1 && grep(/^$chars[$i+1]$/, @vowels)) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my @chars = split(//, $test_str);\n    for (my $i = 0; $i < scalar(@chars); $i++) {\n        if (grep(/^$chars[$i]$/, @vowels)) {\n            if ($i > 0) {\n                if (grep(/^$chars[$i-1]$/, @vowels)) {\n                    $count++;\n                }\n            }\n            if ($i < scalar(@chars) - 1) {\n                if (grep(/^$chars[$i+1]$/, @vowels)) {\n                    $count++;\n                }\n            }\n        }\n    }\n    return $count;\n}",
    "    my $vowels = 0;\n    my $i = 0;\n    my $len = length($test_str);\n    while($i < $len) {\n        my $ch = substr($test_str, $i, 1);\n        if($ch =~ /[aeiou]/i) {\n            if($i > 0) {\n                my $prev_ch = substr($test_str, $i - 1, 1);\n                if($prev_ch =~ /[aeiou]/i) {\n                    $vowels++;\n                }\n            }\n            if($i < $len - 1) {\n                my $next_ch = substr($test_str, $i + 1, 1);\n                if($next_ch =~ /[aeiou]/i) {\n                    $vowels++;\n                }\n            }\n        }\n        $i++;\n    }\n    return $vowels;\n}",
    "    my $count = 0;\n    for(my $i=0; $i < length($test_str); $i++) {\n        if(($i == 0 || $i == length($test_str) - 1) && is_vowel(substr($test_str, $i, 1))) {\n            $count++;\n        }\n        elsif(is_vowel(substr($test_str, $i, 1)) && (is_vowel(substr($test_str, $i - 1, 1)) || is_vowel(substr($test_str, $i + 1, 1)))) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my @vowels = ('a','e','i','o','u');\n    my @str_arr = split(//, $test_str);\n    for(my $i=0; $i<=$#str_arr; $i++) {\n        if(grep {$_ eq $str_arr[$i]} @vowels) {\n            if($i == 0) {\n                if(grep {$_ eq $str_arr[$i+1]} @vowels) {\n                    $count++;\n                }\n            }\n            elsif($i == $#str_arr) {\n                if(grep {$_ eq $str_arr[$i-1]} @vowels) {\n                    $count++;\n                }\n            }\n            else {\n                if(grep {$_ eq $str_arr[$i-1]} @vowels || grep {$_ eq $str_arr[$i+1]} @vowels) {\n                    $count++;\n                }\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my $vowels = 'aeiou';\n    my $len = length($test_str);\n    for (my $i = 0; $i < $len; $i++) {\n        my $char = substr($test_str, $i, 1);\n        if (index($vowels, $char) != -1) {\n            if ($i > 0) {\n                my $prev_char = substr($test_str, $i - 1, 1);\n                if (index($vowels, $prev_char) != -1) {\n                    $count++;\n                }\n            }\n            if ($i < $len - 1) {\n                my $next_char = substr($test_str, $i + 1, 1);\n                if (index($vowels, $next_char) != -1) {\n                    $count++;\n                }\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my @chars = split(//, $test_str);\n    for(my $i = 0; $i < scalar(@chars); $i++) {\n        if($chars[$i] =~ /[aeiou]/i) {\n            if($i > 0 && $chars[$i-1] =~ /[aeiou]/i) {\n                $count++;\n            }\n            if($i < scalar(@chars) - 1 && $chars[$i+1] =~ /[aeiou]/i) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my @vowels = ('a','e','i','o','u');\n    my @chars = split(//,$test_str);\n    for(my $i=0; $i<=$#chars; $i++) {\n        if(grep {$_ eq $chars[$i]} @vowels) {\n            if($i == 0) {\n                if(grep {$_ eq $chars[$i+1]} @vowels) {\n                    $count++;\n                }\n            } elsif($i == $#chars) {\n                if(grep {$_ eq $chars[$i-1]} @vowels) {\n                    $count++;\n                }\n            } else {\n                if(grep {$_ eq $chars[$i-1]} @vowels || grep {$_ eq $chars[$i+1]} @vowels) {\n                    $count++;\n                }\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my @test_str = split(//, $test_str);\n    for (my $i = 0; $i < scalar(@test_str); $i++) {\n        if (grep(/^$test_str[$i]$/, @vowels)) {\n            if ($i == 0) {\n                if (grep(/^$test_str[$i+1]$/, @vowels)) {\n                    $count++;\n                }\n            }\n            elsif ($i == scalar(@test_str) - 1) {\n                if (grep(/^$test_str[$i-1]$/, @vowels)) {\n                    $count++;\n                }\n            }\n            else {\n                if (grep(/^$test_str[$i-1]$/, @vowels) || grep(/^$test_str[$i+1]$/, @vowels)) {\n                    $count++;\n                }\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my $vowels = \"aeiou\";\n    for(my $i = 0; $i < length($test_str); $i++) {\n        my $char = substr($test_str, $i, 1);\n        if(index($vowels, $char) != -1) {\n            if($i > 0 && index($vowels, substr($test_str, $i - 1, 1)) != -1) {\n                $count++;\n            }\n            if($i < length($test_str) - 1 && index($vowels, substr($test_str, $i + 1, 1)) != -1) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my @chars = split(//, $test_str);\n    for (my $i = 0; $i < scalar @chars; $i++) {\n        if (grep {$_ eq $chars[$i]} @vowels) {\n            if ($i > 0) {\n                if (grep {$_ eq $chars[$i-1]} @vowels) {\n                    $count++;\n                }\n            }\n            if ($i < scalar @chars - 1) {\n                if (grep {$_ eq $chars[$i+1]} @vowels) {\n                    $count++;\n                }\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my @chars = split(//, $test_str);\n    for (my $i = 0; $i < scalar(@chars); $i++) {\n        if ($chars[$i] =~ /[aeiou]/i) {\n            if ($i > 0 && $chars[$i - 1] =~ /[aeiou]/i) {\n                $count++;\n            }\n            if ($i < scalar(@chars) - 1 && $chars[$i + 1] =~ /[aeiou]/i) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my @chars = split(//, $test_str);\n    for(my $i = 0; $i < scalar(@chars); $i++) {\n        if(($i == 0 || $i == scalar(@chars) - 1) && $chars[$i] =~ /[aeiou]/i) {\n            $count++;\n        }\n        elsif($chars[$i] =~ /[aeiou]/i && $chars[$i - 1] =~ /[aeiou]/i) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my @test_str_array = split('', $test_str);\n    for (my $i = 0; $i < scalar @test_str_array; $i++) {\n        if ($i == 0) {\n            if (grep {$_ eq $test_str_array[$i+1]} @vowels) {\n                $count++;\n            }\n        } elsif ($i == scalar @test_str_array - 1) {\n            if (grep {$_ eq $test_str_array[$i-1]} @vowels) {\n                $count++;\n            }\n        } else {\n            if (grep {$_ eq $test_str_array[$i-1]} @vowels || grep {$_ eq $test_str_array[$i+1]} @vowels) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my $vowels = \"aeiou\";\n    my $len = length($test_str);\n    for (my $i = 0; $i < $len; $i++) {\n        my $char = substr($test_str, $i, 1);\n        if (index($vowels, $char) != -1) {\n            if ($i > 0) {\n                my $prev_char = substr($test_str, $i-1, 1);\n                if (index($vowels, $prev_char) != -1) {\n                    $count++;\n                }\n            }\n            if ($i < $len-1) {\n                my $next_char = substr($test_str, $i+1, 1);\n                if (index($vowels, $next_char) != -1) {\n                    $count++;\n                }\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $e = 0;\n    my $i = 0;\n    my $o = 0;\n    my $u = 0;\n    my $A = 0;\n    my $E = 0;\n    my $I = 0;\n    my $O = 0;\n    my $U = 0;\n    my $vowels = 0;\n    my $vowels_neighbors = 0;\n    my $vowels_neighbors_count = 0;\n    my $vowels_neighbors_count_final = 0;\n    my $vowels_neighbors_count_final_final = 0;\n    my $vowels_neighbors_count_final_final_final = 0;\n    my $vowels_neighbors_count_final_final_final_final = 0;\n    my $vowels_neighbors_count_final_final_final_final_final = 0;\n    my $vowels_neighbors_count_final_final_final_final_final_final = 0;\n    my $vowels_neighbors_count_final_final_final_final_final_final_final = 0;\n    my $vowels_neighbors_count_final_final_final_final_final_final_final_final = 0;\n    my $vowels_neighbors_count_final_final_final_final_final_final_final_final_final = 0;\n    my $vow",
    "    my $count = 0;\n    my $vowels = 'aeiou';\n    my $str_len = length($test_str);\n    for(my $i = 0; $i < $str_len; $i++) {\n        if(index($vowels, substr($test_str, $i, 1)) != -1) {\n            if($i > 0 && index($vowels, substr($test_str, $i - 1, 1)) != -1) {\n                $count++;\n            }\n            if($i < $str_len - 1 && index($vowels, substr($test_str, $i + 1, 1)) != -1) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my @vowels = ('a','e','i','o','u');\n    my @str_arr = split('',$test_str);\n    for(my $i=0;$i<scalar(@str_arr);$i++){\n        if(grep(/$str_arr[$i]/,@vowels)){\n            if(($i+1)<scalar(@str_arr) && grep(/$str_arr[$i+1]/,@vowels)){\n                $count++;\n            }\n            if(($i-1)>=0 && grep(/$str_arr[$i-1]/,@vowels)){\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my @vowels = qw(a e i o u);\n    my @chars = split(//, $test_str);\n    for(my $i = 0; $i < scalar(@chars); $i++) {\n        if(grep(/^$chars[$i]$/, @vowels)) {\n            if($i != 0) {\n                if(grep(/^$chars[$i-1]$/, @vowels)) {\n                    $count++;\n                }\n            }\n            if($i != scalar(@chars) - 1) {\n                if(grep(/^$chars[$i+1]$/, @vowels)) {\n                    $count++;\n                }\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my @chars = split(//, $test_str);\n    for (my $i = 0; $i < scalar(@chars); $i++) {\n        if (grep(/^$chars[$i]$/, @vowels)) {\n            if ($i > 0 && grep(/^$chars[$i-1]$/, @vowels)) {\n                $count++;\n            }\n            if ($i < scalar(@chars)-1 && grep(/^$chars[$i+1]$/, @vowels)) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}"
  ]
}