{
  "name": "mbpp_456_reverse_string_list",
  "language": "pl",
  "prompt": "# Write a function to reverse each string in a given list of string values.\nsub reverse_string_list {\n    my($stringlist) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_456_reverse_string_list.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&reverse_string_list;\n        if(eq_deeply($candidate->([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]),[\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"john\", \"amal\", \"joel\", \"george\"]),[\"nhoj\", \"lama\", \"leoj\", \"egroeg\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"jack\", \"john\", \"mary\"]),[\"kcaj\", \"nhoj\", \"yram\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @reversed_strings = ();\n    foreach my $string (@$stringlist) {\n        push @reversed_strings, reverse($string);\n    }\n    return \\@reversed_strings;\n}",
    "    my @reversed_stringlist = ();\n    foreach my $string (@$stringlist) {\n        push @reversed_stringlist, reverse($string);\n    }\n    return @reversed_stringlist;\n}",
    "    my @list = split(/\\s+/, $stringlist);\n    my @newlist = ();\n    foreach my $string (@list) {\n        push(@newlist, scalar reverse($string));\n    }\n    return join(\" \", @newlist);\n}",
    "    my @reversed_stringlist = ();\n    foreach my $string (@$stringlist) {\n        push @reversed_stringlist, reverse($string);\n    }\n    return \\@reversed_stringlist;\n}",
    "    my @reversed_strings;\n    foreach my $string (@$stringlist) {\n        push @reversed_strings, reverse $string;\n    }\n    return \\@reversed_strings;\n}",
    "    my @reversed_string_list = ();\n    foreach my $string (@$stringlist) {\n        push(@reversed_string_list, reverse($string));\n    }\n    return \\@reversed_string_list;\n}",
    "    my @reversed_list = ();\n    foreach my $string (@$stringlist) {\n        push @reversed_list, reverse $string;\n    }\n    return \\@reversed_list;\n}",
    "    my @reversed_list = ();\n    foreach my $string (@$stringlist) {\n        push @reversed_list, scalar reverse $string;\n    }\n    return \\@reversed_list;\n}",
    "    my @reversed_list;\n    foreach my $string (@$stringlist) {\n        push @reversed_list, reverse $string;\n    }\n    return \\@reversed_list;\n}",
    "    my @reversed_strings;\n    foreach my $string (@$stringlist) {\n        push @reversed_strings, reverse($string);\n    }\n    return \\@reversed_strings;\n}",
    "    my @reversed_string_list = ();\n    foreach my $string (@$stringlist) {\n        push @reversed_string_list, reverse($string);\n    }\n    return @reversed_string_list;\n}",
    "    my @newlist;\n    foreach my $string (@$stringlist) {\n\tpush(@newlist, reverse($string));\n    }\n    return \\@newlist;\n}",
    "    my @list = split(/\\s+/, $stringlist);\n    my @reversed_list = ();\n    foreach my $string (@list) {\n        push @reversed_list, reverse($string);\n    }\n    return join(' ', @reversed_list);\n}",
    "    my @list = split(/,/, $stringlist);\n    my @revlist = ();\n    foreach my $str (@list) {\n        push(@revlist, scalar reverse $str);\n    }\n    return join(',', @revlist);\n}",
    "    my @reversed_strings = ();\n    foreach my $string (@$stringlist) {\n        push @reversed_strings, reverse($string);\n    }\n    return \\@reversed_strings;\n}",
    "    my @reversed_stringlist = ();\n    foreach my $string (@$stringlist) {\n        push @reversed_stringlist, reverse($string);\n    }\n    return \\@reversed_stringlist;\n}",
    "    my @reversed_string_list = ();\n    foreach my $string (@$stringlist) {\n        push(@reversed_string_list, reverse($string));\n    }\n    return \\@reversed_string_list;\n}",
    "    my @reversed_list = ();\n    foreach my $string (@$stringlist) {\n        push @reversed_list, scalar reverse $string;\n    }\n    return \\@reversed_list;\n}",
    "    my @reversed_list;\n    for my $string (@$stringlist) {\n        push @reversed_list, reverse $string;\n    }\n    return \\@reversed_list;\n}",
    "    my @reversed_stringlist;\n    foreach my $string (@$stringlist) {\n        push @reversed_stringlist, reverse $string;\n    }\n    return \\@reversed_stringlist;\n}"
  ]
}