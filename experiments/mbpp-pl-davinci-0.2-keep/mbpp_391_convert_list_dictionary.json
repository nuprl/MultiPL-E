{
  "name": "mbpp_391_convert_list_dictionary",
  "language": "pl",
  "prompt": "# Write a function to convert more than one list to nested dictionary.\nsub convert_list_dictionary {\n    my($l1, $l2, $l3) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&convert_list_dictionary;\n        if(eq_deeply($candidate->([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\" => {\"Adina Park\" => 85}}, {\"S002\" => {\"Leyton Marsh\" => 98}}, {\"S003\" => {\"Duncan Boyle\" => 89}}, {\"S004\" => {\"Saim Richards\" => 92}}])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\" => {\"python\" => 100}}, {\"def\" => {\"program\" => 200}}, {\"ghi\" => {\"language\" => 300}}, {\"jkl\" => {\"programs\" => 400}}])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\" => {\"java\" => 10}}, {\"A2\" => {\"C\" => 20}}, {\"A3\" => {\"C++\" => 30}}, {\"A4\" => {\"DBMS\" => 40}}])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my %hash;\n    @hash{@$l1} = @$l2;\n    @hash{@$l3} = @$l3;\n    return \\%hash;\n}",
    "    my %dictionary;\n    my $i = 0;\n    while ($i < @$l1) {\n        $dictionary{$l1->[$i]} = {$l2->[$i] => $l3->[$i]};\n        $i++;\n    }\n    return %dictionary;\n}",
    "    my $nested_dict = {};\n    for my $i (0..$#{$l1}) {\n        $nested_dict->{$l1->[$i]} = {\n            $l2->[$i] => $l3->[$i]\n        };\n    }\n    return $nested_dict;\n}",
    "    my %hash;\n    for my $i (0..$#$l1) {\n        $hash{$l1->[$i]} = { $l2->[$i] => $l3->[$i] };\n    }\n    return %hash;\n}",
    "    my $d = {};\n    for my $i (0..$#$l1) {\n        $d->{$l1->[$i]} = { $l2->[$i] => $l3->[$i] };\n    }\n    return $d;\n}",
    "    my %hash;\n    @hash{@$l1} = @$l2;\n    @hash{@$l3} = @$l3;\n    return \\%hash;\n}",
    "    my %hash;\n    @hash{@$l1} = @$l2;\n    @hash{@$l3} = @$l3;\n    return %hash;\n}",
    "    my %hash;\n    for (my $i = 0; $i < scalar(@$l1); $i++) {\n        $hash{$l1->[$i]} = { $l2->[$i] => $l3->[$i] };\n    }\n    return %hash;\n}",
    "    my %hash;\n    for (my $i = 0; $i < @$l1; $i++) {\n        $hash{$l1->[$i]} = {$l2->[$i] => $l3->[$i]};\n    }\n    return %hash;\n}",
    "    my %hash;\n    for (my $i = 0; $i < @$l1; $i++) {\n        $hash{$l1->[$i]} = {$l2->[$i] => $l3->[$i]};\n    }\n    return %hash;\n}",
    "    my %hash;\n    @hash{@$l1} = @$l2;\n    @hash{@$l3} = @$l3;\n    return \\%hash;\n}",
    "    my %hash;\n    for (my $i = 0; $i < scalar @$l1; $i++) {\n        $hash{$l1->[$i]} = {$l2->[$i] => $l3->[$i]};\n    }\n    return %hash;\n}",
    "    my %hash = ();\n    my $i = 0;\n    foreach my $val (@$l1) {\n        $hash{$val} = {$l2->[$i] => $l3->[$i]};\n        $i++;\n    }\n    return %hash;\n}",
    "    my %hash;\n    for my $i (0..$#{$l1}) {\n        $hash{$l1->[$i]} = {\n            $l2->[$i] => $l3->[$i]\n        };\n    }\n    return \\%hash;\n}",
    "    my %dictionary;\n    my $i = 0;\n    for my $item (@$l1) {\n        $dictionary{$item} = {\n            $l2->[$i] => $l3->[$i]\n        };\n        $i++;\n    }\n    return %dictionary;\n}",
    "    my %hash;\n    my $i = 0;\n    foreach my $value (@$l1) {\n        $hash{$value} = {\n            $l2->[$i] => $l3->[$i]\n        };\n        $i++;\n    }\n    return \\%hash;\n}",
    "    my $d = {};\n    for(my $i=0; $i<@$l1; $i++) {\n        $d->{$l1->[$i]} = {$l2->[$i] => $l3->[$i]};\n    }\n    return $d;\n}",
    "    my $nested_dict = {};\n    my $i = 0;\n    for my $key (@$l1) {\n        $nested_dict->{$key} = { $l2->[$i] => $l3->[$i] };\n        $i++;\n    }\n    return $nested_dict;\n}",
    "    my %hash;\n    @hash{@$l1} = @$l2;\n    @hash{@$l3} = @$l3;\n    return %hash;\n}",
    "    my %hash;\n    for my $i (0 .. $#{$l1}) {\n        $hash{$l1->[$i]} = {\n            $l2->[$i] => $l3->[$i]\n        }\n    }\n    return \\%hash;\n}"
  ]
}