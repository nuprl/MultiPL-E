{
  "name": "mbpp_247_lps",
  "language": "pl",
  "prompt": "# Write a function to find the length of the longest palindromic subsequence in the given string.\nsub lps {\n    my($str) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&lps;\n        if(eq_deeply($candidate->(\"TENS FOR TENS\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"CARDIO FOR CARDS\"),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"PART OF THE JOURNEY IS PART\"),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $n = length($str);\n    my @dp = (0) x $n;\n    for my $i (0..$n-1) {\n        $dp[$i][$i] = 1;\n    }\n    for my $len (2..$n) {\n        for my $i (0..$n-$len) {\n            my $j = $i + $len - 1;\n            if ($str->[$i] eq $str->[$j] && $len == 2) {\n                $dp[$i][$j] = 2;\n            } elsif ($str->[$i] eq $str->[$j]) {\n                $dp[$i][$j] = $dp[$i+1][$j-1] + 2;\n            } else {\n                $dp[$i][$j] = max($dp[$i+1][$j], $dp[$i][$j-1]);\n            }\n        }\n    }\n    return $dp[0][$n-1];\n}",
    "    my $n = length($str);\n    my @matrix = map { [ (0) x $n ] } (0..$n-1);\n    for my $i (0..$n-1) {\n        $matrix[$i][$i] = 1;\n    }\n    for my $l (2..$n) {\n        for my $i (0..$n-$l) {\n            my $j = $i + $l - 1;\n            if ($str->[$i] eq $str->[$j] && $l == 2) {\n                $matrix[$i][$j] = 2;\n            } elsif ($str->[$i] eq $str->[$j]) {\n                $matrix[$i][$j] = $matrix[$i+1][$j-1] + 2;\n            } else {\n                $matrix[$i][$j] = max($matrix[$i][$j-1], $matrix[$i+1][$j]);\n            }\n        }\n    }\n    return $matrix[0][$n-1];\n}",
    "    my $n = length($str);\n    my @lps;\n    for my $i (0 .. $n) {\n        $lps[$i][$i] = 1;\n    }\n    for my $len (2 .. $n) {\n        for my $i (0 .. $n - $len + 1) {\n            my $j = $i + $len - 1;\n            if ($str->[$i] eq $str->[$j] && $len == 2) {\n                $lps[$i][$j] = 2;\n            }\n            elsif ($str->[$i] eq $str->[$j]) {\n                $lps[$i][$j] = $lps[$i + 1][$j - 1] + 2;\n            }\n            else {\n                $lps[$i][$j] = max($lps[$i][$j - 1], $lps[$i + 1][$j]);\n            }\n        }\n    }\n    return $lps[0][$n - 1];\n}",
    "    my $n = length($str);\n    my @dp = map { [ (0) x $n ] } (0..$n);\n    for my $i (0..$n) {\n        $dp[$i][$i] = 1;\n    }\n    for my $len (2..$n) {\n        for my $i (0..$n-$len) {\n            my $j = $i + $len - 1;\n            if ($str->[$i] eq $str->[$j] && $len == 2) {\n                $dp[$i][$j] = 2;\n            } elsif ($str->[$i] eq $str->[$j]) {\n                $dp[$i][$j] = $dp[$i+1][$j-1] + 2;\n            } else {\n                $dp[$i][$j] = max($dp[$i+1][$j], $dp[$i][$j-1]);\n            }\n        }\n    }\n    return $dp[0][$n-1];\n}",
    "    my $n = length($str);\n    my @lps = map { [ (0) x $n ] } 0 .. $n;\n    for my $i (0 .. $n - 1) {\n        $lps[$i][$i] = 1;\n    }\n    for my $len (2 .. $n) {\n        for my $i (0 .. $n - $len) {\n            my $j = $i + $len - 1;\n            if ($str->[$i] eq $str->[$j] && $len == 2) {\n                $lps[$i][$j] = 2;\n            } elsif ($str->[$i] eq $str->[$j]) {\n                $lps[$i][$j] = 2 + $lps[$i + 1][$j - 1];\n            } else {\n                $lps[$i][$j] = max($lps[$i][$j - 1], $lps[$i + 1][$j]);\n            }\n        }\n    }\n    return $lps[0][$n - 1];\n}",
    "    my $n = length($str);\n    my @lps = (0) x $n;",
    "    my $n = length($str);\n    my @dp;\n    for my $i (0..$n) {\n        $dp[$i][$i] = 1;\n    }\n    for my $l (2..$n) {\n        for my $i (0..$n-$l+1) {\n            my $j = $i+$l-1;\n            if ($str->[$i] eq $str->[$j] && $l == 2) {\n                $dp[$i][$j] = 2;\n            } elsif ($str->[$i] eq $str->[$j]) {\n                $dp[$i][$j] = $dp[$i+1][$j-1] + 2;\n            } else {\n                $dp[$i][$j] = max($dp[$i][$j-1], $dp[$i+1][$j]);\n            }\n        }\n    }\n    return $dp[0][$n-1];\n}",
    "    my $n = length($str);\n    my @dp = (0) x $n;\n    for my $i (0 .. $n-1) {\n        $dp[$i][$i] = 1;\n    }\n    for my $len (2 .. $n) {\n        for my $i (0 .. $n-$len) {\n            my $j = $i + $len - 1;\n            if ($str->[$i] eq $str->[$j] && $len == 2) {\n                $dp[$i][$j] = 2;\n            } elsif ($str->[$i] eq $str->[$j]) {\n                $dp[$i][$j] = $dp[$i+1][$j-1] + 2;\n            } else {\n                $dp[$i][$j] = max($dp[$i][$j-1], $dp[$i+1][$j]);\n            }\n        }\n    }\n    return $dp[0][$n-1];\n}",
    "    my $n = length($str);\n    my @dp = (0) x $n;\n    for my $i (0..$n-1) {\n        $dp[$i][$i] = 1;\n    }\n    for my $len (2..$n) {\n        for my $i (0..$n-$len) {\n            my $j = $i + $len - 1;\n            if ($str->[$i] eq $str->[$j] && $len == 2) {\n                $dp[$i][$j] = 2;\n            } elsif ($str->[$i] eq $str->[$j]) {\n                $dp[$i][$j] = $dp[$i+1][$j-1] + 2;\n            } else {\n                $dp[$i][$j] = max($dp[$i][$j-1], $dp[$i+1][$j]);\n            }\n        }\n    }\n    return $dp[0][$n-1];\n}",
    "    my $n = length($str);\n    my @lps = (0) x $n;\n    for my $i (0..$n-1) {\n        $lps[$i][$i] = 1;\n    }\n    for my $len (2..$n) {\n        for my $i (0..$n-$len) {\n            my $j = $i + $len - 1;\n            if ($str->[$i] eq $str->[$j] && $len == 2) {\n                $lps[$i][$j] = 2;\n            } elsif ($str->[$i] eq $str->[$j]) {\n                $lps[$i][$j] = $lps[$i+1][$j-1] + 2;\n            } else {\n                $lps[$i][$j] = max($lps[$i][$j-1], $lps[$i+1][$j]);\n            }\n        }\n    }\n    return $lps[0][$n-1];\n}",
    "    my $n = length($str);\n    my @lps;\n    for my $i (0..$n-1) {\n        $lps[$i][$i] = 1;\n    }\n    for my $len (2..$n) {\n        for my $i (0..$n-$len) {\n            my $j = $i + $len - 1;\n            if ($str->[$i] eq $str->[$j] && $len == 2) {\n                $lps[$i][$j] = 2;\n            } elsif ($str->[$i] eq $str->[$j]) {\n                $lps[$i][$j] = $lps[$i+1][$j-1] + 2;\n            } else {\n                $lps[$i][$j] = max($lps[$i][$j-1], $lps[$i+1][$j]);\n            }\n        }\n    }\n    return $lps[0][$n-1];\n}",
    "    my $n = length($str);\n    my @lps = ();\n    for my $i (0..$n) {\n        for my $j (0..$n) {\n            $lps[$i][$j] = 0;\n        }\n    }\n    for my $i (0..$n) {\n        $lps[$i][$i] = 1;\n    }\n    for my $cl (2..$n) {\n        for my $i (0..$n-$cl+1) {\n            my $j = $i+$cl-1;\n            if ($str->[$i] eq $str->[$j] && $cl == 2) {\n                $lps[$i][$j] = 2;\n            } elsif ($str->[$i] eq $str->[$j]) {\n                $lps[$i][$j] = $lps[$i+1][$j-1] + 2;\n            } else {\n                $lps[$i][$j] = max($lps[$i][$j-1], $lps[$i+1][$j]);\n            }\n        }\n    }\n    return $lps[0][$n-1];\n}",
    "    my $n = length($str);\n    my @table = map { [ (0) x $n ] } (0..$n);\n    for my $i (0..$n-1) {\n        $table[$i][$i] = 1;\n    }\n    for my $l (2..$n) {\n        for my $i (0..$n-$l) {\n            my $j = $i + $l - 1;\n            if ($str->[$i] eq $str->[$j] && $l == 2) {\n                $table[$i][$j] = 2;\n            } elsif ($str->[$i] eq $str->[$j]) {\n                $table[$i][$j] = 2 + $table[$i+1][$j-1];\n            } else {\n                $table[$i][$j] = max($table[$i][$j-1], $table[$i+1][$j]);\n            }\n        }\n    }\n    return $table[0][$n-1];\n}",
    "    my @str = split //, $str;\n    my @lps = ();\n    for my $i (0 .. $#str) {\n        $lps[$i][$i] = 1;\n    }\n    for my $len (2 .. $#str + 1) {\n        for my $i (0 .. $#str - $len + 1) {\n            my $j = $i + $len - 1;\n            if ($str[$i] eq $str[$j] && $len == 2) {\n                $lps[$i][$j] = 2;\n            } elsif ($str[$i] eq $str[$j]) {\n                $lps[$i][$j] = $lps[$i + 1][$j - 1] + 2;\n            } else {\n                $lps[$i][$j] = max($lps[$i][$j - 1], $lps[$i + 1][$j]);\n            }\n        }\n    }\n    return $lps[0][$#str];\n}",
    "    my $n = length($str);\n    my @lps = (1) x $n;\n    for my $i (1..$n-1) {\n        my $j = $i-1;\n        while ($j >= 0) {\n            if (substr($str, $i, 1) eq substr($str, $j, 1)) {\n                $lps[$i] = $lps[$j-1] + 2;\n                last;\n            }\n            $j--;\n        }\n    }\n    return max(@lps);\n}",
    "    my $n = length($str);\n    my @dp = map { [ (0) x $n ] } (0..$n);\n    for my $i (0..$n-1) {\n        $dp[$i][$i] = 1;\n    }\n    for my $len (2..$n) {\n        for my $i (0..$n-$len) {\n            my $j = $i + $len - 1;\n            if ($str->[$i] eq $str->[$j] && $len == 2) {\n                $dp[$i][$j] = 2;\n            } elsif ($str->[$i] eq $str->[$j]) {\n                $dp[$i][$j] = 2 + $dp[$i+1][$j-1];\n            } else {\n                $dp[$i][$j] = max($dp[$i+1][$j], $dp[$i][$j-1]);\n            }\n        }\n    }\n    return $dp[0][$n-1];\n}",
    "    my $len = length($str);\n    my @lps = (1) x $len;\n    for my $i (1..$len-1) {\n        my $j = $i-1;\n        while ($j >= 0) {\n            if (substr($str, $i, 1) eq substr($str, $j, 1)) {\n                $lps[$i] = $lps[$j-1] + 2;\n                last;\n            }\n            $j--;\n        }\n    }\n    return max(@lps);\n}",
    "    my $n = length($str);\n    my @lps;\n    for my $i (0 .. $n) {\n        for my $j (0 .. $n) {\n            $lps[$i][$j] = 0;\n        }\n    }\n    for my $i (0 .. $n) {\n        $lps[$i][$i] = 1;\n    }\n    for my $i (0 .. $n - 2) {\n        if (substr($str, $i, 1) eq substr($str, $i + 1, 1)) {\n            $lps[$i][$i + 1] = 2;\n        } else {\n            $lps[$i][$i + 1] = 1;\n        }\n    }\n    for my $len (3 .. $n) {\n        for my $i (0 .. $n - $len + 1) {\n            my $j = $i + $len - 1;\n            if (substr($str, $i, 1) eq substr($str, $j, 1)) {\n                $lps[$i][$j] = 2 + $lps[$i + 1][$j - 1];\n            } else {\n                $lps[$i][$j] = max($lps[$i + 1][$j], $lps[$i][$j - 1]);\n            }\n        }\n    }\n    return $lps[0][$n - 1];\n}",
    "    my $n = length($str);\n    my @lps = (0) x $n;\n    for my $i (0..$n-1) {\n        $lps[$i][$i] = 1;\n    }\n    for my $len (2..$n) {\n        for my $i (0..$n-$len) {\n            my $j = $i + $len - 1;\n            if ($str->[$i] eq $str->[$j] && $len == 2) {\n                $lps[$i][$j] = 2;\n            } elsif ($str->[$i] eq $str->[$j]) {\n                $lps[$i][$j] = $lps[$i+1][$j-1] + 2;\n            } else {\n                $lps[$i][$j] = max($lps[$i][$j-1], $lps[$i+1][$j]);\n            }\n        }\n    }\n    return $lps[0][$n-1];\n}",
    "    my $n = length($str);\n    my @lps = (0) x $n;\n    for my $i (0 .. $n-1) {\n        my $l = $i;\n        my $r = $i;\n        while ($l >= 0 && $r < $n && substr($str, $l, 1) eq substr($str, $r, 1)) {\n            $lps[$i] = $r - $l + 1;\n            $l--;\n            $r++;\n        }\n        $l = $i - 1;\n        $r = $i;\n        while ($l >= 0 && $r < $n && substr($str, $l, 1) eq substr($str, $r, 1)) {\n            $lps[$i] = $r - $l + 1;\n            $l--;\n            $r++;\n        }\n    }\n    return max(@lps);\n}"
  ]
}