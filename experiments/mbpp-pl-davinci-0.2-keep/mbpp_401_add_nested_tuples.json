{
  "name": "mbpp_401_add_nested_tuples",
  "language": "pl",
  "prompt": "# Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nsub add_nested_tuples {\n    my($test_tup1, $test_tup2) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add_nested_tuples;\n        if(eq_deeply($candidate->([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @res_tup;\n    for my $i (0..$#{$test_tup1}) {\n        my @res_tup_inner;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @res_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @res_tup, \\@res_tup_inner;\n    }\n    return \\@res_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        my $tup1 = $test_tup1->[$i];\n        my $tup2 = $test_tup2->[$i];\n        my @temp;\n        for (my $j = 0; $j < scalar @$tup1; $j++) {\n            push @temp, $tup1->[$j] + $tup2->[$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @sub_result;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @sub_result, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@sub_result;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @result, [$test_tup1->[$i] + $test_tup2->[$i]];\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my @temp;\n        for (my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    my $i = 0;\n    foreach my $tup1_elem (@$test_tup1) {\n        my $tup2_elem = $$test_tup2[$i];\n        my @tup1_elem_list = @$tup1_elem;\n        my @tup2_elem_list = @$tup2_elem;\n        my @result_tup_elem;\n        for (my $j = 0; $j < scalar(@tup1_elem_list); $j++) {\n            push @result_tup_elem, $tup1_elem_list[$j] + $tup2_elem_list[$j];\n        }\n        push @result_tup, \\@result_tup_elem;\n        $i++;\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp_tup;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@temp_tup;\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, [@temp];\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my $tup1 = $test_tup1->[$i];\n        my $tup2 = $test_tup2->[$i];\n        my @temp;\n        for my $j (0..$#{$tup1}) {\n            push @temp, $tup1->[$j] + $tup2->[$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        push @result, [map {$test_tup1->[$i][$_] + $test_tup2->[$i][$_]} 0 .. $#{$test_tup1->[$i]}];\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result_tup = ();\n    for my $i (0..$#{$test_tup1}) {\n        my @temp_tup = ();\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, [@temp_tup];\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @sub_result;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @sub_result, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@sub_result;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        my $tup1 = $test_tup1->[$i];\n        my $tup2 = $test_tup2->[$i];\n        my @temp;\n        for (my $j = 0; $j < @$tup1; $j++) {\n            push @temp, $tup1->[$j] + $tup2->[$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        $result_tup[$i] = [$test_tup1->[$i][0] + $test_tup2->[$i][0], $test_tup1->[$i][1] + $test_tup2->[$i][1]];\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        push @result, [map { $test_tup1->[$i][$_] + $test_tup2->[$i][$_] } 0..$#{$test_tup1->[$i]}];\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @sub_result;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @sub_result, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@sub_result;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my @temp;\n        for(my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @result, [map {$test_tup1->[$i][$_] + $test_tup2->[$i][$_]} 0 .. $#$test_tup1];\n    }\n    return @result;\n}",
    "    my @result = ();\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my @temp_tup;\n        for (my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push @temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, [@temp_tup];\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @tup_add;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $tup_add[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@tup_add;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my $tup_len = scalar(@{$test_tup1});\n    my @result_tup;\n    for(my $i = 0; $i < $tup_len; $i++) {\n        my $tup1_len = scalar(@{$test_tup1->[$i]});\n        my $tup2_len = scalar(@{$test_tup2->[$i]});\n        my @temp_tup;\n        for(my $j = 0; $j < $tup1_len; $j++) {\n            push(@temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j]);\n        }\n        push(@result_tup, \\@temp_tup);\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my @temp;\n        for(my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push(@temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j]);\n        }\n        push(@result, \\@temp);\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    my $i = 0;\n    foreach my $tup1_elem (@$test_tup1) {\n        my $tup2_elem = @$test_tup2[$i];\n        my @result_tup_elem;\n        foreach my $tup1_elem_elem (@$tup1_elem) {\n            my $tup2_elem_elem = @$tup2_elem[$i];\n            push @result_tup_elem, $tup1_elem_elem + $tup2_elem_elem;\n            $i++;\n        }\n        push @result_tup, \\@result_tup_elem;\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    my $i = 0;\n    foreach my $tup1_elem (@$test_tup1) {\n        my $tup2_elem = @$test_tup2[$i];\n        if (ref($tup1_elem) eq 'ARRAY') {\n            push @result_tup, add_nested_tuples($tup1_elem, $tup2_elem);\n        } else {\n            push @result_tup, $tup1_elem + $tup2_elem;\n        }\n        $i++;\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @inner_result;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @inner_result, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@inner_result;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp_tup;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp_tup, ($test_tup1->[$i][$j] + $test_tup2->[$i][$j]);\n        }\n        push @result_tup, [@temp_tup];\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for(my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @result_tup, ($test_tup1->[$i] + $test_tup2->[$i]);\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my $tup1_elem = $test_tup1->[$i];\n        my $tup2_elem = $test_tup2->[$i];\n        if (ref($tup1_elem) eq 'ARRAY' && ref($tup2_elem) eq 'ARRAY') {\n            push @result_tup, add_nested_tuples($tup1_elem, $tup2_elem);\n        }\n        else {\n            push @result_tup, $tup1_elem + $tup2_elem;\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp_tup;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@temp_tup;\n    }\n    return \\@result_tup;\n}",
    "    my @result = ();\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp = ();\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @add_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my @add_tup1;\n        for (my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push @add_tup1, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @add_tup, [@add_tup1];\n    }\n    return @add_tup;\n}",
    "    my @result_tup;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @result_tup, $test_tup1->[$i] + $test_tup2->[$i];\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $i = 0;\n    while($i < scalar(@$test_tup1)) {\n        my $j = 0;\n        my @temp;\n        while($j < scalar(@{$test_tup1->[$i]})) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n            $j++;\n        }\n        push @result, [@temp];\n        $i++;\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @res_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $res_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @res_tup;\n}",
    "    my @result;\n    my $i = 0;\n    while ($i < scalar @$test_tup1) {\n        my $j = 0;\n        my @temp;\n        while ($j < scalar @{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n            $j++;\n        }\n        push @result, [@temp];\n        $i++;\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @tup1 = @$test_tup1;\n    my @tup2 = @$test_tup2;\n    my @result;\n    for my $i (0..$#tup1) {\n        my $tup1_elem = $tup1[$i];\n        my $tup2_elem = $tup2[$i];\n        if (ref $tup1_elem eq 'ARRAY' && ref $tup2_elem eq 'ARRAY') {\n            push @result, add_nested_tuples($tup1_elem, $tup2_elem);\n        } else {\n            push @result, $tup1_elem + $tup2_elem;\n        }\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    my $i = 0;\n    while ($i < scalar(@$test_tup1)) {\n        my $j = 0;\n        while ($j < scalar(@{$test_tup1->[$i]})) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n            $j++;\n        }\n        $i++;\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my @temp_tup;\n        for (my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push(@temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j]);\n        }\n        push(@result_tup, \\@temp_tup);\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @result_tup, ($test_tup1->[$i] + $test_tup2->[$i]);\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @tup1 = @{$test_tup1->[$i]};\n        my @tup2 = @{$test_tup2->[$i]};\n        my @temp;\n        for my $j (0 .. $#tup1) {\n            push @temp, $tup1[$j] + $tup2[$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my @temp;\n        for (my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result_tuple;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @result_tuple, $test_tup1->[$i] + $test_tup2->[$i];\n    }\n    return @result_tuple;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp_tup;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@temp_tup;\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @tup1 = @$test_tup1;\n    my @tup2 = @$test_tup2;\n    my @result;\n    for (my $i = 0; $i < scalar @tup1; $i++) {\n        my $tup1_elem = $tup1[$i];\n        my $tup2_elem = $tup2[$i];\n        my @tup1_elem_arr = @$tup1_elem;\n        my @tup2_elem_arr = @$tup2_elem;\n        my @result_elem;\n        for (my $j = 0; $j < scalar @tup1_elem_arr; $j++) {\n            my $tup1_elem_arr_elem = $tup1_elem_arr[$j];\n            my $tup2_elem_arr_elem = $tup2_elem_arr[$j];\n            push @result_elem, $tup1_elem_arr_elem + $tup2_elem_arr_elem;\n        }\n        push @result, \\@result_elem;\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#$test_tup1) {\n        my @temp_tup;\n        for my $j (0 .. $#${$test_tup1->[$i]}) {\n            push @temp_tup, ${$test_tup1->[$i]}[$j] + ${$test_tup2->[$i]}[$j];\n        }\n        push @result_tup, \\@temp_tup;\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my @temp = ();\n        for (my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, [@temp];\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp_tup;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@temp_tup;\n    }\n    return \\@result_tup;\n}",
    "    my $result_tup = ();\n    for my $i (0 .. $#{$test_tup1}) {\n        my $tup1_elem = $test_tup1->[$i];\n        my $tup2_elem = $test_tup2->[$i];\n        if (ref($tup1_elem) eq 'ARRAY' && ref($tup2_elem) eq 'ARRAY') {\n            push @{$result_tup}, add_nested_tuples($tup1_elem, $tup2_elem);\n        } else {\n            push @{$result_tup}, $tup1_elem + $tup2_elem;\n        }\n    }\n    return $result_tup;\n}",
    "    my $result_tup = ();\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup->[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return $result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @sub_result;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @sub_result, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@sub_result;\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0..$#$test_tup1) {\n        my @temp_tup;\n        for my $j (0..$#$test_tup1) {\n            push @temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, [@temp_tup];\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        my @temp_tup;\n        for (my $j = 0; $j < scalar @{$test_tup1->[$i]}; $j++) {\n            push @temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, [@temp_tup];\n    }\n    return @result_tup;\n}",
    "    my $result_tup = ();\n    for my $i (0..$#{$test_tup1}) {\n        my $result_tup_inner = ();\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @$result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @$result_tup, $result_tup_inner;\n    }\n    return $result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_tup_inner;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_inner;\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my $result = ();\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result->[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return $result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp_tup;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@temp_tup;\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        my @temp;\n        for (my $j = 0; $j < scalar @{$test_tup1->[$i]}; $j++) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, [@temp];\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my $tup1 = $test_tup1->[$i];\n        my $tup2 = $test_tup2->[$i];\n        my @temp;\n        for my $j (0 .. $#{$tup1}) {\n            push @temp, $tup1->[$j] + $tup2->[$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my $result = ();\n    for my $i (0 .. $#$test_tup1) {\n        for my $j (0 .. $#$test_tup2) {\n            $result->[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return $result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    my $i = 0;\n    foreach my $tup1_ele (@{$test_tup1}) {\n        my $tup2_ele = @{$test_tup2}[$i];\n        my @result_tup_ele;\n        foreach my $tup1_ele_ele (@{$tup1_ele}) {\n            my $tup2_ele_ele = @{$tup2_ele}[0];\n            my $result_tup_ele_ele = $tup1_ele_ele + $tup2_ele_ele;\n            push @result_tup_ele, $result_tup_ele_ele;\n            shift @{$tup2_ele};\n        }\n        push @result_tup, \\@result_tup_ele;\n        $i++;\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0..$#$test_tup1) {\n        my @tup1 = @{$test_tup1->[$i]};\n        my @tup2 = @{$test_tup2->[$i]};\n        my @tup_result;\n        for my $j (0..$#tup1) {\n            push @tup_result, $tup1[$j] + $tup2[$j];\n        }\n        push @result, \\@tup_result;\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my $tup1_elem = $test_tup1->[$i];\n        my $tup2_elem = $test_tup2->[$i];\n        if (ref($tup1_elem) eq 'ARRAY' and ref($tup2_elem) eq 'ARRAY') {\n            push @result_tup, add_nested_tuples($tup1_elem, $tup2_elem);\n        } else {\n            push @result_tup, $tup1_elem + $tup2_elem;\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_sub;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_sub, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@result_sub;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my $result = ();\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        my $temp = ();\n        for (my $j = 0; $j < scalar @{$test_tup1->[$i]}; $j++) {\n            push @$temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @$result, $temp;\n    }\n    return $result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_tup_inner;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_inner;\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my $result_tup = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my $tup1_elem = $test_tup1->[$i];\n        my $tup2_elem = $test_tup2->[$i];\n        my $result_elem = ();\n        for (my $j = 0; $j < scalar(@$tup1_elem); $j++) {\n            push @$result_elem, $tup1_elem->[$j] + $tup2_elem->[$j];\n        }\n        push @$result_tup, $result_elem;\n    }\n    return $result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result_tup;\n    my $i = 0;\n    foreach my $tup1_elem (@$test_tup1) {\n        my $tup2_elem = @$test_tup2[$i];\n        my @result_tup_elem;\n        my $j = 0;\n        foreach my $tup1_elem_elem (@$tup1_elem) {\n            my $tup2_elem_elem = @$tup2_elem[$j];\n            push @result_tup_elem, $tup1_elem_elem + $tup2_elem_elem;\n            $j++;\n        }\n        push @result_tup, \\@result_tup_elem;\n        $i++;\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    my $i = 0;\n    foreach my $tup1_elem (@$test_tup1) {\n        my $tup2_elem = @$test_tup2[$i];\n        my @result_tup_elem;\n        my $j = 0;\n        foreach my $tup1_elem_elem (@$tup1_elem) {\n            my $tup2_elem_elem = @$tup2_elem[$j];\n            push @result_tup_elem, $tup1_elem_elem + $tup2_elem_elem;\n            $j++;\n        }\n        push @result_tup, \\@result_tup_elem;\n        $i++;\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0..$#$test_tup1) {\n        for my $j (0..$#$test_tup2) {\n            push @result, $test_tup1->[$i] + $test_tup2->[$j];\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my @temp;\n        for (my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#$test_tup1) {\n        my @temp;\n        for my $j (0 .. $#$test_tup1) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my @temp_tup;\n        for(my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push(@temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j]);\n        }\n        push(@result_tup, \\@temp_tup);\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my @tup1 = @{$test_tup1};\n    my @tup2 = @{$test_tup2};\n    for my $i (0..$#tup1) {\n        for my $j (0..$#{$tup1[$i]}) {\n            $result[$i][$j] = $tup1[$i][$j] + $tup2[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $i (0..$#{$test_tup1}) {\n        my @temp;\n        foreach my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my $result_tup = ();\n    my $i = 0;\n    foreach my $tup1_elem (@$test_tup1) {\n        my $j = 0;\n        foreach my $tup2_elem (@$test_tup2) {\n            if ($i == $j) {\n                push @$result_tup, $tup1_elem + $tup2_elem;\n            }\n            $j++;\n        }\n        $i++;\n    }\n    return $result_tup;\n}",
    "    my $result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        $result_tup->[$i] = $test_tup1->[$i] + $test_tup2->[$i];\n    }\n    return $result_tup;\n}",
    "    my @result_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my @temp_tup;\n        for (my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push @temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, [@temp_tup];\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp_tup;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@temp_tup;\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my $result_tup = ();\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my $inner_tup = ();\n        for(my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push(@$inner_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j]);\n        }\n        push(@$result_tup, $inner_tup);\n    }\n    return $result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp_tup;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@temp_tup;\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        my $tup1_elem = $test_tup1->[$i];\n        my $tup2_elem = $test_tup2->[$i];\n        if (ref $tup1_elem eq 'ARRAY' && ref $tup2_elem eq 'ARRAY') {\n            push @result_tup, add_nested_tuples($tup1_elem, $tup2_elem);\n        }\n        else {\n            push @result_tup, $tup1_elem + $tup2_elem;\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my @temp;\n        for (my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_inner;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, [@result_inner];\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        push @result, [map { $test_tup1->[$i][$_] + $test_tup2->[$i][$_] } 0 .. $#{$test_tup1->[$i]}];\n    }\n    return @result;\n}",
    "    my $tup_len = scalar(@$test_tup1);\n    my @result_tup;\n    for (my $i = 0; $i < $tup_len; $i++) {\n        my $tup1_elem = $test_tup1->[$i];\n        my $tup2_elem = $test_tup2->[$i];\n        if (ref($tup1_elem) eq 'ARRAY') {\n            push @result_tup, add_nested_tuples($tup1_elem, $tup2_elem);\n        } else {\n            push @result_tup, $tup1_elem + $tup2_elem;\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my $result_tup = ();\n    for my $i (0 .. $#{$test_tup1}) {\n        my $temp_tup = ();\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @$temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @$result_tup, $temp_tup;\n    }\n    return $result_tup;\n}",
    "    my @result;\n    foreach my $i (0..$#{$test_tup1}) {\n        my @temp;\n        foreach my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = 0; $i < @$test_tup1; $i++) {\n        my @temp;\n        for (my $j = 0; $j < @{$test_tup1->[$i]}; $j++) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @test_tup1 = @$test_tup1;\n    my @test_tup2 = @$test_tup2;\n    my @result_tup;\n    for(my $i=0; $i<=$#test_tup1; $i++) {\n        my @temp_tup1 = @{$test_tup1[$i]};\n        my @temp_tup2 = @{$test_tup2[$i]};\n        my @temp_result_tup;\n        for(my $j=0; $j<=$#temp_tup1; $j++) {\n            push @temp_result_tup, $temp_tup1[$j] + $temp_tup2[$j];\n        }\n        push @result_tup, \\@temp_result_tup;\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my @temp_tup;\n        for(my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push(@temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j]);\n        }\n        push(@result_tup, \\@temp_tup);\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my @temp;\n        for(my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push @temp, ($test_tup1->[$i][$j] + $test_tup2->[$i][$j]);\n        }\n        push @result_tup, [@temp];\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for(my $i = 0; $i < scalar @$test_tup1; $i++) {\n        my @temp;\n        for(my $j = 0; $j < scalar @{$test_tup1->[$i]}; $j++) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, [@temp];\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    my $i = 0;\n    while($i < scalar(@$test_tup1)) {\n        my $j = 0;\n        while($j < scalar(@{$test_tup1->[$i]})) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n            $j++;\n        }\n        $i++;\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @tup1 = @{$test_tup1};\n    my @tup2 = @{$test_tup2};\n    my @result;\n    for (my $i = 0; $i < scalar(@tup1); $i++) {\n        my @tup1_inner = @{$tup1[$i]};\n        my @tup2_inner = @{$tup2[$i]};\n        my @result_inner;\n        for (my $j = 0; $j < scalar(@tup1_inner); $j++) {\n            push(@result_inner, $tup1_inner[$j] + $tup2_inner[$j]);\n        }\n        push(@result, \\@result_inner);\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my $tup1 = $test_tup1->[$i];\n        my $tup2 = $test_tup2->[$i];\n        my @tup;\n        for (my $j = 0; $j < scalar(@$tup1); $j++) {\n            push @tup, $tup1->[$j] + $tup2->[$j];\n        }\n        push @result, \\@tup;\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my @temp_tup;\n        for (my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push @temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@temp_tup;\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result_tuple;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @result_tuple, ($test_tup1->[$i] + $test_tup2->[$i]);\n    }\n    return \\@result_tuple;\n}"
  ]
}