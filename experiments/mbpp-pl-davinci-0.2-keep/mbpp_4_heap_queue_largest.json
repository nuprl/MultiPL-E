{
  "name": "mbpp_4_heap_queue_largest",
  "language": "pl",
  "prompt": "# Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nsub heap_queue_largest {\n    my($nums, $n) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&heap_queue_largest;\n        if(eq_deeply($candidate->([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [ @$nums ],\n    );",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->add($_) for @$nums;\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert($_) for @$nums;\n    my @largest;\n    while ($heap->size > 0 and @largest < $n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        use   => 'Numeric',\n    );\n    $heap->add($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(order => \">\", type => \"num\");\n    $heap->add($_) for @$nums;\n    my @ret;\n    while ($n--) {\n        push @ret, $heap->extract_first;\n    }\n    return @ret;\n}",
    "\n    my $heap = Heap::Simple->new(\n        type => 'max',\n        elements => 'Num',\n    );",
    "    my $heap = Heap::Simple->new(order => \">\", elements => \"Any\");\n    $heap->add($_) for @$nums;\n    my @largest;\n    while ($n-- > 0) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(order => '>', type => 'num');\n    $heap->insert($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums],\n    );\n    my @largest;\n    while ($heap->count > 0) {\n        push @largest, $heap->extract_top;\n        last if @largest == $n;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        use_modules => ['Heap::Simple::XS'],\n    );\n    $heap->insert($_) for @$nums;\n    my @largest;\n    while ($n-- > 0) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->add($_) for @$nums;\n    my @largest;\n    while ($heap->count > 0) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest[0..$n-1];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        if ($heap->size < $n) {\n            $heap->insert($num);\n        } else {\n            my $min = $heap->extract_top;\n            if ($num > $min) {\n                $heap->insert($num);\n            } else {\n                $heap->insert($min);\n            }\n        }\n    }\n    my @result;\n    while ($heap->size) {\n        push @result, $heap->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(order => '>', elements => 'Any');\n    $heap->add(@$nums);\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(order => '>', elements => 'Any');\n    $heap->add($_) for @$nums;\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums],\n    );\n    my @result;\n    for (1..$n) {\n        push @result, $heap->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [ @$nums ],\n    );\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        type  => 'num',\n    );\n    $heap->add($_) for @$nums;\n    my @largest;\n    while ($heap->count > 0 and @largest < $n) {\n        push @largest, $heap->extract_first;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        type => 'num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse map { $heap->extract_top } 1..$heap->size];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums],\n    );\n    my @result;\n    while($heap->count > 0 && $n > 0) {\n        push @result, $heap->extract_top;\n        $n--;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums],\n    );\n    my @largest;\n    while ($heap->count > 0) {\n        push @largest, $heap->extract_top;\n        last if @largest == $n;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(order => '<', elements => 'Num');\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert(@$nums);\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = new Heap::Simple;\n    $heap->add($_) for @$nums;\n    my @result;\n    for (1..$n) {\n        push @result, $heap->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '>',\n        elements => 'Any',\n    );\n    $heap->insert($_) for @$nums;\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert(@$nums);\n    my @largest;\n    while ($heap->size && @largest < $n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $h = Heap::Simple->new(\n        order => \">\",\n        type  => \"num\",\n    );\n    $h->insert($_) for @$nums;\n    my @result;\n    while ($n--) {\n        push @result, $h->extract_top;\n    }\n    return @result;\n}",
    "    my $h = Heap::Simple->new(\n        order => '<',\n        elements => 'Any',\n    );\n    for my $num (@$nums) {\n        $h->insert($num);\n        if ($h->size > $n) {\n            $h->extract_top;\n        }\n    }\n    return [reverse $h->extract_all];\n}",
    "    my $heap = new Heap::Simple;\n    $heap->make;\n    $heap->add($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums],\n    );\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "\n    my $heap = Heap::Simple->new(\n        order => '<',\n        type => 'num',\n    );",
    "    my $heap = Heap::Simple->new(\n        order => '>',\n        elements => 'Any',\n    );\n    $heap->insert($_) for @$nums;\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [ @$nums ],\n    );\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->add($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->add($_) for @$nums;\n    my @result;\n    for(1..$n) {\n        push @result, $heap->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    my @result;\n    while ($heap->size) {\n        push @result, $heap->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = new Heap::Simple;\n    $heap->insert($_) for @$nums;\n    my @largest = ();\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        use_modules => ['Heap::Simple::XS'],\n    );\n    $heap->insert($_) for @$nums;\n    my @result;\n    while ($n-- > 0) {\n        push @result, $heap->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums],\n    );\n    my @result;\n    for (1..$n) {\n        push @result, $heap->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    my @result;\n    while ($heap->size) {\n        push @result, $heap->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums],\n    );\n    my @largest;\n    while ($heap->count > 0 && @largest < $n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        type => 'max',\n        elements => 'Num',\n    );\n    $heap->insert($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $h = Heap::Simple->new(\n        order => '<',\n        elements => 'Any',\n    );\n    for my $num (@$nums) {\n        $h->insert($num);\n        if ($h->size > $n) {\n            $h->extract_first;\n        }\n    }\n    return [reverse $h->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums],\n    );\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        type => 'num',\n    );\n    $heap->insert($_) for @$nums;\n    my @result;\n    while ($n-- > 0) {\n        push @result, $heap->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(order => '<', elements => 'Any');\n    $heap->add($_) for @$nums;\n    my @result;\n    for (1..$n) {\n        push @result, $heap->extract_top;\n    }\n    return @result;\n}",
    "    my $pq = Heap::Simple->new(\n        order => '<',\n        use => 'Heap::Simple::XS',\n        data => [ @$nums ],\n    );\n    my @largest;\n    while ($pq->count() > 0) {\n        push @largest, $pq->extract_top();\n        last if @largest == $n;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(order => \">\", type => \"num\");\n    $heap->add($_) for @$nums;\n    return [ $heap->extract_first($n) ];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '>',\n        elements => 'Num',\n    );\n    $heap->add(@$nums);\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert($_) for @$nums;\n    my @ret;\n    for (1..$n) {\n        push @ret, $heap->extract_top;\n    }\n    return @ret;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        type  => 'num',\n    );\n    $heap->insert($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(order => '<', elements => 'Any');\n    $heap->add($_) for @$nums;\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n    }\n    my @result;\n    for (1..$n) {\n        push @result, $heap->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums]\n    );\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums],\n    );\n    my @largest;\n    while ($heap->count() > 0) {\n        push @largest, $heap->extract_top();\n        last if @largest == $n;\n    }\n    return @largest;\n}",
    "    my $h = Heap::Simple->new(\n        order => '>',\n        type => 'num',\n    );\n    $h->insert($_) for @$nums;\n    my @largest;\n    for (1..$n) {\n        push @largest, $h->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = new Heap::Binary;\n    $heap->add_elements(@$nums);\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert(@$nums);\n    my @result;\n    for (1..$n) {\n        push @result, $heap->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        use   => 'Min',\n    );\n    $heap->add($_) for @$nums;\n    my @largest;\n    while($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "\n    my $pq = new Heap::Simple;\n    $pq->add($_) for @$nums;",
    "\n    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert(@$nums);\n    my @result;\n    while ($n-- > 0) {\n        push @result, $heap->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->add($_) for @$nums;\n    my @result;\n    for (1..$n) {\n        push @result, $heap->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums],\n    );\n    my @largest;\n    while($heap->count > 0) {\n        push @largest, $heap->extract_top;\n        last if @largest == $n;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(order => '<', elements => 'Any');\n    $heap->add($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(order => \">\", elements => \"Any\");\n    $heap->add($_) for @$nums;\n    my @result;\n    while ($n--) {\n        push @result, $heap->extract_first;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert($_) for @$nums;\n    my @ret;\n    while ($n-- > 0) {\n        push @ret, $heap->extract_top;\n    }\n    return @ret;\n}",
    "    my $h = Heap::Simple->new(type => \"array\", elements => \"Num\");\n    $h->insert($_) for @$nums;\n    my @result;\n    while ($n-- > 0) {\n        push @result, $h->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [],\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        type => 'max',\n        elements => 'Num',\n    );\n    $heap->insert($_) for @$nums;\n    return [ $heap->extract_top($n) ];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert($_) for @$nums;\n    my @largest;\n    while ($n-- > 0) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert($_) for @$nums;\n    my @largest;\n    while ($heap->size > 0) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '>',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n    }\n    my @result;\n    for (1..$n) {\n        push @result, $heap->extract_top;\n    }\n    return \\@result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [ @$nums ],\n    );\n    my @largest;\n    while($heap->count > 0 && $n > 0) {\n        push @largest, $heap->extract_top;\n        $n--;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => \">\",\n        elements => \"Any\",\n    );\n    $heap->add($_) for @$nums;\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        use_modules => ['Heap::Simple::XS'],\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    my @result;\n    while ($heap->size) {\n        push @result, $heap->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert($_) for @$nums;\n    my @largest;\n    while($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->add($_) for @$nums;\n    my @result;\n    while ($n-- > 0) {\n        push @result, $heap->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(order => '>', elements => 'Any');\n    $heap->add($_) for @$nums;\n    my @largest;\n    while ($heap->size) {\n        push @largest, $heap->extract_top;\n        last if @largest == $n;\n    }\n    return @largest;\n}",
    "\n    my $heap = Heap::Simple->new(\n        order => '<',\n        type => 'num',\n    );",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    my @result;\n    while ($heap->size) {\n        push @result, $heap->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(order => '>', elements => 'Any');\n    $heap->insert($_) for @$nums;\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_first;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums],\n    );\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums],\n    );\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums],\n    );\n    my @largest;\n    while ($heap->count() > 0 && $n > 0) {\n        push @largest, $heap->extract_top();\n        $n--;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '>',\n        elements => 'Any',\n    );\n    $heap->insert($_) for @$nums;\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [ @$nums ],\n    );\n    my @largest;\n    while ($heap->count) {\n        push @largest, $heap->extract_top;\n        last if @largest == $n;\n    }\n    return @largest;\n}",
    "\n    my $heap = new Heap::Simple;\n    $heap->add($_) for @$nums;",
    "    my $heap = new Heap::Simple;\n    $heap->add($_) for @$nums;\n    my @largest;\n    while ($n-- > 0) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $h = Heap::Simple->new(order => '<', type => 'num');\n    $h->insert($_) for @$nums;\n    my @result;\n    for (1..$n) {\n        push @result, $h->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums],\n    );\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(order => '<', elements => 'Num');\n    $heap->insert($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums],\n    );\n    my @largest;\n    while ($heap->size) {\n        push @largest, $heap->extract_top;\n        last if @largest == $n;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->add($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert($_) for @$nums;\n    my @ret;\n    for (1..$n) {\n        push @ret, $heap->extract_top;\n    }\n    return @ret;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums]\n    );\n    my @largest;\n    while ($heap->count > 0 && $n > 0) {\n        push @largest, $heap->extract_top;\n        $n--;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        use_modules => ['Heap::Simple::XS'],\n    );\n    $heap->insert($_) for @$nums;\n    my @largest;\n    while ($n > 0) {\n        push @largest, $heap->extract_top;\n        $n--;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [ @$nums ],\n    );\n    my @largest;\n    for (1 .. $n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert($_) for @$nums;\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_first;\n    }\n    return @largest;\n}",
    "    my @heap = ();\n    my $i = 0;\n    while ($i < $n) {\n        push @heap, $nums->[$i];\n        $i++;\n    }\n    heapify(\\@heap);\n    while ($i < scalar(@$nums)) {\n        if ($nums->[$i] > $heap[0]) {\n            $heap[0] = $nums->[$i];\n            heapify(\\@heap);\n        }\n        $i++;\n    }\n    return @heap;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    my @result = map { $heap->extract_top } 1..$heap->size;\n    return reverse @result;\n}",
    "    my $heap = Heap::Simple->new(order => '>', elements => 'Any');\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    my @result;\n    while ($heap->size) {\n        push @result, $heap->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->count > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->add($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = new Heap::Simple;\n    $heap->add($_) for @$nums;\n    my @largest;\n    while (scalar @largest < $n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => \">\",\n        elements => \"Any\",\n    );\n    $heap->insert(@$nums);\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(order => \">\", elements => \"Any\");\n    $heap->add($_) for @$nums;\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->add($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "\n    my $heap = Heap::Simple->new(order => '>', type => 'num');\n    $heap->add($_) for @$nums;",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums],\n    );\n    my @result;\n    for (1..$n) {\n        push @result, $heap->extract_top;\n    }\n    return @result;\n}",
    "    my $h = Heap::Simple->new(\n        order => '<',\n        elements => 'Any',\n    );\n    $h->insert($_) for @$nums;\n    my @ret;\n    while($n-- > 0) {\n        push @ret, $h->extract_top;\n    }\n    return @ret;\n}",
    "    my $h = new Heap::Simple;\n    $h->add($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $h->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        type => 'num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(order => '<', elements => 'Num');\n    $heap->insert($_) for @$nums;\n    my @largest;\n    while ($n-- > 0) {\n        push @largest, $heap->extract_first;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->add($_) foreach @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_first;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse map { $heap->extract_top } 1..$heap->size];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums],\n    );\n    my @largest;\n    while ($heap->count > 0) {\n        push @largest, $heap->extract_top;\n        last if @largest == $n;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert(@$nums);\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->add($_) for @$nums;\n    my @largest;\n    while($n-- > 0) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(order => \">\", elements => \"Any\");\n    $heap->add($_) for @$nums;\n    my @largest;\n    while ($n-- > 0) {\n        push @largest, $heap->extract_first;\n    }\n    return @largest;\n}",
    "    my $h = Heap::Simple->new(order => '<', elements => 'Any');\n    $h->insert($_) for @$nums;\n    my @result;\n    for (1..$n) {\n        push @result, $h->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [ @$nums ],\n    );\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert(@$nums);\n    my @largest;\n    while ($n-- > 0) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(order => '>', type => 'num');\n    $heap->add($_) for @$nums;\n    my @result;\n    while ($n--) {\n        push @result, $heap->extract_first;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert(@$nums);\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = new Heap::Simple;\n    $heap->make;\n    foreach my $num (@$nums) {\n        $heap->insert($num);\n    }\n    my @largest;\n    for (my $i = 0; $i < $n; $i++) {\n        my $largest = $heap->extract_top;\n        push @largest, $largest;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        use_modules => ['Heap::Simple::XS'],\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        type => 'num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse map { $heap->extract_top } 1..$heap->size];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        use => 'Array',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '>',\n        elements => 'Any',\n    );\n    $heap->insert($_) for @$nums;\n    my @ret;\n    while ($n-- > 0) {\n        push @ret, $heap->extract_top;\n    }\n    return @ret;\n}",
    "    my $heap = new Heap::Simple;\n    $heap->add($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums],\n    );\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(order => '<', type => 'num');\n    $heap->add($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_first;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(order => '>', type => 'num');\n    $heap->add($_) for @$nums;\n    my @result;\n    while ($n--) {\n        push @result, $heap->extract_first;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        type  => 'num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    my @result;\n    while ($heap->size) {\n        push @result, $heap->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->add($_) for @$nums;\n    my @largest;\n    while ($heap->count > 0) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest[0..$n-1];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(order => '<', elements => 'Any');\n    $heap->add($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        type => 'num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    my @result = ();\n    while ($heap->size > 0) {\n        push @result, $heap->extract_top;\n    }\n    return reverse @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->add($_) for @$nums;\n    my @largest;\n    while ($n-- > 0) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    my @result;\n    while ($heap->size) {\n        push @result, $heap->extract_top;\n    }\n    return reverse @result;\n}",
    "    my $heap = Heap::Simple->new(order => \">\", elements => \"Any\");\n    $heap->add($_) for @$nums;\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        type => 'max',\n        elements => 'Num',\n    );\n    $heap->insert(@$nums);\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $h = Heap::Simple->new(\n        order => '<',\n        elements => 'Any',\n    );\n    for my $num (@$nums) {\n        $h->insert($num);\n        if ($h->size > $n) {\n            $h->extract_top;\n        }\n    }\n    return [reverse map { $h->extract_top } 1..$h->size];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->add($_) for @$nums;\n    my @res;\n    while ($n--) {\n        push @res, $heap->extract_top;\n    }\n    return @res;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->add($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums],\n    );\n    my @largest;\n    while ($heap->count > 0 && @largest < $n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->add($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_first;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->add($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        type => 'num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->add($_) for @$nums;\n    my @largest;\n    while(@largest < $n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $h = Heap::Simple->new(type => 'max');\n    $h->insert($_) for @$nums;\n    my @largest;\n    for (1 .. $n) {\n        push @largest, $h->extract_top;\n    }\n    return @largest;\n}",
    "\n    my $heap = Heap::Simple->new(\n        order => '<',\n        type => 'num',\n    );",
    "    my $h = Heap::Simple->new(order => '<', type => 'num');\n    $h->add($_) for @$nums;\n    my @result;\n    for (1..$n) {\n        push @result, $h->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(order => '>', elements => 'Any');\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        data => $nums,\n        order => '>',\n        use => 'MinMax',\n    );\n    $heap->extract_first($n);\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums],\n    );\n    my @result;\n    while ($heap->count > 0 && $n > 0) {\n        push @result, $heap->extract_top;\n        $n--;\n    }\n    return @result;\n}",
    "    my $h = Heap::Simple->new(type => 'array', elements => 'Num');\n    $h->insert($_) for @$nums;\n    my @largest;\n    while($n--) {\n        push @largest, $h->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        type => 'num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => \">\",\n        elements => \"Any\",\n    );\n    $heap->insert($_) for @$nums;\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(order => '>', type => 'num');\n    $heap->add($_) for @$nums;\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_first;\n    }\n    return @largest;\n}",
    "    my $heap = new Heap::Simple;\n    $heap->add($_) for @$nums;\n    my @largest;\n    while($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        type  => 'num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(order => \">\", type => \"num\");\n    $heap->add($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_first;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums],\n    );\n    my @result;\n    while ($heap->count) {\n        push @result, $heap->extract_top;\n        last if @result == $n;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert($_) for @$nums;\n    my @result;\n    for (1..$n) {\n        push @result, $heap->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        type => 'array',\n        use_modules => ['Heap::Simple::XS'],\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '>',\n        elements => 'Any',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n    }\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        use_modules => ['Heap::Simple::XS'],\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        use => 'Numeric',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    my @result;\n    while ($heap->size > 0) {\n        push @result, $heap->extract_top;\n    }\n    return reverse @result;\n}",
    "    my $heap = Heap::Simple->new(\n        data => [@$nums],\n        order => '>',\n        use => 'heap',\n    );\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        data => $nums,\n        order => '>',\n    );\n    my @largest;\n    for (1 .. $n) {\n        my $largest = $heap->extract_first;\n        push @largest, $largest;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        type => 'num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $h = Heap::Simple->new(\n        order => '<',\n        elements => 'Any',\n        use_ranges => 1,\n    );\n    $h->insert(@$nums);\n    my @largest;\n    while($n--) {\n        push @largest, $h->extract_first;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(order => '<', elements => 'Any');\n    $heap->add($_) for @$nums;\n    my @result;\n    while ($n-- > 0) {\n        push @result, $heap->extract_first;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert(@$nums);\n    my @largest;\n    for (1..$n) {\n        my $largest = $heap->extract_top;\n        push @largest, $largest;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->add($_) for @$nums;\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert(@$nums);\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return reverse @largest;\n}",
    "    my $heap = Heap::Simple->new(order => '>', elements => 'Any');\n    $heap->add($_) for @$nums;\n    my @res;\n    for (1..$n) {\n        push @res, $heap->extract_top;\n    }\n    return @res;\n}"
  ]
}