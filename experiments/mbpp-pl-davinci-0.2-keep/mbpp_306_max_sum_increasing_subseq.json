{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "pl",
  "prompt": "# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nsub max_sum_increasing_subseq {\n    my($a, $n, $index, $k) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_increasing_subseq;\n        if(eq_deeply($candidate->([1, 101, 2, 3, 100, 4, 5], 7, 4, 6),11)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 101, 2, 3, 100, 4, 5], 7, 2, 5),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([11, 15, 19, 21, 26, 28, 31], 7, 2, 4),71)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $sum = 0;\n    my $max = 0;\n    for my $i (0..$index) {\n        if ($a->[$i] < $a->[$k]) {\n            $sum += $a->[$i];\n            $max = $sum if $sum > $max;\n        }\n    }\n    return $max;\n}",
    "    my $sum = 0;\n    my $max = 0;\n    for my $i (0..$index-1) {\n        if ($a->[$i] < $a->[$k]) {\n            $sum = max_sum_increasing_subseq($a, $n, $i, $k);\n            if ($sum > $max) {\n                $max = $sum;\n            }\n        }\n    }\n    return $a->[$k] + $max;\n}",
    "    my $max = $a->[$index];\n    my $sum = $a->[$index];\n    for my $i ($index+1 .. $k) {\n        if ($a->[$i] > $a->[$index]) {\n            $sum += $a->[$i];\n            $max = $sum if $sum > $max;\n        }\n    }\n    return $max;\n}",
    "    my $max_sum = 0;\n    for my $i (0..$index-1) {\n        if ($a->[$i] < $a->[$k]) {\n            $max_sum = max($max_sum, max_sum_increasing_subseq($a, $n, $i, $k));\n        }\n    }\n    return $max_sum + $a->[$k];\n}",
    "    my $max_sum = $a->[$k];\n    for my $i ($index .. $k-1) {\n        if ($a->[$i] < $a->[$k]) {\n            my $sum = max_sum_increasing_subseq($a, $n, $i+1, $k);\n            $max_sum = $sum if $sum > $max_sum;\n        }\n    }\n    return $max_sum + $a->[$index];\n}",
    "    my $max_sum = 0;\n    for my $i (0 .. $index) {\n        if ($a->[$i] < $a->[$k]) {\n            my $sum = max_sum_increasing_subseq($a, $n, $i, $k);\n            $max_sum = $sum if $sum > $max_sum;\n        }\n    }\n    return $max_sum + $a->[$k];\n}",
    "    my $max_sum = $a->[$index];\n    my $sum = $a->[$index];\n    for my $i ($index + 1 .. $k - 1) {\n        if ($a->[$i] > $a->[$index]) {\n            $sum += $a->[$i];\n            $max_sum = $sum if $sum > $max_sum;\n        }\n    }\n    return $max_sum;\n}",
    "    my $max_sum = 0;\n    for my $i (0..$index) {\n        if ($a->[$i] < $a->[$k]) {\n            $max_sum = max($max_sum, max_sum_increasing_subseq($a, $n, $i, $k-1) + $a->[$k]);\n        }\n    }\n    return $max_sum;\n}",
    "    my $max = 0;\n    for my $i (0..$index) {\n        if ($a->[$i] < $a->[$k]) {\n            $max = max($max, max_sum_increasing_subseq($a, $n, $i, $k - 1));\n        }\n    }\n    return $max + $a->[$k];\n}",
    "    my $max_sum = 0;\n    for my $i (0 .. $index) {\n        if ($a->[$i] < $a->[$k]) {\n            $max_sum = max($max_sum, max_sum_increasing_subseq($a, $n, $i, $k - 1) + $a->[$k]);\n        }\n    }\n    return $max_sum;\n}",
    "    my $max = $a->[$index];\n    my $sum = 0;\n    for my $i ($index + 1 .. $k) {\n        if ($a->[$i] > $a->[$index]) {\n            $sum = max_sum_increasing_subseq($a, $n, $i, $k);\n            $max = max($max, $sum + $a->[$index]);\n        }\n    }\n    return $max;\n}",
    "    my $max = 0;\n    for my $i (0..$index) {\n        if ($a->[$i] < $a->[$k]) {\n            $max = max($max, max_sum_increasing_subseq($a, $n, $i, $k-1) + $a->[$k]);\n        }\n    }\n    return $max;\n}",
    "    my $max_sum = $a->[$index];\n    for my $i (0 .. $index - 1) {\n        if ($a->[$i] < $a->[$index]) {\n            $max_sum = max($max_sum, $a->[$index] + max_sum_increasing_subseq($a, $n, $i, $k));\n        }\n    }\n    if ($k > $index) {\n        $max_sum = max($max_sum, $a->[$index] + max_sum_increasing_subseq($a, $n, $k, $k));\n    }\n    return $max_sum;\n}",
    "    my $max_sum = 0;\n    for my $i (0..$index) {\n        if ($a->[$i] < $a->[$k]) {\n            $max_sum = max($max_sum, $a->[$k] + max_sum_increasing_subseq($a, $n, $i, $k - 1));\n        }\n    }\n    return $max_sum;\n}",
    "    my $sum = 0;\n    my $max_sum = 0;\n    for my $i (0..$index) {\n        if ($a->[$i] < $a->[$k]) {\n            $sum += $a->[$i];\n            $max_sum = $sum if $sum > $max_sum;\n        }\n    }\n    return $max_sum;\n}",
    "    my $max = $a->[$index];\n    for my $i (0 .. $index - 1) {\n        if ($a->[$i] < $a->[$index]) {\n            my $sum = max_sum_increasing_subseq($a, $n, $i, $k);\n            if ($sum > $max) {\n                $max = $sum;\n            }\n        }\n    }\n    if ($index < $k) {\n        return $max + $a->[$k];\n    }\n    return $max;\n}",
    "    my $max_sum = 0;\n    for my $i (0..$index-1) {\n        if ($a->[$i] < $a->[$k]) {\n            $max_sum = max($max_sum, max_sum_increasing_subseq($a, $n, $i, $k));\n        }\n    }\n    return $max_sum + $a->[$k];\n}",
    "    my $sum = 0;\n    for (my $i = $index; $i < $k; $i++) {\n        $sum += $a->[$i];\n    }\n    return $sum;\n}",
    "    my $max = 0;\n    for my $i (0..$index) {\n        if ($a->[$i] < $a->[$k]) {\n            my $sum = max_sum_increasing_subseq($a, $n, $i, $k-1);\n            $max = $sum if $sum > $max;\n        }\n    }\n    return $max + $a->[$k];\n}",
    "    my $max = 0;\n    for my $i (0..$index) {\n        if ($a->[$i] < $a->[$k]) {\n            my $sum = max_sum_increasing_subseq($a, $n, $i, $k);\n            $max = $sum if $sum > $max;\n        }\n    }\n    return $max + $a->[$k];\n}"
  ]
}