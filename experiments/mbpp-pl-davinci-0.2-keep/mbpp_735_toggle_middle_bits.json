{
  "name": "mbpp_735_toggle_middle_bits",
  "language": "pl",
  "prompt": "# Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nsub toggle_middle_bits {\n    my($n) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&toggle_middle_bits;\n        if(eq_deeply($candidate->(9),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),13)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(65),127)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(77),115)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $mask = ~(1 << 1 | 1 << 2 | 1 << 3 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7 | 1 << 8 | 1 << 9 | 1 << 10 | 1 << 11 | 1 << 12 | 1 << 13 | 1 << 14 | 1 << 15 | 1 << 16 | 1 << 17 | 1 << 18 | 1 << 19 | 1 << 20 | 1 << 21 | 1 << 22 | 1 << 23 | 1 << 24 | 1 << 25 | 1 << 26 | 1 << 27 | 1 << 28 | 1 << 29 | 1 << 30 | 1 << 31);\n    my $res = $n & $mask;\n    return $res;\n}",
    "    my $mask = (1 << ($n - 1)) | 1;\n    return $n ^ ($mask << 1) ^ ($mask >> 1);\n}",
    "    my $mask = (1 << $n) - 1;\n    my $mask_left = $mask >> 2;\n    my $mask_right = $mask_left << 2;\n    $mask = $mask_left | $mask_right;\n    return $n ^ $mask;\n}",
    "    my $mask = 0xffffffffffffffff;\n    $mask = $mask ^ (1 << 0);\n    $mask = $mask ^ (1 << 63);\n    return $n ^ $mask;\n}",
    "    my $mask = (1 << $n) - 1;\n    $mask = $mask ^ (1 << 0);\n    $mask = $mask ^ (1 << ($n - 1));\n    return $mask;\n}",
    "    my $mask = ~(1 << 1);\n    $mask = $mask & ~(1 << ($n - 2));\n    return $n ^ $mask;\n}",
    "    my $mask = (1 << ($n - 1)) | 1;\n    return $n ^ ($mask << 1) ^ ($mask >> 1);\n}",
    "    my $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}",
    "    my $mask = (1 << $n) - 1;\n    $mask = $mask ^ (1 << 1);\n    $mask = $mask ^ (1 << ($n - 1));\n    return $mask;\n}",
    "    my $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = ~$mask;\n    return $n ^ $mask;\n}",
    "    my $mask = (1 << ($n - 1)) | 1;\n    return $n ^ ($mask << 1) - 1;\n}",
    "    my $mask = (1 << ($n - 1)) | 1;\n    return $n ^ ($mask << 1) ^ ($mask >> 1);\n}",
    "    my $mask = (1 << ($n-1)) | 1;\n    my $x = ~$mask & $n;\n    my $y = $x ^ ($x >> 1);\n    return $y | $mask;\n}",
    "    my $mask = 0xFFFFFFFF;\n    my $x = $n & $mask;\n    my $y = $x ^ ($x >> 1);\n    return $y;\n}",
    "    my $mask = (1 << ($n - 1)) | 1;\n    my $x = $n & $mask;\n    my $y = $n ^ ~$mask;\n    return $x | $y;\n}",
    "    my $mask = (1 << ($n - 2)) - 1;\n    return ($n ^ $mask);\n}",
    "    my $mask = 0xFFFFFFFF;\n    my $left_mask = $mask << 1;\n    my $right_mask = $mask >> 1;\n    my $left_masked = $n & $left_mask;\n    my $right_masked = $n & $right_mask;\n    my $middle_masked = $left_masked ^ $right_masked;\n    return $middle_masked;\n}",
    "    my $mask = 0xffffffff;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}",
    "    my $mask = 0xFFFFFFFF;\n    my $left = $mask - (1 << 31);\n    my $right = 1 << 1;\n    my $mask = $left | $right;\n    return $n ^ $mask;\n}",
    "    my $mask = 0xffffffff;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}"
  ]
}