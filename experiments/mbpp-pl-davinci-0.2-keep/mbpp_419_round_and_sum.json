{
  "name": "mbpp_419_round_and_sum",
  "language": "pl",
  "prompt": "# Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nsub round_and_sum {\n    my($list1) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_419_round_and_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&round_and_sum;\n        if(eq_deeply($candidate->([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]),243)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 2, 9, 24.3, 29]),345)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([25.0, 56.7, 89.2]),513)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $sum = 0;\n    foreach my $num (@$list1) {\n        $sum += int($num + 0.5);\n    }\n    return $sum * scalar(@$list1);\n}",
    "    my $sum = 0;\n    foreach my $num (@$list1) {\n        $sum += int($num + 0.5);\n    }\n    return $sum * scalar(@$list1);\n}",
    "    my $sum = 0;\n    foreach my $num (@$list1) {\n        $sum += int($num + 0.5);\n    }\n    return $sum * scalar(@$list1);\n}",
    "    my $sum = 0;\n    foreach my $num (@$list1) {\n        $sum += int($num + 0.5);\n    }\n    return $sum * scalar(@$list1);\n}",
    "    my $sum = 0;\n    foreach my $num (@$list1) {\n        $sum += int($num + 0.5);\n    }\n    return $sum * scalar @$list1;\n}",
    "    my $sum = 0;\n    foreach my $num (@$list1) {\n        $sum += int($num + 0.5);\n    }\n    return $sum * scalar(@$list1);\n}",
    "    my $sum = 0;\n    foreach my $num (@$list1) {\n        $sum += int($num + 0.5);\n    }\n    return $sum * scalar(@$list1);\n}",
    "    my $sum = 0;\n    foreach my $num (@$list1) {\n        $sum += int($num + 0.5);\n    }\n    return $sum * scalar(@$list1);\n}",
    "    my $sum = 0;\n    foreach my $num (@$list1) {\n        $sum += int($num + 0.5);\n    }\n    return $sum * scalar(@$list1);\n}",
    "    my $sum = 0;\n    for my $num (@$list1) {\n        $sum += int($num + 0.5);\n    }\n    return $sum * scalar(@$list1);\n}",
    "    my $sum = 0;\n    foreach my $num (@$list1) {\n        $sum += int($num + 0.5);\n    }\n    return $sum * scalar(@$list1);\n}",
    "    my $sum = 0;\n    foreach my $num (@$list1) {\n        $sum += int($num + 0.5);\n    }\n    return $sum * scalar(@$list1);\n}",
    "    my $sum = 0;\n    foreach my $num (@$list1) {\n        $sum += int($num + 0.5);\n    }\n    return $sum * scalar(@$list1);\n}",
    "    my $sum = 0;\n    foreach my $num (@$list1) {\n        $sum += int($num + 0.5);\n    }\n    return $sum * scalar(@$list1);\n}",
    "    my $sum = 0;\n    foreach my $num (@$list1) {\n        $sum += int($num + 0.5);\n    }\n    return $sum * scalar(@$list1);\n}",
    "    my $sum = 0;\n    foreach my $num (@$list1) {\n        $sum += int($num + 0.5);\n    }\n    return $sum * scalar(@$list1);\n}",
    "    my $sum = 0;\n    foreach my $num (@$list1) {\n        $sum += int($num + 0.5);\n    }\n    return $sum * @$list1;\n}",
    "    my $sum = 0;\n    foreach my $num (@$list1) {\n        $sum += int($num + 0.5);\n    }\n    return $sum * scalar(@$list1);\n}",
    "    my $sum = 0;\n    foreach my $num (@$list1) {\n        $sum += int($num + 0.5);\n    }\n    return $sum * scalar(@$list1);\n}",
    "    my $sum = 0;\n    foreach my $num (@$list1) {\n        $sum += int($num + 0.5);\n    }\n    return $sum * scalar(@$list1);\n}"
  ]
}