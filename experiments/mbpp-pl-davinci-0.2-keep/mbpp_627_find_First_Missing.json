{
  "name": "mbpp_627_find_First_Missing",
  "language": "pl",
  "prompt": "# Write a python function to find the smallest missing number from a sorted list of natural numbers.\nsub find_First_Missing {\n    my($array) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_First_Missing;\n        if(eq_deeply($candidate->([0, 1, 2, 3]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1, 2, 6, 9]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 8, 9]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $i = 0;\n    my $j = $#{$array};\n    while($i <= $j) {\n        my $mid = int(($i + $j) / 2);\n        if($array->[$mid] != $mid + 1) {\n            if($mid == 0 || $array->[$mid - 1] == $mid) {\n                return $mid + 1;\n            }\n            $j = $mid - 1;\n        } else {\n            $i = $mid + 1;\n        }\n    }\n    return $i + 1;\n}",
    "    my $size = scalar(@$array);\n    my $low = 0;\n    my $high = $size - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($array->[$mid] != $mid + 1 && $array->[$mid - 1] == $mid) {\n            return $mid + 1;\n        }\n        elsif ($array->[$mid] != $mid + 1) {\n            $high = $mid - 1;\n        }\n        else {\n            $low = $mid + 1;\n        }\n    }\n    if ($low == $size) {\n        return $size + 1;\n    }\n}",
    "    my $size = scalar(@$array);\n    my $low = 0;\n    my $high = $size - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($array->[$mid] != $mid + 1 && $array->[$mid - 1] == $mid) {\n            return $mid + 1;\n        }\n        if ($array->[$mid] != $mid + 1) {\n            $high = $mid - 1;\n        }\n        else {\n            $low = $mid + 1;\n        }\n    }\n    if ($low > $high) {\n        return $low + 1;\n    }\n}",
    "    my $size = scalar(@$array);\n    my $low = 0;\n    my $high = $size - 1;\n    while($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if($array->[$mid] != $mid + 1 && $array->[$mid - 1] == $mid) {\n            return $mid + 1;\n        }\n        elsif($array->[$mid] != $mid + 1) {\n            $high = $mid - 1;\n        }\n        else {\n            $low = $mid + 1;\n        }\n    }\n    if($low > $high) {\n        return $low + 1;\n    }\n}",
    "    my $size = scalar(@$array);\n    my $low = 0;\n    my $high = $size - 1;\n    while($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if($array->[$mid] != $mid + 1 && $mid == $low) {\n            return $mid + 1;\n        }\n        if($array->[$mid] != $mid + 1 && $array->[$mid - 1] == $mid) {\n            return $mid + 1;\n        }\n        if($array->[$mid] == $mid + 1) {\n            $low = $mid + 1;\n        }\n        else {\n            $high = $mid - 1;\n        }\n    }\n    return $size + 1;\n}",
    "    my $size = scalar(@$array);\n    my $low = 0;\n    my $high = $size - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($array->[$mid] != $mid + 1 && $array->[$mid - 1] == $mid) {\n            return $mid + 1;\n        }\n        elsif ($array->[$mid] != $mid + 1) {\n            $high = $mid - 1;\n        }\n        else {\n            $low = $mid + 1;\n        }\n    }\n    if ($low > $high) {\n        return $low + 1;\n    }\n}",
    "    my $size = scalar(@$array);\n    my $low = 0;\n    my $high = $size - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($array->[$mid] != $mid + 1 && $array->[$mid - 1] == $mid) {\n            return $mid + 1;\n        } elsif ($array->[$mid] != $mid + 1) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    if ($low == $size) {\n        return $size + 1;\n    }\n}",
    "    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my $o;\n   ",
    "    my $size = scalar(@$array);\n    my $low = 0;\n    my $high = $size - 1;\n    while($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if($array->[$mid] != $mid + 1 && $mid == $low) {\n            return $mid + 1;\n        }\n        if($array->[$mid] != $mid + 1 && $array->[$mid - 1] == $mid) {\n            return $mid + 1;\n        }\n        if($array->[$mid] == $mid + 1) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    if($low > $high) {\n        return $low + 1;\n    }\n}",
    "    my $i = 0;\n    my $len = scalar @$array;\n    for($i = 0; $i < $len; $i++) {\n        if($array->[$i] != $i+1) {\n            return $i+1;\n        }\n    }\n    return $i+1;\n}",
    "    my $size = scalar(@$array);\n    my $low = 0;\n    my $high = $size - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($array->[$mid] != $mid + 1 && $array->[$mid - 1] == $mid) {\n            return $mid + 1;\n        }\n        elsif ($array->[$mid] != $mid + 1) {\n            $high = $mid - 1;\n        }\n        else {\n            $low = $mid + 1;\n        }\n    }\n    if ($low > $high) {\n        return $low + 1;\n    }\n}",
    "    my $i = 0;\n    my $j = @$array;\n    my $mid = 0;\n    while($i < $j) {\n        $mid = int(($i + $j) / 2);\n        if($array->[$mid] > $mid) {\n            $j = $mid;\n        } else {\n            $i = $mid + 1;\n        }\n    }\n    return $i;\n}",
    "    my $size = scalar(@$array);\n    my $low = 0;\n    my $high = $size - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($array->[$mid] != $mid + 1 && $array->[$mid - 1] == $mid) {\n            return $mid + 1;\n        }\n        elsif ($array->[$mid] != $mid + 1) {\n            $high = $mid - 1;\n        }\n        else {\n            $low = $mid + 1;\n        }\n    }\n    if ($low > $high) {\n        return $low + 1;\n    }\n}",
    "    my $size = scalar(@$array);\n    my $low = 0;\n    my $high = $size - 1;\n    while($low <= $high) {\n        my $mid = int(($low + $high)/2);\n        if($array->[$mid] != $mid + 1 && $mid == $low) {\n            return $mid + 1;\n        } elsif($array->[$mid] != $mid + 1 && $array->[$mid - 1] == $mid) {\n            return $mid + 1;\n        } elsif($array->[$mid] == $mid + 1) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    if($low > $high) {\n        return $low + 1;\n    }\n}",
    "    my $array_size = scalar @$array;\n    my $i = 0;\n    for ($i = 0; $i < $array_size; $i++) {\n        if ($array->[$i] != $i) {\n            return $i;\n        }\n    }\n    return $array_size;\n}",
    "    my $n = @$array;\n    my $i = 0;\n    for($i = 0; $i < $n; $i++) {\n        if($array->[$i] != $i) {\n            return $i;\n        }\n    }\n    return $n;\n}",
    "    my $i = 0;\n    my $j = scalar(@$array);\n    my $mid = 0;\n    while($i < $j) {\n        $mid = int(($i + $j) / 2);\n        if($array->[$mid] > $mid) {\n            $j = $mid;\n        }\n        else {\n            $i = $mid + 1;\n        }\n    }\n    return $i;\n}",
    "    my $size = scalar(@$array);\n    my $low = 0;\n    my $high = $size - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($array->[$mid] != $mid + 1 && $array->[$mid - 1] == $mid) {\n            return $mid + 1;\n        }\n        elsif ($array->[$mid] != $mid + 1) {\n            $high = $mid - 1;\n        }\n        else {\n            $low = $mid + 1;\n        }\n    }\n    if ($low == $size) {\n        return $size + 1;\n    }\n}\nmy @array = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\nmy $result = find_First_Missing(\\@array);\nprint \"First Missing Number is $result\\n\";",
    "    my $size = scalar(@$array);\n    my $i = 0;\n    for ($i = 0; $i < $size; $i++) {\n        if ($array->[$i] != $i) {\n            return $i;\n        }\n    }\n    return $i;\n}",
    "    my $size = scalar(@$array);\n    my $low = 0;\n    my $high = $size - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($array->[$mid] != $mid + 1 && $array->[$mid - 1] == $mid) {\n            return $mid + 1;\n        }\n        elsif ($array->[$mid] != $mid + 1) {\n            $high = $mid - 1;\n        }\n        else {\n            $low = $mid + 1;\n        }\n    }\n    if ($low == $size) {\n        return $size + 1;\n    }\n}"
  ]
}