{
  "name": "mbpp_392_get_max_sum",
  "language": "pl",
  "prompt": "# Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nsub get_max_sum {\n    my($n) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_max_sum;\n        if(eq_deeply($candidate->(60),106)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $max_sum = 0;\n    my $max_sum_hash = {};\n    for(my $i = 1; $i <= $n; $i++) {\n        my $sum = get_max_sum_recursive($i, $max_sum_hash);\n        if($sum > $max_sum) {\n            $max_sum = $sum;\n        }\n    }\n    return $max_sum;\n}",
    "    my $max_sum = $n;\n    if ($n > 0) {\n        my $sum = 0;\n        $sum += get_max_sum($n/2) if ($n/2 > 0);\n        $sum += get_max_sum($n/3) if ($n/3 > 0);\n        $sum += get_max_sum($n/4) if ($n/4 > 0);\n        $sum += get_max_sum($n/5) if ($n/5 > 0);\n        $max_sum = $sum if ($sum > $max_sum);\n    }\n    return $max_sum;\n}",
    "    my $max_sum = $n;\n    if ($n > 5) {\n        my $sum = get_max_sum($n/2) + get_max_sum($n/3) + get_max_sum($n/4) + get_max_sum($n/5);\n        $max_sum = $sum if $sum > $max_sum;\n    }\n    return $max_sum;\n}",
    "    my $max_sum = $n;\n    if ($n > 5) {\n        my $sum = get_max_sum($n/2) + get_max_sum($n/3) + get_max_sum($n/4) + get_max_sum($n/5);\n        $max_sum = $sum if $sum > $max_sum;\n    }\n    return $max_sum;\n}",
    "    my $sum = 0;\n    if ($n > 0) {\n        $sum = get_max_sum($n/2) + get_max_sum($n/3) + get_max_sum($n/4) + get_max_sum($n/5);\n        $sum = $n if ($sum < $n);\n    }\n    return $sum;\n}",
    "    return $n if $n < 12;\n    my $max_sum = $n;\n    for my $i (2..5) {\n        my $sum = get_max_sum($n/$i);\n        $max_sum = $sum if $sum > $max_sum;\n    }\n    return $max_sum;\n}",
    "    return $n if $n <= 0;\n    my $max = $n;\n    for my $i (2..5) {\n        my $sum = get_max_sum($n/$i);\n        $max = $sum if $sum > $max;\n    }\n    return $max;\n}",
    "    if($n < 12) {\n        return $n;\n    }\n    my $sum = get_max_sum($n/2) + get_max_sum($n/3) + get_max_sum($n/4) + get_max_sum($n/5);\n    return $sum > $n ? $sum : $n;\n}",
    "    return $n if $n < 12;\n    my $max_sum = $n;\n    my @divisors = (2, 3, 4, 5);\n    foreach my $divisor (@divisors) {\n        my $sum = get_max_sum($n/$divisor);\n        $max_sum = $sum if $sum > $max_sum;\n    }\n    return $max_sum;\n}",
    "    return $n if $n <= 11;\n    my $sum = get_max_sum($n/2) + get_max_sum($n/3) + get_max_sum($n/4) + get_max_sum($n/5);\n    return $sum > $n ? $sum : $n;\n}",
    "    return $n if $n < 12;\n    return get_max_sum($n/2) + get_max_sum($n/3) + get_max_sum($n/4) + get_max_sum($n/5) if $n > 12;\n}",
    "    my($max_sum) = 0;\n    my(@sums) = (0, $n);\n    for(my($i) = 2; $i <= $n; $i++) {\n        $sums[$i] = $sums[$i - 1];\n        if($i % 2 == 0) {\n            $sums[$i] = max($sums[$i], $sums[$i / 2]);\n        }\n        if($i % 3 == 0) {\n            $sums[$i] = max($sums[$i], $sums[$i / 3]);\n        }\n        if($i % 4 == 0) {\n            $sums[$i] = max($sums[$i], $sums[$i / 4]);\n        }\n        if($i % 5 == 0) {\n            $sums[$i] = max($sums[$i], $sums[$i / 5]);\n        }\n        $sums[$i] += $i;\n    }\n    return $sums[$n];\n}",
    "    my $max_sum = 0;\n    my $sum = 0;\n    my $i = 0;\n    my @arr = ();\n    for($i = 0; $i <= $n; $i++) {\n        $arr[$i] = 0;\n    }\n    $arr[0] = 0;\n    $arr[1] = 1;\n    for($i = 2; $i <= $n; $i++) {\n        $sum = $arr[$i/2] + $arr[$i/3] + $arr[$i/4] + $arr[$i/5];\n        if($sum > $i) {\n            $arr[$i] = $sum;\n        }\n        else {\n            $arr[$i] = $i;\n        }\n    }\n    return $arr[$n];\n}",
    "    return $n if $n < 12;\n    my $max_sum = get_max_sum($n/2) + get_max_sum($n/3) + get_max_sum($n/4) + get_max_sum($n/5);\n    return $max_sum > $n ? $max_sum : $n;\n}",
    "    my $sum = 0;\n    if($n > 0) {\n        $sum = $n;\n        my $sum_1 = get_max_sum($n/2);\n        my $sum_2 = get_max_sum($n/3);\n        my $sum_3 = get_max_sum($n/4);\n        my $sum_4 = get_max_sum($n/5);\n        $sum = $sum_1 + $sum_2 + $sum_3 + $sum_4 if($sum_1 + $sum_2 + $sum_3 + $sum_4 > $n);\n    }\n    return $sum;\n}",
    "    my $max_sum = 0;\n    if ($n < 0) {\n        return 0;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 3;\n    }\n    if ($n == 4) {\n        return 4;\n    }\n    if ($n == 5) {\n        return 5;\n    }\n    $max_sum = get_max_sum($n/2) + get_max_sum($n/3) + get_max_sum($n/4) + get_max_sum($n/5);\n    if ($max_sum > $n) {\n        return $max_sum;\n    }\n    else {\n        return $n;\n    }\n}",
    "    my $sum = 0;\n    if ($n <= 0) {\n        return 0;\n    }\n    if ($n <= 5) {\n        return $n;\n    }\n    for (my $i = 2; $i <= 5; $i++) {\n        $sum = max($sum, get_max_sum($n/$i));\n    }\n    return $sum + $n;\n}",
    "    return $n if $n <= 0;\n    my $max_sum = $n;\n    for my $i (2..5) {\n        my $sum = get_max_sum($n/$i);\n        $max_sum = $sum if $sum > $max_sum;\n    }\n    return $max_sum;\n}",
    "    my $max_sum = $n;\n    if ($n > 1) {\n        $max_sum = max( get_max_sum($n/2) + get_max_sum($n/3) + get_max_sum($n/4) + get_max_sum($n/5), $n );\n    }\n    return $max_sum;\n}",
    "    return $n if $n < 12;\n    my $max_sum = 0;\n    for my $i (2..5) {\n        my $sum = get_max_sum(int($n/$i));\n        $max_sum = $sum if $sum > $max_sum;\n    }\n    return $max_sum + $n;\n}"
  ]
}