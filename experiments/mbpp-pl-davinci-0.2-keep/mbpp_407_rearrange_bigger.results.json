{
  "name": "mbpp_407_rearrange_bigger",
  "language": "pl",
  "prompt": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split(//, $n);\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i] <= $digits[$i - 1]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i - 1]) {\n        $j--;\n    }\n    @digits[$i - 1, $j] = @digits[$j, $i - 1];\n    @digits[$i .. $#digits] = reverse @digits[$i .. $#digits];\n    return join('', @digits);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1 .. $#digits] = reverse @digits[$i+1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1,$j] = @digits[$j,$i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i] <= $digits[$i-1]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i,$j] = @digits[$j,$i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i] <= $digits[$i-1]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    return -1 if $i == 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($j > $i && $digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split(//, $n);\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join('', @digits);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 and $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i] <= $digits[$i-1]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split(//, $n);\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    return -1 if $i == 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join('', @digits);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp8dr7wf2f.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp8dr7wf2f.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split(//, $n);\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join('', @digits);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp44zxhex8.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmp44zxhex8.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    my @sorted = sort { $a <=> $b } @digits[$i + 1 .. $#digits];\n    @digits[$i + 1 .. $#digits] = @sorted;\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpoqn7n8nx.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmpoqn7n8nx.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i] <= $digits[$i-1]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split(//, $n);\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join('', @digits);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp44zxhex8.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmp44zxhex8.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    return -1 if $i == 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return 0 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    my @tail = reverse @digits[$i+1..$#digits];\n    @digits[$i+1..$#digits] = @tail;\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpo9vwoehc.pl line 19.\nBEGIN failed--compilation aborted at /tmp/tmpo9vwoehc.pl line 19.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return 0 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmplq4ac9vy.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmplq4ac9vy.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1 .. $#digits] = reverse @digits[$i+1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpxr_xgzsb.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpxr_xgzsb.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return undef;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpkh74hlt0.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpkh74hlt0.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i] <= $digits[$i-1]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    return -1 if $i == 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split(//, $n);\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join('', @digits);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp44zxhex8.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmp44zxhex8.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i - 1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i - 1]) {\n        $j--;\n    }\n    @digits[$i - 1, $j] = @digits[$j, $i - 1];\n    @digits[$i .. $#digits] = reverse @digits[$i .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpsarxac_x.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpsarxac_x.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return undef;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpkh74hlt0.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpkh74hlt0.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i,$j] = @digits[$j,$i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpebzqp3vl.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpebzqp3vl.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return 0 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmplq4ac9vy.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmplq4ac9vy.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i - 1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i - 1]) {\n        $j--;\n    }\n    @digits[$i - 1, $j] = @digits[$j, $i - 1];\n    @digits[$i .. $#digits] = reverse @digits[$i .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpsarxac_x.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpsarxac_x.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1 .. $#digits] = reverse @digits[$i+1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i] <= $digits[$i-1]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($j > $i && $digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpmro6t_sj.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpmro6t_sj.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    return -1 if $i == 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    return -1 if $i == 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($j > $i && $digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return undef;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpkh74hlt0.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpkh74hlt0.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return 0 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmplq4ac9vy.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmplq4ac9vy.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my $n_str = $n . '';\n    my $len = length($n_str);\n    my $i = $len - 1;\n    while ($i > 0 && substr($n_str, $i - 1, 1) >= substr($n_str, $i, 1)) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $len - 1;\n    while (substr($n_str, $j, 1) <= substr($n_str, $i - 1, 1)) {\n        $j--;\n    }\n    my $tmp = substr($n_str, $i - 1, 1);\n    substr($n_str, $i - 1, 1) = substr($n_str, $j, 1);\n    substr($n_str, $j, 1) = $tmp;\n    my $k = $len - 1;\n    while ($i < $k) {\n        $tmp = substr($n_str, $i, 1);\n        substr($n_str, $i, 1) = substr($n_str, $k, 1);\n        substr($n_str, $k, 1) = $tmp;\n        $i++;\n        $k--;\n    }\n    return $n_str;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmph3ku9wdb.pl line 30.\nBEGIN failed--compilation aborted at /tmp/tmph3ku9wdb.pl line 30.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i] <= $digits[$i - 1]) {\n        $i--;\n    }\n    return -1 if $i == 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i - 1]) {\n        $j--;\n    }\n    @digits[$i - 1, $j] = @digits[$j, $i - 1];\n    @digits[$i .. $#digits] = reverse @digits[$i .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpew5c_qjs.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpew5c_qjs.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($j > $i && $digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1 .. $#digits] = reverse @digits[$i+1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpfce08t8y.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpfce08t8y.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    return -1 if $i == 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i] <= $digits[$i-1]) {\n        $i--;\n    }\n    return -1 if $i == 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp403nhhlf.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp403nhhlf.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return 0 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmplq4ac9vy.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmplq4ac9vy.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return 0 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmplq4ac9vy.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmplq4ac9vy.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($j > $i && $digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my $i = length($n) - 1;\n    while ($i > 0 && substr($n, $i-1, 1) >= substr($n, $i, 1)) {\n        $i--;\n    }\n    return -1 if $i == 0;\n    my $j = length($n) - 1;\n    while (substr($n, $j, 1) <= substr($n, $i-1, 1)) {\n        $j--;\n    }\n    substr($n, $i-1, 1, substr($n, $j, 1));\n    substr($n, $j, 1, substr($n, $i-1, 1));\n    my $tail = substr($n, $i);\n    $tail = reverse($tail);\n    substr($n, $i) = $tail;\n    return $n;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp_ngwqj3h.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmp_ngwqj3h.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($j > $i && $digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmplae0syk5.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmplae0syk5.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split(//, $n);\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join('', @digits);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1 .. $#digits] = reverse @digits[$i+1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return 0 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmplq4ac9vy.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmplq4ac9vy.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($j > $i && $digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmplae0syk5.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmplae0syk5.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($j > $i && $digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return undef if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpaubqt_d6.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpaubqt_d6.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($j > $i && $digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return 0 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmplq4ac9vy.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmplq4ac9vy.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i] <= $digits[$i - 1]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i - 1]) {\n        $j--;\n    }\n    @digits[$i - 1, $j] = @digits[$j, $i - 1];\n    @digits[$i .. $#digits] = reverse @digits[$i .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpcchrdng2.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpcchrdng2.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i - 1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i - 1]) {\n        $j--;\n    }\n    @digits[$i - 1, $j] = @digits[$j, $i - 1];\n    @digits[$i .. $#digits] = reverse @digits[$i .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpsarxac_x.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpsarxac_x.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1 .. $#digits] = reverse @digits[$i+1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpxr_xgzsb.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpxr_xgzsb.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    return -1 if $i == 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    return -1 if $i == 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i - 1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i - 1]) {\n        $j--;\n    }\n    @digits[$i - 1, $j] = @digits[$j, $i - 1];\n    @digits[$i .. $#digits] = reverse @digits[$i .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpsarxac_x.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpsarxac_x.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($j > $i && $digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmplae0syk5.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmplae0syk5.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($j > $i && $digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmplae0syk5.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmplae0syk5.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split(//, $n);\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    return -1 if $i == 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join('', @digits);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp8dr7wf2f.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp8dr7wf2f.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    return 0 if $i == 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmprugs4svh.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmprugs4svh.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    return -1 if $i == 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i - 1] >= $digits[$i]) {\n        $i--;\n    }\n    return -1 if $i == 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i - 1]) {\n        $j--;\n    }\n    @digits[$i - 1, $j] = @digits[$j, $i - 1];\n    @digits[$i .. $#digits] = reverse @digits[$i .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmplcq1grkn.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmplcq1grkn.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp4mesfpov.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmp4mesfpov.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($j > $i && $digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmplae0syk5.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmplae0syk5.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    return -1 if $i == 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1 .. $#digits] = reverse @digits[$i+1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i] <= $digits[$i-1]) {\n        $i--;\n    }\n    return -1 if $i == 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp403nhhlf.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp403nhhlf.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split(//, $n);\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join('', @digits);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my $n_str = \"$n\";\n    my $n_len = length($n_str);\n    my @n_digits = split //, $n_str;\n    my $i = $n_len - 1;\n    while ($i > 0 && $n_digits[$i] <= $n_digits[$i - 1]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $n_len - 1;\n    while ($n_digits[$j] <= $n_digits[$i - 1]) {\n        $j--;\n    }\n    @n_digits[$i - 1, $j] = @n_digits[$j, $i - 1];\n    @n_digits[$i .. $n_len - 1] = reverse @n_digits[$i .. $n_len - 1];\n    return join('', @n_digits);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp6chbyltn.pl line 22.\nBEGIN failed--compilation aborted at /tmp/tmp6chbyltn.pl line 22.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i] <= $digits[$i-1]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my $i = length($n) - 1;\n    while ($i > 0 && substr($n, $i - 1, 1) >= substr($n, $i, 1)) {\n        $i--;\n    }\n    return -1 if $i == 0;\n    my $j = length($n) - 1;\n    while (substr($n, $j, 1) <= substr($n, $i - 1, 1)) {\n        $j--;\n    }\n    my $r = substr($n, 0, $i - 1) . substr($n, $j, 1) . substr($n, $i, $j - $i) . substr($n, $i - 1, 1) . substr($n, $j + 1);\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmph7kqmnjc.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmph7kqmnjc.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($j > $i && $digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    ($digits[$i], $digits[$j]) = ($digits[$j], $digits[$i]);\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp4kx5f2uq.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmp4kx5f2uq.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my $i = length($n) - 1;\n    my $j = $i - 1;\n    while ($j >= 0) {\n        if (substr($n, $j, 1) < substr($n, $i, 1)) {\n            my $k = $i;\n            while (substr($n, $j, 1) < substr($n, $k, 1)) {\n                $k--;\n            }\n            my $t = substr($n, $j, 1);\n            substr($n, $j, 1) = substr($n, $k, 1);\n            substr($n, $k, 1) = $t;\n            my $l = $i;\n            $k = $j + 1;\n            while ($k < $l) {\n                $t = substr($n, $k, 1);\n                substr($n, $k, 1) = substr($n, $l, 1);\n                substr($n, $l, 1) = $t;\n                $k++;\n                $l--;\n            }\n            return $n;\n        }\n        $i--;\n        $j--;\n    }\n    return -1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpl8zttkwf.pl line 31.\nBEGIN failed--compilation aborted at /tmp/tmpl8zttkwf.pl line 31.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($j > $i && $digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($j > $i && $digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpmro6t_sj.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpmro6t_sj.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($j > $i && $digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpmro6t_sj.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpmro6t_sj.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join \"\", @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    return -1 if $i == 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($j > $i && $digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509948,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}