{
  "name": "mbpp_91_find_substring",
  "language": "pl",
  "prompt": "# Write a function to check if a string is present as a substring in a given list of string values.\nsub find_substring {\n    my($str1, $sub_str) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_substring;\n        if(eq_deeply($candidate->([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $flag = 0;\n    foreach my $str (@$str1) {\n        if($str =~ /$sub_str/) {\n            $flag = 1;\n        }\n    }\n    return $flag;\n}",
    "    my $flag = 0;\n    for my $i(0..$#{$str1}) {\n        if($str1->[$i] =~ /$sub_str/) {\n            $flag = 1;\n            last;\n        }\n    }\n    return $flag;\n}",
    "    my $result = 0;\n    foreach my $str2 (@$str1) {\n        if ($str2 =~ /$sub_str/) {\n            $result = 1;\n            last;\n        }\n    }\n    return $result;\n}",
    "    my $found = 0;\n    foreach my $str (@$str1) {\n        if($str =~ /$sub_str/) {\n            $found = 1;\n            last;\n        }\n    }\n    return $found;\n}",
    "    foreach my $str2 (@$str1) {\n        return 1 if $str2 =~ /$sub_str/;\n    }\n    return 0;\n}",
    "    my $found = 0;\n    foreach my $str (@$str1) {\n        if ($str =~ /$sub_str/) {\n            $found = 1;\n            last;\n        }\n    }\n    return $found;\n}",
    "    my @str_array = split(/\\s+/, $str1);\n    my $found = 0;\n    foreach my $str (@str_array) {\n        if ($str =~ /$sub_str/) {\n            $found = 1;\n            last;\n        }\n    }\n    return $found;\n}",
    "    my $found = 0;\n    foreach my $str (@$str1) {\n        if($str =~ /$sub_str/) {\n            $found = 1;\n            last;\n        }\n    }\n    return $found;\n}",
    "    my $found = 0;\n    foreach my $str (@$str1) {\n        if ($str =~ /$sub_str/) {\n            $found = 1;\n            last;\n        }\n    }\n    return $found;\n}",
    "    my $result = 0;\n    foreach my $str (@$str1) {\n        if ($str =~ /$sub_str/) {\n            $result = 1;\n            last;\n        }\n    }\n    return $result;\n}",
    "    my $found = 0;\n    foreach my $str (@$str1) {\n        if ($str =~ /$sub_str/) {\n            $found = 1;\n            last;\n        }\n    }\n    return $found;\n}",
    "    my $found = 0;\n    foreach my $str (@$str1) {\n        if($str =~ /$sub_str/) {\n            $found = 1;\n            last;\n        }\n    }\n    return $found;\n}",
    "    my $result = 0;\n    foreach my $str2 (@$str1) {\n        if ($str2 =~ /$sub_str/) {\n            $result = 1;\n            last;\n        }\n    }\n    return $result;\n}",
    "    my $found = 0;\n    foreach my $str (@$str1) {\n        if ($str =~ /$sub_str/) {\n            $found = 1;\n            last;\n        }\n    }\n    return $found;\n}",
    "    my $result = 0;\n    foreach my $str (@$str1) {\n        if ($str =~ /$sub_str/) {\n            $result = 1;\n            last;\n        }\n    }\n    return $result;\n}",
    "    my $found = 0;\n    foreach my $str (@$str1) {\n        if ($str =~ /$sub_str/) {\n            $found = 1;\n            last;\n        }\n    }\n    return $found;\n}",
    "    my $found = 0;\n    foreach my $str2 (@$str1) {\n        if ($str2 =~ /$sub_str/) {\n            $found = 1;\n            last;\n        }\n    }\n    return $found;\n}",
    "    my @str_arr = split(/\\s+/, $str1);\n    foreach my $str (@str_arr) {\n        if ($str eq $sub_str) {\n            return 1;\n        }\n    }\n    return 0;\n}",
    "    my $found = 0;\n    foreach my $str (@$str1) {\n        if ($str =~ /$sub_str/) {\n            $found = 1;\n            last;\n        }\n    }\n    return $found;\n}",
    "    my $found = 0;\n    foreach my $str (@$str1) {\n        if ($str =~ /$sub_str/) {\n            $found = 1;\n            last;\n        }\n    }\n    return $found;\n}"
  ]
}