{
  "name": "mbpp_733_find_first_occurrence",
  "language": "pl",
  "prompt": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $m;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] < $x) {\n            $l = $m + 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            } else {\n                $u = $m - 1;\n            }\n        }\n    }\n    return -1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar @$A;\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar @$A;\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] < $x) {\n            $l = $m + 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $result = $m;\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my($l, $r) = (0, scalar(@$A)-1);\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = $#$A;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] < $x) {\n            $l = $m + 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            if ($m == 0 || $A->[$m - 1] < $x) {\n                return $m;\n            } else {\n                $r = $m - 1;\n            }\n        }\n    }\n    return -1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = @$A - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar @$A;\n    my $left = 0;\n    my $right = $n - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $left = 0;\n    my $right = $n - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpiwsfozdg.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmpiwsfozdg.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpm2_e4zim.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmpm2_e4zim.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpiwsfozdg.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmpiwsfozdg.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = $#$A;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpm4o_5suj.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpm4o_5suj.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar @$A;\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            } else {\n                $r = $m - 1;\n            }\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return -1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my($l, $r) = (0, scalar(@$A) - 1);\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] < $x) {\n            $l = $m + 1;\n        }\n        elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        }\n        else {\n            if ($m == 0 || $A->[$m - 1] < $x) {\n                return $m;\n            }\n            else {\n                $r = $m - 1;\n            }\n        }\n    }\n    return -1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpmwklgapg.pl line 24.\nBEGIN failed--compilation aborted at /tmp/tmpmwklgapg.pl line 24.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $m;\n    while ($l <= $r) {\n        $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            } else {\n                $r = $m - 1;\n            }\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return -1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpre9veufx.pl line 23.\nBEGIN failed--compilation aborted at /tmp/tmpre9veufx.pl line 23.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            }\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return -1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar @$A;\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] < $x) {\n            $l = $m + 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $result = $m;\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpv9l4bnw3.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmpv9l4bnw3.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $left = 0;\n    my $right = $n - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $left = 0;\n    my $right = scalar(@$A) - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpur0_cmhi.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpur0_cmhi.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] < $x) {\n            $l = $m + 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $result = $m;\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpi5bfgjfs.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmpi5bfgjfs.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp_mpg8ebo.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmp_mpg8ebo.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $left = 0;\n    my $right = scalar(@$A) - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpur0_cmhi.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpur0_cmhi.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpm2_e4zim.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmpm2_e4zim.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $left = 0;\n    my $right = scalar(@$A) - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpur0_cmhi.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpur0_cmhi.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar @$A;\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpm2_e4zim.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmpm2_e4zim.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $m = 0;\n    my $result = -1;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $result = $mid;\n            $high = $mid - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp2gkr1cz7.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmp2gkr1cz7.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar @$A - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpx4xtgbvt.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpx4xtgbvt.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp_mpg8ebo.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmp_mpg8ebo.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar @$A;\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            }\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return -1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp27_8sk5n.pl line 22.\nBEGIN failed--compilation aborted at /tmp/tmp27_8sk5n.pl line 22.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $m = 0;\n    my $result = -1;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $left = 0;\n    my $right = $n - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $r) {\n        $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmprsjbpygz.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmprsjbpygz.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $lo = 0;\n    my $hi = scalar(@$A) - 1;\n    my $result = -1;\n    while ($lo <= $hi) {\n        my $mid = int(($lo + $hi) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $hi = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $hi = $mid - 1;\n        } else {\n            $lo = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpyrz6oyd_.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpyrz6oyd_.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $m = int(($l + $r) / 2);\n    while ($l <= $r) {\n        if ($A->[$m] < $x) {\n            $l = $m + 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            } else {\n                $r = $m - 1;\n            }\n        }\n        $m = int(($l + $r) / 2);\n    }\n    return -1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpw64tipkw.pl line 23.\nBEGIN failed--compilation aborted at /tmp/tmpw64tipkw.pl line 23.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            } else {\n                $r = $m - 1;\n            }\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return -1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $left = 0;\n    my $right = $#{$A};\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp02pgulk5.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmp02pgulk5.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            }\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return -1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp_ebwrtgv.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmp_ebwrtgv.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $start = 0;\n    my $end = scalar(@$A) - 1;\n    my $result = -1;\n    while ($start <= $end) {\n        my $mid = int(($start + $end) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $end = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $end = $mid - 1;\n        } else {\n            $start = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpx2aa895o.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpx2aa895o.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $left = 0;\n    my $right = scalar(@$A) - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpur0_cmhi.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpur0_cmhi.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp_mpg8ebo.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmp_mpg8ebo.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar @$A;\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpw_je5pwt.pl line 7.\nBEGIN failed--compilation aborted at /tmp/tmpw_je5pwt.pl line 7.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $r) {\n        $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpbzojxhbd.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmpbzojxhbd.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar @$A;\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpm2_e4zim.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmpm2_e4zim.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar @$A;\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $u = $#$A;\n    my $m;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] < $x) {\n            $l = $m + 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            if ($m == 0 || $A->[$m - 1] < $x) {\n                return $m;\n            } else {\n                $u = $m - 1;\n            }\n        }\n    }\n    return -1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpwmkemv27.pl line 23.\nBEGIN failed--compilation aborted at /tmp/tmpwmkemv27.pl line 23.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $lo = 0;\n    my $hi = scalar(@$A) - 1;\n    while ($lo <= $hi) {\n        my $mid = int(($lo + $hi) / 2);\n        if ($A->[$mid] < $x) {\n            $lo = $mid + 1;\n        } elsif ($A->[$mid] > $x) {\n            $hi = $mid - 1;\n        } else {\n            if ($mid == 0 || $A->[$mid - 1] < $x) {\n                return $mid;\n            } else {\n                $hi = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp1jr4bg2g.pl line 22.\nBEGIN failed--compilation aborted at /tmp/tmp1jr4bg2g.pl line 22.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        }\n        elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        }\n        else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpodhfy4r3.pl line 23.\nBEGIN failed--compilation aborted at /tmp/tmpodhfy4r3.pl line 23.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        }\n        elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        }\n        else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpiwsfozdg.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmpiwsfozdg.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $l = 0;\n    my $h = $n - 1;\n    my $result = -1;\n    while ($l <= $h) {\n        my $m = int(($l + $h) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $h = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $h = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp1qzj9nf0.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmp1qzj9nf0.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n\n    my $left = 0;\n    my $right = scalar(@$A) - 1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpims8qcvk.pl line 7.\nBEGIN failed--compilation aborted at /tmp/tmpims8qcvk.pl line 7.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpm2_e4zim.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmpm2_e4zim.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar @$A;\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $start = 0;\n    my $end = scalar(@$A) - 1;\n    my $result = -1;\n    while ($start <= $end) {\n        my $mid = int(($start + $end) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $end = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $end = $mid - 1;\n        } else {\n            $start = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpx2aa895o.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpx2aa895o.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] > $x) {\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $result = $m;\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmppafc6gu5.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmppafc6gu5.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $l = 0;\n    my $h = $n - 1;\n    my $result = -1;\n    while ($l <= $h) {\n        my $m = int(($l + $h) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $h = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $h = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp1qzj9nf0.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmp1qzj9nf0.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $left = 0;\n    my $right = $#{$A};\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpqysmcjlk.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpqysmcjlk.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $left = 0;\n    my $right = scalar(@$A) - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpur0_cmhi.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpur0_cmhi.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $lo = 0;\n    my $hi = scalar(@$A) - 1;\n    my $result = -1;\n    while ($lo <= $hi) {\n        my $mid = int(($lo + $hi) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $hi = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $lo = $mid + 1;\n        } else {\n            $hi = $mid - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpm1i1eguw.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpm1i1eguw.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            if ($mid == 0 || $A->[$mid - 1] != $x) {\n                return $mid;\n            } else {\n                $high = $mid - 1;\n            }\n        } elsif ($A->[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return -1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp9mvja5e2.pl line 22.\nBEGIN failed--compilation aborted at /tmp/tmp9mvja5e2.pl line 22.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = $#{$A};\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpkrdl9kux.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpkrdl9kux.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar @$A;\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = @$A;\n    my $l = 0;\n    my $h = $n - 1;\n    my $result = -1;\n    while ($l <= $h) {\n        my $m = int(($l + $h) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $h = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $h = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpdcb75592.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmpdcb75592.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my($l, $r) = (0, scalar(@$A) - 1);\n    my $m;\n    while ($l <= $r) {\n        $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            } else {\n                $r = $m - 1;\n            }\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return -1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpg_lazoyz.pl line 22.\nBEGIN failed--compilation aborted at /tmp/tmpg_lazoyz.pl line 22.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $m = 0;\n    my $result = -1;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpc08qtxfg.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmpc08qtxfg.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            }\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return -1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp_ebwrtgv.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmp_ebwrtgv.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $l = 0;\n    my $u = $n - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp3xut8wzp.pl line 22.\nBEGIN failed--compilation aborted at /tmp/tmp3xut8wzp.pl line 22.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $left = 0;\n    my $right = $n - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $u = $#{$A};\n    my $m;\n    my $result = -1;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] < $x) {\n            $l = $m + 1;\n        }\n        elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        }\n        else {\n            $result = $m;\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpicn43tx6.pl line 23.\nBEGIN failed--compilation aborted at /tmp/tmpicn43tx6.pl line 23.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpw_je5pwt.pl line 7.\nBEGIN failed--compilation aborted at /tmp/tmpw_je5pwt.pl line 7.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $left = 0;\n    my $right = scalar(@$A) - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpur0_cmhi.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpur0_cmhi.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpw_je5pwt.pl line 7.\nBEGIN failed--compilation aborted at /tmp/tmpw_je5pwt.pl line 7.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpw_je5pwt.pl line 7.\nBEGIN failed--compilation aborted at /tmp/tmpw_je5pwt.pl line 7.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $left = 0;\n    my $right = $n - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        }\n        elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        }\n        else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpt55vhir0.pl line 23.\nBEGIN failed--compilation aborted at /tmp/tmpt55vhir0.pl line 23.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $left = 0;\n    my $right = scalar(@$A) - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        }\n        elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        }\n        else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpvd381k3c.pl line 22.\nBEGIN failed--compilation aborted at /tmp/tmpvd381k3c.pl line 22.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $left = 0;\n    my $right = $n - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $m = 0;\n    my $result = -1;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    my $m;\n    while ($l <= $r) {\n        $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            }\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return -1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpn30mn29h.pl line 23.\nBEGIN failed--compilation aborted at /tmp/tmpn30mn29h.pl line 23.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $r) {\n        $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmprsjbpygz.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmprsjbpygz.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($x == $A->[$m]) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($x < $A->[$m]) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpqj8alzdz.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmpqj8alzdz.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($x == $A->[$mid]) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($x < $A->[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpca61fwak.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpca61fwak.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar(@$A);\n    my $left = 0;\n    my $right = $n - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] < $x) {\n            $l = $m + 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $result = $m;\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpguwlcw4h.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpguwlcw4h.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            }\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return -1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpt4_fgawu.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmpt4_fgawu.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        }\n        elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        }\n        else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $n = scalar @$A;\n    my $left = 0;\n    my $right = $n - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = $#{$A};\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpkrdl9kux.pl line 20.\nBEGIN failed--compilation aborted at /tmp/tmpkrdl9kux.pl line 20.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $left = 0;\n    my $right = scalar(@$A) - 1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            if ($mid == 0 || $A->[$mid - 1] != $x) {\n                return $mid;\n            } else {\n                $right = $mid - 1;\n            }\n        } elsif ($A->[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return -1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpvhlskw0w.pl line 22.\nBEGIN failed--compilation aborted at /tmp/tmpvhlskw0w.pl line 22.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509933,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpiwsfozdg.pl line 21.\nBEGIN failed--compilation aborted at /tmp/tmpiwsfozdg.pl line 21.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] < $x) {\n            $l = $m + 1;\n        }\n        elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        }\n        else {\n            $result = $m;\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpbf39h76r.pl line 23.\nBEGIN failed--compilation aborted at /tmp/tmpbf39h76r.pl line 23.\n",
      "exit_code": 2,
      "status": "Exception"
    }
  ]
}