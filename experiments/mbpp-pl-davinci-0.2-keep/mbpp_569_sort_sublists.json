{
  "name": "mbpp_569_sort_sublists",
  "language": "pl",
  "prompt": "# Write a function to sort each sublist of strings in a given list of lists.\nsub sort_sublists {\n    my($list1) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_sublists;\n        if(eq_deeply($candidate->([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]),[[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]),[[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"a\", \"b\"], [\"d\", \"c\"], [\"g\", \"h\"], [\"f\", \"e\"]]),[[\"a\", \"b\"], [\"c\", \"d\"], [\"g\", \"h\"], [\"e\", \"f\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @list2 = map { [ sort @$_ ] } @$list1;\n    return \\@list2;\n}",
    "    my @list2;\n    foreach my $sublist (@$list1) {\n        my @sorted_sublist = sort @$sublist;\n        push @list2, \\@sorted_sublist;\n    }\n    return \\@list2;\n}",
    "    my @list2 = ();\n    foreach my $sublist (@$list1) {\n        my @sorted_sublist = sort {$a cmp $b} @$sublist;\n        push @list2, \\@sorted_sublist;\n    }\n    return \\@list2;\n}",
    "    my @list2 = @$list1;\n    foreach my $sublist (@list2) {\n        @$sublist = sort @$sublist;\n    }\n    return \\@list2;\n}",
    "    my @list2 = @$list1;\n    foreach my $sublist (@list2) {\n        @$sublist = sort @$sublist;\n    }\n    return @list2;\n}",
    "    my @list2 = @$list1;\n    foreach (@list2) {\n        @$_ = sort @$_;\n    }\n    return @list2;\n}",
    "    my @list2;\n    foreach my $sublist (@$list1) {\n        my @sorted = sort @$sublist;\n        push @list2, \\@sorted;\n    }\n    return \\@list2;\n}",
    "    my @list2;\n    foreach my $sublist (@$list1) {\n        my @sorted_sublist = sort @$sublist;\n        push @list2, \\@sorted_sublist;\n    }\n    return \\@list2;\n}",
    "    my @list2 = @$list1;\n    foreach my $sublist (@list2) {\n        @$sublist = sort @$sublist;\n    }\n    return \\@list2;\n}",
    "    foreach my $list2 (@$list1) {\n        @$list2 = sort @$list2;\n    }\n    return $list1;\n}",
    "    my @list2 = ();\n    foreach my $sublist (@$list1) {\n        my @sublist = sort @$sublist;\n        push @list2, \\@sublist;\n    }\n    return \\@list2;\n}",
    "    my @sorted_list = ();\n    foreach my $sublist (@$list1) {\n        my @sorted_sublist = sort @$sublist;\n        push @sorted_list, \\@sorted_sublist;\n    }\n    return \\@sorted_list;\n}",
    "    my @list2 = @$list1;\n    for my $i (0..$#list2) {\n        @{$list2[$i]} = sort @{$list2[$i]};\n    }\n    return @list2;\n}",
    "    my @list2 = ();\n    foreach my $sublist (@$list1) {\n        push @list2, [sort @$sublist];\n    }\n    return \\@list2;\n}",
    "    my @list2 = ();\n    foreach my $sublist (@$list1) {\n        my @sublist = @$sublist;\n        push @list2, [sort @sublist];\n    }\n    return @list2;\n}",
    "    my @list2 = @$list1;\n    foreach my $sublist (@list2) {\n        @$sublist = sort @$sublist;\n    }\n    return @list2;\n}",
    "    my @list2;\n    foreach my $sublist (@$list1) {\n        my @sublist = @$sublist;\n        push @list2, [sort @sublist];\n    }\n    return \\@list2;\n}",
    "    my @list2 = @$list1;\n    foreach my $sublist (@list2) {\n        @$sublist = sort @$sublist;\n    }\n    return @list2;\n}",
    "    my @list2 = ();\n    foreach my $sublist (@$list1) {\n        push @list2, [sort @$sublist];\n    }\n    return \\@list2;\n}",
    "    my @list2;\n    foreach my $sublist (@$list1) {\n        my @sorted_sublist = sort @$sublist;\n        push @list2, \\@sorted_sublist;\n    }\n    return \\@list2;\n}"
  ]
}