{
  "name": "mbpp_728_sum_list",
  "language": "pl",
  "prompt": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nsub sum_list {\n    my($lst1, $lst2) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_list;\n        if(eq_deeply($candidate->([10, 20, 30], [15, 25, 35]),[25, 45, 65])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3], [5, 6, 7]),[6, 8, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15, 20, 30], [15, 45, 75]),[30, 65, 105])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $i = 0;\n    my @result = ();\n    while ($i < @$lst1) {\n        push @result, $lst1->[$i] + $lst2->[$i];\n        $i++;\n    }\n    return \\@result;\n}",
    "    my @sum = ();\n    for (my $i = 0; $i < @$lst1; $i++) {\n        push @sum, $lst1->[$i] + $lst2->[$i];\n    }\n    return \\@sum;\n}",
    "    my @sum;\n    for (my $i = 0; $i < @$lst1; $i++) {\n        push @sum, $lst1->[$i] + $lst2->[$i];\n    }\n    return \\@sum;\n}",
    "    my @sum;\n    for my $i (0..$#{$lst1}) {\n        push @sum, $lst1->[$i] + $lst2->[$i];\n    }\n    return \\@sum;\n}",
    "    my @lst;\n    for (my $i = 0; $i < scalar(@$lst1); $i++) {\n        push @lst, $lst1->[$i] + $lst2->[$i];\n    }\n    return \\@lst;\n}",
    "    my @result;\n    for my $i (0..$#{$lst1}) {\n        push @result, $lst1->[$i] + $lst2->[$i];\n    }\n    return \\@result;\n}",
    "    my @sum = ();\n    for my $i (0..$#{$lst1}) {\n        push @sum, $lst1->[$i] + $lst2->[$i];\n    }\n    return \\@sum;\n}",
    "    my @sum = ();\n    for (my $i = 0; $i < @$lst1; $i++) {\n        push @sum, $lst1->[$i] + $lst2->[$i];\n    }\n    return \\@sum;\n}",
    "    my @sum_list;\n    for my $i (0..$#{$lst1}) {\n        push @sum_list, $lst1->[$i] + $lst2->[$i];\n    }\n    return \\@sum_list;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < @$lst1; $i++) {\n        push @result, $lst1->[$i] + $lst2->[$i];\n    }\n    return \\@result;\n}",
    "    my @sum;\n    for (my $i = 0; $i < @$lst1; $i++) {\n        push @sum, $lst1->[$i] + $lst2->[$i];\n    }\n    return \\@sum;\n}",
    "    my @result;\n    for my $i (0..$#{$lst1}) {\n        push @result, $lst1->[$i] + $lst2->[$i];\n    }\n    return \\@result;\n}",
    "    my @sum;\n    for my $i (0..$#{$lst1}) {\n        push @sum, $lst1->[$i] + $lst2->[$i];\n    }\n    return \\@sum;\n}",
    "    my @result;\n    for my $i (0 .. $#{$lst1}) {\n        push @result, $lst1->[$i] + $lst2->[$i];\n    }\n    return \\@result;\n}",
    "    my @sum;\n    for my $i (0 .. $#{$lst1}) {\n        push @sum, $lst1->[$i] + $lst2->[$i];\n    }\n    return \\@sum;\n}",
    "    my @result;\n    for my $i (0..$#{$lst1}) {\n        push @result, $lst1->[$i] + $lst2->[$i];\n    }\n    return \\@result;\n}",
    "    my @sum;\n    for my $i (0..$#{$lst1}) {\n        push @sum, $lst1->[$i] + $lst2->[$i];\n    }\n    return \\@sum;\n}",
    "    my @sum;\n    for (my $i = 0; $i < @$lst1; $i++) {\n        push @sum, $lst1->[$i] + $lst2->[$i];\n    }\n    return \\@sum;\n}",
    "    my @result;\n    for (my $i = 0; $i < @$lst1; $i++) {\n        push @result, $lst1->[$i] + $lst2->[$i];\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar @$lst1; $i++) {\n        push @result, $lst1->[$i] + $lst2->[$i];\n    }\n    return \\@result;\n}"
  ]
}