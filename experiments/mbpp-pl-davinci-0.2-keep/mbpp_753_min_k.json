{
  "name": "mbpp_753_min_k",
  "language": "pl",
  "prompt": "# Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nsub min_k {\n    my($test_list, $K) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&min_k;\n        if(eq_deeply($candidate->([[\"Manjeet\", 10], [\"Akshat\", 4], [\"Akash\", 2], [\"Nikhil\", 8]], 2),[[\"Akash\", 2], [\"Akshat\", 4]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"Sanjeev\", 11], [\"Angat\", 5], [\"Akash\", 3], [\"Nepin\", 9]], 3),[[\"Akash\", 3], [\"Angat\", 5], [\"Nepin\", 9]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"tanmay\", 14], [\"Amer\", 11], [\"Ayesha\", 9], [\"SKD\", 16]], 1),[[\"Ayesha\", 9]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @sorted_list = sort {$a->[0] <=> $b->[0]} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar @$test_list;\n    my $k = $K;\n    while ($i < $n && $j < $k) {\n        if ($test_list->[$i]->[1] < $test_list->[$j]->[1]) {\n            $result[$j] = $test_list->[$i];\n            $i++;\n        } else {\n            $result[$j] = $test_list->[$j];\n            $j++;\n        }\n    }\n    while ($i < $n) {\n        $result[$j] = $test_list->[$i];\n        $i++;\n        $j++;\n    }\n    while ($j < $k) {\n        $result[$j] = $test_list->[$j];\n        $j++;\n    }\n    return @result;\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ @sorted[0..$K-1] ];\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [map { $_->[0] } @sorted[0..$K-1]];\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [@sorted_list[0..$K-1]];\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted_list[0..$K-1] ];\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [@sorted[0..$K-1]];\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted[0..$K-1] ];\n}",
    "    my @sorted_list = sort {$a->[0] <=> $b->[0]} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [map {$_->[0]} @sorted_list[0..$K-1]];\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    my @result = map { $_->[0] } @sorted[0..$K-1];\n    return @result;\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @result = map {$_->[0]} @sorted[0..$K-1];\n    return \\@result;\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ @sorted_list[0..$K-1] ];\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    my @min_k = @sorted[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort {$a->[0] <=> $b->[0]} @$test_list;\n    return [map {$_->[1]} @sorted[0..$K-1]];\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [map {$_->[0]} @sorted[0..$K-1]];\n}",
    "    my @test_list = @$test_list;\n    my @test_list_sorted = sort {$a->[1] <=> $b->[1]} @test_list;\n    my @test_list_sorted_k = @test_list_sorted[0..$K-1];\n    return @test_list_sorted_k;\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort {$a->[0] <=> $b->[0]} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @test_list = @$test_list;\n    my @sorted_test_list = sort {$a->[1] <=> $b->[1]} @test_list;\n    my @min_k = @sorted_test_list[0..$K-1];\n    return \\@min_k;\n}",
    "    my @res;\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar @$test_list;\n    while ($i < $n) {\n        if ($j < $K) {\n            push @res, $test_list->[$i];\n            $j++;\n        }\n        else {\n            my $max_index = 0;\n            my $max_value = $res[0];\n            for (my $k = 1; $k < $K; $k++) {\n                if ($res[$k] > $max_value) {\n                    $max_index = $k;\n                    $max_value = $res[$k];\n                }\n            }\n            if ($test_list->[$i] < $max_value) {\n                $res[$max_index] = $test_list->[$i];\n            }\n        }\n        $i++;\n    }\n    return @res;\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted_list[0 .. $K-1];\n    return \\@min_k;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ map { $_->[1] } @sorted[0..($K-1)] ];\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @result;\n    for (my $i = 0; $i < $K; $i++) {\n        push @result, $sorted_list[$i];\n    }\n    return @result;\n}",
    "    my @sorted_test_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted_test_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted_list[0..($K-1)];\n    return @min_k;\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    my @result = map { $_->[0] } @sorted_list[0..$K-1];\n    return @result;\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [map {$_->[0]} @sorted_list[0..$K-1]];\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted_list[0..$K-1] ];\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [map {$_->[0]} @sorted[0..$K-1]];\n}",
    "    my @sorted_list = sort { $a->[0] <=> $b->[0] } @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [@sorted_list[0..$K-1]];\n}",
    "    my @sorted = sort {$a->[0] <=> $b->[0]} @$test_list;\n    return [map {$_->[1]} @sorted[0..$K-1]];\n}",
    "    my @sorted_list = sort {$a->[0] <=> $b->[0]} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted_list[0..$K-1] ];\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [map {$_->[0]} @sorted[0..$K-1]];\n}",
    "    my @sorted = sort {$a->[0] <=> $b->[0]} @$test_list;\n    return [map {$_->[1]} @sorted[0..$K-1]];\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted[0..$K-1] ];\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } @$test_list;\n    my @min_k = @sorted[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted_list[0..$K-1] ];\n}",
    "    my @sorted_list = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ map { $_->[1] } @sorted_list[0..$K-1] ];\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k_list = @sorted_list[0..$K-1];\n    return @min_k_list;\n}",
    "    my @sorted_list = sort { $a->[0] <=> $b->[0] } @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort {$a->[0] <=> $b->[0]} @$test_list;\n    return [map {$_->[1]} @sorted_list[0..$K-1]];\n}",
    "    my @sorted_list = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ map { $_->[1] } @sorted_list[0..$K-1] ];\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    my @min_k_records = @sorted_list[0..$K-1];\n    return @min_k_records;\n}",
    "    my @sorted = sort {$a->[0] <=> $b->[0]} @$test_list;\n    my @min_k = @sorted[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort {$a->[0] <=> $b->[0]} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [map {$_->[0]} @sorted[0..$K-1]];\n}",
    "    my @sorted_list = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ map { $_->[1] } @sorted_list[0..$K-1] ];\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [@sorted_list[0..$K-1]];\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    my @min_k = @sorted_list[0 .. $K - 1];\n    return @min_k;\n}",
    "    my @sorted_test_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [@sorted_test_list[0..$K-1]];\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [@sorted_list[0..$K-1]];\n}",
    "    my @test_list = @$test_list;\n    my @min_k;\n    my $min_k_size = 0;\n    my $max_k_size = $K;\n    my $i = 0;\n    while ($i < scalar @test_list) {\n        my $j = $i;\n        while ($j < scalar @test_list) {\n            my $k = $j;\n            while ($k < scalar @test_list) {\n                if ($min_k_size < $max_k_size) {\n                    push @min_k, $test_list[$k];\n                    $min_k_size++;\n                } else {\n                    my $max_k = max @min_k;\n                    if ($test_list[$k] < $max_k) {\n                        my $index = first_index { $_ == $max_k } @min_k;\n                        $min_k[$index] = $test_list[$k];\n                    }\n                }\n                $k++;\n            }\n            $j++;\n        }\n        $i++;\n    }\n    return @min_k;\n}",
    "    my @sorted_test_list = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ map { $_->[1] } @sorted_test_list[0..$K-1] ];\n}",
    "    my @sorted_test_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [map {$_->[0]} @sorted_test_list[0..$K-1]];\n}",
    "    my @list = @{$test_list};\n    my @sorted_list = sort {$a->[1] <=> $b->[1]} @list;\n    return @sorted_list[0..$K-1];\n}",
    "    my @sorted_list = sort {$a->[0] <=> $b->[0]} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ @sorted[0..$K-1] ];\n}",
    "    my $min_k = [];\n    my $min_k_hash = {};\n    my $min_k_count = 0;\n    my $min_k_max = -1;\n    my $min_k_max_index = -1;\n    my $min_k_max_key = -1;\n    my $min_k_max_value = -1;\n    my $min_k_max_value_index = -1;\n    my $min_k_max_value_key = -1;\n    my $min_k_max_value_value = -1;\n    my $min_k_max_value_value_index = -1;\n    my $min_k_max_value_value_key = -1;\n    my $min_k_max_value_value_value = -1;\n    my $min_k_max_value_value_value_index = -1;\n    my $min_k_max_value_value_value_key = -1;\n    my $min_k_max_value_value_value_value = -1;\n    my $min_k_max_value_value_value_value_index = -1;\n    my $min_k_max_value_value_value_value_key = -1;\n    my $min_k_max_value_value_value_value_value = -1;\n    my $min_k_max_value_value_value_value_value_index = -1;\n    my $min_k_max_value_value_value_value_value_key = -1;\n    my $min_k_max_value_value_value_value_value_value = -1;\n    my $min_k_max_value_value_value_value_value_value_index = -1;\n    my $min_k_max_value_value_value_value_value_value_key = -1;\n    my $min_k_max_value_value_value_value_value_value_value = -1;\n    my $min_k_max_value_value_value_value_value_value_value_index",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar @$test_list;\n    while ($i < $n) {\n        if ($j < $K) {\n            push @result, $test_list->[$i];\n            $j++;\n        }\n        else {\n            my $max = $result[0];\n            my $max_index = 0;\n            for (my $k = 1; $k < $K; $k++) {\n                if ($result[$k] > $max) {\n                    $max = $result[$k];\n                    $max_index = $k;\n                }\n            }\n            if ($test_list->[$i] < $max) {\n                $result[$max_index] = $test_list->[$i];\n            }\n        }\n        $i++;\n    }\n    return @result;\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted[0..$K-1] ];\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted[0..$K-1] ];\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ map { $_->[1] } @sorted[0..$K-1] ];\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted[0..$K-1] ];\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [map { $_->[0] } @sorted_list[0..$K-1]];\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [map {$_->[0]} @sorted_list[0..$K-1]];\n}",
    "    my @sorted_list = sort { $a->[0] <=> $b->[0] } @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar @$test_list;\n    my $k = $K;\n    while ($i < $n && $j < $k) {\n        if ($test_list->[$i]->[1] < $test_list->[$j]->[1]) {\n            $result[$j++] = $test_list->[$i++];\n        } else {\n            $i++;\n        }\n    }\n    return \\@result;\n}",
    "    my @sorted_list = sort {$a->[0] <=> $b->[0]} @$test_list;\n    return [map {$_->[1]} @sorted_list[0..$K-1]];\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted[0..$K-1] ];\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted_list[0..$K-1] ];\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted[0..$K-1] ];\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    my @result = map { $_->[0] } @sorted[0..$K-1];\n    return @result;\n}",
    "    my @sorted_list = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ @sorted_list[0..$K-1] ];\n}",
    "    my @sorted_list = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ @sorted_list[0..$K-1] ];\n}",
    "    my @sorted = sort {$a->[0] <=> $b->[0]} @$test_list;\n    return [map {$_->[1]} @sorted[0..$K-1]];\n}",
    "    my @sorted_list = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ map { $_->[1] } @sorted_list[0..$K-1] ];\n}",
    "    my @sorted = sort {$a->[0] <=> $b->[0]} @$test_list;\n    return [map {$_->[1]} @sorted[0..$K-1]];\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [map {$_->[0]} @sorted[0..$K-1]];\n}",
    "    my @sorted_list = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ map { $_->[1] } @sorted_list[0..$K-1] ];\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ map { $_->[1] } @sorted[0..$K-1] ];\n}",
    "    my @sorted = sort {$a->[0] <=> $b->[0]} @$test_list;\n    return [map {$_->[1]} @sorted[0..$K-1]];\n}",
    "    my @test_list = @$test_list;\n    my @sorted = sort {$a->[0] <=> $b->[0]} @test_list;\n    my @min_k = @sorted[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted[0..$K-1] ];\n}",
    "    my @test_list = @$test_list;\n    my @result;\n    my $result_size = 0;\n    for my $i (0..$#test_list) {\n        if ($result_size < $K) {\n            push @result, $test_list[$i];\n            $result_size++;\n        }\n        else {\n            my $max_index = 0;\n            for my $j (1..$result_size - 1) {\n                if ($result[$j]->[1] > $result[$max_index]->[1]) {\n                    $max_index = $j;\n                }\n            }\n            if ($test_list[$i]->[1] < $result[$max_index]->[1]) {\n                $result[$max_index] = $test_list[$i];\n            }\n        }\n    }\n    return @result;\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [@sorted[0..$K-1]];\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted[0..$K-1] ];\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [@sorted[0..$K-1]];\n}",
    "    my @sorted_list = sort {$a->[0] <=> $b->[0]} @$test_list;\n    return [@sorted_list[0..$K-1]];\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [map { $_->[0] } @sorted[0..$K-1]];\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted[0..$K-1] ];\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar(@$test_list);\n    while ($i < $n && $j < $K) {\n        if ($test_list->[$i]->[1] < $test_list->[$j]->[1]) {\n            $result[$j++] = $test_list->[$i++];\n        } else {\n            $i++;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    for my $i (0 .. $K - 1) {\n        push @result, $sorted[$i];\n    }\n    return @result;\n}",
    "    my @result;\n    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    for my $i (0..$K-1) {\n        push @result, $sorted[$i];\n    }\n    return @result;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ @sorted[0..$K-1] ];\n}",
    "    my @result = ();\n    my $size = scalar @$test_list;\n    if ($size < $K) {\n        return @$test_list;\n    }\n    my $min_heap = new Heap::Binary(order => '<', elements => $test_list);\n    for (my $i = 0; $i < $K; $i++) {\n        push @result, $min_heap->extract_top;\n    }\n    return @result;\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted[0..$K-1] ];\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [map {$_->[0]} @sorted[0..$K-1]];\n}",
    "    my @sorted_list = sort {$a->[0] <=> $b->[0]} @$test_list;\n    return [map {$_->[1]} @sorted_list[0..$K-1]];\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted[0..$K-1] ];\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [@sorted[0..$K-1]];\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my $result = [];\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar @$test_list;\n    my $k = $K;\n    while ($i < $n && $j < $k) {\n        if ($test_list->[$i]->[1] < $test_list->[$j]->[1]) {\n            $result->[$j] = $test_list->[$i];\n            $i++;\n        } else {\n            $result->[$j] = $test_list->[$j];\n            $j++;\n        }\n    }\n    while ($i < $n) {\n        $result->[$j] = $test_list->[$i];\n        $i++;\n        $j++;\n    }\n    while ($j < $k) {\n        $result->[$j] = $test_list->[$j];\n        $j++;\n    }\n    return $result;\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted[0..$K-1] ];\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [@sorted_list[0..$K-1]];\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ map { $_->[1] } @sorted[0..$K-1] ];\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted[0..$K-1] ];\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } @$test_list;\n    my @result = map { $_->[1] } @sorted[0..$K-1];\n    return @result;\n}",
    "    my @result;\n    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    for (my $i = 0; $i < $K; $i++) {\n        push @result, $sorted[$i];\n    }\n    return @result;\n}",
    "    my @sorted_test_list = sort {$a->[0] <=> $b->[0]} @$test_list;\n    my @min_k_list = @sorted_test_list[0..$K-1];\n    return @min_k_list;\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @result = map {$_->[0]} @sorted[0..$K-1];\n    return @result;\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted_list[0..($K-1)];\n    return @min_k;\n}",
    "    my @sorted_list = sort { $a->[0] <=> $b->[0] } @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ map { $_->[1] } @sorted_list[0..$K-1] ];\n}",
    "    my @test_list = @$test_list;\n    my @result;\n    my $min_val;\n    my $min_idx;\n    for (my $i = 0; $i < $K; $i++) {\n        $min_val = $test_list[$i][1];\n        $min_idx = $i;\n        for (my $j = $i + 1; $j < scalar @test_list; $j++) {\n            if ($test_list[$j][1] < $min_val) {\n                $min_val = $test_list[$j][1];\n                $min_idx = $j;\n            }\n        }\n        @result = (@result, $test_list[$min_idx]);\n        ($test_list[$min_idx], $test_list[$i]) = ($test_list[$i], $test_list[$min_idx]);\n    }\n    return @result;\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted_list[0..$K-1] ];\n}",
    "    my $result = [];\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar @$test_list;\n    while ($i < $n) {\n        my $t = $test_list->[$i];\n        if ($t->[0] <= $K) {\n            $result->[$j++] = $t;\n        }\n        $i++;\n    }\n    return $result;\n}",
    "    my @sorted_list = sort {$a->[0] <=> $b->[0]} @$test_list;\n    return [@sorted_list[0..$K-1]];\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ map { $_->[1] } @sorted_list[0 .. $K - 1] ];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar @$test_list;\n    my $k = $K;\n    my $min = $test_list->[0];\n    my $min_index = 0;\n    while ($i < $n and $j < $k) {\n        $min = $test_list->[$i];\n        $min_index = $i;\n        for (my $t = $i + 1; $t < $n; $t++) {\n            if ($test_list->[$t] < $min) {\n                $min = $test_list->[$t];\n                $min_index = $t;\n            }\n        }\n        $result[$j] = $min;\n        $j++;\n        $i = $min_index + 1;\n    }\n    return \\@result;\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ map { $_->[1] } @sorted[0..$K-1] ];\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [map {$_->[0]} @sorted[0..$K-1]];\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [map {$_->[0]} @sorted[0..$K-1]];\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    my @result = @sorted[0 .. $K-1];\n    return @result;\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return @sorted_list[0..$K-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar @$test_list;\n    my $k = $K;\n    while ($i < $n && $j < $k) {\n        if ($test_list->[$i]->[1] < $test_list->[$j]->[1]) {\n            $result[$j] = $test_list->[$i];\n            $i++;\n        } else {\n            $result[$j] = $test_list->[$j];\n            $j++;\n        }\n    }\n    while ($i < $n) {\n        $result[$j] = $test_list->[$i];\n        $i++;\n        $j++;\n    }\n    while ($j < $k) {\n        $result[$j] = $test_list->[$j];\n        $j++;\n    }\n    return @result;\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ map { $_->[1] } @sorted_list[0..$K-1] ];\n}",
    "    my @sorted_list = sort { $a->[0] <=> $b->[0] } @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ map { $_->[1] } @sorted[0..$K-1] ];\n}",
    "    my @sorted_list = sort { $a->[0] <=> $b->[0] } @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ map { $_->[1] } @sorted_list[0..$K-1] ];\n}",
    "\n    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [map {$_->[0]} @sorted_list[0..$K-1]];\n}",
    "    my @result;\n    my $i = 0;\n    foreach my $test (@$test_list) {\n        if ($i < $K) {\n            push @result, $test;\n            $i++;\n        } else {\n            my $max = max(@result);\n            if ($test < $max) {\n                my $index = first_index { $_ == $max } @result;\n                $result[$index] = $test;\n            }\n        }\n    }\n    return @result;\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @result;\n    for (my $i = 0; $i < $K; $i++) {\n        push @result, $sorted_list[$i];\n    }\n    return @result;\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted_list[0..$K-1] ];\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ map { $_->[1] } @sorted[0..$K-1] ];\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [@sorted_list[0..$K-1]];\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k_list = @sorted_list[0..$K-1];\n    return @min_k_list;\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted[0 .. $K - 1] ];\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [map {$_->[0]} @sorted_list[0..$K-1]];\n}",
    "    my $result = [];\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar @$test_list;\n    my $k = $K;\n    my $temp;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n - $i - 1; $j++) {\n            if ($test_list->[$j]->[1] > $test_list->[$j + 1]->[1]) {\n                $temp = $test_list->[$j];\n                $test_list->[$j] = $test_list->[$j + 1];\n                $test_list->[$j + 1] = $temp;\n            }\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        push @$result, $test_list->[$i];\n    }\n    return $result;\n}",
    "    my @sorted_list = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ map { $_->[1] } @sorted_list[0..$K-1] ];\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    my @result = map { $_->[0] } @sorted[0..$K-1];\n    return @result;\n}",
    "    my $n = scalar @$test_list;\n    my @result;\n    for (my $i = 0; $i < $n; $i++) {\n        if ($i < $K) {\n            push @result, $test_list->[$i];\n        } else {\n            my $max = $result[0];\n            my $max_index = 0;\n            for (my $j = 1; $j < $K; $j++) {\n                if ($result[$j] > $max) {\n                    $max = $result[$j];\n                    $max_index = $j;\n                }\n            }\n            if ($test_list->[$i] < $max) {\n                $result[$max_index] = $test_list->[$i];\n            }\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar @$test_list;\n    my $k = $K;\n    while ($i < $n && $j < $k) {\n        if ($test_list->[$i]->[1] < $test_list->[$j]->[1]) {\n            $result[$j] = $test_list->[$i];\n            $i++;\n        } else {\n            $result[$j] = $test_list->[$j];\n            $j++;\n        }\n    }\n    while ($i < $n) {\n        $result[$j] = $test_list->[$i];\n        $i++;\n        $j++;\n    }\n    while ($j < $k) {\n        $result[$j] = $test_list->[$j];\n        $j++;\n    }\n    return \\@result;\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    my @min_k = @sorted[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted[0..$K-1] ];\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [map {$_->[0]} @sorted[0..$K-1]];\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [@sorted_list[0..$K-1]];\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ @sorted_list[0..$K-1] ];\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted_list[0..$K-1] ];\n}",
    "    my $result = [];\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar @$test_list;\n    my $min = $test_list->[0];\n    my $min_index = 0;\n    my $temp = 0;",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted[0..$K-1] ];\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ map { $_->[1] } @sorted[0..$K-1] ];\n}",
    "    my @sorted_list = sort {$a->[0] <=> $b->[0]} @$test_list;\n    my @result = @sorted_list[0..$K-1];\n    return @result;\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted_list[0 .. $K-1] ];\n}",
    "    my @result;\n    my $min_val = $test_list->[0][0];\n    my $min_idx = 0;\n    for my $i (0..$K-1) {\n        $result[$i] = $test_list->[$i];\n        if ($result[$i][0] < $min_val) {\n            $min_val = $result[$i][0];\n            $min_idx = $i;\n        }\n    }\n    for my $i ($K..$#{$test_list}) {\n        if ($test_list->[$i][0] < $min_val) {\n            $result[$min_idx] = $test_list->[$i];\n            $min_val = $result[$min_idx][0];\n            for my $j (0..$K-1) {\n                if ($result[$j][0] < $min_val) {\n                    $min_val = $result[$j][0];\n                    $min_idx = $j;\n                }\n            }\n        }\n    }\n    return @result;\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ map { $_->[1] } @sorted[0..$K-1] ];\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [map {$_->[0]} @sorted_list[0..$K-1]];\n}",
    "    my @test_list = @$test_list;\n    my @result;\n    my $i = 0;\n    while ($i < $K) {\n        my $min = $test_list[$i];\n        foreach my $j ($i+1 .. $#test_list) {\n            if ($test_list[$j] < $min) {\n                $min = $test_list[$j];\n            }\n        }\n        push @result, $min;\n        $i++;\n    }\n    return @result;\n}",
    "    my @sorted_list = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ @sorted_list[0..$K-1] ];\n}",
    "    my @result;\n    my @sorted = sort { $a->[0] <=> $b->[0] } @$test_list;\n    for (my $i = 0; $i < $K; $i++) {\n        push @result, $sorted[$i];\n    }\n    return @result;\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [map {$_->[0]} @sorted[0..$K-1]];\n}",
    "    my @sorted = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ map { $_->[1] } @sorted[0..$K-1] ];\n}",
    "    my @sorted_list = sort { $a->[0] <=> $b->[0] } @$test_list;\n    return [ map { $_->[1] } @sorted_list[0..$K-1] ];\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    my @min_k = @sorted[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [@sorted[0..$K-1]];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar @$test_list;\n    while ($i < $n && $j < $K) {\n        if ($test_list->[$i]->[1] < $test_list->[$j]->[1]) {\n            $result[$j] = $test_list->[$i];\n            $i++;\n        } else {\n            $result[$j] = $test_list->[$j];\n            $j++;\n        }\n    }\n    while ($i < $n) {\n        $result[$j] = $test_list->[$i];\n        $i++;\n        $j++;\n    }\n    while ($j < $K) {\n        $result[$j] = $test_list->[$j];\n        $j++;\n    }\n    return @result;\n}",
    "    my @sorted_list = sort { $a->[0] <=> $b->[0] } @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @result;\n    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    for (my $i = 0; $i < $K; $i++) {\n        push @result, $sorted[$i];\n    }\n    return @result;\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [@sorted[0..$K-1]];\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k_list;\n    for (my $i = 0; $i < $K; $i++) {\n        push @min_k_list, $sorted_list[$i];\n    }\n    return @min_k_list;\n}",
    "    my @result = ();\n    my @sorted = sort { $a->[0] <=> $b->[0] } @$test_list;\n    for (my $i = 0; $i < $K; $i++) {\n        push @result, $sorted[$i];\n    }\n    return @result;\n}"
  ]
}