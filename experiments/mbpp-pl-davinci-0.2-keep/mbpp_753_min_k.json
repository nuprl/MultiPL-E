{
  "name": "mbpp_753_min_k",
  "language": "pl",
  "prompt": "# Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nsub min_k {\n    my($test_list, $K) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&min_k;\n        if(eq_deeply($candidate->([[\"Manjeet\", 10], [\"Akshat\", 4], [\"Akash\", 2], [\"Nikhil\", 8]], 2),[[\"Akash\", 2], [\"Akshat\", 4]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"Sanjeev\", 11], [\"Angat\", 5], [\"Akash\", 3], [\"Nepin\", 9]], 3),[[\"Akash\", 3], [\"Angat\", 5], [\"Nepin\", 9]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"tanmay\", 14], [\"Amer\", 11], [\"Ayesha\", 9], [\"SKD\", 16]], 1),[[\"Ayesha\", 9]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @sorted_list = sort {$a->[0] <=> $b->[0]} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar @$test_list;\n    my $k = $K;\n    while ($i < $n && $j < $k) {\n        if ($test_list->[$i]->[1] < $test_list->[$j]->[1]) {\n            $result[$j] = $test_list->[$i];\n            $i++;\n        } else {\n            $result[$j] = $test_list->[$j];\n            $j++;\n        }\n    }\n    while ($i < $n) {\n        $result[$j] = $test_list->[$i];\n        $i++;\n        $j++;\n    }\n    while ($j < $k) {\n        $result[$j] = $test_list->[$j];\n        $j++;\n    }\n    return @result;\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ @sorted[0..$K-1] ];\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [map { $_->[0] } @sorted[0..$K-1]];\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [@sorted_list[0..$K-1]];\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted_list[0..$K-1] ];\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [@sorted[0..$K-1]];\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ map { $_->[0] } @sorted[0..$K-1] ];\n}",
    "    my @sorted_list = sort {$a->[0] <=> $b->[0]} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    return [map {$_->[0]} @sorted_list[0..$K-1]];\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    my @result = map { $_->[0] } @sorted[0..$K-1];\n    return @result;\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @result = map {$_->[0]} @sorted[0..$K-1];\n    return \\@result;\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    return [ @sorted_list[0..$K-1] ];\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$test_list;\n    my @min_k = @sorted[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort {$a->[1] <=> $b->[1]} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted = sort {$a->[0] <=> $b->[0]} @$test_list;\n    return [map {$_->[1]} @sorted[0..$K-1]];\n}",
    "    my @sorted_list = sort { $a->[1] <=> $b->[1] } @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}"
  ]
}