{
  "name": "mbpp_438_count_bidirectional",
  "language": "pl",
  "prompt": "# Write a function to count bidirectional tuple pairs.\nsub count_bidirectional {\n    my($test_list) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_bidirectional;\n        if(eq_deeply($candidate->([[5, 6], [1, 2], [6, 5], [9, 1], [6, 5], [2, 1]]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 6], [1, 3], [6, 5], [9, 1], [6, 5], [2, 1]]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 6], [1, 2], [6, 5], [9, 2], [6, 5], [2, 1]]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $count = 0;\n    for my $i (0..$#$test_list) {\n        for my $j ($i+1..$#$test_list) {\n            $count++ if $test_list->[$i]->[0] == $test_list->[$j]->[1]\n                and $test_list->[$i]->[1] == $test_list->[$j]->[0];\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my $i;\n    my $j;\n    for ($i = 0; $i < @$test_list; $i++) {\n        for ($j = $i + 1; $j < @$test_list; $j++) {\n            if ($test_list->[$i]->[0] eq $test_list->[$j]->[1] &&\n                $test_list->[$i]->[1] eq $test_list->[$j]->[0]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    foreach my $test (@$test_list) {\n        my($a, $b) = @$test;\n        my $reverse = [$b, $a];\n        if (grep {$_->[0] eq $reverse->[0] and $_->[1] eq $reverse->[1]} @$test_list) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for my $i (0..$#$test_list) {\n        for my $j ($i+1..$#$test_list) {\n            if ($test_list->[$i]->[0] == $test_list->[$j]->[1] &&\n                $test_list->[$i]->[1] == $test_list->[$j]->[0]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for my $i (0 .. $#$test_list) {\n        for my $j ($i+1 .. $#$test_list) {\n            my $test_i = $test_list->[$i];\n            my $test_j = $test_list->[$j];\n            if ($test_i->[0] eq $test_j->[1] && $test_i->[1] eq $test_j->[0]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    foreach my $test (@$test_list) {\n        my($a, $b) = @$test;\n        my $a_b_count = $counts{$a}{$b};\n        my $b_a_count = $counts{$b}{$a};\n        if ($a_b_count && $b_a_count) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my $i;\n    my $j;\n    for ($i = 0; $i < @$test_list; $i++) {\n        for ($j = 0; $j < @$test_list; $j++) {\n            if ($test_list->[$i]->[0] eq $test_list->[$j]->[1] &&\n                $test_list->[$i]->[1] eq $test_list->[$j]->[0]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    foreach my $test (@$test_list) {\n        my $test_name = $test->{test_name};\n        my $test_id = $test->{test_id};\n        my $test_type = $test->{test_type};\n        my $test_direction = $test->{test_direction};\n        my $test_bidirectional = $test->{test_bidirectional};\n        my $test_disabled = $test->{test_disabled};\n        my $test_schedule = $test->{test_schedule};\n        my $test_schedule_type = $test->{test_schedule_type};\n        my $test_schedule_random = $test->{test_schedule_random};\n        my $test_schedule_custom = $test->{test_schedule_custom};\n        my $test_schedule_interval = $test->{test_schedule_interval};\n        my $test_schedule_splay = $test->{test_schedule_splay};\n        my $test_schedule_splay_delta = $test->{test_schedule_splay_delta};\n        my $test_timeout = $test->{test_timeout};\n        my $test_retry = $test->{test_retry};\n        my $test_maxtime = $test->{test_maxtime};\n        my $test_maxbytes = $test->{test_maxbytes};\n        my $test_maxpkts = $test->{test_maxpkts};\n        my $test_no_delay = $test->{test_no_delay};\n        my $test_tos = $test->{test_tos};\n        my $test_flowlabel = $test->{test_flowlabel};\n        my $test_dscp = $test->{test_dscp};\n        my $test_numeric = $test->{test_numeric};\n        my $test_reverse = $test->{test_reverse};\n        my $test_reverse_timeout = $test->{test_reverse_timeout};\n       ",
    "    my $count = 0;\n    foreach my $test (@$test_list) {\n        my($a, $b) = @$test;\n        if (grep { $_->[0] == $b && $_->[1] == $a } @$test_list) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $aa = 0;\n    my $ab = 0;\n    my $ac = 0;\n    my $ad = 0;\n    my $ae = 0;\n    my $af = 0;\n    my $ag = 0;\n    my $ah = 0;\n    my $ai = 0;\n    my $aj = 0;\n    my $ak = 0;\n    my $al = 0;\n    my $am = 0;\n    my $an = 0;\n    my $ao = 0;\n    my $ap = 0;\n    my $aq = 0;\n    my $ar = 0;\n    my $as = 0;\n    my $at = 0;\n    my $au = 0;\n    my $av = 0;\n    my $aw = 0;\n    my $ax = 0;\n    my $ay = 0;\n    my $az = 0;\n    my $ba = 0;\n    my $bb = 0;\n    my $bc = 0;\n    my $bd = 0;\n    my $be = 0;\n    my $bf = 0;\n    my $bg = 0;\n    my $bh = 0;\n    my $bi = 0;\n    my $bj = 0;\n    my $bk = 0;\n    my $bl = 0;\n    my $bm = 0;\n    my $bn = 0;\n    my $bo = 0;\n    my $bp = 0;\n    my $bq = 0;\n    my $br = 0;\n    my $bs =",
    "    my $count = 0;\n    for my $i (0 .. $#$test_list) {\n        for my $j ($i + 1 .. $#$test_list) {\n            $count++ if $test_list->[$i] eq reverse $test_list->[$j];\n        }\n    }\n    return $count;\n}",
    "\n    my $count = 0;\n    foreach my $test (@$test_list) {\n        my($a, $b) = @$test;\n        $count++ if grep { $_->[0] eq $b && $_->[1] eq $a } @$test_list;\n    }",
    "    my $count = 0;\n    for my $i (0 .. $#{$test_list}) {\n        for my $j ($i+1 .. $#{$test_list}) {\n            my $test_i = $test_list->[$i];\n            my $test_j = $test_list->[$j];\n            if ($test_i->[0] == $test_j->[1] && $test_i->[1] == $test_j->[0]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my $i;\n    for ($i = 0; $i < scalar(@$test_list); $i++) {\n        my $j;\n        for ($j = 0; $j < scalar(@$test_list); $j++) {\n            if ($test_list->[$i]->[0] == $test_list->[$j]->[1] &&\n                $test_list->[$i]->[1] == $test_list->[$j]->[0]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    foreach my $test (@$test_list) {\n        my $test_name = $test->{'name'};\n        my $test_type = $test->{'type'};\n        my $test_args = $test->{'args'};\n        my $test_arg_list = $test->{'arg_list'};\n        my $test_arg_count = $test->{'arg_count'};\n        my $test_arg_type = $test->{'arg_type'};\n        my $test_arg_name = $test->{'arg_name'};\n        my $test_arg_value = $test->{'arg_value'};\n        my $test_arg_default = $test->{'arg_default'};\n        my $test_arg_desc = $test->{'arg_desc'};\n        my $test_arg_desc_list = $test->{'arg_desc_list'};\n        my $test_arg_desc_count = $test->{'arg_desc_count'};\n        my $test_arg_desc_type = $test->{'arg_desc_type'};\n        my $test_arg_desc_name = $test->{'arg_desc_name'};\n        my $test_arg_desc_value = $test->{'arg_desc_value'};\n        my $test_arg_desc_default = $test->{'arg_desc_default'};\n        my $test_arg_desc_desc = $test->{'arg_desc_desc'};\n        my $test_arg_desc_desc_list = $test->{'arg_desc_desc_list'};\n        my $test_arg_desc_desc_count = $test->{'arg_desc_desc_count'};\n        my $test_arg_desc_desc_type = $test->{'arg_desc_desc_type'};\n        my $test_arg_desc_desc_name = $test->{'arg_desc_desc_name'};\n        my $test_arg_desc_desc_value = $test->{'arg_desc",
    "    my $count = 0;\n    for (my $i = 0; $i < @$test_list; $i++) {\n        my $test = $test_list->[$i];\n        for (my $j = $i + 1; $j < @$test_list; $j++) {\n            my $test2 = $test_list->[$j];\n            if ($test->[0] == $test2->[1] && $test->[1] == $test2->[0]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    foreach my $test (@$test_list) {\n        my($a, $b) = @$test;\n        if (grep { $_->[0] == $b && $_->[1] == $a } @$test_list) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $aa = 0;\n    my $ab = 0;\n    my $ac = 0;\n    my $ad = 0;\n    my $ae = 0;\n    my $af = 0;\n    my $ag = 0;\n    my $ah = 0;\n    my $ai = 0;\n    my $aj = 0;\n    my $ak = 0;\n    my $al = 0;\n    my $am = 0;\n    my $an = 0;\n    my $ao = 0;\n    my $ap = 0;\n    my $aq = 0;\n    my $ar = 0;\n    my $as = 0;\n    my $at = 0;\n    my $au = 0;\n    my $av = 0;\n    my $aw = 0;\n    my $ax = 0;\n    my $ay = 0;\n    my $az = 0;\n    my $ba = 0;\n    my $bb = 0;\n    my $bc = 0;\n    my $bd = 0;\n    my $be = 0;\n    my $bf = 0;\n    my $bg = 0;\n    my $bh = 0;\n    my $bi = 0;\n    my $bj = 0;\n    my $bk = 0;\n    my $bl = 0;\n    my $bm = 0;\n    my $bn = 0;\n    my $bo = 0;\n    my $bp = 0;\n    my $bq = 0;\n    my $br = 0;\n    my $bs =",
    "    my $count = 0;\n    for my $i (0..$#{$test_list}) {\n        for my $j ($i+1..$#{$test_list}) {\n            if ($test_list->[$i]->[0] == $test_list->[$j]->[1] &&\n                $test_list->[$i]->[1] == $test_list->[$j]->[0]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    foreach my $test (@$test_list) {\n        my $test_name = $test->{name};\n        my $test_type = $test->{type};\n        my $test_args = $test->{args};\n        my $test_result = $test->{result};\n        my $test_expect = $test->{expect};\n        if ($test_type eq 'bidirectional') {\n            $count++;\n        }\n    }\n    return $count;\n}"
  ]
}