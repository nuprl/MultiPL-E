{
  "name": "mbpp_92_is_undulating",
  "language": "pl",
  "prompt": "# Write a function to check whether the given number is undulating or not.\nsub is_undulating {\n    my($n) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_undulating;\n        if(eq_deeply($candidate->(1212121),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1991),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(121),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @digits = split(//, $n);\n    my $i = 0;\n    my $j = $#digits;\n    while ($i < $j) {\n        return 0 if $digits[$i] == $digits[$i+1];\n        return 0 if $digits[$j] == $digits[$j-1];\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev = $digits[0];\n    my $state = 0;\n    for my $d (@digits[1..$#digits]) {\n        if ($d == $prev) {\n            return 0;\n        }\n        if ($state == 0) {\n            if ($d > $prev) {\n                $state = 1;\n            }\n            else {\n                $state = -1;\n            }\n        }\n        elsif ($state == 1) {\n            if ($d < $prev) {\n                $state = 0;\n            }\n        }\n        elsif ($state == -1) {\n            if ($d > $prev) {\n                $state = 0;\n            }\n        }\n        $prev = $d;\n    }\n    return $state == 0;\n}",
    "    my $prev_digit = -1;\n    my $prev_diff = -1;\n    my $is_undulating = 1;\n    while ($n) {\n        my $digit = $n % 10;\n        my $diff = $digit - $prev_digit;\n        if ($prev_diff != -1 && $diff != $prev_diff) {\n            $is_undulating = 0;\n            last;\n        }\n        $prev_digit = $digit;\n        $prev_diff = $diff;\n        $n /= 10;\n    }\n    return $is_undulating;\n}",
    "    my $last_digit = $n % 10;\n    my $next_digit;\n    $n /= 10;\n    while ($n > 0) {\n        $next_digit = $n % 10;\n        return 0 if $last_digit == $next_digit;\n        $last_digit = $next_digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $prev = -1;\n    my $curr = -1;\n    my $count = 0;\n    while($n > 0) {\n        $curr = $n % 10;\n        if($curr == $prev) {\n            return 0;\n        }\n        $prev = $curr;\n        $n /= 10;\n        $count++;\n    }\n    return $count;\n}",
    "    my $prev_digit = -1;\n    my $prev_diff = 0;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        my $diff = $digit - $prev_digit;\n        if ($prev_digit >= 0) {\n            if ($prev_diff * $diff != -1) {\n                return 0;\n            }\n        }\n        $prev_digit = $digit;\n        $prev_diff = $diff;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $s = sprintf \"%d\", $n;\n    my @d = split //, $s;\n    my $i = 0;\n    while ($i < $#d) {\n        return 0 if $d[$i] == $d[$i+1];\n        $i++;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = pop @digits;\n    my $last_diff = 0;\n    for my $digit (@digits) {\n        my $diff = $digit - $last_digit;\n        return 0 if $diff == 0;\n        return 0 if $last_diff != 0 && $diff != $last_diff;\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = pop @digits;\n    my $last_diff = 0;\n    my $last_sign = 0;\n    for my $digit (@digits) {\n        my $diff = $digit - $last_digit;\n        my $sign = $diff <=> 0;\n        if ($last_sign && $sign != $last_sign && $diff != $last_diff) {\n            return 0;\n        }\n        $last_diff = $diff;\n        $last_sign = $sign;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    for my $i (0 .. $#digits - 2) {\n        return 0 if $digits[$i] == $digits[$i + 1] ||\n                    $digits[$i + 1] == $digits[$i + 2] ||\n                    $digits[$i] == $digits[$i + 2];\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = $digits[0];\n    my $last_diff = 0;\n    for my $digit (@digits[1..$#digits]) {\n        my $diff = $digit - $last_digit;\n        if ($diff == 0) {\n            return 0;\n        }\n        if ($last_diff != 0 && $diff != $last_diff) {\n            return 0;\n        }\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev_diff = 0;\n    for my $i (1 .. $#digits) {\n        my $diff = $digits[$i] - $digits[$i-1];\n        return 0 if $diff == 0;\n        return 0 if $prev_diff != 0 && $diff != $prev_diff;\n        $prev_diff = $diff;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev = shift @digits;\n    my $prev_diff = 0;\n    for my $digit (@digits) {\n        my $diff = $digit - $prev;\n        return 0 if $diff == $prev_diff;\n        $prev_diff = $diff;\n        $prev = $digit;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    for my $i (1 .. $#digits - 1) {\n        return 0 unless $digits[$i - 1] != $digits[$i] && $digits[$i] != $digits[$i + 1];\n    }\n    return 1;\n}",
    "    my $prev_digit = -1;\n    my $prev_diff = -1;\n    my $curr_diff = -1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        $curr_diff = $digit - $prev_digit;\n        if ($prev_diff != -1 && $curr_diff != $prev_diff) {\n            return 0;\n        }\n        $prev_diff = $curr_diff;\n        $prev_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $i = 0;\n    while ($i < $#digits) {\n        return 0 if $digits[$i] == $digits[$i + 1];\n        $i++;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $i = 0;\n    while ($i < $#digits) {\n        return 0 if $digits[$i] == $digits[$i + 1];\n        $i += 2;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $prev_digit = -1;\n    my $prev_diff = -1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        my $diff = $digit - $prev_digit;\n        if ($prev_diff != -1 && $diff != $prev_diff) {\n            return 0;\n        }\n        $prev_diff = $diff;\n        $prev_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev_diff = 0;\n    my $undulating = 1;\n    for my $i (1 .. $#digits) {\n        my $diff = $digits[$i] - $digits[$i - 1];\n        if ($diff == 0) {\n            $undulating = 0;\n            last;\n        }\n        if ($prev_diff != 0 && $diff != $prev_diff) {\n            $undulating = 0;\n            last;\n        }\n        $prev_diff = $diff;\n    }\n    return $undulating;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    my $is_increasing = 1;\n    my $is_decreasing = 1;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        if ($digit > $last_digit) {\n            $is_decreasing = 0;\n        }\n        elsif ($digit < $last_digit) {\n            $is_increasing = 0;\n        }\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return $is_increasing || $is_decreasing;\n}",
    "    my @digits = split(//, $n);\n    my $last_digit = $digits[0];\n    my $last_diff = 0;\n    for my $digit (@digits[1..$#digits]) {\n        my $diff = $digit - $last_digit;\n        if ($last_diff == 0) {\n            $last_diff = $diff;\n        } elsif ($last_diff * $diff < 0) {\n            $last_diff = $diff;\n        } else {\n            return 0;\n        }\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = pop @digits;\n    my $last_diff = 0;\n    for my $digit (@digits) {\n        my $diff = $digit - $last_digit;\n        if ($last_diff == $diff) {\n            return 0;\n        }\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last = substr($n, 0, 1);\n    my $undulating = 1;\n    for my $i (1 .. length($n) - 1) {\n        my $digit = substr($n, $i, 1);\n        if ($digit == $last) {\n            $undulating = 0;\n            last;\n        }\n        $last = $digit;\n    }\n    return $undulating;\n}",
    "    my @digits = split //, $n;\n    my $i = 0;\n    while ($i < $#digits) {\n        if ($digits[$i] == $digits[$i + 1]) {\n            return 0;\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @digits = split(//,$n);\n    for(my $i=0;$i<@digits-2;$i++) {\n        return 0 if $digits[$i] == $digits[$i+1] or $digits[$i+1] == $digits[$i+2];\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = pop @digits;\n    my $last_diff = 0;\n    for my $digit (@digits) {\n        my $diff = $digit - $last_digit;\n        return 0 if $diff == 0;\n        return 0 if $diff == $last_diff;\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $i = 0;\n    while ($i < $#digits) {\n        return 0 if $digits[$i] == $digits[$i+1];\n        $i++;\n    }\n    return 1;\n}",
    "    my @digits = split(//, $n);\n    my $last_digit = shift @digits;\n    my $last_diff = 0;\n    for my $digit (@digits) {\n        my $diff = $digit - $last_digit;\n        if ($diff == 0) {\n            return 0;\n        }\n        if ($last_diff != 0 && $diff != $last_diff) {\n            return 0;\n        }\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my $s = $n;\n    my $d = 0;\n    my $last_d = -1;\n    my $last_d_count = 0;\n    while ($s > 0) {\n        $d = $s % 10;\n        if ($last_d == -1) {\n            $last_d = $d;\n            $last_d_count = 1;\n        } elsif ($last_d == $d) {\n            $last_d_count++;\n        } else {\n            if ($last_d_count == 1) {\n                $last_d = $d;\n                $last_d_count = 1;\n            } else {\n                return 0;\n            }\n        }\n        $s = int($s / 10);\n    }\n    return 1;\n}",
    "    my $s = \"$n\";\n    my $len = length($s);\n    my $i = 0;\n    while ($i < $len - 1) {\n        if (substr($s, $i, 1) == substr($s, $i + 1, 1)) {\n            return 0;\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    for my $i (1 .. $#digits) {\n        return 0 if $digits[$i] == $digits[$i - 1];\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $prev = 0;\n    my $curr = 0;\n    my $next = 0;\n    my $count = 0;\n    while ($n > 0) {\n        $prev = $curr;\n        $curr = $next;\n        $next = $n % 10;\n        if ($prev != 0 && $curr != 0) {\n            if ($prev > $curr && $curr < $next) {\n                $count++;\n            }\n            elsif ($prev < $curr && $curr > $next) {\n                $count++;\n            }\n        }\n        $n = int($n / 10);\n    }\n    return $count;\n}",
    "    my @digits = split //, $n;\n    my $prev = $digits[0];\n    my $prev_diff = 0;\n    for my $i (1 .. $#digits) {\n        my $diff = $digits[$i] - $prev;\n        if ($diff == 0) {\n            return 0;\n        }\n        if ($prev_diff == 0) {\n            $prev_diff = $diff;\n        }\n        elsif ($prev_diff != $diff) {\n            return 0;\n        }\n        $prev = $digits[$i];\n    }\n    return 1;\n}",
    "    my $s = \"$n\";\n    my $len = length($s);\n    for (my $i = 1; $i < $len; $i++) {\n        if (substr($s, $i, 1) == substr($s, $i - 1, 1)) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $prev = substr($n, 0, 1);\n    my $curr = substr($n, 1, 1);\n    my $next = substr($n, 2, 1);\n    my $prev_sign = $prev <=> $curr;\n    my $curr_sign = $curr <=> $next;\n    while (length($n) > 3) {\n        if ($prev_sign == $curr_sign) {\n            return 0;\n        }\n        $prev = $curr;\n        $curr = $next;\n        $next = substr($n, 3, 1);\n        $prev_sign = $prev <=> $curr;\n        $curr_sign = $curr <=> $next;\n        $n = substr($n, 1);\n    }\n    return $prev_sign != $curr_sign;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    my $is_increasing = 1;\n    my $is_decreasing = 1;\n    while ($n > 0) {\n        $n = int($n / 10);\n        my $digit = $n % 10;\n        if ($digit > $last_digit) {\n            $is_decreasing = 0;\n        }\n        elsif ($digit < $last_digit) {\n            $is_increasing = 0;\n        }\n        $last_digit = $digit;\n    }\n    return $is_increasing || $is_decreasing;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $str = sprintf \"%d\", $n;\n    my $len = length $str;\n    my $i = 0;\n    while ($i < $len - 1) {\n        my $a = substr $str, $i, 1;\n        my $b = substr $str, $i + 1, 1;\n        my $c = substr $str, $i + 2, 1;\n        return 0 if $a == $b || $b == $c;\n        if ($a > $b) {\n            return 0 if $b < $c;\n        } else {\n            return 0 if $b > $c;\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my $prev = -1;\n    my $prev_diff = -1;\n    my $curr_diff;\n    my $curr;\n    while ($n > 0) {\n        $curr = $n % 10;\n        $n /= 10;\n        $curr_diff = $curr - $prev;\n        if ($prev_diff == $curr_diff) {\n            return 0;\n        }\n        $prev_diff = $curr_diff;\n        $prev = $curr;\n    }\n    return 1;\n}",
    "    my $last = -1;\n    my $last_diff = 0;\n    my $diff = 0;\n    for my $d (split //, $n) {\n        $diff = $d - $last;\n        return 0 if $diff == $last_diff;\n        $last_diff = $diff;\n        $last = $d;\n    }\n    return 1;\n}",
    "    my $prev = substr($n, 0, 1);\n    my $curr = substr($n, 1, 1);\n    my $next = substr($n, 2, 1);\n    my $flag = 0;\n    for (my $i = 1; $i < length($n); $i++) {\n        if ($prev < $curr && $curr > $next) {\n            $flag = 1;\n        }\n        elsif ($prev > $curr && $curr < $next) {\n            $flag = 1;\n        }\n        else {\n            return 0;\n        }\n        $prev = $curr;\n        $curr = $next;\n        $next = substr($n, $i+2, 1);\n    }\n    return $flag;\n}",
    "    my $s = sprintf(\"%d\", $n);\n    my $len = length($s);\n    for (my $i = 0; $i < $len - 2; $i++) {\n        if (substr($s, $i, 1) == substr($s, $i + 1, 1)) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev_diff = 0;\n    for my $i (1 .. $#digits) {\n        my $diff = $digits[$i] - $digits[$i-1];\n        return 0 if $diff == 0;\n        return 0 if $prev_diff != 0 && $diff != $prev_diff;\n        $prev_diff = $diff;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev = $digits[0];\n    my $prev_diff = 0;\n    for my $i (1 .. $#digits) {\n        my $diff = $digits[$i] - $prev;\n        if ($diff == 0) {\n            return 0;\n        }\n        if ($prev_diff != 0 && $diff != $prev_diff) {\n            return 0;\n        }\n        $prev = $digits[$i];\n        $prev_diff = $diff;\n    }\n    return 1;\n}",
    "\n    my $prev_digit = undef;\n    my $prev_diff = undef;\n    foreach my $digit (split //, $n) {\n        my $diff = $digit - $prev_digit;\n        if (defined $prev_diff) {\n            return 0 if $diff == 0 || $diff == $prev_diff;\n        }\n        $prev_diff = $diff;\n        $prev_digit = $digit;\n    }",
    "    my $last_digit = -1;\n    my $last_diff = -1;\n    while($n) {\n        my $digit = $n % 10;\n        my $diff = $last_digit - $digit;\n        if($last_diff == $diff) {\n            return 0;\n        }\n        $last_diff = $diff;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last_digit = -1;\n    my $last_diff = 0;\n    while ($n) {\n        my $digit = $n % 10;\n        my $diff = $digit - $last_digit;\n        return 0 if $diff == 0;\n        return 0 if $diff == $last_diff;\n        $last_diff = $diff;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last_digit = -1;\n    my $last_digit_pair = -1;\n    my $last_digit_pair_count = 0;\n    my $last_digit_pair_count_max = 0;\n    my $last_digit_pair_count_min = 0;\n    my $last_digit_pair_count_max_seen = 0;\n    my $last_digit_pair_count_min_seen = 0;\n    while ($n) {\n        my $digit = $n % 10;\n        if ($last_digit != -1) {\n            if ($last_digit_pair == -1) {\n                $last_digit_pair = $last_digit;\n                $last_digit_pair_count = 1;\n            }\n            elsif ($last_digit_pair == $last_digit) {\n                $last_digit_pair_count++;\n            }\n            else {\n                if ($last_digit_pair_count_max_seen) {\n                    if ($last_digit_pair_count_max < $last_digit_pair_count) {\n                        $last_digit_pair_count_min = $last_digit_pair_count_max;\n                        $last_digit_pair_count_min_seen = 1;\n                        $last_digit_pair_count_max = $last_digit_pair_count;\n                    }\n                    elsif ($last_digit_pair_count_min_seen) {\n                        if ($last_digit_pair_count_min > $last_digit_pair_count) {\n                            $last_digit_pair_count_min = $last_digit_pair_count;\n                        }\n                    }\n                    else {\n                        $last_digit_pair_count_min = $last_digit_pair_count;\n                        $last_digit_pair_count_min_seen = 1;\n                    }\n                }\n                else {\n                    $last_digit_pair_count_max = $last_digit_pair_count;\n                    $last_digit_pair_count_max_seen = 1;\n                }\n                $last_digit_pair = $last_digit;\n                $last_digit_pair",
    "    my @digits = split //, $n;\n    for my $i (0 .. $#digits - 2) {\n        return 0 if $digits[$i] == $digits[$i + 1]\n            || $digits[$i + 1] == $digits[$i + 2];\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $i = 0;\n    my $j = $#digits;\n    while ($i < $j) {\n        return 0 if $digits[$i] == $digits[$i+1];\n        return 0 if $digits[$j] == $digits[$j-1];\n        return 0 if $digits[$i] != $digits[$j];\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $len = @digits;\n    my $i = 1;\n    while ($i < $len) {\n        return 0 if $digits[$i] == $digits[$i-1];\n        $i += 2;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $i = 0;\n    while ($i < $#digits) {\n        return 0 if $digits[$i] == $digits[$i+1];\n        $i++;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev = shift @digits;\n    for my $d (@digits) {\n        return 0 if $d == $prev;\n        $prev = $d;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    return 0 if $n < 100;\n    my @digits = split //, $n;\n    my $prev_diff = $digits[1] - $digits[0];\n    my $cur_diff;\n    for my $i (1 .. $#digits - 1) {\n        $cur_diff = $digits[$i + 1] - $digits[$i];\n        return 0 if $cur_diff == 0;\n        return 0 if $cur_diff == $prev_diff;\n        $prev_diff = $cur_diff;\n    }\n    return 1;\n}",
    "    my $s = sprintf(\"%d\", $n);\n    my $len = length($s);\n    my $i = 0;\n    while ($i < $len - 1) {\n        if (substr($s, $i, 1) == substr($s, $i + 1, 1)) {\n            return 0;\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my $last_digit = -1;\n    my $last_diff = 0;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        my $diff = $digit - $last_digit;\n        if ($last_digit >= 0 && $last_diff != $diff) {\n            return 0;\n        }\n        $last_digit = $digit;\n        $last_diff = $diff;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $i = 0;\n    while ($i < $#digits) {\n        return 0 if $digits[$i] == $digits[$i+1];\n        $i++;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = pop @digits;\n    my $last_diff = 0;\n    my $last_sign = 0;\n    for my $digit (@digits) {\n        my $diff = $digit - $last_digit;\n        my $sign = $diff <=> 0;\n        if ($last_sign != 0 && $last_sign != $sign) {\n            return 0;\n        }\n        $last_sign = $sign;\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = shift @digits;\n    my $last_diff = 0;\n    for my $digit (@digits) {\n        my $diff = $digit - $last_digit;\n        return 0 if $diff == 0;\n        return 0 if $last_diff != 0 && $diff != $last_diff;\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = shift @digits;\n    my $last_diff = 0;\n    for my $digit (@digits) {\n        my $diff = $digit - $last_digit;\n        return 0 if $diff == 0;\n        return 0 if $diff == $last_diff;\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my $s = $n;\n    my $d = 0;\n    my $last_d = -1;\n    my $last_d_diff = 0;\n    while ($s) {\n        $d = $s % 10;\n        $s = int($s / 10);\n        if ($last_d != -1) {\n            my $diff = $d - $last_d;\n            if ($last_d_diff == 0) {\n                $last_d_diff = $diff;\n            } elsif ($last_d_diff != $diff) {\n                return 1;\n            }\n        }\n        $last_d = $d;\n    }\n    return 0;\n}",
    "    my $prev = substr($n, 0, 1);\n    my $curr = substr($n, 1, 1);\n    my $next = substr($n, 2, 1);\n    my $is_undulating = 0;\n    while ($next) {\n        if ($prev < $curr && $curr > $next) {\n            $is_undulating = 1;\n            last;\n        }\n        elsif ($prev > $curr && $curr < $next) {\n            $is_undulating = 1;\n            last;\n        }\n        $prev = $curr;\n        $curr = $next;\n        $next = substr($n, $curr, 1);\n    }\n    return $is_undulating;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = $digits[0];\n    my $last_diff = 0;\n    for my $digit (@digits[1..$#digits]) {\n        my $diff = $digit - $last_digit;\n        return 0 if $diff == 0;\n        return 0 if $diff == $last_diff;\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my $s = sprintf \"%d\", $n;\n    my @d = split //, $s;\n    my $i = 0;\n    my $j = $#d;\n    while ($i < $j) {\n        return 0 if $d[$i] == $d[$i + 1];\n        return 0 if $d[$j] == $d[$j - 1];\n        return 0 if $d[$i] != $d[$j];\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    my $prev = 0;\n    my $curr = 0;\n    my $next = 0;\n    my $is_undulating = 0;",
    "    my @digits = split //, $n;\n    my $last_digit = pop @digits;\n    my $last_diff = undef;\n    my $last_last_diff = undef;\n    for my $digit (@digits) {\n        my $diff = $digit - $last_digit;\n        if (defined $last_diff) {\n            if (defined $last_last_diff) {\n                return 0 if $diff == $last_last_diff;\n            }\n            $last_last_diff = $last_diff;\n        }\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $i = 0;\n    my $j = $#digits;\n    while ($i < $j) {\n        return 0 if $digits[$i] == $digits[$i+1];\n        return 0 if $digits[$j] == $digits[$j-1];\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    for my $i (0 .. $#digits - 2) {\n        return 0 if $digits[$i] == $digits[$i + 1] ||\n                    $digits[$i + 1] == $digits[$i + 2] ||\n                    $digits[$i] == $digits[$i + 2];\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = pop @digits;\n    my $last_diff = 0;\n    my $last_last_diff = 0;\n    for my $digit (@digits) {\n        my $diff = $digit - $last_digit;\n        return 0 if $diff == $last_diff;\n        $last_last_diff = $last_diff;\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my $last = -1;\n    my $count = 0;\n    while ($n) {\n        my $d = $n % 10;\n        if ($last == -1) {\n            $last = $d;\n        } elsif ($d != $last) {\n            $count++;\n            $last = $d;\n        }\n        $n /= 10;\n    }\n    return $count > 1;\n}",
    "    my $last_digit = $n % 10;\n    my $next_digit = ($n % 100) / 10;\n    my $is_odd = $n % 2;\n    while ($n > 0) {\n        if ($is_odd) {\n            return 0 if $last_digit != $next_digit;\n        } else {\n            return 0 if $last_digit == $next_digit;\n        }\n        $is_odd = !$is_odd;\n        $n /= 10;\n        $last_digit = $next_digit;\n        $next_digit = $n % 10;\n    }\n    return 1;\n}",
    "    my $last_digit = -1;\n    my $last_diff = -1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        $n /= 10;\n        my $diff = $digit - $last_digit;\n        return 0 if $diff == 0;\n        return 0 if $diff == $last_diff;\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my $prev = $n % 10;\n    $n /= 10;\n    while ($n) {\n        my $curr = $n % 10;\n        return 0 if $curr == $prev;\n        $prev = $curr;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $prev_digit = undef;\n    my $prev_diff = undef;\n    my $curr_diff = undef;\n    while ($n > 0) {\n        my $curr_digit = $n % 10;\n        $n = int($n / 10);\n        if (defined $prev_digit) {\n            $curr_diff = $curr_digit - $prev_digit;\n            if (defined $prev_diff) {\n                if ($curr_diff == $prev_diff) {\n                    return 0;\n                }\n            }\n            $prev_diff = $curr_diff;\n        }\n        $prev_digit = $curr_digit;\n    }\n    return 1;\n}",
    "    my $last_digit = -1;\n    my $last_diff = -1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        $n /= 10;\n        if ($last_digit >= 0) {\n            my $diff = $last_digit - $digit;\n            if ($diff == 0) {\n                return 0;\n            }\n            if ($last_diff >= 0) {\n                if ($diff * $last_diff < 0) {\n                    return 0;\n                }\n            }\n            $last_diff = $diff;\n        }\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my $prev = substr($n, 0, 1);\n    my $curr = substr($n, 1, 1);\n    my $next = substr($n, 2, 1);\n    my $dir = $curr - $prev;\n    while ($next) {\n        if ($dir * ($curr - $next) < 0) {\n            return 1;\n        }\n        $prev = $curr;\n        $curr = $next;\n        $next = substr($n, $curr + 1, 1);\n    }\n    return 0;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $prev = -1;\n    my $curr = -1;\n    my $next = -1;\n    while ($n) {\n        $prev = $curr;\n        $curr = $next;\n        $next = $n % 10;\n        $n = int($n / 10);\n        if ($curr != -1 && $prev != -1 && $next != -1) {\n            if ($curr > $prev && $curr > $next) {\n                return 0;\n            }\n            if ($curr < $prev && $curr < $next) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = $digits[0];\n    my $last_diff = 0;\n    for my $i (1 .. $#digits) {\n        my $diff = $digits[$i] - $last_digit;\n        if ($diff != 0 && $diff == -$last_diff) {\n            $last_diff = $diff;\n            $last_digit = $digits[$i];\n        }\n        else {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $prev_digit = -1;\n    my $prev_diff = -1;\n    my $curr_diff = -1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        $curr_diff = $digit - $prev_digit;\n        if ($prev_diff != -1 && $curr_diff != $prev_diff) {\n            return 0;\n        }\n        $prev_diff = $curr_diff;\n        $prev_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    for my $i (1 .. $#digits) {\n        return 0 if $digits[$i] == $digits[$i-1];\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev_diff = $digits[1] - $digits[0];\n    for my $i (1 .. $#digits - 1) {\n        my $diff = $digits[$i + 1] - $digits[$i];\n        return 0 if $diff == $prev_diff;\n        $prev_diff = $diff;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $prev_digit = -1;\n    my $prev_diff = 0;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        my $diff = $digit - $prev_digit;\n        if ($prev_diff != 0 && $diff != 0 && $diff != $prev_diff) {\n            return 0;\n        }\n        $prev_diff = $diff;\n        $prev_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev = $digits[0];\n    my $prev_diff = 0;\n    for my $i (1..$#digits) {\n        my $diff = $digits[$i] - $prev;\n        return 0 if $diff == 0;\n        return 0 if $prev_diff != 0 && $diff != $prev_diff;\n        $prev = $digits[$i];\n        $prev_diff = $diff;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = $digits[0];\n    my $last_diff = 0;\n    for my $i (1 .. $#digits) {\n        my $diff = $digits[$i] - $last_digit;\n        return 0 if $diff == 0;\n        return 0 if $diff == $last_diff;\n        $last_diff = $diff;\n        $last_digit = $digits[$i];\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $i = 0;\n    while ($i < $#digits) {\n        return 0 if $digits[$i] == $digits[$i + 1];\n        $i += 2;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev_digit = $digits[0];\n    my $prev_diff = 0;\n    for my $digit (@digits[1..$#digits]) {\n        my $diff = $digit - $prev_digit;\n        if ($prev_diff != 0 && $diff != 0 && $prev_diff != $diff) {\n            return 0;\n        }\n        $prev_diff = $diff;\n        $prev_digit = $digit;\n    }\n    return 1;\n}",
    "    my $s = $n;\n    my $d = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0",
    "    my @digits = split //, $n;\n    my $last_digit = pop @digits;\n    my $last_diff = 0;\n    my $last_sign = 0;\n    for my $digit (@digits) {\n        my $diff = $digit - $last_digit;\n        my $sign = $diff <=> 0;\n        return 0 if $sign == $last_sign;\n        $last_diff = $diff;\n        $last_sign = $sign;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $i = 0;\n    while ($i < $#digits) {\n        return 0 if $digits[$i] == $digits[$i+1];\n        $i++;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev = -1;\n    my $prev_diff = -1;\n    for my $d (@digits) {\n        my $diff = $d - $prev;\n        return 0 if $diff == $prev_diff;\n        $prev_diff = $diff;\n        $prev = $d;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev_diff = 0;\n    for my $i (1 .. $#digits) {\n        my $diff = $digits[$i] - $digits[$i-1];\n        if ($prev_diff * $diff < 0) {\n            return 1;\n        }\n        $prev_diff = $diff;\n    }\n    return 0;\n}",
    "    my @digits = split //, $n;\n    my $prev = $digits[0];\n    my $state = 0;\n    for my $d (@digits[1..$#digits]) {\n        if ($state == 0) {\n            if ($d > $prev) {\n                $state = 1;\n            } elsif ($d < $prev) {\n                $state = -1;\n            }\n        } elsif ($state == 1) {\n            if ($d < $prev) {\n                return 1;\n            }\n        } elsif ($state == -1) {\n            if ($d > $prev) {\n                return 1;\n            }\n        }\n        $prev = $d;\n    }\n    return 0;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = pop @digits;\n    my $last_diff = 0;\n    my $last_diff_sign = 0;\n    for my $d (@digits) {\n        my $diff = $d - $last_digit;\n        my $diff_sign = $diff <=> 0;\n        if ($last_diff_sign != 0 && $diff_sign != 0 && $last_diff_sign != $diff_sign) {\n            return 1;\n        }\n        $last_diff = $diff;\n        $last_diff_sign = $diff_sign;\n        $last_digit = $d;\n    }\n    return 0;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = pop @digits;\n    my $last_diff = 0;\n    my $last_sign = 0;\n    for my $digit (@digits) {\n        my $diff = $digit - $last_digit;\n        my $sign = $diff <=> 0;\n        if ($last_sign != 0 && $sign != $last_sign) {\n            return 0;\n        }\n        $last_sign = $sign;\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    for my $i (0 .. $#digits - 2) {\n        return 0 if $digits[$i] == $digits[$i + 1] || $digits[$i + 1] == $digits[$i + 2];\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev_diff = $digits[1] - $digits[0];\n    for my $i (1 .. $#digits - 1) {\n        my $diff = $digits[$i + 1] - $digits[$i];\n        return 0 if $diff == 0 || $diff == $prev_diff;\n        $prev_diff = $diff;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $i = 0;\n    while ($i < $#digits) {\n        return 0 if $digits[$i] == $digits[$i+1];\n        $i++;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = $digits[0];\n    my $last_digit_type = $last_digit % 2;\n    for my $digit (@digits[1..$#digits]) {\n        my $digit_type = $digit % 2;\n        return 0 if $digit_type == $last_digit_type;\n        $last_digit_type = $digit_type;\n    }\n    return 1;\n}",
    "    my $s = $n % 10;\n    $n /= 10;\n    while ($n) {\n        my $d = $n % 10;\n        return 0 if $d == $s;\n        $s = $d;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $prev_digit = -1;\n    my $prev_diff = 0;\n    my $curr_diff = 0;\n    while ($n) {\n        my $digit = $n % 10;\n        $curr_diff = $digit - $prev_digit;\n        if ($prev_diff * $curr_diff < 0) {\n            $prev_diff = $curr_diff;\n            $prev_digit = $digit;\n            $n /= 10;\n        } else {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    my $next_digit = ($n % 100) / 10;\n    my $is_increasing = $last_digit > $next_digit;\n    while ($n >= 10) {\n        $n /= 10;\n        $last_digit = $next_digit;\n        $next_digit = ($n % 10);\n        if ($is_increasing) {\n            return 0 if $last_digit < $next_digit;\n        } else {\n            return 0 if $last_digit > $next_digit;\n        }\n        $is_increasing = !$is_increasing;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = -1;\n    my $last_diff = 0;\n    my $last_diff_count = 0;\n    for my $digit (@digits) {\n        if ($last_digit != -1) {\n            my $diff = $digit - $last_digit;\n            if ($last_diff_count == 0) {\n                $last_diff = $diff;\n                $last_diff_count = 1;\n            } elsif ($last_diff == $diff) {\n                $last_diff_count++;\n            } elsif ($last_diff == -$diff) {\n                $last_diff_count = 1;\n                $last_diff = $diff;\n            } else {\n                return 0;\n            }\n        }\n        $last_digit = $digit;\n    }\n    return $last_diff_count > 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split(//, $n);\n    my $prev_diff = 0;\n    for (my $i = 1; $i < @digits; $i++) {\n        my $diff = $digits[$i] - $digits[$i-1];\n        if ($prev_diff != 0 && $diff != $prev_diff) {\n            return 0;\n        }\n        $prev_diff = $diff;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev = $digits[0];\n    my $state = 0;\n    for my $d (@digits[1..$#digits]) {\n        if ($state == 0) {\n            if ($d > $prev) {\n                $state = 1;\n            } elsif ($d < $prev) {\n                $state = -1;\n            } else {\n                return 0;\n            }\n        } elsif ($state == 1) {\n            if ($d < $prev) {\n                $state = 0;\n            } elsif ($d == $prev) {\n                return 0;\n            }\n        } elsif ($state == -1) {\n            if ($d > $prev) {\n                $state = 0;\n            } elsif ($d == $prev) {\n                return 0;\n            }\n        }\n        $prev = $d;\n    }\n    return $state == 0;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $s = \"$n\";\n    my $len = length($s);\n    my $i = 0;\n    while ($i < $len - 1) {\n        my $d1 = substr($s, $i, 1);\n        my $d2 = substr($s, $i + 1, 1);\n        if ($d1 == $d2) {\n            return 0;\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @digits = split(//, $n);\n    my $i = 0;\n    my $j = $#digits;\n    while ($i < $j) {\n        return 0 if $digits[$i] == $digits[$i+1];\n        return 0 if $digits[$j] == $digits[$j-1];\n        return 0 if $digits[$i] != $digits[$j];\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    my $prev = undef;\n    my $prev_diff = undef;\n    while ($n > 0) {\n        my $d = $n % 10;\n        $n = int($n / 10);\n        if (defined $prev) {\n            my $diff = $d - $prev;\n            if (defined $prev_diff) {\n                return 0 if $diff == $prev_diff;\n            }\n            $prev_diff = $diff;\n        }\n        $prev = $d;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    my $last_last_digit = -1;\n    my $last_last_last_digit = -1;\n    while ($n > 0) {\n        $last_last_last_digit = $last_last_digit;\n        $last_last_digit = $last_digit;\n        $last_digit = $n % 10;\n        $n /= 10;\n    }\n    return ($last_last_last_digit != $last_last_digit) && ($last_last_digit != $last_digit) && ($last_last_last_digit != $last_digit);\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_diff = 0;\n    for my $i (1 .. $#digits) {\n        my $diff = $digits[$i] - $digits[$i-1];\n        return 0 if $diff == 0;\n        return 0 if $last_diff != 0 && $diff != $last_diff;\n        $last_diff = $diff;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    for my $i (0 .. $#digits - 2) {\n        return 0 if $digits[$i] == $digits[$i + 1];\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev_diff = $digits[1] - $digits[0];\n    for my $i (1 .. $#digits - 1) {\n        my $diff = $digits[$i + 1] - $digits[$i];\n        return 0 if $diff == $prev_diff;\n        $prev_diff = $diff;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = shift @digits;\n    my $last_diff = 0;\n    for my $digit (@digits) {\n        my $diff = $digit - $last_digit;\n        return 0 if $diff == 0;\n        return 0 if $diff == $last_diff;\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my $prev_digit = -1;\n    my $prev_diff = 0;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        my $diff = $digit - $prev_digit;\n        if ($prev_digit >= 0) {\n            if ($prev_diff * $diff != -1) {\n                return 0;\n            }\n        }\n        $prev_diff = $diff;\n        $prev_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $i = 0;\n    while ($i < $#digits) {\n        return 0 if $digits[$i] == $digits[$i+1];\n        $i++;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = shift @digits;\n    my $last_diff = 0;\n    for my $digit (@digits) {\n        my $diff = $digit - $last_digit;\n        return 0 if $diff == $last_diff;\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev_digit = $digits[0];\n    my $prev_diff = 0;\n    for my $digit (@digits[1..$#digits]) {\n        my $diff = $digit - $prev_digit;\n        if ($diff == 0) {\n            return 0;\n        }\n        if ($prev_diff != 0 && $diff != $prev_diff) {\n            return 0;\n        }\n        $prev_diff = $diff;\n        $prev_digit = $digit;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = $digits[0];\n    my $last_diff = 0;\n    for my $digit (@digits[1..$#digits]) {\n        my $diff = $digit - $last_digit;\n        return 0 if $diff == $last_diff;\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = pop @digits;\n    my $last_diff = 0;\n    for my $digit (@digits) {\n        my $diff = $last_digit - $digit;\n        if ($diff == 0) {\n            return 0;\n        }\n        if ($last_diff != 0 && $diff != $last_diff) {\n            return 0;\n        }\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev = $digits[0];\n    my $prev_diff = 0;\n    for my $i (1 .. $#digits) {\n        my $diff = $digits[$i] - $prev;\n        if ($prev_diff == 0) {\n            $prev_diff = $diff;\n        }\n        elsif ($prev_diff * $diff <= 0) {\n            return 0;\n        }\n        $prev = $digits[$i];\n    }\n    return 1;\n}",
    "    my $last = -1;\n    my $last_last = -1;\n    while ($n) {\n        my $d = $n % 10;\n        return 0 if $last == $d;\n        return 0 if $last_last != -1 && $last_last != $d;\n        $last_last = $last;\n        $last = $d;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $str = \"$n\";\n    my $len = length($str);\n    my $i = 0;\n    while ($i < $len - 1) {\n        my $a = substr($str, $i, 1);\n        my $b = substr($str, $i + 1, 1);\n        if ($a == $b) {\n            return 0;\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    for my $i (0 .. $#digits - 2) {\n        return 0 if $digits[$i] == $digits[$i+1] || $digits[$i+1] == $digits[$i+2];\n    }\n    return 1;\n}",
    "    my $s = \"$n\";\n    my @a = split //, $s;\n    my $i = 0;\n    while ($i < $#a) {\n        if ($a[$i] == $a[$i + 1]) {\n            return 0;\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $last_digit == $digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = pop @digits;\n    my $last_diff = 0;\n    my $undulating = 1;\n    for my $digit (@digits) {\n        my $diff = $digit - $last_digit;\n        if ($diff == 0) {\n            $undulating = 0;\n            last;\n        }\n        if ($diff == $last_diff) {\n            $undulating = 0;\n            last;\n        }\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return $undulating;\n}",
    "    my @digits = split //, $n;\n    for my $i (0 .. $#digits - 2) {\n        return 0 if $digits[$i] == $digits[$i + 1] ||\n                    $digits[$i + 1] == $digits[$i + 2] ||\n                    $digits[$i] == $digits[$i + 2];\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = pop @digits;\n    my $last_diff = 0;\n    my $last_sign = 0;\n    for my $digit (@digits) {\n        my $diff = $digit - $last_digit;\n        my $sign = $diff <=> 0;\n        return 0 if $sign == $last_sign;\n        $last_sign = $sign;\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    my $next_digit = ($n % 100) / 10;\n    my $is_increasing = $last_digit > $next_digit;\n    while ($n > 0) {\n        $last_digit = $next_digit;\n        $next_digit = ($n % 100) / 10;\n        $n /= 10;\n        if ($last_digit == $next_digit) {\n            return 0;\n        }\n        if ($is_increasing && $last_digit < $next_digit) {\n            return 0;\n        }\n        if (!$is_increasing && $last_digit > $next_digit) {\n            return 0;\n        }\n        $is_increasing = !$is_increasing;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $prev = substr($n, 0, 1);\n    my $curr = substr($n, 1, 1);\n    my $next = substr($n, 2, 1);\n    my $i = 1;\n    my $flag = 0;\n    while ($i < length($n) - 1) {\n        if ($prev < $curr && $curr > $next) {\n            $flag = 1;\n        }\n        elsif ($prev > $curr && $curr < $next) {\n            $flag = 1;\n        }\n        else {\n            $flag = 0;\n            last;\n        }\n        $prev = $curr;\n        $curr = $next;\n        $next = substr($n, $i + 2, 1);\n        $i++;\n    }\n    return $flag;\n}",
    "    my $last = -1;\n    my $last_diff = -1;\n    my $diff = 0;\n    while ($n) {\n        $diff = $n % 10 - $last;\n        return 0 if $last_diff == $diff;\n        $last_diff = $diff;\n        $last = $n % 10;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    my $prev_digit;\n    $n /= 10;\n    while ($n > 0) {\n        $prev_digit = $n % 10;\n        return 0 if $prev_digit == $last_digit;\n        $last_digit = $prev_digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $i = 0;\n    while ($i < $#digits) {\n        return 0 if $digits[$i] == $digits[$i + 1];\n        $i += 2;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $i = 0;\n    my $j = $#digits;\n    while ($i < $j) {\n        return 0 if $digits[$i] == $digits[$i+1] || $digits[$j] == $digits[$j-1];\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = $digits[0];\n    my $last_diff = 0;\n    for my $digit (@digits[1..$#digits]) {\n        my $diff = $digit - $last_digit;\n        if ($last_diff == 0) {\n            $last_diff = $diff;\n        } elsif ($last_diff == $diff) {\n            return 0;\n        } else {\n            $last_diff = $diff;\n        }\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = pop @digits;\n    my $last_diff = 0;\n    for my $digit (@digits) {\n        my $diff = $digit - $last_digit;\n        return 0 if $diff == $last_diff;\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my $prev_d = -1;\n    my $prev_dd = -1;\n    while ($n) {\n        my $d = $n % 10;\n        $n /= 10;\n        return 0 if $prev_d == -1;\n        return 0 if $prev_d == $d;\n        return 0 if $prev_dd == $d;\n        $prev_dd = $prev_d;\n        $prev_d = $d;\n    }\n    return 1;\n}",
    "    my $prev = undef;\n    my $curr = undef;\n    my $flag = 0;\n    while($n) {\n        $curr = $n % 10;\n        if(defined $prev) {\n            if($prev == $curr) {\n                return 0;\n            }\n            if($flag == 0) {\n                if($prev > $curr) {\n                    $flag = 1;\n                }\n                elsif($prev < $curr) {\n                    $flag = -1;\n                }\n            }\n            elsif($flag == 1) {\n                if($prev < $curr) {\n                    return 0;\n                }\n            }\n            elsif($flag == -1) {\n                if($prev > $curr) {\n                    return 0;\n                }\n            }\n        }\n        $prev = $curr;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = shift @digits;\n    my $last_diff = 0;\n    for my $digit (@digits) {\n        my $diff = $digit - $last_digit;\n        return 0 if $diff == 0;\n        return 0 if $diff == $last_diff;\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my $prev = 0;\n    my $curr = 0;\n    my $next = 0;\n    my $count = 0;\n    while ($n) {\n        $next = $n % 10;\n        $n /= 10;\n        $curr = $n % 10;\n        $n /= 10;\n        if ($count > 0) {\n            if ($prev == $curr) {\n                return 0;\n            }\n            if ($curr == $next) {\n                return 0;\n            }\n        }\n        $prev = $curr;\n        $count++;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $i = 0;\n    while ($i < $#digits) {\n        return 0 if $digits[$i] == $digits[$i+1];\n        $i++;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    my $next_digit = ($n / 10) % 10;\n    my $is_increasing = $last_digit > $next_digit;\n    while ($n) {\n        $n /= 10;\n        $last_digit = $next_digit;\n        $next_digit = $n % 10;\n        return 0 if $is_increasing && $last_digit <= $next_digit;\n        return 0 if !$is_increasing && $last_digit >= $next_digit;\n        $is_increasing = !$is_increasing;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = pop @digits;\n    my $last_diff = 0;\n    for my $digit (@digits) {\n        my $diff = $digit - $last_digit;\n        return 0 if $diff == 0;\n        return 0 if $diff == $last_diff;\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev_diff = $digits[0] - $digits[1];\n    for my $i (1 .. $#digits - 1) {\n        my $diff = $digits[$i] - $digits[$i + 1];\n        if ($diff == 0 || $diff == $prev_diff) {\n            return 0;\n        }\n        $prev_diff = $diff;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev_diff = 0;\n    for my $i (1 .. $#digits) {\n        my $diff = $digits[$i] - $digits[$i-1];\n        return 0 if $diff == 0;\n        return 0 if $prev_diff != 0 && $diff != $prev_diff;\n        $prev_diff = $diff;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $s = sprintf(\"%d\", $n);\n    my $i = 0;\n    my $j = length($s) - 1;\n    while ($i < $j) {\n        return 0 if substr($s, $i, 1) == substr($s, $i+1, 1);\n        return 0 if substr($s, $j, 1) == substr($s, $j-1, 1);\n        return 0 if substr($s, $i, 1) != substr($s, $j, 1);\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev = $digits[0];\n    my $prev_diff = 0;\n    for my $d (@digits[1..$#digits]) {\n        my $diff = $d - $prev;\n        if ($diff == 0) {\n            return 0;\n        }\n        if ($prev_diff != 0 && $diff != $prev_diff) {\n            return 0;\n        }\n        $prev_diff = $diff;\n        $prev = $d;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev = $digits[0];\n    my $prev_diff = 0;\n    for my $d (@digits[1..$#digits]) {\n        my $diff = $d - $prev;\n        if ($prev_diff && $diff != $prev_diff) {\n            return 0;\n        }\n        $prev_diff = $diff;\n        $prev = $d;\n    }\n    return 1;\n}",
    "    my $n_str = \"$n\";\n    my $len = length($n_str);\n    my $i = 0;\n    my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($n_str, $i, 1) != substr($n_str, $j, 1)) {\n            return 0;\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $s = sprintf(\"%d\", $n);\n    my $len = length($s);\n    my $i = 0;\n    while ($i < $len - 1) {\n        my $d1 = substr($s, $i, 1);\n        my $d2 = substr($s, $i + 1, 1);\n        if ($d1 == $d2) {\n            return 0;\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    my $next_digit = ($n / 10) % 10;\n    my $is_increasing = $last_digit > $next_digit;\n    while ($n > 0) {\n        $last_digit = $next_digit;\n        $next_digit = ($n / 10) % 10;\n        if ($last_digit == $next_digit) {\n            return 0;\n        }\n        if ($is_increasing && $last_digit < $next_digit) {\n            return 0;\n        }\n        if (!$is_increasing && $last_digit > $next_digit) {\n            return 0;\n        }\n        $is_increasing = !$is_increasing;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev_diff = 0;\n    my $curr_diff = 0;\n    for my $i (1 .. $#digits) {\n        $curr_diff = $digits[$i] - $digits[$i-1];\n        return 0 if $curr_diff == $prev_diff;\n        $prev_diff = $curr_diff;\n    }\n    return 1;\n}",
    "    my $prev_digit = -1;\n    my $prev_diff = 0;\n    my $curr_diff = 0;\n    while ($n) {\n        my $digit = $n % 10;\n        $curr_diff = $digit - $prev_digit;\n        if ($prev_diff * $curr_diff < 0) {\n            return 1;\n        }\n        $prev_diff = $curr_diff;\n        $prev_digit = $digit;\n        $n /= 10;\n    }\n    return 0;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = $digits[0];\n    my $last_diff = 0;\n    for my $digit (@digits[1 .. $#digits]) {\n        my $diff = $digit - $last_digit;\n        return 0 if $diff == 0;\n        return 0 if $diff == $last_diff;\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $i = 0;\n    while ($i < $#digits) {\n        if ($digits[$i] == $digits[$i+1]) {\n            return 0;\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last = -1;\n    my $last_diff = -1;\n    my $diff = -1;\n    while ($n) {\n        $diff = $n % 10 - $last;\n        return 0 if $diff == $last_diff;\n        $last_diff = $diff;\n        $last = $n % 10;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $prev_digit = undef;\n    my $prev_diff = undef;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        my $diff = $prev_digit - $digit;\n        if (defined($prev_diff) && $diff != $prev_diff) {\n            return 0;\n        }\n        $prev_diff = $diff;\n        $prev_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = pop @digits;\n    my $last_diff = $last_digit - $digits[-1];\n    for my $i (0 .. $#digits-1) {\n        my $diff = $digits[$i] - $digits[$i+1];\n        return 0 if $diff == 0 || $diff == $last_diff;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $i = 0;\n    while ($i < @digits - 1) {\n        if ($digits[$i] == $digits[$i + 1]) {\n            return 0;\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    my $next_digit = ($n % 100) / 10;\n    my $is_increasing = $last_digit > $next_digit;\n    while ($n > 0) {\n        $n /= 10;\n        $last_digit = $next_digit;\n        $next_digit = ($n % 100) / 10;\n        return 0 if $last_digit == $next_digit;\n        return 0 if $is_increasing && $last_digit < $next_digit;\n        return 0 if !$is_increasing && $last_digit > $next_digit;\n        $is_increasing = !$is_increasing;\n    }\n    return 1;\n}"
  ]
}