{
  "name": "mbpp_92_is_undulating",
  "language": "pl",
  "prompt": "# Write a function to check whether the given number is undulating or not.\nsub is_undulating {\n    my($n) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_undulating;\n        if(eq_deeply($candidate->(1212121),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1991),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(121),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @digits = split(//, $n);\n    my $i = 0;\n    my $j = $#digits;\n    while ($i < $j) {\n        return 0 if $digits[$i] == $digits[$i+1];\n        return 0 if $digits[$j] == $digits[$j-1];\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev = $digits[0];\n    my $state = 0;\n    for my $d (@digits[1..$#digits]) {\n        if ($d == $prev) {\n            return 0;\n        }\n        if ($state == 0) {\n            if ($d > $prev) {\n                $state = 1;\n            }\n            else {\n                $state = -1;\n            }\n        }\n        elsif ($state == 1) {\n            if ($d < $prev) {\n                $state = 0;\n            }\n        }\n        elsif ($state == -1) {\n            if ($d > $prev) {\n                $state = 0;\n            }\n        }\n        $prev = $d;\n    }\n    return $state == 0;\n}",
    "    my $prev_digit = -1;\n    my $prev_diff = -1;\n    my $is_undulating = 1;\n    while ($n) {\n        my $digit = $n % 10;\n        my $diff = $digit - $prev_digit;\n        if ($prev_diff != -1 && $diff != $prev_diff) {\n            $is_undulating = 0;\n            last;\n        }\n        $prev_digit = $digit;\n        $prev_diff = $diff;\n        $n /= 10;\n    }\n    return $is_undulating;\n}",
    "    my $last_digit = $n % 10;\n    my $next_digit;\n    $n /= 10;\n    while ($n > 0) {\n        $next_digit = $n % 10;\n        return 0 if $last_digit == $next_digit;\n        $last_digit = $next_digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $prev = -1;\n    my $curr = -1;\n    my $count = 0;\n    while($n > 0) {\n        $curr = $n % 10;\n        if($curr == $prev) {\n            return 0;\n        }\n        $prev = $curr;\n        $n /= 10;\n        $count++;\n    }\n    return $count;\n}",
    "    my $prev_digit = -1;\n    my $prev_diff = 0;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        my $diff = $digit - $prev_digit;\n        if ($prev_digit >= 0) {\n            if ($prev_diff * $diff != -1) {\n                return 0;\n            }\n        }\n        $prev_digit = $digit;\n        $prev_diff = $diff;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $s = sprintf \"%d\", $n;\n    my @d = split //, $s;\n    my $i = 0;\n    while ($i < $#d) {\n        return 0 if $d[$i] == $d[$i+1];\n        $i++;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = pop @digits;\n    my $last_diff = 0;\n    for my $digit (@digits) {\n        my $diff = $digit - $last_digit;\n        return 0 if $diff == 0;\n        return 0 if $last_diff != 0 && $diff != $last_diff;\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = pop @digits;\n    my $last_diff = 0;\n    my $last_sign = 0;\n    for my $digit (@digits) {\n        my $diff = $digit - $last_digit;\n        my $sign = $diff <=> 0;\n        if ($last_sign && $sign != $last_sign && $diff != $last_diff) {\n            return 0;\n        }\n        $last_diff = $diff;\n        $last_sign = $sign;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    for my $i (0 .. $#digits - 2) {\n        return 0 if $digits[$i] == $digits[$i + 1] ||\n                    $digits[$i + 1] == $digits[$i + 2] ||\n                    $digits[$i] == $digits[$i + 2];\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = $digits[0];\n    my $last_diff = 0;\n    for my $digit (@digits[1..$#digits]) {\n        my $diff = $digit - $last_digit;\n        if ($diff == 0) {\n            return 0;\n        }\n        if ($last_diff != 0 && $diff != $last_diff) {\n            return 0;\n        }\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev_diff = 0;\n    for my $i (1 .. $#digits) {\n        my $diff = $digits[$i] - $digits[$i-1];\n        return 0 if $diff == 0;\n        return 0 if $prev_diff != 0 && $diff != $prev_diff;\n        $prev_diff = $diff;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev = shift @digits;\n    my $prev_diff = 0;\n    for my $digit (@digits) {\n        my $diff = $digit - $prev;\n        return 0 if $diff == $prev_diff;\n        $prev_diff = $diff;\n        $prev = $digit;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    for my $i (1 .. $#digits - 1) {\n        return 0 unless $digits[$i - 1] != $digits[$i] && $digits[$i] != $digits[$i + 1];\n    }\n    return 1;\n}",
    "    my $prev_digit = -1;\n    my $prev_diff = -1;\n    my $curr_diff = -1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        $curr_diff = $digit - $prev_digit;\n        if ($prev_diff != -1 && $curr_diff != $prev_diff) {\n            return 0;\n        }\n        $prev_diff = $curr_diff;\n        $prev_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $i = 0;\n    while ($i < $#digits) {\n        return 0 if $digits[$i] == $digits[$i + 1];\n        $i++;\n    }\n    return 1;\n}"
  ]
}