{
  "name": "mbpp_468_max_product",
  "language": "pl",
  "prompt": "# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nsub max_product {\n    my($arr) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_product;\n        if(eq_deeply($candidate->([3, 100, 4, 5, 150, 6]),3000)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 42, 55, 68, 80]),50265600)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 22, 9, 33, 21, 50, 41, 60]),2460)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $max_product = 0;\n    my $max_product_so_far = 0;\n    my $min_product_so_far = 0;\n    my $max_so_far = 0;\n    my $min_so_far = 0;\n    for my $i (0..$#$arr) {\n        if ($arr->[$i] > 0) {\n            $max_so_far = $max_so_far ? $max_so_far * $arr->[$i] : $arr->[$i];\n            $min_so_far = $min_so_far ? $min_so_far * $arr->[$i] : $arr->[$i];\n        } elsif ($arr->[$i] < 0) {\n            my $temp = $max_so_far;\n            $max_so_far = $min_so_far ? $min_so_far * $arr->[$i] : $arr->[$i];\n            $min_so_far = $temp ? $temp * $arr->[$i] : $arr->[$i];\n        } else {\n            $max_so_far = 0;\n            $min_so_far = 0;\n        }\n        $max_product_so_far = $max_so_far if $max_so_far > $max_product_so_far;\n    }\n    return $max_product_so_far;\n}",
    "    my $max = 0;\n    my $max_product = 1;\n    my $min_product = 1;\n    for my $i (0..$#$arr) {\n        if ($arr->[$i] > 0) {\n            $max_product *= $arr->[$i];\n            $min_product = min($min_product * $arr->[$i], 1);\n        } elsif ($arr->[$i] == 0) {\n            $max_product = 1;\n            $min_product = 1;\n        } else {\n            my $temp = $max_product;\n            $max_product = max($min_product * $arr->[$i], 1);\n            $min_product = $temp * $arr->[$i];\n        }\n        $max = max($max, $max_product);\n    }\n    return $max;\n}",
    "    my $max_product = 1;\n    my $product = 1;\n    my $last_max = 0;\n    for my $i (0..$#$arr) {\n        if ($arr->[$i] > $last_max) {\n            $product *= $arr->[$i];\n            $last_max = $arr->[$i];\n        } else {\n            $product = 1;\n            $last_max = 0;\n        }\n        $max_product = max($max_product, $product);\n    }\n    return $max_product;\n}",
    "    my $max = 0;\n    my $max_product = 1;\n    my $min_product = 1;\n    for my $i (0..$#$arr) {\n        if ($arr->[$i] > 0) {\n            $max_product *= $arr->[$i];\n            $min_product = min($min_product * $arr->[$i], 1);\n        }\n        elsif ($arr->[$i] == 0) {\n            $max_product = 1;\n            $min_product = 1;\n        }\n        else {\n            my $temp = $max_product;\n            $max_product = max($min_product * $arr->[$i], 1);\n            $min_product = $temp * $arr->[$i];\n        }\n        $max = max($max, $max_product);\n    }\n    return $max;\n}",
    "    my $max = 0;\n    my $prod = 1;\n    for my $i (0 .. $#$arr) {\n        for my $j ($i .. $#$arr) {\n            if ($arr->[$j] > $arr->[$j - 1]) {\n                $prod *= $arr->[$j];\n            } else {\n                $prod = 1;\n            }\n            $max = $prod if $prod > $max;\n        }\n    }\n    return $max;\n}",
    "    my $max = 0;\n    my $max_product = 0;\n    my $product = 1;\n    for my $i (0..$#$arr) {\n        if ($arr->[$i] > $max) {\n            $max = $arr->[$i];\n            $product *= $max;\n            $max_product = $product if $product > $max_product;\n        } else {\n            $product = 1;\n        }\n    }\n    return $max_product;\n}",
    "    my $max = 0;\n    my $prod = 1;\n    my $i = 0;\n    my $j = 0;\n    while ($i < scalar(@$arr)) {\n        if ($arr->[$i] > $arr->[$i - 1]) {\n            $prod *= $arr->[$i];\n            $max = $prod if $prod > $max;\n            $i++;\n        } else {\n            $prod = 1;\n            $i = $j + 1;\n            $j = $i;\n        }\n    }\n    return $max;\n}",
    "    my $max = 0;\n    my $max_product = 0;\n    my $product = 1;\n    for my $i (0..$#$arr) {\n        if ($arr->[$i] > $max) {\n            $max = $arr->[$i];\n            $product *= $arr->[$i];\n            $max_product = $product if $product > $max_product;\n        } else {\n            $product = 1;\n        }\n    }\n    return $max_product;\n}",
    "    my $max = 0;\n    my $product = 1;\n    my $i = 0;\n    my $j = 0;\n    while ($i < scalar(@$arr)) {\n        if ($arr->[$i] > $arr->[$j]) {\n            $product *= $arr->[$i];\n            $i++;\n        } else {\n            $product /= $arr->[$j];\n            $j++;\n        }\n        $max = $product if $product > $max;\n    }\n    return $max;\n}",
    "    my $max = 0;\n    my $product = 1;\n    for my $i (0 .. $#$arr) {\n        $product *= $arr->[$i];\n        $max = $product if $product > $max;\n        $product = 1 if $product == 0;\n    }\n    return $max;\n}",
    "    my $max = 0;\n    my $max_product = 0;\n    my $product = 1;\n    for my $i (0..$#$arr) {\n        if ($arr->[$i] > $max) {\n            $max = $arr->[$i];\n            $product *= $max;\n        }\n        $max_product = max($max_product, $product);\n    }\n    return $max_product;\n}",
    "    my $max = 0;\n    my $prod = 1;\n    my $i = 0;\n    my $j = 0;\n    while ($i < scalar(@$arr)) {\n        $prod *= $arr->[$i];\n        if ($prod > $max) {\n            $max = $prod;\n        }\n        if ($prod == 0) {\n            $prod = 1;\n            $j = $i + 1;\n        }\n        $i++;\n    }\n    return $max;\n}",
    "    my $n = scalar(@$arr);\n    my @max_product = @$arr;\n    for my $i (1 .. $n - 1) {\n        for my $j (0 .. $i - 1) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $max_product[$i] = max($max_product[$i], $max_product[$j] * $arr->[$i]);\n            }\n        }\n    }\n    return max(@max_product);\n}",
    "    my $max = 0;\n    my $prod = 1;\n    for my $i (0 .. $#$arr) {\n        $prod *= $arr->[$i];\n        $max = $prod if $prod > $max;\n        $prod = 1 if $prod < 1;\n    }\n    return $max;\n}",
    "    my $max_product = $arr->[0];\n    my $max_product_ending_here = $arr->[0];\n    my $min_product_ending_here = $arr->[0];\n    for my $i (1..$#$arr) {\n        my $curr = $arr->[$i];\n        my $temp = $max_product_ending_here;\n        $max_product_ending_here = max($curr, $curr * $max_product_ending_here, $curr * $min_product_ending_here);\n        $min_product_ending_here = min($curr, $curr * $temp, $curr * $min_product_ending_here);\n        $max_product = max($max_product, $max_product_ending_here);\n    }\n    return $max_product;\n}",
    "    my $max = 0;\n    my $len = scalar @$arr;\n    for my $i (0..$len-1) {\n        my $prod = 1;\n        for my $j ($i..$len-1) {\n            $prod *= $arr->[$j];\n            $max = $prod if $prod > $max;\n        }\n    }\n    return $max;\n}",
    "    my $max = 0;\n    my $max_product = 0;\n    for my $i (0..$#$arr) {\n        $max = $arr->[$i] if $arr->[$i] > $max;\n        $max_product = $max * $i if $max * $i > $max_product;\n    }\n    return $max_product;\n}",
    "    my $max = 0;\n    my $product = 1;\n    for my $i (0..$#$arr) {\n        $product *= $arr->[$i];\n        $max = $product if $product > $max;\n        $product = 1 if $product == 0;\n    }\n    return $max;\n}",
    "    my $max = 0;\n    my $prod = 1;\n    my $i = 0;\n    my $j = 0;\n    while($i < scalar @$arr) {\n        if($arr->[$i] > $arr->[$j]) {\n            $prod *= $arr->[$i];\n            $i++;\n        } else {\n            $prod /= $arr->[$j];\n            $j++;\n        }\n        $max = $prod if $prod > $max;\n    }\n    return $max;\n}",
    "    my $max = 0;\n    my $prod = 1;\n    for my $i (0 .. $#$arr) {\n        $prod *= $arr->[$i];\n        $max = $prod if $prod > $max;\n        $prod = 1 if $prod < 1;\n    }\n    return $max;\n}"
  ]
}