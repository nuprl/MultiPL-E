{
  "name": "mbpp_557_toggle_string",
  "language": "pl",
  "prompt": "# Write a function to toggle the case of all characters in a string.\nsub toggle_string {\n    my($string) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&toggle_string;\n        if(eq_deeply($candidate->(\"Python\"),\"pYTHON\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Pangram\"),\"pANGRAM\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"LIttLE\"),\"liTTle\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my($result);\n    my($i);\n    for ($i = 0; $i < length($string); $i++) {\n        $result .= toggle_char(substr($string, $i, 1));\n    }\n    return $result;\n}",
    "    my($result);\n    foreach my $char (split(//, $string)) {\n        if ($char =~ /[a-z]/) {\n            $result .= uc($char);\n        }\n        elsif ($char =~ /[A-Z]/) {\n            $result .= lc($char);\n        }\n        else {\n            $result .= $char;\n        }\n    }\n    return $result;\n}",
    "    my($result) = \"\";\n    foreach my $char (split //, $string) {\n        if ($char =~ /[a-z]/) {\n            $result .= uc($char);\n        } else {\n            $result .= lc($char);\n        }\n    }\n    return $result;\n}",
    "    my @chars = split //, $string;\n    for (@chars) {\n        if (/[a-z]/) {\n            $_ = uc $_;\n        }\n        elsif (/[A-Z]/) {\n            $_ = lc $_;\n        }\n    }\n    return join '', @chars;\n}",
    "    my($result);\n    foreach my $char (split(//, $string)) {\n        if ($char =~ /[a-z]/) {\n            $result .= uc($char);\n        } elsif ($char =~ /[A-Z]/) {\n            $result .= lc($char);\n        } else {\n            $result .= $char;\n        }\n    }\n    return $result;\n}",
    "    my($result);\n    my($char);\n    foreach $char (split(//, $string)) {\n        $result .= ($char =~ /[a-z]/i) ? uc $char : lc $char;\n    }\n    return $result;\n}",
    "    my($result) = \"\";\n    foreach my $char (split //, $string) {\n        if ($char =~ /[a-z]/) {\n            $result .= uc($char);\n        } elsif ($char =~ /[A-Z]/) {\n            $result .= lc($char);\n        } else {\n            $result .= $char;\n        }\n    }\n    return $result;\n}",
    "    my($result);\n    for my $char (split //, $string) {\n        if ($char =~ /[a-z]/) {\n            $result .= uc $char;\n        }\n        elsif ($char =~ /[A-Z]/) {\n            $result .= lc $char;\n        }\n        else {\n            $result .= $char;\n        }\n    }\n    return $result;\n}",
    "    my($i, $result);\n    $result = \"\";\n    for($i = 0; $i < length($string); $i++) {\n        $result .= toggle_char(substr($string, $i, 1));\n    }\n    return $result;\n}",
    "    my($result) = '';\n    foreach my $c (split(//, $string)) {\n        if ($c =~ /[a-z]/) {\n            $result .= uc($c);\n        } else {\n            $result .= lc($c);\n        }\n    }\n    return $result;\n}",
    "    my($result);\n    foreach my $char (split(//, $string)) {\n        if ($char =~ /[a-z]/) {\n            $result .= uc($char);\n        }\n        elsif ($char =~ /[A-Z]/) {\n            $result .= lc($char);\n        }\n        else {\n            $result .= $char;\n        }\n    }\n    return $result;\n}",
    "    my($result);\n    foreach my $char (split //, $string) {\n        $result .= ($char =~ /[a-z]/) ? uc $char : lc $char;\n    }\n    return $result;\n}",
    "    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}",
    "    my($result) = \"\";\n    foreach my $c (split //, $string) {\n        $result .= uc $c;\n    }\n    return $result;\n}",
    "    my($result) = '';\n    for my $c (split //, $string) {\n        if ($c =~ /[a-z]/) {\n            $result .= uc $c;\n        }\n        else {\n            $result .= lc $c;\n        }\n    }\n    return $result;\n}",
    "    my($result);\n    foreach my $char (split //, $string) {\n        if ($char =~ /[a-z]/) {\n            $result .= uc $char;\n        }\n        elsif ($char =~ /[A-Z]/) {\n            $result .= lc $char;\n        }\n        else {\n            $result .= $char;\n        }\n    }\n    return $result;\n}",
    "    my($result);",
    "    $string =~ s/([a-z])/uc($1)/eg;\n    $string =~ s/([A-Z])/lc($1)/eg;\n    return $string;\n}",
    "    my($result);\n    for my $char (split //, $string) {\n        $result .= uc $char if $char =~ /[a-z]/;\n        $result .= lc $char if $char =~ /[A-Z]/;\n        $result .= $char if $char =~ /[^a-zA-Z]/;\n    }\n    return $result;\n}",
    "    my($result) = '';\n    foreach my $char (split(//, $string)) {\n        if ($char =~ /[a-z]/) {\n            $result .= uc($char);\n        } else {\n            $result .= lc($char);\n        }\n    }\n    return $result;\n}"
  ]
}