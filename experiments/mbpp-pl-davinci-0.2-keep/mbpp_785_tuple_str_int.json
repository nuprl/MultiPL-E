{
  "name": "mbpp_785_tuple_str_int",
  "language": "pl",
  "prompt": "# Write a function to convert tuple string to integer tuple.\nsub tuple_str_int {\n    my($test_str) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&tuple_str_int;\n        if(eq_deeply($candidate->(\"(7, 8, 9)\"),[7, 8, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(1, 2, 3)\"),[1, 2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(4, 5, 6)\"),[4, 5, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(7, 81, 19)\"),[7, 81, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @test_list = split(/\\s+/, $test_str);\n    my @test_int_list = ();\n    foreach my $test_item (@test_list) {\n        push(@test_int_list, int($test_item));\n    }\n    return @test_int_list;\n}",
    "    my @test_str = split(/,/, $test_str);\n    my @test_int;\n    foreach my $i (@test_str) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return @test_int;\n}",
    "    my @tuple_str = split(/\\s+/, $test_str);\n    my @tuple_int = map { int($_) } @tuple_str;\n    return @tuple_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map {int($_)} @test_arr;\n    return @test_int;\n}",
    "    my @test_str_list = split(/,/, $test_str);\n    my @test_int_list = ();\n    foreach my $test_str_item (@test_str_list) {\n        push(@test_int_list, int($test_str_item));\n    }\n    return @test_int_list;\n}",
    "    my @test_str_arr = split(/,/, $test_str);\n    my @test_int_arr = ();\n    foreach my $test_str_int (@test_str_arr) {\n        push(@test_int_arr, int($test_str_int));\n    }\n    return @test_int_arr;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int_arr;\n    foreach my $test_elem (@test_arr) {\n        push(@test_int_arr, int($test_elem));\n    }\n    return @test_int_arr;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int_arr = ();\n    foreach my $test_int (@test_arr) {\n        push(@test_int_arr, int($test_int));\n    }\n    return @test_int_arr;\n}",
    "    my @test_list = split(/,/, $test_str);\n    my @test_int_list = ();\n    foreach my $test_val (@test_list) {\n        push(@test_int_list, int($test_val));\n    }\n    return @test_int_list;\n}",
    "    my @tuple_str = split(/,/, $test_str);\n    my @tuple_int;\n    foreach my $str (@tuple_str) {\n        push(@tuple_int, int($str));\n    }\n    return @tuple_int;\n}",
    "    my($i, $j, $k, $l, $m, $n, $o, $p);\n    my($tuple_str) = $test_str;\n    my($tuple_int) = \"\";\n    my($tuple_int_str) = \"\";\n    my($tuple_int_str_len) = 0;\n    my($tuple_int_str_len_1) = 0;\n    my($tuple_int_str_len_2) = 0;\n    my($tuple_int_str_len_3) = 0;\n    my($tuple_int_str_len_4) = 0;\n    my($tuple_int_str_len_5) = 0;\n    my($tuple_int_str_len_6) = 0;\n    my($tuple_int_str_len_7) = 0;\n    my($tuple_int_str_len_8) = 0;\n    my($tuple_int_str_len_9) = 0;\n    my($tuple_int_str_len_10) = 0;\n    my($tuple_int_str_len_11) = 0;\n    my($tuple_int_str_len_12) = 0;\n    my($tuple_int_str_len_13) = 0;\n    my($tuple_int_str_len_14) = 0;\n    my($tuple_int_str_len_15) = 0;\n    my($tuple_int_str_len_16) = 0;\n    my($tuple_int_str_len_17) = 0;\n    my($tuple_int_str_len_18) = 0;\n    my($tuple_int_str_len_19) = 0;\n    my($tuple_int_str_len_20) = 0;\n    my($tuple_int_str_len_21) = 0;\n    my($tuple_int_str_len_22) = 0;\n    my($tuple_int_str_len_23) = 0;\n    my($tuple_int_str_len_24",
    "    my @tuple_str = split(/\\s+/, $test_str);\n    my @tuple_int = map { int($_) } @tuple_str;\n    return @tuple_int;\n}",
    "    my(@test_arr) = split(/,/, $test_str);\n    my(@test_int) = ();\n    foreach my $elem (@test_arr) {\n        push(@test_int, int($elem));\n    }\n    return @test_int;\n}",
    "    my @test_str_arr = split(/,/, $test_str);\n    my @test_int_arr = ();\n    foreach my $test_str_item (@test_str_arr) {\n        push(@test_int_arr, int($test_str_item));\n    }\n    return @test_int_arr;\n}",
    "    my @test_tuple = split(/,/, $test_str);\n    my @test_tuple_int = map {int($_)} @test_tuple;\n    return \\@test_tuple_int;\n}",
    "    my @tuple_str = split(/,/, $test_str);\n    my @tuple_int = ();\n    foreach my $tuple_str (@tuple_str) {\n        push(@tuple_int, int($tuple_str));\n    }\n    return @tuple_int;\n}",
    "    my @tuple_str = split(/\\s+/, $test_str);\n    my @tuple_int = map { int($_) } @tuple_str;\n    return @tuple_int;\n}",
    "    my @tuple_str = split(/\\s+/, $test_str);\n    my @tuple_int = ();\n    foreach my $str (@tuple_str) {\n        push(@tuple_int, int($str));\n    }\n    return @tuple_int;\n}",
    "    my $test_int = $test_str;\n    $test_int =~ s/\\(//;\n    $test_int =~ s/\\)//;\n    $test_int =~ s/\\s+//g;\n    $test_int =~ s/\\,/ /g;\n    return $test_int;\n}",
    "    my @test_str = split(/\\s+/, $test_str);\n    my @test_int = ();\n    foreach my $i (@test_str) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @tuple_str = split(/,/, $test_str);\n    my @tuple_int;\n    foreach my $str (@tuple_str) {\n        push @tuple_int, int($str);\n    }\n    return \\@tuple_int;\n}",
    "    my @test_tuple = split(/,/, $test_str);\n    my @int_tuple = ();\n    foreach my $item (@test_tuple) {\n        push(@int_tuple, int($item));\n    }\n    return @int_tuple;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return @test_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int_arr = ();\n    foreach my $test_str (@test_arr) {\n        push(@test_int_arr, int($test_str));\n    }\n    return @test_int_arr;\n}",
    "    my @test_str = split(/\\s+/, $test_str);\n    my @test_int = ();\n    foreach my $t (@test_str) {\n        push(@test_int, int($t));\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int_arr = ();\n    foreach my $test_item (@test_arr) {\n        push(@test_int_arr, int($test_item));\n    }\n    return @test_int_arr;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int_arr = map { int($_) } @test_arr;\n    return \\@test_int_arr;\n}",
    "    my @test_str_arr = split(/,/, $test_str);\n    my @test_int_arr;\n    foreach my $test_str_arr_ele (@test_str_arr) {\n        push(@test_int_arr, int($test_str_arr_ele));\n    }\n    return @test_int_arr;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int_arr;\n    foreach my $test_val (@test_arr) {\n        push(@test_int_arr, int($test_val));\n    }\n    return @test_int_arr;\n}",
    "    my @test_tuple = split(/\\s+/, $test_str);\n    my @int_tuple = map { int($_) } @test_tuple;\n    return @int_tuple;\n}",
    "    my @test_list = split(/\\s+/, $test_str);\n    my @test_int_list = map { int($_) } @test_list;\n    return @test_int_list;\n}",
    "    my @test_list = split(/,/, $test_str);\n    my @test_int_list = ();\n    foreach my $test_item (@test_list) {\n        push(@test_int_list, int($test_item));\n    }\n    return @test_int_list;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_arr_int = ();\n    foreach my $val (@test_arr) {\n        push(@test_arr_int, int($val));\n    }\n    return @test_arr_int;\n}",
    "    my @tuple_str = split(/\\s+/, $test_str);\n    my @tuple_int = ();\n    foreach my $i (@tuple_str) {\n        push(@tuple_int, int($i));\n    }\n    return @tuple_int;\n}",
    "    my(@test_tuple) = split(/,/, $test_str);\n    my(@test_tuple_int) = ();\n    foreach my $test_tuple_elem (@test_tuple) {\n        push(@test_tuple_int, int($test_tuple_elem));\n    }\n    return @test_tuple_int;\n}",
    "    my @tuple_str = split(/\\s+/, $test_str);\n    my @tuple_int = ();\n    foreach my $tuple_str (@tuple_str) {\n        push(@tuple_int, int($tuple_str));\n    }\n    return @tuple_int;\n}",
    "    my @test_str_arr = split(/,/, $test_str);\n    my @test_int_arr;\n    foreach my $test_str_arr_elem (@test_str_arr) {\n        push(@test_int_arr, int($test_str_arr_elem));\n    }\n    return @test_int_arr;\n}",
    "    my @test_str = split(/,/, $test_str);\n    my @test_int;\n    foreach my $i (@test_str) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int_arr = ();\n    foreach my $test_item (@test_arr) {\n        push(@test_int_arr, int($test_item));\n    }\n    return @test_int_arr;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int_arr = map {int($_)} @test_arr;\n    return \\@test_int_arr;\n}",
    "    my @test_arr = split(/\\s*,\\s*/, $test_str);\n    my @test_int_arr = map { int($_) } @test_arr;\n    return @test_int_arr;\n}",
    "    my($tuple_str) = $test_str;\n    $tuple_str =~ s/\\(//g;\n    $tuple_str =~ s/\\)//g;\n    my(@tuple_str) = split(/,/, $tuple_str);\n    my(@tuple_int);\n    foreach my $tuple_str (@tuple_str) {\n        push(@tuple_int, int($tuple_str));\n    }\n    return @tuple_int;\n}",
    "    my @test_tuple = split(/,/, $test_str);\n    my @int_tuple = map { int($_) } @test_tuple;\n    return @int_tuple;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = ();\n    foreach my $elem (@test_arr) {\n        push(@test_int, int($elem));\n    }\n    return @test_int;\n}",
    "    my @tuple_str = split(/,/, $test_str);\n    my @tuple_int = map {int($_)} @tuple_str;\n    return @tuple_int;\n}",
    "    my @test_str = split(/,/, $test_str);\n    my @test_int;\n    foreach my $i (@test_str) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @tuple_str = split(/,/, $test_str);\n    my @tuple_int;\n    foreach my $str (@tuple_str) {\n        push(@tuple_int, int($str));\n    }\n    return @tuple_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @int_arr = ();\n    foreach my $test_val (@test_arr) {\n        push(@int_arr, int($test_val));\n    }\n    return @int_arr;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return @test_int;\n}",
    "    my $test_int = $test_str;\n    $test_int =~ s/[\\(\\)\\s]//g;\n    $test_int =~ s/\\,/ /g;\n    return $test_int;\n}",
    "    my @test_tuple = split(/\\s+/, $test_str);\n    my @int_tuple = map { int($_) } @test_tuple;\n    return @int_tuple;\n}",
    "    my @tuple_str = split(/,/, $test_str);\n    my @tuple_int = ();\n    foreach my $str (@tuple_str) {\n        push(@tuple_int, int($str));\n    }\n    return @tuple_int;\n}",
    "    my @test_str = split(/,/, $test_str);\n    my @test_int;\n    foreach my $test_str (@test_str) {\n        push(@test_int, int($test_str));\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map {int($_)} @test_arr;\n    return @test_int;\n}",
    "    my @test_tuple = split(/\\s+/, $test_str);\n    my @int_tuple = map { int($_) } @test_tuple;\n    return @int_tuple;\n}",
    "    my @test_str = split(/,/, $test_str);\n    my @test_int;\n    foreach my $i (@test_str) {\n        push @test_int, int($i);\n    }\n    return @test_int;\n}",
    "    my @tuple = split(/,/, $test_str);\n    my @int_tuple = ();\n    foreach my $str (@tuple) {\n        push(@int_tuple, int($str));\n    }\n    return @int_tuple;\n}",
    "    my(@test_str) = split(/\\s+/, $test_str);\n    my(@test_int) = ();\n    foreach my $str (@test_str) {\n\tpush(@test_int, int($str));\n    }\n    return @test_int;\n}",
    "    my @test_str_list = split(/,/, $test_str);\n    my @test_int_list = ();\n    foreach my $test_str_item (@test_str_list) {\n        push(@test_int_list, int($test_str_item));\n    }\n    return @test_int_list;\n}",
    "    my @test_str_arr = split(/\\s+/, $test_str);\n    my @test_int_arr = ();\n    foreach my $test_str_arr_elem (@test_str_arr) {\n        push(@test_int_arr, int($test_str_arr_elem));\n    }\n    return @test_int_arr;\n}",
    "    my @tuple_str = split(/\\s+/, $test_str);\n    my @tuple_int = ();\n    foreach my $i (@tuple_str) {\n        push @tuple_int, int($i);\n    }\n    return @tuple_int;\n}",
    "    my @tuple_str = split(/,/, $test_str);\n    my @tuple_int = ();\n    foreach my $str (@tuple_str) {\n        push(@tuple_int, int($str));\n    }\n    return @tuple_int;\n}",
    "    my $test_int = ();\n    my @test_arr = split(/,/, $test_str);\n    foreach my $test_val (@test_arr) {\n        $test_val =~ s/\\s+//g;\n        push(@$test_int, int($test_val));\n    }\n    return $test_int;\n}",
    "    my @tuple_str = split(',', $test_str);\n    my @tuple_int;\n    foreach my $i (@tuple_str) {\n        push(@tuple_int, int($i));\n    }\n    return @tuple_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return @test_int;\n}",
    "    my(@test_tuple) = split(/,/, $test_str);\n    my(@int_tuple);\n    foreach my $test_val (@test_tuple) {\n        push(@int_tuple, int($test_val));\n    }\n    return @int_tuple;\n}",
    "    my @test_tuple = split(/,/, $test_str);\n    my @int_tuple = ();\n    foreach my $item (@test_tuple) {\n        push(@int_tuple, int($item));\n    }\n    return @int_tuple;\n}",
    "    my @test_tuple = split(/,/, $test_str);\n    my @int_tuple = ();\n    foreach my $t (@test_tuple) {\n        push(@int_tuple, int($t));\n    }\n    return @int_tuple;\n}",
    "    my @test_tuple = split(/,/, $test_str);\n    my @int_tuple = ();\n    foreach my $i (@test_tuple) {\n        push(@int_tuple, int($i));\n    }\n    return @int_tuple;\n}",
    "    my @test_str_arr = split(/\\s+/, $test_str);\n    my @test_int_arr = map {int($_)} @test_str_arr;\n    return @test_int_arr;\n}",
    "    my @tuple = split(/\\s+/, $test_str);\n    my @int_tuple = map { int($_) } @tuple;\n    return @int_tuple;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int_arr;\n    foreach my $test_item (@test_arr) {\n        push(@test_int_arr, int($test_item));\n    }\n    return @test_int_arr;\n}",
    "    my @test_str_arr = split(/\\s+/, $test_str);\n    my @test_int_arr = map { int($_) } @test_str_arr;\n    return \\@test_int_arr;\n}",
    "    my(@test_str) = split(/,/, $test_str);\n    my(@test_int);\n    foreach my $test_str (@test_str) {\n        $test_str =~ s/\\(//;\n        $test_str =~ s/\\)//;\n        push(@test_int, $test_str);\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return @test_int;\n}",
    "    my $tuple_str = $test_str;\n    $tuple_str =~ s/\\(//;\n    $tuple_str =~ s/\\)//;\n    my @tuple_str = split(/,/, $tuple_str);\n    my @tuple_int = ();\n    foreach my $str (@tuple_str) {\n        push(@tuple_int, int($str));\n    }\n    return @tuple_int;\n}",
    "    my @tuple_str = split(/,/, $test_str);\n    my @tuple_int = map { int($_) } @tuple_str;\n    return @tuple_int;\n}",
    "    my @tuple_str = split(/\\s+/, $test_str);\n    my @tuple_int = ();\n    foreach my $tuple_str (@tuple_str) {\n        push @tuple_int, int($tuple_str);\n    }\n    return @tuple_int;\n}",
    "    my @tuple = split(/\\s+/, $test_str);\n    my @int_tuple = map { int($_) } @tuple;\n    return @int_tuple;\n}",
    "    my @test_list = split(/,/, $test_str);\n    my @test_int_list = ();\n    foreach my $test_item (@test_list) {\n        push(@test_int_list, int($test_item));\n    }\n    return @test_int_list;\n}",
    "    my @test_list = split(/\\s+/, $test_str);\n    my @test_int_list = ();\n    foreach my $test_item (@test_list) {\n        push(@test_int_list, int($test_item));\n    }\n    return @test_int_list;\n}",
    "    my @test_list = split(/\\s+/, $test_str);\n    my @test_int_list = map { int($_) } @test_list;\n    return @test_int_list;\n}",
    "    my @test_tuple = split(/\\s+/, $test_str);\n    my @int_tuple;\n    foreach my $test_str (@test_tuple) {\n        push @int_tuple, int($test_str);\n    }\n    return @int_tuple;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @new_arr;\n    foreach my $item (@test_arr) {\n        push(@new_arr, int($item));\n    }\n    return @new_arr;\n}",
    "    my @test_tuple = split(/\\s+/, $test_str);\n    my @int_tuple = ();\n    foreach my $test_num (@test_tuple) {\n        push(@int_tuple, int($test_num));\n    }\n    return @int_tuple;\n}",
    "    my @test_list = split(/,/, $test_str);\n    my @int_list = ();\n    foreach my $test_item (@test_list) {\n        push(@int_list, int($test_item));\n    }\n    return @int_list;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return @test_int;\n}",
    "    my @test_tuple = split(/,/, $test_str);\n    my @int_tuple = ();\n    foreach my $i (@test_tuple) {\n        push(@int_tuple, int($i));\n    }\n    return @int_tuple;\n}",
    "    my($tuple_str) = $test_str;\n    $tuple_str =~ s/\\(//g;\n    $tuple_str =~ s/\\)//g;\n    my(@tuple_str_list) = split(/,/, $tuple_str);\n    my(@tuple_int_list);\n    foreach my $tuple_str_item (@tuple_str_list) {\n\tpush(@tuple_int_list, int($tuple_str_item));\n    }\n    return @tuple_int_list;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int_arr;\n    foreach my $test_int (@test_arr) {\n        push(@test_int_arr, int($test_int));\n    }\n    return @test_int_arr;\n}",
    "    my @tuple_str = split(/\\s+/, $test_str);\n    my @tuple_int = ();\n    foreach my $tuple_str (@tuple_str) {\n        push(@tuple_int, int($tuple_str));\n    }\n    return @tuple_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int_arr = map { int($_) } @test_arr;\n    return @test_int_arr;\n}",
    "    my @tuple = split(/\\s+/, $test_str);\n    my @int_tuple = map { int($_) } @tuple;\n    return @int_tuple;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int_arr = map {int($_)} @test_arr;\n    return @test_int_arr;\n}",
    "    my @tuple_str = split(/,/, $test_str);\n    my @tuple_int;\n    foreach my $i (@tuple_str) {\n        push(@tuple_int, int($i));\n    }\n    return @tuple_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return @test_int;\n}",
    "    my @test_tuple = split(/,/, $test_str);\n    my @int_tuple = ();\n    foreach my $test_val (@test_tuple) {\n        push(@int_tuple, int($test_val));\n    }\n    return @int_tuple;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return \\@test_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return @test_int;\n}",
    "    my $tuple_str = $test_str;\n    $tuple_str =~ s/\\(//;\n    $tuple_str =~ s/\\)//;\n    my @tuple_str_arr = split(/,/, $tuple_str);\n    my @tuple_int_arr = ();\n    foreach my $tuple_str_item (@tuple_str_arr) {\n        push(@tuple_int_arr, int($tuple_str_item));\n    }\n    return @tuple_int_arr;\n}",
    "    my @test_str_arr = split(/,/, $test_str);\n    my @test_int_arr;\n    foreach my $test_str_item (@test_str_arr) {\n        push(@test_int_arr, int($test_str_item));\n    }\n    return @test_int_arr;\n}",
    "    my @test_tuple = split(/\\s+/, $test_str);\n    my @test_tuple_int = map { int($_) } @test_tuple;\n    return @test_tuple_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int_arr = map { int($_) } @test_arr;\n    return @test_int_arr;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int_arr;\n    foreach my $test_int (@test_arr) {\n        push(@test_int_arr, int($test_int));\n    }\n    return @test_int_arr;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return @test_int;\n}",
    "    my @test_list = split(/,/, $test_str);\n    my @test_int_list = ();\n    foreach my $test_item (@test_list) {\n        push(@test_int_list, int($test_item));\n    }\n    return @test_int_list;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int;\n    foreach my $i (@test_arr) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @test_tuple = split(/,/, $test_str);\n    my @test_int_tuple = ();\n    foreach my $test_int (@test_tuple) {\n        push(@test_int_tuple, int($test_int));\n    }\n    return @test_int_tuple;\n}",
    "    my @test_tuple = split(/,/, $test_str);\n    my @int_tuple = ();\n    foreach my $i (@test_tuple) {\n        push(@int_tuple, int($i));\n    }\n    return @int_tuple;\n}",
    "    my($tuple_str) = $test_str;\n    $tuple_str =~ s/\\(//g;\n    $tuple_str =~ s/\\)//g;\n    my(@tuple_str_list) = split(/,/, $tuple_str);\n    my(@tuple_int_list) = ();\n    foreach my $tuple_str_item (@tuple_str_list) {\n        push(@tuple_int_list, int($tuple_str_item));\n    }\n    my($tuple_int) = \\@tuple_int_list;\n    return($tuple_int);\n}",
    "    my @tuple = split(/\\s+/, $test_str);\n    my @int_tuple = map { int($_) } @tuple;\n    return @int_tuple;\n}",
    "    my @tuple_str = split(/,/, $test_str);\n    my @tuple_int = ();\n    foreach my $str (@tuple_str) {\n        push(@tuple_int, int($str));\n    }\n    return @tuple_int;\n}",
    "    my @test_str = split(/\\s+/, $test_str);\n    my @test_int = map { int($_) } @test_str;\n    return @test_int;\n}",
    "    my(@test_str) = split(/,/, $test_str);\n    my(@test_int);\n    foreach my $test_str (@test_str) {\n        push(@test_int, int($test_str));\n    }\n    return(@test_int);\n}",
    "    my @test_tuple = split(/,/, $test_str);\n    my @int_tuple = ();\n    foreach my $t (@test_tuple) {\n        push(@int_tuple, int($t));\n    }\n    return @int_tuple;\n}",
    "    my @test_str_arr = split(/,/, $test_str);\n    my @test_int_arr = ();\n    foreach my $test_str_item (@test_str_arr) {\n        push(@test_int_arr, int($test_str_item));\n    }\n    return @test_int_arr;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int_arr = map { int($_) } @test_arr;\n    return \\@test_int_arr;\n}",
    "    my @test_str = split(/,/, $test_str);\n    my @test_int;\n    foreach my $i (@test_str) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @test_tuple = split(/,/, $test_str);\n    my @int_tuple = map { int($_) } @test_tuple;\n    return @int_tuple;\n}",
    "    my $tuple_str = $test_str;\n    $tuple_str =~ s/\\(//;\n    $tuple_str =~ s/\\)//;\n    my @tuple_str_list = split(/,/, $tuple_str);\n    my @tuple_int_list = ();\n    foreach my $tuple_str_item (@tuple_str_list) {\n        push(@tuple_int_list, int($tuple_str_item));\n    }\n    return @tuple_int_list;\n}",
    "    my($test_int) = ();\n    my($i) = 0;\n    my($j) = 0;\n    my($k) = 0;\n    my($tmp_str) = \"\";",
    "    my @tuple_str = split(/,/, $test_str);\n    my @tuple_int;\n    foreach my $tuple_str (@tuple_str) {\n        push @tuple_int, int($tuple_str);\n    }\n    return @tuple_int;\n}",
    "    my @tuple_str = split(/\\s+/, $test_str);\n    my @tuple_int = ();\n    foreach my $i (@tuple_str) {\n        push(@tuple_int, int($i));\n    }\n    return @tuple_int;\n}",
    "    my @test_str = split(/\\s+/, $test_str);\n    my @test_int = map { int($_) } @test_str;\n    return @test_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @int_arr;\n    foreach my $i (@test_arr) {\n        push(@int_arr, int($i));\n    }\n    return @int_arr;\n}",
    "    my @tuple_str = split(/\\s+/, $test_str);\n    my @tuple_int;\n    foreach my $str (@tuple_str) {\n        push(@tuple_int, int($str));\n    }\n    return @tuple_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return @test_int;\n}",
    "    my @tuple_str = split(/,/, $test_str);\n    my @tuple_int = map { int($_) } @tuple_str;\n    return @tuple_int;\n}",
    "    my @test_tuple = split(/\\s+/, $test_str);\n    my @int_tuple = map { int($_) } @test_tuple;\n    return @int_tuple;\n}",
    "    my @tuple = split(/\\s+/, $test_str);\n    return map {int($_)} @tuple;\n}",
    "    my($tuple_str, $tuple_int);\n    $tuple_str = $test_str;\n    $tuple_str =~ s/^\\(//;\n    $tuple_str =~ s/\\)$//;\n    $tuple_str =~ s/\\s+//g;\n    my(@tuple_str) = split(/,/, $tuple_str);\n    foreach my $tuple_str (@tuple_str) {\n\t$tuple_int .= ',' if $tuple_int;\n\t$tuple_int .= int($tuple_str);\n    }\n    $tuple_int = '(' . $tuple_int . ')';\n    return $tuple_int;\n}",
    "    my @test_str = split(/,/, $test_str);\n    my @test_int;\n    foreach my $i (@test_str) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return @test_int;\n}",
    "    my @test_str_arr = split(/,/, $test_str);\n    my @test_int_arr = ();\n    foreach my $test_str_item (@test_str_arr) {\n        push(@test_int_arr, int($test_str_item));\n    }\n    return @test_int_arr;\n}",
    "    my @test_tuple = split(/\\s+/, $test_str);\n    my @test_int_tuple = ();\n    foreach my $test_str (@test_tuple) {\n        push(@test_int_tuple, int($test_str));\n    }\n    return @test_int_tuple;\n}",
    "    my(@test_tuple) = split(/,/, $test_str);\n    my(@test_tuple_int) = ();\n    foreach my $test_str (@test_tuple) {\n        push(@test_tuple_int, int($test_str));\n    }\n    return @test_tuple_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int_arr = map { int($_) } @test_arr;\n    return @test_int_arr;\n}",
    "    my @test_list = split(/,/, $test_str);\n    my @test_int_list = ();\n    foreach my $test_item (@test_list) {\n        push(@test_int_list, int($test_item));\n    }\n    return @test_int_list;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return \\@test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return @test_int;\n}",
    "    my @tuple_str = split(/\\s+/, $test_str);\n    my @tuple_int = ();\n    foreach my $item (@tuple_str) {\n        push(@tuple_int, int($item));\n    }\n    return @tuple_int;\n}",
    "    my @tuple_str = split(/,/, $test_str);\n    my @tuple_int = ();\n    foreach my $i (@tuple_str) {\n        push(@tuple_int, int($i));\n    }\n    return @tuple_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = ();\n    foreach my $t (@test_arr) {\n        push @test_int, int($t);\n    }\n    return @test_int;\n}",
    "    my @str_list = split(/,/, $test_str);\n    my @int_list = ();\n    foreach my $str (@str_list) {\n        push(@int_list, int($str));\n    }\n    return @int_list;\n}",
    "    my @test_tuple = split(/,/, $test_str);\n    my @int_tuple = ();\n    foreach my $val (@test_tuple) {\n        push(@int_tuple, int($val));\n    }\n    return @int_tuple;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map {int($_)} @test_arr;\n    return @test_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int_arr;\n    foreach my $test_int (@test_arr) {\n        push(@test_int_arr, int($test_int));\n    }\n    return @test_int_arr;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int_arr = map { int($_) } @test_arr;\n    return @test_int_arr;\n}",
    "    my(@test_str) = split(/,/, $test_str);\n    my(@test_int);\n    foreach my $i (@test_str) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my(@test_tuple) = split(/,/, $test_str);\n    my(@test_tuple_int) = ();\n    foreach my $test_tuple_elem (@test_tuple) {\n        push(@test_tuple_int, int($test_tuple_elem));\n    }\n    return @test_tuple_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int_arr;\n    foreach my $test_int (@test_arr) {\n        push(@test_int_arr, int($test_int));\n    }\n    return @test_int_arr;\n}",
    "    my @tuple_str = split(/\\s+/, $test_str);\n    my @tuple_int = ();\n    foreach my $tuple_str (@tuple_str) {\n        push(@tuple_int, int($tuple_str));\n    }\n    return @tuple_int;\n}",
    "    my @test_str_arr = split(/\\s+/, $test_str);\n    my @test_int_arr;\n    foreach my $test_str_arr (@test_str_arr) {\n        push(@test_int_arr, int($test_str_arr));\n    }\n    return @test_int_arr;\n}",
    "    my @test_tuple = split(/\\s+/, $test_str);\n    my @test_int_tuple = map { int($_) } @test_tuple;\n    return @test_int_tuple;\n}",
    "    my @test_str = split(/\\s+/, $test_str);\n    my @test_int;\n    foreach my $i (@test_str) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @test_str = split(',', $test_str);\n    my @test_int;\n    foreach my $i (@test_str) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int = ();\n    foreach my $test_elem (@test_arr) {\n        push(@test_int, int($test_elem));\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return @test_int;\n}",
    "    my @test_tuple = split(/,/, $test_str);\n    my @int_tuple = ();\n    foreach my $i (@test_tuple) {\n        push(@int_tuple, int($i));\n    }\n    return @int_tuple;\n}",
    "    my @test_tuple = split(/,/, $test_str);\n    my @test_int_tuple = map { int($_) } @test_tuple;\n    return @test_int_tuple;\n}",
    "    my @test_str = split(/\\s+/, $test_str);\n    my @test_int = ();\n    foreach my $item (@test_str) {\n        push @test_int, int($item);\n    }\n    return @test_int;\n}",
    "    my @test_tuple = split(/\\s+/, $test_str);\n    my @test_tuple_int = map { int($_) } @test_tuple;\n    return @test_tuple_int;\n}",
    "    my @tuple_str = split(/\\s+/, $test_str);\n    my @tuple_int = map { int($_) } @tuple_str;\n    return @tuple_int;\n}",
    "    my @test_tuple = split(/,/, $test_str);\n    my @test_tuple_int = ();\n    foreach my $test_tuple_elem (@test_tuple) {\n        push(@test_tuple_int, int($test_tuple_elem));\n    }\n    return @test_tuple_int;\n}",
    "    my @test_tuple = split(/\\s+/, $test_str);\n    my @test_tuple_int = map { int($_) } @test_tuple;\n    return @test_tuple_int;\n}",
    "    my @tuple_str = split(/\\s+/, $test_str);\n    my @tuple_int = ();\n    foreach my $tuple_str (@tuple_str) {\n        push(@tuple_int, int($tuple_str));\n    }\n    return @tuple_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @int_arr;\n    foreach my $item (@test_arr) {\n        push(@int_arr, int($item));\n    }\n    return @int_arr;\n}",
    "    my($tuple_str) = $test_str;\n    my($tuple_int) = ();\n    my($i) = 0;\n    my($j) = 0;\n    my($k) = 0;\n    my($len) = length($tuple_str);\n    my($str) = \"\";\n    my($num) = 0;\n    my($ch) = \"\";\n    for($i = 0; $i < $len; $i++) {\n        $ch = substr($tuple_str, $i, 1);\n        if($ch eq \"(\") {\n            $j = $i + 1;\n            $str = \"\";\n            while(1) {\n                $ch = substr($tuple_str, $j, 1);\n                if($ch eq \")\") {\n                    last;\n                }\n                $str = $str . $ch;\n                $j++;\n            }\n            $num = int($str);\n            $tuple_int[$k] = $num;\n            $k++;\n        }\n    }\n    return @tuple_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map {int($_)} @test_arr;\n    return \\@test_int;\n}",
    "    my @tuple = split(/\\s*,\\s*/, $test_str);\n    return map { int($_) } @tuple;\n}",
    "    my(@test_str) = split(/\\s+/, $test_str);\n    my(@test_int);\n    foreach my $i (@test_str) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int_arr = ();\n    foreach my $test_int (@test_arr) {\n        push(@test_int_arr, int($test_int));\n    }\n    return @test_int_arr;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return @test_int;\n}",
    "    my($tuple_str) = $test_str;\n    $tuple_str =~ s/\\(//g;\n    $tuple_str =~ s/\\)//g;\n    my(@tuple_str) = split(/,/, $tuple_str);\n    my(@tuple_int) = ();\n    foreach my $tuple_str (@tuple_str) {\n        push(@tuple_int, int($tuple_str));\n    }\n    return @tuple_int;\n}",
    "    my @test_str = split(/,/, $test_str);\n    my @test_int;\n    foreach my $i (@test_str) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @test_list = split(/,/, $test_str);\n    my @test_int_list = map { int($_) } @test_list;\n    return @test_int_list;\n}",
    "    my $test_int = ();\n    my @test_str_array = split(/,/, $test_str);\n    foreach my $test_str_array (@test_str_array) {\n        $test_int .= int($test_str_array) . \",\";\n    }\n    return $test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int_arr = map { int($_) } @test_arr;\n    return @test_int_arr;\n}",
    "    my @test_str = split(/\\s+/, $test_str);\n    my @test_int;\n    foreach my $test_str (@test_str) {\n        push(@test_int, int($test_str));\n    }\n    return @test_int;\n}",
    "    my @test_tuple = split(/\\s+/, $test_str);\n    my @int_tuple = map { int($_) } @test_tuple;\n    return @int_tuple;\n}",
    "    my @test_list = split(/\\s+/, $test_str);\n    my @test_int_list = ();\n    foreach my $test_item (@test_list) {\n        push(@test_int_list, int($test_item));\n    }\n    return @test_int_list;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return \\@test_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int_arr = map { int($_) } @test_arr;\n    return @test_int_arr;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int_arr = ();\n    foreach my $test_int (@test_arr) {\n        push(@test_int_arr, int($test_int));\n    }\n    return @test_int_arr;\n}",
    "    my @test_tuple = split(/\\s+/, $test_str);\n    my @test_int_tuple = map { int($_) } @test_tuple;\n    return @test_int_tuple;\n}",
    "    my @test_tuple = split(/\\s+/, $test_str);\n    my @int_tuple = ();\n    foreach my $i (@test_tuple) {\n        push(@int_tuple, int($i));\n    }\n    return @int_tuple;\n}",
    "    my @test_str_arr = split(/\\s+/, $test_str);\n    my @test_int_arr = ();\n    foreach my $str (@test_str_arr) {\n        push(@test_int_arr, int($str));\n    }\n    return @test_int_arr;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map {int($_)} @test_arr;\n    return @test_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int_arr;\n    foreach my $test_str (@test_arr) {\n        push(@test_int_arr, int($test_str));\n    }\n    return @test_int_arr;\n}",
    "    my(@test_str_arr) = split(/\\s+/, $test_str);\n    my(@test_int_arr);\n    foreach my $test_str_arr (@test_str_arr) {\n        push(@test_int_arr, int($test_str_arr));\n    }\n    return @test_int_arr;\n}",
    "    my @tuple_str = split(/,/, $test_str);\n    my @tuple_int;\n    foreach my $i (@tuple_str) {\n        push(@tuple_int, int($i));\n    }\n    return @tuple_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return @test_int;\n}",
    "    my @test_tuple = split(/,/, $test_str);\n    my @int_tuple = ();\n    foreach my $i (@test_tuple) {\n        push(@int_tuple, int($i));\n    }\n    return @int_tuple;\n}",
    "    my @test_tuple = split(/\\s+/, $test_str);\n    my @int_tuple = map {int($_)} @test_tuple;\n    return @int_tuple;\n}",
    "    my @test_str_arr = split(/\\s+/, $test_str);\n    my @test_int_arr = ();\n    foreach my $test_str_item (@test_str_arr) {\n        push(@test_int_arr, int($test_str_item));\n    }\n    return @test_int_arr;\n}",
    "    my(@tuple_str) = split(/,/, $test_str);\n    my(@tuple_int);\n    foreach my $str (@tuple_str) {\n        push(@tuple_int, int($str));\n    }\n    return @tuple_int;\n}",
    "    my @tuple_str = split(/\\s+/, $test_str);\n    my @tuple_int = ();\n    foreach my $i (@tuple_str) {\n        push @tuple_int, int($i);\n    }\n    return @tuple_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int_arr = ();\n    foreach my $test_int (@test_arr) {\n        push(@test_int_arr, int($test_int));\n    }\n    return @test_int_arr;\n}",
    "    my @tuple_str = split(/\\s+/, $test_str);\n    my @tuple_int;\n    foreach my $tuple_str (@tuple_str) {\n        push(@tuple_int, int($tuple_str));\n    }\n    return @tuple_int;\n}"
  ]
}