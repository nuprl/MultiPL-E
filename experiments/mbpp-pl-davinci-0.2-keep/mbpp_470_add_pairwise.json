{
  "name": "mbpp_470_add_pairwise",
  "language": "pl",
  "prompt": "# Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nsub add_pairwise {\n    my($test_tup) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add_pairwise;\n        if(eq_deeply($candidate->([1, 5, 7, 8, 10]),[6, 12, 15, 18])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 6, 8, 9, 11]),[8, 14, 17, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 7, 9, 10, 12]),[10, 16, 19, 22])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @result;\n    for(my $i = 0; $i < scalar(@$test_tup) - 1; $i++) {\n        push(@result, $test_tup->[$i] + $test_tup->[$i + 1]);\n    }\n    return @result;\n}",
    "    my @test_tup = @$test_tup;\n    my @result_tup;\n    for (my $i = 0; $i < @test_tup; $i++) {\n        if ($i == 0) {\n            push @result_tup, $test_tup[$i] + $test_tup[$i + 1];\n        } elsif ($i == @test_tup - 1) {\n            push @result_tup, $test_tup[$i] + $test_tup[$i - 1];\n        } else {\n            push @result_tup, $test_tup[$i - 1] + $test_tup[$i + 1];\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @tup = @$test_tup;\n    my @result;\n    for (my $i = 0; $i < scalar(@tup) - 1; $i++) {\n        push @result, $tup[$i] + $tup[$i + 1];\n    }\n    return @result;\n}",
    "    my @test_tup = @$test_tup;\n    my $len = scalar(@test_tup);\n    my @result;\n    for(my $i = 0; $i < $len - 1; $i++) {\n        push(@result, $test_tup[$i] + $test_tup[$i + 1]);\n    }\n    return \\@result;\n}",
    "    my @test_tup = @$test_tup;\n    my @result;\n    for (my $i = 0; $i < $#test_tup; $i++) {\n        push(@result, $test_tup[$i] + $test_tup[$i+1]);\n    }\n    return @result;\n}",
    "    my $len = scalar(@$test_tup);\n    my @result;\n    for(my $i = 0; $i < $len - 1; $i++) {\n        push(@result, $test_tup->[$i] + $test_tup->[$i + 1]);\n    }\n    return @result;\n}",
    "    my @test_tup = @$test_tup;\n    my @result;\n    for (my $i = 0; $i < @test_tup - 1; $i++) {\n        push @result, $test_tup[$i] + $test_tup[$i + 1];\n    }\n    return @result;\n}",
    "    my @tup = @{$test_tup};\n    my @result;\n    for (my $i = 0; $i < $#tup; $i++) {\n        push @result, $tup[$i] + $tup[$i+1];\n    }\n    return @result;\n}",
    "    my @result;\n    my $len = scalar(@$test_tup);\n    for (my $i = 0; $i < $len - 1; $i++) {\n        push @result, $test_tup->[$i] + $test_tup->[$i + 1];\n    }\n    return @result;\n}",
    "    my @tup_list = @{$test_tup};\n    my @result;\n    for(my $i = 0; $i < @tup_list - 1; $i++) {\n        push @result, $tup_list[$i] + $tup_list[$i + 1];\n    }\n    return @result;\n}",
    "    my @test_tup = @$test_tup;\n    my @result;\n    for (my $i = 0; $i < @test_tup - 1; $i++) {\n        push @result, $test_tup[$i] + $test_tup[$i + 1];\n    }\n    return @result;\n}",
    "    my @test_tup = @$test_tup;\n    my @result;\n    for(my $i=0; $i<$#test_tup; $i++) {\n        push @result, $test_tup[$i] + $test_tup[$i+1];\n    }\n    return @result;\n}",
    "    my @test_tup_list = @{$test_tup};\n    my @result_list;\n    for(my $i=0; $i<=$#test_tup_list; $i++){\n        if($i == $#test_tup_list){\n            push @result_list, $test_tup_list[$i] + $test_tup_list[0];\n        }\n        else{\n            push @result_list, $test_tup_list[$i] + $test_tup_list[$i+1];\n        }\n    }\n    return \\@result_list;\n}",
    "    my @result;\n    my $size = scalar(@$test_tup);\n    for(my $i=0; $i<$size-1; $i++) {\n        push @result, $test_tup->[$i] + $test_tup->[$i+1];\n    }\n    return @result;\n}",
    "    my @test_tup = @$test_tup;\n    my @result;\n    for(my $i=0; $i<$#test_tup; $i++) {\n        push @result, $test_tup[$i] + $test_tup[$i+1];\n    }\n    return @result;\n}",
    "    my @tup_list = @{$test_tup};\n    my @result;\n    for (my $i = 0; $i < scalar(@tup_list); $i++) {\n        if ($i == 0) {\n            push @result, $tup_list[$i] + $tup_list[$i+1];\n        } elsif ($i == scalar(@tup_list) - 1) {\n            push @result, $tup_list[$i] + $tup_list[$i-1];\n        } else {\n            push @result, $tup_list[$i] + $tup_list[$i-1] + $tup_list[$i+1];\n        }\n    }\n    return @result;\n}",
    "    my @tup_list = @$test_tup;\n    my @new_tup;\n    for (my $i = 0; $i < $#tup_list; $i++) {\n        push @new_tup, $tup_list[$i] + $tup_list[$i+1];\n    }\n    return @new_tup;\n}",
    "    my @test_tup = @$test_tup;\n    my @result;\n    for(my $i = 0; $i < scalar(@test_tup) - 1; $i++) {\n        push @result, $test_tup[$i] + $test_tup[$i + 1];\n    }\n    return @result;\n}",
    "    my @tup = @$test_tup;\n    my @res;\n    for (my $i = 0; $i < $#tup; $i++) {\n        push @res, $tup[$i] + $tup[$i+1];\n    }\n    return @res;\n}",
    "    my @result;\n    for(my $i=0; $i<$#{$test_tup}; $i++) {\n        push(@result, $test_tup->[$i] + $test_tup->[$i+1]);\n    }\n    return @result;\n}"
  ]
}