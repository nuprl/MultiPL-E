{
  "name": "mbpp_262_split_two_parts",
  "language": "pl",
  "prompt": "# Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nsub split_two_parts {\n    my($list1, $L) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&split_two_parts;\n        if(eq_deeply($candidate->([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @list2 = ();\n    my @list3 = ();\n    for (my $i = 0; $i < $L; $i++) {\n        push @list2, $list1->[$i];\n    }\n    for (my $i = $L; $i < scalar(@$list1); $i++) {\n        push @list3, $list1->[$i];\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list2 = ();\n    my @list3 = ();\n    my $i = 0;\n    foreach my $x (@$list1) {\n        if ($i < $L) {\n            push @list2, $x;\n        } else {\n            push @list3, $x;\n        }\n        $i++;\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list1 = @$list1;\n    my @list2;\n    my @list3;\n    my $i;\n    for ($i = 0; $i < $L; $i++) {\n        push @list2, $list1[$i];\n    }\n    for ($i = $L; $i < @list1; $i++) {\n        push @list3, $list1[$i];\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list1 = @$list1;\n    my @list2 = ();\n    my @list3 = ();\n    my $i = 0;\n    while ($i < $L) {\n        push @list2, $list1[$i];\n        $i++;\n    }\n    while ($i < @list1) {\n        push @list3, $list1[$i];\n        $i++;\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list1 = @$list1;\n    my @list2;\n    my @list3;\n    my $i = 0;\n    while ($i < $L) {\n        push @list2, $list1[$i];\n        $i++;\n    }\n    while ($i < scalar @list1) {\n        push @list3, $list1[$i];\n        $i++;\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list2 = @$list1;\n    my @list1 = splice(@list2, 0, $L);\n    return (\\@list1, \\@list2);\n}",
    "    my @list2 = ();\n    my @list3 = ();\n    my $i = 0;\n    while ($i < $L) {\n        push @list2, $list1->[$i];\n        $i++;\n    }\n    while ($i < @$list1) {\n        push @list3, $list1->[$i];\n        $i++;\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list1 = @$list1;\n    my @list2;\n    my @list3;\n    my $i = 0;\n    while ($i < $L) {\n        push @list2, $list1[$i];\n        $i++;\n    }\n    while ($i < @list1) {\n        push @list3, $list1[$i];\n        $i++;\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list2 = ();\n    my @list3 = ();\n    my $i = 0;\n    foreach my $element (@$list1) {\n        if ($i < $L) {\n            push(@list2, $element);\n        } else {\n            push(@list3, $element);\n        }\n        $i++;\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list1 = @$list1;\n    my @list2 = @list1[$L..$#list1];\n    @list1 = @list1[0..$L-1];\n    return (\\@list1, \\@list2);\n}",
    "    my @list1 = @$list1;\n    my @list2;\n    my @list3;\n    my $i = 0;\n    while ($i < $L) {\n        push @list2, $list1[$i];\n        $i++;\n    }\n    while ($i < @list1) {\n        push @list3, $list1[$i];\n        $i++;\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list2 = ();\n    my @list3 = ();\n    my $i = 0;\n    while($i < $L){\n        push(@list2, $list1->[$i]);\n        $i++;\n    }\n    while($i < scalar(@$list1)){\n        push(@list3, $list1->[$i]);\n        $i++;\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list1 = @$list1;\n    my @list2;\n    my @list3;\n    my $i = 0;\n    while ($i < $L) {\n        push @list2, $list1[$i];\n        $i++;\n    }\n    while ($i < scalar(@list1)) {\n        push @list3, $list1[$i];\n        $i++;\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list1 = @$list1;\n    my @list2 = ();\n    my @list3 = ();\n    for (my $i = 0; $i < $L; $i++) {\n        push @list2, $list1[$i];\n    }\n    for (my $i = $L; $i < scalar(@list1); $i++) {\n        push @list3, $list1[$i];\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list1 = @$list1;\n    my @list2;\n    my @list3;\n    my $i = 0;\n    while ($i < $L) {\n        push @list2, $list1[$i];\n        $i++;\n    }\n    while ($i < scalar @list1) {\n        push @list3, $list1[$i];\n        $i++;\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list2 = ();\n    my @list3 = ();\n    my $i = 0;\n    for ($i = 0; $i < $L; $i++) {\n        push(@list2, $list1->[$i]);\n    }\n    for ($i = $L; $i < scalar(@{$list1}); $i++) {\n        push(@list3, $list1->[$i]);\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list1 = @$list1;\n    my @list2;\n    my @list3;\n    for (my $i = 0; $i < $L; $i++) {\n        push @list2, $list1[$i];\n    }\n    for (my $i = $L; $i < @list1; $i++) {\n        push @list3, $list1[$i];\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list2 = ();\n    my @list3 = ();\n    my $i = 0;\n    while ($i < $L) {\n        push @list2, $list1->[$i];\n        $i++;\n    }\n    $i = $L;\n    while ($i < scalar @$list1) {\n        push @list3, $list1->[$i];\n        $i++;\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list1 = @$list1;\n    my @list2;\n    my @list3;\n    my $i = 0;\n    while($i < $L) {\n        push(@list2, $list1[$i]);\n        $i++;\n    }\n    while($i < @list1) {\n        push(@list3, $list1[$i]);\n        $i++;\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list1 = @$list1;\n    my @list2;\n    my @list3;\n    my $i = 0;\n    while ($i < $L) {\n        push @list2, $list1[$i];\n        $i++;\n    }\n    while ($i < @list1) {\n        push @list3, $list1[$i];\n        $i++;\n    }\n    my @result = (\\@list2, \\@list3);\n    return @result;\n}"
  ]
}