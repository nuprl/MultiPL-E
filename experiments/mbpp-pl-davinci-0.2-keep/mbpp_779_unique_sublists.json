{
  "name": "mbpp_779_unique_sublists",
  "language": "pl",
  "prompt": "# Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\nsub unique_sublists {\n    my($list1) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_779_unique_sublists.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_sublists;\n        if(eq_deeply($candidate->([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]),{[1, 3] => 2, [5, 7] => 2, [13, 15, 17] => 1, [9, 11] => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]),{[\"green\", \"orange\"] => 2, [\"black\"] => 1, [\"white\"] => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2], [3, 4], [4, 5], [6, 7]]),{[1, 2] => 1, [3, 4] => 1, [4, 5] => 1, [6, 7] => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my %hash;\n    foreach my $list (@$list1) {\n        my $tuple = tuple($list);\n        $hash{$tuple}++;\n    }\n    return \\%hash;\n}",
    "    my %hash;\n    foreach my $list (@$list1) {\n        my $tuple = tuple($list);\n        $hash{$tuple}++;\n    }\n    return \\%hash;\n}",
    "    my %count;\n    foreach my $sublist (@$list1) {\n        my $tuple = tuple($sublist);\n        $count{$tuple}++;\n    }\n    return \\%count;\n}",
    "    my %count;\n    foreach my $elem (@$list1) {\n        my $tuple = tuple($elem);\n        $count{$tuple}++;\n    }\n    return \\%count;\n}",
    "    my %count;\n    foreach my $item (@$list1) {\n        my $tuple = tuple($item);\n        $count{$tuple}++;\n    }\n    return %count;\n}",
    "    my %count;\n    foreach my $sublist (@$list1) {\n        my $tuple = join(',', @$sublist);\n        $count{$tuple}++;\n    }\n    return %count;\n}",
    "    my %counts;\n    foreach my $sublist (@$list1) {\n        my $tuple = tuple($sublist);\n        $counts{$tuple}++;\n    }\n    return %counts;\n}",
    "    my $count = 0;\n    my %hash;\n    my @list = @{$list1};\n    for(my $i = 0; $i < @list; $i++) {\n        my @sublist = @{$list[$i]};\n        my $tuple = tuple(@sublist);\n        if(exists $hash{$tuple}) {\n            $hash{$tuple}++;\n        }\n        else {\n            $hash{$tuple} = 1;\n        }\n    }\n    return %hash;\n}",
    "    my %count;\n    foreach my $item (@$list1) {\n        my @sublist = @$item;\n        my $tuple = tuple(@sublist);\n        $count{$tuple}++;\n    }\n    return %count;\n}",
    "    my %hash;\n    for my $i (0 .. $#{$list1}) {\n        my $tuple = tuple($list1->[$i]);\n        $hash{$tuple}++;\n    }\n    return %hash;\n}",
    "    my %count;\n    foreach my $elem (@$list1) {\n        my @tuple = @$elem;\n        my $tuple = join(',', @tuple);\n        $count{$tuple}++;\n    }\n    return %count;\n}",
    "    my %count;\n    foreach my $item (@$list1) {\n        my $tuple = join(',', @$item);\n        $count{$tuple}++;\n    }\n    return %count;\n}",
    "    my %count;\n    foreach my $item (@$list1) {\n        my @item = @$item;\n        my $tuple = tuple(@item);\n        $count{$tuple}++;\n    }\n    return %count;\n}",
    "    my %count;\n    foreach my $item (@$list1) {\n        my $tuple = join(',', @$item);\n        $count{$tuple}++;\n    }\n    return %count;\n}",
    "    my %hash;\n    foreach my $item (@$list1) {\n        my $tuple = tuple($item);\n        $hash{$tuple}++;\n    }\n    return \\%hash;\n}",
    "    my %hash;\n    foreach my $item (@$list1) {\n        my $tuple = tuple($item);\n        $hash{$tuple}++;\n    }\n    return %hash;\n}",
    "    my %count;\n    foreach my $item (@$list1) {\n        my $tuple = join(',', @$item);\n        $count{$tuple}++;\n    }\n    return %count;\n}",
    "    my %hash;\n    foreach my $i (@$list1) {\n        $hash{$i}++;\n    }\n    return %hash;\n}",
    "    my %count;\n    foreach my $item (@$list1) {\n        my @tuple = @$item;\n        my $tuple = join(',', @tuple);\n        $count{$tuple}++;\n    }\n    return %count;\n}",
    "    my %hash;\n    foreach my $item (@$list1) {\n        my $tuple = join(',', @$item);\n        $hash{$tuple}++;\n    }\n    return \\%hash;\n}"
  ]
}