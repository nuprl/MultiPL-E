{
  "name": "mbpp_793_last",
  "language": "pl",
  "prompt": "# Write a python function to find the last position of an element in a sorted array.\nsub last {\n    my($arr, $x) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&last;\n        if(eq_deeply($candidate->([1, 2, 3], 1),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3, 4], 1),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 2, 3, 6, 8, 9], 3),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $low = 0;\n    my $high = scalar(@$arr) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($arr->[$mid] == $x) {\n            $result = $mid;\n            $low = $mid + 1;\n        } elsif ($arr->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = @$arr - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($arr->[$mid] == $x) {\n            $result = $mid;\n            $low = $mid + 1;\n        } elsif ($arr->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$arr) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($arr->[$mid] == $x) {\n            $result = $mid;\n            $low = $mid + 1;\n        } elsif ($arr->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = @$arr - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($arr->[$mid] == $x) {\n            $result = $mid;\n            $low = $mid + 1;\n        } elsif ($arr->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = $#{$arr};\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($arr->[$mid] == $x) {\n            $result = $mid;\n            $low = $mid + 1;\n        }\n        elsif ($arr->[$mid] > $x) {\n            $high = $mid - 1;\n        }\n        else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = @$arr - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($arr->[$mid] == $x) {\n            $result = $mid;\n            $low = $mid + 1;\n        }\n        elsif ($arr->[$mid] > $x) {\n            $high = $mid - 1;\n        }\n        else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar @$arr - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($arr->[$mid] == $x) {\n            $result = $mid;\n            $low = $mid + 1;\n        } elsif ($arr->[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar @$arr - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($arr->[$mid] <= $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n        if ($arr->[$mid] == $x) {\n            $result = $mid;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = $#{$arr};\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($arr->[$mid] == $x) {\n            $result = $mid;\n            $low = $mid + 1;\n        } elsif ($arr->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$arr) - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($arr->[$mid] == $x) {\n            if ($mid == scalar(@$arr) - 1 || $arr->[$mid + 1] != $x) {\n                return $mid;\n            } else {\n                $low = $mid + 1;\n            }\n        } elsif ($arr->[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return -1;\n}",
    "    my $low = 0;\n    my $high = scalar(@$arr) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($arr->[$mid] == $x) {\n            $result = $mid;\n            $low = $mid + 1;\n        }\n        elsif ($arr->[$mid] > $x) {\n            $high = $mid - 1;\n        }\n        else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = @$arr - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($arr->[$mid] == $x) {\n            $result = $mid;\n            $low = $mid + 1;\n        }\n        elsif ($arr->[$mid] > $x) {\n            $high = $mid - 1;\n        }\n        else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$arr) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($arr->[$mid] == $x) {\n            $result = $mid;\n            $low = $mid + 1;\n        } elsif ($arr->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$arr) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($arr->[$mid] == $x) {\n            $result = $mid;\n            $low = $mid + 1;\n        } elsif ($arr->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$arr) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($arr->[$mid] == $x) {\n            $result = $mid;\n            $low = $mid + 1;\n        } elsif ($arr->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = @$arr - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($arr->[$mid] == $x) {\n            $result = $mid;\n            $low = $mid + 1;\n        } elsif ($arr->[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = @$arr - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($arr->[$mid] == $x) {\n            $result = $mid;\n            $low = $mid + 1;\n        } elsif ($arr->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$arr) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($arr->[$mid] == $x) {\n            $result = $mid;\n            $low = $mid + 1;\n        } elsif ($arr->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$arr) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($arr->[$mid] == $x) {\n            $result = $mid;\n            $low = $mid + 1;\n        }\n        elsif ($arr->[$mid] > $x) {\n            $high = $mid - 1;\n        }\n        else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$arr) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($arr->[$mid] == $x) {\n            $result = $mid;\n            $low = $mid + 1;\n        } elsif ($arr->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}"
  ]
}