{
  "name": "mbpp_282_sub_list",
  "language": "pl",
  "prompt": "# Write a function to subtract two lists element-wise.\nsub sub_list {\n    my($nums1, $nums2) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sub_list;\n        if(eq_deeply($candidate->([1, 2, 3], [4, 5, 6]),[-3, -3, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], [3, 4]),[-2, -2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([90, 120], [50, 70]),[40, 50])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @result;\n    for my $i (0..$#{$nums1}) {\n        push @result, $nums1->[$i] - $nums2->[$i];\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0..$#{$nums1}) {\n        push @result, $nums1->[$i] - $nums2->[$i];\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$nums1}) {\n        push @result, $nums1->[$i] - $nums2->[$i];\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$nums1}) {\n        push @result, $nums1->[$i] - $nums2->[$i];\n    }\n    return \\@result;\n}",
    "    my @sub_list;\n    for (my $i = 0; $i < scalar @$nums1; $i++) {\n        push @sub_list, $nums1->[$i] - $nums2->[$i];\n    }\n    return \\@sub_list;\n}",
    "    my @sub_list;\n    for my $i (0..$#{$nums1}) {\n        push @sub_list, $nums1->[$i] - $nums2->[$i];\n    }\n    return \\@sub_list;\n}",
    "    my @result;\n    for (my $i = 0; $i < @$nums1; $i++) {\n        push @result, $nums1->[$i] - $nums2->[$i];\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$nums1}) {\n        push @result, $nums1->[$i] - $nums2->[$i];\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$nums1}) {\n        push @result, $nums1->[$i] - $nums2->[$i];\n    }\n    return \\@result;\n}",
    "    my $nums3 = [];\n    for my $i (0 .. $#$nums1) {\n        push @$nums3, $nums1->[$i] - $nums2->[$i];\n    }\n    return $nums3;\n}",
    "    my @result;\n    for my $i (0 .. $#{$nums1}) {\n        push @result, $nums1->[$i] - $nums2->[$i];\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$nums1}) {\n        push @result, $nums1->[$i] - $nums2->[$i];\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$nums1}) {\n        push @result, $nums1->[$i] - $nums2->[$i];\n    }\n    return \\@result;\n}",
    "    my @result;\n    for (my $i = 0; $i < @$nums1; $i++) {\n        push @result, $nums1->[$i] - $nums2->[$i];\n    }\n    return \\@result;\n}",
    "    my $len = scalar @$nums1;\n    my @result;\n    for (my $i = 0; $i < $len; $i++) {\n        push @result, $nums1->[$i] - $nums2->[$i];\n    }\n    return \\@result;\n}",
    "    my @result;\n    for (my $i = 0; $i < @$nums1; $i++) {\n        push @result, $nums1->[$i] - $nums2->[$i];\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$nums1}) {\n        push @result, $nums1->[$i] - $nums2->[$i];\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$nums1}) {\n        push @result, $nums1->[$i] - $nums2->[$i];\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    for my $i (0 .. $#{$nums1}) {\n        push @result, $nums1->[$i] - $nums2->[$i];\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#$nums1) {\n        push @result, $nums1->[$i] - $nums2->[$i];\n    }\n    return \\@result;\n}"
  ]
}