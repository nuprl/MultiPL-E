{
  "name": "mbpp_272_rear_extract",
  "language": "pl",
  "prompt": "# Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nsub rear_extract {\n    my($test_list) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rear_extract;\n        if(eq_deeply($candidate->([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @new_list = ();\n    foreach my $tuple (@$test_list) {\n        push @new_list, $tuple->[1];\n    }\n    return @new_list;\n}",
    "    my @result_list = ();\n    foreach my $tuple (@$test_list) {\n        push @result_list, $tuple->[1];\n    }\n    return \\@result_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        push @result, $tuple->[-1];\n    }\n    return @result;\n}",
    "    my @rear_list;\n    foreach my $tuple (@$test_list) {\n        push @rear_list, $tuple->[1];\n    }\n    return \\@rear_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        push @result, $tuple->[-1];\n    }\n    return \\@result;\n}",
    "    my @rear_list = ();\n    foreach my $tuple (@$test_list) {\n        push(@rear_list, $tuple->[1]);\n    }\n    return \\@rear_list;\n}",
    "    my @rear_list;\n    foreach my $tuple (@$test_list) {\n        push @rear_list, $tuple->[1];\n    }\n    return \\@rear_list;\n}",
    "    my @new_list = ();\n    foreach my $tuple (@$test_list) {\n        push @new_list, $tuple->[1];\n    }\n    return \\@new_list;\n}",
    "    my @rear_list;\n    foreach my $tuple (@$test_list) {\n        push @rear_list, $tuple->[1];\n    }\n    return \\@rear_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        push @result, $tuple->[-1];\n    }\n    return @result;\n}",
    "    my @result = ();\n    foreach my $tuple (@$test_list) {\n        push @result, $tuple->[-1];\n    }\n    return \\@result;\n}",
    "    my @rear_list = ();\n    foreach my $tuple (@$test_list) {\n        push @rear_list, $tuple->[1];\n    }\n    return \\@rear_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        push @result, $tuple->[1];\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        push @result, $tuple->[-1];\n    }\n    return \\@result;\n}",
    "    my @result_list;\n    foreach my $tuple (@$test_list) {\n        push @result_list, $tuple->[1];\n    }\n    return @result_list;\n}",
    "    my @result_list;\n    foreach my $tuple (@$test_list) {\n        push @result_list, $tuple->[1];\n    }\n    return \\@result_list;\n}",
    "    my @result = ();\n    foreach my $tuple (@$test_list) {\n        push(@result, $tuple->[1]);\n    }\n    return @result;\n}",
    "    my @rear_list = ();\n    foreach my $tuple (@$test_list) {\n        push @rear_list, $tuple->[1];\n    }\n    return @rear_list;\n}",
    "    my @new_list;\n    foreach my $tuple (@$test_list) {\n        push @new_list, $tuple->[1];\n    }\n    return \\@new_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        push @result, $tuple->[1];\n    }\n    return \\@result;\n}"
  ]
}