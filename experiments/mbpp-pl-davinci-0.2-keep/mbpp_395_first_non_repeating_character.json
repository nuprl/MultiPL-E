{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "pl",
  "prompt": "# Write a python function to find the first non-repeated character in a given string.\nsub first_non_repeating_character {\n    my($str1) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&first_non_repeating_character;\n        if(eq_deeply($candidate->(\"abcabc\"),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abc\"),\"a\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ababc\"),\"c\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my %count;\n    foreach my $char (split //, $str1) {\n        $count{$char}++;\n    }\n    foreach my $char (split //, $str1) {\n        return $char if $count{$char} == 1;\n    }\n}",
    "    my %count;\n    my @char = split(//, $str1);\n    foreach my $char (@char) {\n        $count{$char}++;\n    }\n    foreach my $char (keys %count) {\n        if ($count{$char} == 1) {\n            return $char;\n        }\n    }\n}",
    "    my %count;\n    foreach my $char (split //, $str1) {\n        $count{$char}++;\n    }\n    foreach my $char (split //, $str1) {\n        return $char if $count{$char} == 1;\n    }\n    return undef;\n}",
    "    my %count;\n    foreach my $char (split //, $str1) {\n        $count{$char}++;\n    }\n    foreach my $char (split //, $str1) {\n        return $char if $count{$char} == 1;\n    }\n    return undef;\n}",
    "    my %count;\n    my @char = split(//,$str1);\n    foreach my $char(@char){\n        $count{$char}++;\n    }\n    foreach my $char(@char){\n        if($count{$char} == 1){\n            return $char;\n        }\n    }\n}",
    "    my %count;\n    foreach my $char (split //, $str1) {\n        $count{$char}++;\n    }\n    foreach my $char (split //, $str1) {\n        return $char if $count{$char} == 1;\n    }\n}",
    "    my %count;\n    foreach my $char (split //, $str1) {\n        $count{$char}++;\n    }\n    foreach my $char (split //, $str1) {\n        return $char if $count{$char} == 1;\n    }\n    return undef;\n}",
    "    my %count;\n    my @char = split //, $str1;\n    foreach my $char(@char) {\n        $count{$char}++;\n    }\n    foreach my $char(@char) {\n        if($count{$char} == 1) {\n            return $char;\n        }\n    }\n}",
    "    my %count;\n    my @char = split(//, $str1);\n    foreach my $char(@char) {\n        $count{$char}++;\n    }\n    foreach my $char(@char) {\n        if($count{$char} == 1) {\n            return $char;\n        }\n    }\n}",
    "    my %count;\n    my @char = split(//, $str1);\n    foreach my $char (@char) {\n        $count{$char}++;\n    }\n    foreach my $char (keys %count) {\n        if ($count{$char} == 1) {\n            return $char;\n        }\n    }\n}",
    "    my %count;\n    foreach my $char (split //, $str1) {\n        $count{$char}++;\n    }\n    foreach my $char (split //, $str1) {\n        return $char if $count{$char} == 1;\n    }\n    return undef;\n}",
    "    my %count;\n    my @char = split(//, $str1);\n    foreach my $char (@char) {\n        $count{$char}++;\n    }\n    foreach my $char (@char) {\n        if ($count{$char} == 1) {\n            return $char;\n        }\n    }\n    return undef;\n}",
    "    my %hash = ();\n    my @array = split(//, $str1);\n    foreach my $char (@array) {\n        $hash{$char}++;\n    }\n    foreach my $char (@array) {\n        if ($hash{$char} == 1) {\n            return $char;\n        }\n    }\n}",
    "    my %count;\n    foreach my $char (split //, $str1) {\n        $count{$char}++;\n    }\n    foreach my $char (split //, $str1) {\n        return $char if $count{$char} == 1;\n    }\n}",
    "    my %count;\n    foreach my $char (split //, $str1) {\n        $count{$char}++;\n    }\n    foreach my $char (split //, $str1) {\n        return $char if $count{$char} == 1;\n    }\n    return undef;\n}",
    "    my %count;\n    my @char = split(//, $str1);\n    foreach my $char (@char) {\n        $count{$char}++;\n    }\n    foreach my $char (@char) {\n        if ($count{$char} == 1) {\n            return $char;\n        }\n    }\n    return -1;\n}",
    "    my %count;\n    foreach my $char (split //, $str1) {\n        $count{$char}++;\n    }\n    foreach my $char (split //, $str1) {\n        return $char if $count{$char} == 1;\n    }\n}",
    "    my %count;\n    my @char = split(//, $str1);\n    foreach my $char (@char) {\n        $count{$char}++;\n    }\n    foreach my $char (@char) {\n        if ($count{$char} == 1) {\n            return $char;\n        }\n    }\n}",
    "    my %count;\n    foreach my $char (split //, $str1) {\n        $count{$char}++;\n    }\n    foreach my $char (split //, $str1) {\n        if ($count{$char} == 1) {\n            return $char;\n        }\n    }\n    return undef;\n}",
    "    my %count;\n    foreach my $char (split //, $str1) {\n        $count{$char}++;\n    }\n    foreach my $char (split //, $str1) {\n        return $char if $count{$char} == 1;\n    }\n}"
  ]
}