{
  "name": "mbpp_118_string_to_list",
  "language": "pl",
  "prompt": "# Write a function to convert a string to a list of strings split on the space character.\nsub string_to_list {\n    my($string) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_to_list;\n        if(eq_deeply($candidate->(\"python programming\"),[\"python\", \"programming\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"lists tuples strings\"),[\"lists\", \"tuples\", \"strings\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"write a program\"),[\"write\", \"a\", \"program\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @list = split(/\\s+/, $string);\n    return @list;\n}",
    "    my @list = split(/ /, $string);\n    return @list;\n}",
    "    my @list = split(/ /, $string);\n    return @list;\n}",
    "    my @list = split(' ', $string);\n    return @list;\n}",
    "    return split(/ /, $string);\n}",
    "    my @list = split(/ /, $string);\n    return @list;\n}",
    "    my @list = split(/\\s+/, $string);\n    return @list;\n}",
    "    my @list = split(/ /, $string);\n    return @list;\n}",
    "    my @list = split(/\\s+/, $string);\n    return @list;\n}",
    "    my @list = split(/ /, $string);\n    return @list;\n}",
    "    my @list = split(/ /, $string);\n    return @list;\n}",
    "    my @list = split(/ /, $string);\n    return @list;\n}",
    "    my(@list) = split(/\\s+/, $string);\n    return @list;\n}",
    "    my(@list) = split(/ /, $string);\n    return @list;\n}",
    "    my @list = split(/ /, $string);\n    return @list;\n}",
    "    my @list = split(/\\s+/, $string);\n    return @list;\n}",
    "    my @list = split(/\\s+/, $string);\n    return @list;\n}",
    "    my @list = split(/\\s+/, $string);\n    return @list;\n}",
    "    my @list = split(' ', $string);\n    return @list;\n}",
    "    my @list = split(/\\s+/, $string);\n    return @list;\n}"
  ]
}