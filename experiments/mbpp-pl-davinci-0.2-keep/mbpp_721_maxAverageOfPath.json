{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "pl",
  "prompt": "# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nsub maxAverageOfPath {\n    my($cost) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maxAverageOfPath;\n        if(eq_deeply($candidate->([[1, 2, 3], [6, 5, 4], [7, 3, 9]]),5.2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 4], [7, 6, 5], [8, 4, 10]]),6.2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 4, 5], [8, 7, 6], [9, 5, 11]]),7.2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),5.8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            }\n            elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            }\n            elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            }\n            else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i=0;$i<$n;$i++) {\n        for(my $j=0;$j<$m;$j++) {\n            if($i==0 && $j==0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            }\n            elsif($i==0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            }\n            elsif($j==0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            }\n            else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1]/($n+$m-1);\n}",
    "    my $n = @$cost;\n    my $m = @{$cost->[0]};\n    my $dp = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i - 1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j - 1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            $dp->[$i][$j] = 0;\n        }\n    }\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            $dp->[$i][$j] = 0;\n        }\n    }\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i - 1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j - 1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $dp = [];\n    for(my $i=0; $i<$n; $i++) {\n        for(my $j=0; $j<$n; $j++) {\n            if($i==0 && $j==0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            }\n            elsif($i==0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            }\n            elsif($j==0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            }\n            else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$n-1] / ($n*$n);\n}",
    "    my $n = scalar @$cost;\n    my $m = scalar @{$cost->[0]};\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = $cost->[$i][$j] + max($dp->[$i-1][$j], $dp->[$i][$j-1]);\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n+$m-1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $dp = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$n-1) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$n-1] / ($n*$n);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@{$cost});\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i]->[$j] = $cost->[$i]->[$j];\n            } elsif($i == 0) {\n                $dp->[$i]->[$j] = $dp->[$i]->[$j-1] + $cost->[$i]->[$j];\n            } elsif($j == 0) {\n                $dp->[$i]->[$j] = $dp->[$i-1]->[$j] + $cost->[$i]->[$j];\n            } else {\n                $dp->[$i]->[$j] = max($dp->[$i-1]->[$j], $dp->[$i]->[$j-1]) + $cost->[$i]->[$j];\n            }\n        }\n    }\n    return $dp->[$n-1]->[$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n+$m-1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0]->[0] = $cost->[0]->[0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i]->[0] = $dp->[$i-1]->[0] + $cost->[$i]->[0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0]->[$j] = $dp->[0]->[$j-1] + $cost->[0]->[$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i]->[$j] = max($dp->[$i-1]->[$j], $dp->[$i]->[$j-1]) + $cost->[$i]->[$j];\n        }\n    }\n    return $dp->[$n-1]->[$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my @dp = ();\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp[$i][$j] = $cost->[$i][$j];\n            }\n            elsif($i == 0) {\n                $dp[$i][$j] = $dp[$i][$j - 1] + $cost->[$i][$j];\n            }\n            elsif($j == 0) {\n                $dp[$i][$j] = $dp[$i - 1][$j] + $cost->[$i][$j];\n            }\n            else {\n                $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar @$cost;\n    my $m = scalar @{$cost->[0]};\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $n; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i]->[$j] = $cost->[$i]->[$j];\n            } elsif($i == 0) {\n                $dp->[$i]->[$j] = $dp->[$i]->[$j - 1] + $cost->[$i]->[$j];\n            } elsif($j == 0) {\n                $dp->[$i]->[$j] = $dp->[$i - 1]->[$j] + $cost->[$i]->[$j];\n            } else {\n                $dp->[$i]->[$j] = max($dp->[$i - 1]->[$j], $dp->[$i]->[$j - 1]) + $cost->[$i]->[$j];\n            }\n        }\n    }\n    return $dp->[$n - 1]->[$n - 1] / ($n * 2 - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            }\n            elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            }\n            elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            }\n            else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i]->[$j] = $cost->[$i]->[$j];\n            }\n            elsif($i == 0) {\n                $dp->[$i]->[$j] = $dp->[$i]->[$j - 1] + $cost->[$i]->[$j];\n            }\n            elsif($j == 0) {\n                $dp->[$i]->[$j] = $dp->[$i - 1]->[$j] + $cost->[$i]->[$j];\n            }\n            else {\n                $dp->[$i]->[$j] = max($dp->[$i - 1]->[$j], $dp->[$i]->[$j - 1]) + $cost->[$i]->[$j];\n            }\n        }\n    }\n    return $dp->[$n - 1]->[$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i - 1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j - 1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i - 1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j - 1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            }\n            elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            }\n            elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            }\n            else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my @dp = ();\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp[$i][$j] = $dp[$i][$j-1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp[$i][$j] = $dp[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp[$i][$j] = max($dp[$i-1][$j], $dp[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp[$n-1][$m-1] / ($n+$m-1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for my $i (0 .. $n-1) {\n        for my $j (0 .. $m-1) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar @$cost;\n    my $m = scalar @{$cost->[0]};\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1]/($n+$m-1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            $dp->[$i]->[$j] = {\n                'cost' => 0,\n                'count' => 0,\n            };\n        }\n    }\n    $dp->[0]->[0]->{'cost'} = $cost->[0]->[0];\n    $dp->[0]->[0]->{'count'} = 1;\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i]->[0]->{'cost'} = $dp->[$i - 1]->[0]->{'cost'} + $cost->[$i]->[0];\n        $dp->[$i]->[0]->{'count'} = $dp->[$i - 1]->[0]->{'count'} + 1;\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0]->[$j]->{'cost'} = $dp->[0]->[$j - 1]->[0]->{'cost'} + $cost->[0]->[$j];\n        $dp->[0]->[$j]->{'count'} = $dp->[0]->[$j - 1]->[0]->{'count'} + 1;\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            if ($dp->[$i - 1]->[$j]->{'cost'} / $dp->[$i - 1]->[$j]->{'count'} > $dp->[$i]->[$j - 1]->{'cost",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@{$cost});\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@{$cost});\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    my $max = $dp->[$n - 1][$m - 1];\n    my $count = $n + $m - 1;\n    return $max / $count;\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0]->[0] = $cost->[0]->[0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i]->[0] = $dp->[$i - 1]->[0] + $cost->[$i]->[0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0]->[$j] = $dp->[0]->[$j - 1] + $cost->[0]->[$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i]->[$j] = max($dp->[$i - 1]->[$j], $dp->[$i]->[$j - 1]) + $cost->[$i]->[$j];\n        }\n    }\n    return $dp->[$n - 1]->[$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar @$cost;\n    my $m = scalar @{$cost->[0]};\n    my @dp = ();\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp[$i][$j] = $dp[$i][$j - 1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp[$i][$j] = $dp[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar @$cost;\n    my $m = scalar @{$cost->[0]};\n    my $dp = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar @$cost;\n    my $m = scalar @{$cost->[0]};\n    my $dp = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i=0; $i<$n; $i++) {\n        $dp->[$i] = [];\n        for(my $j=0; $j<$m; $j++) {\n            $dp->[$i][$j] = 0;\n        }\n    }\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i=1; $i<$n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j=1; $j<$m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i=1; $i<$n; $i++) {\n        for(my $j=1; $j<$m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1]/($n+$m-1);\n}",
    "    my $n = scalar(@{$cost});\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0]->[0] = $cost->[0]->[0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i]->[0] = $dp->[$i-1]->[0] + $cost->[$i]->[0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0]->[$j] = $dp->[0]->[$j-1] + $cost->[0]->[$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i]->[$j] = max($dp->[$i-1]->[$j], $dp->[$i]->[$j-1]) + $cost->[$i]->[$j];\n        }\n    }\n    return $dp->[$n-1]->[$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i]->[$j] = $cost->[$i]->[$j];\n            } elsif($i == 0) {\n                $dp->[$i]->[$j] = $dp->[$i]->[$j - 1] + $cost->[$i]->[$j];\n            } elsif($j == 0) {\n                $dp->[$i]->[$j] = $dp->[$i - 1]->[$j] + $cost->[$i]->[$j];\n            } else {\n                $dp->[$i]->[$j] = max($dp->[$i - 1]->[$j], $dp->[$i]->[$j - 1]) + $cost->[$i]->[$j];\n            }\n        }\n    }\n    return $dp->[$n - 1]->[$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my @dp = ();\n    $dp[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp[$i][0] = $dp[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp[0][$j] = $dp[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp[$i][$j] = max($dp[$i-1][$j], $dp[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i]->[$j] = $cost->[$i]->[$j];\n            } elsif($i == 0) {\n                $dp->[$i]->[$j] = $dp->[$i]->[$j - 1] + $cost->[$i]->[$j];\n            } elsif($j == 0) {\n                $dp->[$i]->[$j] = $dp->[$i - 1]->[$j] + $cost->[$i]->[$j];\n            } else {\n                $dp->[$i]->[$j] = max($dp->[$i - 1]->[$j], $dp->[$i]->[$j - 1]) + $cost->[$i]->[$j];\n            }\n        }\n    }\n    return $dp->[$n - 1]->[$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    my $max = $dp->[$n - 1][$m - 1];\n    my $path = [];\n    my $i = $n - 1;\n    my $j = $m - 1;\n    while($i >= 0 && $j >= 0) {\n        push @$path, [$i, $j];\n        if($i == 0) {\n            $j--;\n        } elsif($j == 0) {\n            $i--;\n        } else {\n            if($dp->[$i - 1][$j] > $dp->[$i][$j - 1]) {\n                $i--;\n            } else {\n                $j--;\n            }\n        }\n    }\n    return ($max, $path);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        $dp->[$i] = [];\n        for (my $j = 0; $j < $m; $j++) {\n            $dp->[$i]->[$j] = 0;\n        }\n    }\n    $dp->[0]->[0] = $cost->[0]->[0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i]->[0] = $dp->[$i - 1]->[0] + $cost->[$i]->[0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0]->[$j] = $dp->[0]->[$j - 1] + $cost->[0]->[$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i]->[$j] = max($dp->[$i - 1]->[$j], $dp->[$i]->[$j - 1]) + $cost->[$i]->[$j];\n        }\n    }\n    return $dp->[$n - 1]->[$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar @$cost;\n    my $m = scalar @{$cost->[0]};\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i - 1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j - 1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            $dp->[$i]->[$j] = {};\n        }\n    }\n    $dp->[0]->[0]->{sum} = $cost->[0]->[0];\n    $dp->[0]->[0]->{count} = 1;\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i]->[0]->{sum} = $dp->[$i - 1]->[0]->{sum} + $cost->[$i]->[0];\n        $dp->[$i]->[0]->{count} = $dp->[$i - 1]->[0]->{count} + 1;\n    }\n    for (my $i = 1; $i < $m; $i++) {\n        $dp->[0]->[$i]->{sum} = $dp->[0]->[$i - 1]->{sum} + $cost->[0]->[$i];\n        $dp->[0]->[$i]->{count} = $dp->[0]->[$i - 1]->{count} + 1;\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            my $sum1 = $dp->[$i - 1]->[$j]->{sum} + $cost->[$i]->[$j];\n            my $count1 = $dp->[$i - 1]->[$j]->{count} + 1;\n            my $sum2 = $dp->[$i]->[$j - 1]->{sum} + $cost->[$i]->[$j];\n            my $count",
    "    my $n = scalar @{$cost};\n    my @dp = ();\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $n; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp[$i][$j] = $dp[$i][$j - 1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp[$i][$j] = $dp[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            $dp->[$i]->[$j] = [];\n            if ($i == 0 && $j == 0) {\n                $dp->[$i]->[$j]->[0] = $cost->[$i]->[$j];\n            } elsif ($i == 0) {\n                $dp->[$i]->[$j]->[0] = $dp->[$i]->[$j-1]->[0] + $cost->[$i]->[$j];\n            } elsif ($j == 0) {\n                $dp->[$i]->[$j]->[0] = $dp->[$i-1]->[$j]->[0] + $cost->[$i]->[$j];\n            } else {\n                $dp->[$i]->[$j]->[0] = max($dp->[$i-1]->[$j]->[0], $dp->[$i]->[$j-1]->[0]) + $cost->[$i]->[$j];\n            }\n        }\n    }\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            for (my $k = 1; $k <= $i + $j; $k++) {\n                if ($i == 0 && $j == 0) {\n                    $dp->[$i]->[$j]->[$k] = $cost->[$i]->[$j];\n                } elsif ($i == 0) {\n                    $dp->[$i]->[$j]->[$k] = $dp->[$i]->[$j-1]->[$k] + $cost->[$",
    "    my $n = scalar @$cost;\n    my $m = scalar @{$cost->[0]};\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i]->[$j] = $cost->[$i]->[$j];\n            } elsif($i == 0) {\n                $dp->[$i]->[$j] = $dp->[$i]->[$j - 1] + $cost->[$i]->[$j];\n            } elsif($j == 0) {\n                $dp->[$i]->[$j] = $dp->[$i - 1]->[$j] + $cost->[$i]->[$j];\n            } else {\n                $dp->[$i]->[$j] = max($dp->[$i - 1]->[$j], $dp->[$i]->[$j - 1]) + $cost->[$i]->[$j];\n            }\n        }\n    }\n    return $dp->[$n - 1]->[$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar @$cost;\n    my $m = scalar @{$cost->[0]};\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            $dp->[$i][$j] = 0;\n        }\n    }\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my @dp;\n    $dp[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp[0][$i] = $dp[0][$i - 1] + $cost->[0][$i];\n        $dp[$i][0] = $dp[$i - 1][0] + $cost->[$i][0];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $n; $j++) {\n            $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}",
    "    my $n = scalar(@$cost);\n    my $dp = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$n-1) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$n-1] / ($n * $n);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my @dp = ();\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp[$i][$j] = $dp[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp[$i][$j] = $dp[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp[$i][$j] = max($dp[$i-1][$j], $dp[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i]->[$j] = $cost->[$i]->[$j];\n            } elsif ($i == 0) {\n                $dp->[$i]->[$j] = $dp->[$i]->[$j-1] + $cost->[$i]->[$j];\n            } elsif ($j == 0) {\n                $dp->[$i]->[$j] = $dp->[$i-1]->[$j] + $cost->[$i]->[$j];\n            } else {\n                $dp->[$i]->[$j] = max($dp->[$i-1]->[$j], $dp->[$i]->[$j-1]) + $cost->[$i]->[$j];\n            }\n        }\n    }\n    return $dp->[$n-1]->[$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i]->[$j] = $cost->[$i]->[$j];\n            } elsif ($i == 0) {\n                $dp->[$i]->[$j] = $dp->[$i]->[$j-1] + $cost->[$i]->[$j];\n            } elsif ($j == 0) {\n                $dp->[$i]->[$j] = $dp->[$i-1]->[$j] + $cost->[$i]->[$j];\n            } else {\n                $dp->[$i]->[$j] = max($dp->[$i-1]->[$j], $dp->[$i]->[$j-1]) + $cost->[$i]->[$j];\n            }\n        }\n    }\n    return $dp->[$n-1]->[$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar @$cost;\n    my $m = scalar @{$cost->[0]};\n    my $dp = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my @dp = ();\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp[$i][$j] = $dp[$i][$j-1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp[$i][$j] = $dp[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp[$i][$j] = max($dp[$i-1][$j], $dp[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar @$cost;\n    my $m = scalar @{$cost->[0]};\n    my $dp = [];\n    for(my $i=0;$i<$n;$i++) {\n        for(my $j=0;$j<$m;$j++) {\n            if($i==0 && $j==0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            }\n            elsif($i==0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            }\n            elsif($j==0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            }\n            else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j],$dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1]/($n+$m-1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            }\n            elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            }\n            elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            }\n            else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $dp = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$n-1) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$n-1] / ($n * $n);\n}",
    "    my $n = scalar @$cost;\n    my $m = scalar @{$cost->[0]};\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@{$cost});\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            }\n            elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            }\n            elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            }\n            else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            }\n            elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            }\n            elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            }\n            else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my @sum = ();\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $n; $j++) {\n            if($i == 0 && $j == 0) {\n                $sum[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $sum[$i][$j] = $sum[$i][$j - 1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $sum[$i][$j] = $sum[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $sum[$i][$j] = max($sum[$i - 1][$j], $sum[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $sum[$n - 1][$n - 1] / ($n * 2 - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i]->[$j] = $cost->[$i]->[$j];\n            } elsif ($i == 0) {\n                $dp->[$i]->[$j] = $dp->[$i]->[$j - 1] + $cost->[$i]->[$j];\n            } elsif ($j == 0) {\n                $dp->[$i]->[$j] = $dp->[$i - 1]->[$j] + $cost->[$i]->[$j];\n            } else {\n                $dp->[$i]->[$j] = max($dp->[$i - 1]->[$j], $dp->[$i]->[$j - 1]) + $cost->[$i]->[$j];\n            }\n        }\n    }\n    return $dp->[$n - 1]->[$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1]/($n+$m-1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar @$cost;\n    my $m = scalar @{$cost->[0]};\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            }\n            elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            }\n            elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            }\n            else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $dp = [];\n    $dp->[0]->[0] = $cost->[0]->[0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[0]->[$i] = $dp->[0]->[$i - 1] + $cost->[0]->[$i];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i]->[0] = $dp->[$i - 1]->[0] + $cost->[$i]->[0];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $n; $j++) {\n            $dp->[$i]->[$j] = max($dp->[$i - 1]->[$j], $dp->[$i]->[$j - 1]) + $cost->[$i]->[$j];\n        }\n    }\n    return $dp->[$n - 1]->[$n - 1] / ($n * $n);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@{$cost});\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i - 1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j - 1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@{$cost});\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i - 1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j - 1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i]->[$j] = $cost->[$i]->[$j];\n            } elsif ($i == 0) {\n                $dp->[$i]->[$j] = $dp->[$i]->[$j-1] + $cost->[$i]->[$j];\n            } elsif ($j == 0) {\n                $dp->[$i]->[$j] = $dp->[$i-1]->[$j] + $cost->[$i]->[$j];\n            } else {\n                $dp->[$i]->[$j] = max($dp->[$i-1]->[$j], $dp->[$i]->[$j-1]) + $cost->[$i]->[$j];\n            }\n        }\n    }\n    return $dp->[$n-1]->[$m-1] / ($n+$m-1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i - 1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j - 1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $n; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$n - 1] / ($n * $n);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i - 1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j - 1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1]/($n+$m-1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i]->[$j] = $cost->[$i]->[$j];\n            } elsif ($i == 0) {\n                $dp->[$i]->[$j] = $dp->[$i]->[$j-1] + $cost->[$i]->[$j];\n            } elsif ($j == 0) {\n                $dp->[$i]->[$j] = $dp->[$i-1]->[$j] + $cost->[$i]->[$j];\n            } else {\n                $dp->[$i]->[$j] = max($dp->[$i-1]->[$j], $dp->[$i]->[$j-1]) + $cost->[$i]->[$j];\n            }\n        }\n    }\n    return $dp->[$n-1]->[$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@{$cost});\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i]->[$j] = $cost->[$i]->[$j];\n            } elsif($i == 0) {\n                $dp->[$i]->[$j] = $dp->[$i]->[$j - 1] + $cost->[$i]->[$j];\n            } elsif($j == 0) {\n                $dp->[$i]->[$j] = $dp->[$i - 1]->[$j] + $cost->[$i]->[$j];\n            } else {\n                $dp->[$i]->[$j] = max($dp->[$i - 1]->[$j], $dp->[$i]->[$j - 1]) + $cost->[$i]->[$j];\n            }\n        }\n    }\n    return $dp->[$n - 1]->[$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar @$cost;\n    my @dp = ();\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $n; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp[$i][$j] = $dp[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp[$i][$j] = $dp[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * 2 - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            }\n            elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            }\n            elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            }\n            else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar @$cost;\n    my @dp = ();\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $n; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp[$i][$j] = $dp[$i][$j - 1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp[$i][$j] = $dp[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}",
    "    my $n = scalar(@$cost);\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $n; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$n - 1] / ($n * $n);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar @$cost;\n    my $m = scalar @{$cost->[0]};\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        $dp->[$i] = [];\n        for (my $j = 0; $j < $m; $j++) {\n            $dp->[$i][$j] = 0;\n        }\n    }\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i - 1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j - 1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar @$cost;\n    my $m = scalar @{$cost->[0]};\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@{$cost});\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    my $max = $dp->[$n-1][$m-1] / ($n+$m-1);\n    return $max;\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar @$cost;\n    my $m = scalar @{$cost->[0]};\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            $dp->[$i][$j] = 0;\n        }\n    }\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1]/($n+$m-1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i]->[$j] = $cost->[$i]->[$j];\n            } elsif($i == 0) {\n                $dp->[$i]->[$j] = $dp->[$i]->[$j-1] + $cost->[$i]->[$j];\n            } elsif($j == 0) {\n                $dp->[$i]->[$j] = $dp->[$i-1]->[$j] + $cost->[$i]->[$j];\n            } else {\n                $dp->[$i]->[$j] = max($dp->[$i-1]->[$j], $dp->[$i]->[$j-1]) + $cost->[$i]->[$j];\n            }\n        }\n    }\n    return $dp->[$n-1]->[$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i]->[$j] = $cost->[$i]->[$j];\n            } elsif($i == 0) {\n                $dp->[$i]->[$j] = $dp->[$i]->[$j - 1] + $cost->[$i]->[$j];\n            } elsif($j == 0) {\n                $dp->[$i]->[$j] = $dp->[$i - 1]->[$j] + $cost->[$i]->[$j];\n            } else {\n                $dp->[$i]->[$j] = max($dp->[$i - 1]->[$j], $dp->[$i]->[$j - 1]) + $cost->[$i]->[$j];\n            }\n        }\n    }\n    return $dp->[$n - 1]->[$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i]->[$j] = $cost->[$i]->[$j];\n            }\n            elsif($i == 0) {\n                $dp->[$i]->[$j] = $dp->[$i]->[$j - 1] + $cost->[$i]->[$j];\n            }\n            elsif($j == 0) {\n                $dp->[$i]->[$j] = $dp->[$i - 1]->[$j] + $cost->[$i]->[$j];\n            }\n            else {\n                $dp->[$i]->[$j] = max($dp->[$i - 1]->[$j], $dp->[$i]->[$j - 1]) + $cost->[$i]->[$j];\n            }\n        }\n    }\n    return $dp->[$n - 1]->[$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n+$m-1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i - 1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j - 1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n+$m-1);\n}",
    "    my $n = scalar(@{$cost});\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            }\n            elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            }\n            elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            }\n            else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[0][$i] = $dp->[0][$i-1] + $cost->[0][$i];\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $n; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$n-1] / ($n*$n);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            $dp->[$i][$j] = 0;\n        }\n    }\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i]->[$j] = $cost->[$i]->[$j];\n            } elsif ($i == 0) {\n                $dp->[$i]->[$j] = $dp->[$i]->[$j - 1] + $cost->[$i]->[$j];\n            } elsif ($j == 0) {\n                $dp->[$i]->[$j] = $dp->[$i - 1]->[$j] + $cost->[$i]->[$j];\n            } else {\n                $dp->[$i]->[$j] = max($dp->[$i - 1]->[$j], $dp->[$i]->[$j - 1]) + $cost->[$i]->[$j];\n            }\n        }\n    }\n    return $dp->[$n - 1]->[$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        $dp->[$i] = [];\n    }\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i]->[$j] = $cost->[$i]->[$j];\n            } elsif ($i == 0) {\n                $dp->[$i]->[$j] = $dp->[$i]->[$j - 1] + $cost->[$i]->[$j];\n            } elsif ($j == 0) {\n                $dp->[$i]->[$j] = $dp->[$i - 1]->[$j] + $cost->[$i]->[$j];\n            } else {\n                $dp->[$i]->[$j] = max($dp->[$i - 1]->[$j], $dp->[$i]->[$j - 1]) + $cost->[$i]->[$j];\n            }\n        }\n    }\n    return $dp->[$n - 1]->[$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my @dp = ();\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $n; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp[$i][$j] = $dp[$i][$j - 1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp[$i][$j] = $dp[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i]->[$j] = $cost->[$i]->[$j];\n            } elsif ($i == 0) {\n                $dp->[$i]->[$j] = $dp->[$i]->[$j-1] + $cost->[$i]->[$j];\n            } elsif ($j == 0) {\n                $dp->[$i]->[$j] = $dp->[$i-1]->[$j] + $cost->[$i]->[$j];\n            } else {\n                $dp->[$i]->[$j] = max($dp->[$i-1]->[$j], $dp->[$i]->[$j-1]) + $cost->[$i]->[$j];\n            }\n        }\n    }\n    return $dp->[$n-1]->[$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar @$cost;\n    my $m = scalar @{$cost->[0]};\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0]->[0] = $cost->[0]->[0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i]->[0] = $dp->[$i-1]->[0] + $cost->[$i]->[0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0]->[$j] = $dp->[0]->[$j-1] + $cost->[0]->[$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i]->[$j] = max($dp->[$i-1]->[$j], $dp->[$i]->[$j-1]) + $cost->[$i]->[$j];\n        }\n    }\n    return $dp->[$n-1]->[$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar @$cost;\n    my $m = scalar @{$cost->[0]};\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $n; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$n - 1] / ($n * $n);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar @$cost;\n    my $m = scalar @{$cost->[0]};\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i - 1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j - 1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = @$cost;\n    my @dp = ();\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $n; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp[$i][$j] = $dp[$i][$j - 1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp[$i][$j] = $dp[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp[$n - 1][$n - 1] / ($n * $n);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i - 1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j - 1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar @$cost;\n    my $m = scalar @{$cost->[0]};\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar @$cost;\n    my $m = scalar @{$cost->[0]};\n    my $dp = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $n; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$n-1] / ($n * $n);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif ($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif ($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n                $dp->[$i]->[$j] = $cost->[$i]->[$j];\n            } elsif ($i == 0) {\n                $dp->[$i]->[$j] = $dp->[$i]->[$j - 1] + $cost->[$i]->[$j];\n            } elsif ($j == 0) {\n                $dp->[$i]->[$j] = $dp->[$i - 1]->[$j] + $cost->[$i]->[$j];\n            } else {\n                $dp->[$i]->[$j] = max($dp->[$i - 1]->[$j], $dp->[$i]->[$j - 1]) + $cost->[$i]->[$j];\n            }\n        }\n    }\n    return $dp->[$n - 1]->[$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@{$cost});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $n; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$n - 1] / ($n * 2 - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j - 1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i - 1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for(my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i-1][0] + $cost->[$i][0];\n    }\n    for(my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j-1] + $cost->[0][$j];\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar @$cost;\n    my $m = scalar @{$cost->[0]};\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            } elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            } elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            } else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            }\n            elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            }\n            elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            }\n            else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n+$m-1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = 0; $j < $m; $j++) {\n            if($i == 0 && $j == 0) {\n                $dp->[$i][$j] = $cost->[$i][$j];\n            }\n            elsif($i == 0) {\n                $dp->[$i][$j] = $dp->[$i][$j-1] + $cost->[$i][$j];\n            }\n            elsif($j == 0) {\n                $dp->[$i][$j] = $dp->[$i-1][$j] + $cost->[$i][$j];\n            }\n            else {\n                $dp->[$i][$j] = max($dp->[$i-1][$j], $dp->[$i][$j-1]) + $cost->[$i][$j];\n            }\n        }\n    }\n    return $dp->[$n-1][$m-1] / ($n + $m - 1);\n}",
    "    my $n = scalar(@$cost);\n    my $m = scalar(@{$cost->[0]});\n    my $dp = [];\n    $dp->[0][0] = $cost->[0][0];\n    for (my $i = 1; $i < $n; $i++) {\n        $dp->[$i][0] = $dp->[$i - 1][0] + $cost->[$i][0];\n    }\n    for (my $j = 1; $j < $m; $j++) {\n        $dp->[0][$j] = $dp->[0][$j - 1] + $cost->[0][$j];\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = 1; $j < $m; $j++) {\n            $dp->[$i][$j] = max($dp->[$i - 1][$j], $dp->[$i][$j - 1]) + $cost->[$i][$j];\n        }\n    }\n    return $dp->[$n - 1][$m - 1] / ($n + $m - 1);\n}"
  ]
}