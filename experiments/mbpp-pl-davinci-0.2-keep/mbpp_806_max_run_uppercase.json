{
  "name": "mbpp_806_max_run_uppercase",
  "language": "pl",
  "prompt": "# Write a function to find maximum run of uppercase characters in the given string.\nsub max_run_uppercase {\n    my($test_str) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_run_uppercase;\n        if(eq_deeply($candidate->(\"GeMKSForGERksISBESt\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"PrECIOusMOVemENTSYT\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"GooGLEFluTTER\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $max_run = 0;\n    my $curr_run = 0;\n    foreach my $char (split(//, $test_str)) {\n        if ($char =~ /[A-Z]/) {\n            $curr_run++;\n        } else {\n            $curr_run = 0;\n        }\n        if ($curr_run > $max_run) {\n            $max_run = $curr_run;\n        }\n    }\n    return $max_run;\n}",
    "    my $max_run = 0;\n    my $run = 0;\n    my @chars = split //, $test_str;\n    foreach my $char (@chars) {\n        if ($char =~ /[A-Z]/) {\n            $run++;\n        } else {\n            $run = 0;\n        }\n        if ($run > $max_run) {\n            $max_run = $run;\n        }\n    }\n    return $max_run;\n}",
    "    my $max_run = 0;\n    my $run = 0;\n    for my $c (split //, $test_str) {\n        if ($c =~ /[A-Z]/) {\n            $run++;\n            if ($run > $max_run) {\n                $max_run = $run;\n            }\n        }\n        else {\n            $run = 0;\n        }\n    }\n    return $max_run;\n}",
    "    my $max_run = 0;\n    my $cur_run = 0;\n    my $i = 0;\n    while($i < length($test_str)) {\n        if(substr($test_str, $i, 1) =~ /[A-Z]/) {\n            $cur_run++;\n        }\n        else {\n            if($cur_run > $max_run) {\n                $max_run = $cur_run;\n            }\n            $cur_run = 0;\n        }\n        $i++;\n    }\n    if($cur_run > $max_run) {\n        $max_run = $cur_run;\n    }\n    return $max_run;\n}",
    "    my $max_run = 0;\n    my $run = 0;\n    for (my $i = 0; $i < length($test_str); $i++) {\n        if (substr($test_str, $i, 1) =~ /[A-Z]/) {\n            $run++;\n        } else {\n            if ($run > $max_run) {\n                $max_run = $run;\n            }\n            $run = 0;\n        }\n    }\n    if ($run > $max_run) {\n        $max_run = $run;\n    }\n    return $max_run;\n}",
    "    my $max_run = 0;\n    my $cur_run = 0;\n    for my $char (split //, $test_str) {\n        if ($char =~ /[A-Z]/) {\n            $cur_run++;\n        } else {\n            $cur_run = 0;\n        }\n        $max_run = $cur_run if $cur_run > $max_run;\n    }\n    return $max_run;\n}",
    "    my $max_run = 0;\n    my $run_count = 0;\n    my $i = 0;\n    while ($i < length($test_str)) {\n        if (substr($test_str, $i, 1) =~ /[A-Z]/) {\n            $run_count++;\n        } else {\n            if ($run_count > $max_run) {\n                $max_run = $run_count;\n            }\n            $run_count = 0;\n        }\n        $i++;\n    }\n    if ($run_count > $max_run) {\n        $max_run = $run_count;\n    }\n    return $max_run;\n}",
    "    my $max_run = 0;\n    my $curr_run = 0;\n    my $str_len = length($test_str);\n    for (my $i = 0; $i < $str_len; $i++) {\n        if (substr($test_str, $i, 1) =~ /[A-Z]/) {\n            $curr_run++;\n        } else {\n            if ($curr_run > $max_run) {\n                $max_run = $curr_run;\n            }\n            $curr_run = 0;\n        }\n    }\n    if ($curr_run > $max_run) {\n        $max_run = $curr_run;\n    }\n    return $max_run;\n}",
    "    my $max_run = 0;\n    my $cur_run = 0;\n    my $i = 0;\n    my $len = length($test_str);\n    while ($i < $len) {\n        if (substr($test_str, $i, 1) =~ /[A-Z]/) {\n            $cur_run++;\n            if ($cur_run > $max_run) {\n                $max_run = $cur_run;\n            }\n        } else {\n            $cur_run = 0;\n        }\n        $i++;\n    }\n    return $max_run;\n}",
    "    my $max_run = 0;\n    my $run = 0;\n    for my $c (split //, $test_str) {\n        if ($c =~ /[A-Z]/) {\n            $run++;\n        } else {\n            $run = 0;\n        }\n        if ($run > $max_run) {\n            $max_run = $run;\n        }\n    }\n    return $max_run;\n}",
    "    my $max_run = 0;\n    my $run = 0;\n    my @chars = split(//, $test_str);\n    foreach my $char (@chars) {\n        if ($char =~ /[A-Z]/) {\n            $run++;\n        } else {\n            $run = 0;\n        }\n        if ($run > $max_run) {\n            $max_run = $run;\n        }\n    }\n    return $max_run;\n}",
    "    my $max_count = 0;\n    my $count = 0;\n    my @char_list = split //, $test_str;\n    foreach my $char (@char_list) {\n        if ($char =~ /[A-Z]/) {\n            $count++;\n            if ($count > $max_count) {\n                $max_count = $count;\n            }\n        } else {\n            $count = 0;\n        }\n    }\n    return $max_count;\n}",
    "    my $max_run = 0;\n    my $run = 0;\n    for my $i (0..length($test_str)-1) {\n        if (substr($test_str, $i, 1) =~ /[A-Z]/) {\n            $run++;\n        } else {\n            $run = 0;\n        }\n        $max_run = $run if $run > $max_run;\n    }\n    return $max_run;\n}",
    "    my $max_run = 0;\n    my $cur_run = 0;\n    my $i = 0;\n    while ($i < length($test_str)) {\n        if (substr($test_str, $i, 1) =~ /[A-Z]/) {\n            $cur_run++;\n            if ($cur_run > $max_run) {\n                $max_run = $cur_run;\n            }\n        } else {\n            $cur_run = 0;\n        }\n        $i++;\n    }\n    return $max_run;\n}",
    "    my $max_run = 0;\n    my $run = 0;\n    for my $char (split //, $test_str) {\n        if ($char =~ /[A-Z]/) {\n            $run++;\n        } else {\n            $max_run = $run if $run > $max_run;\n            $run = 0;\n        }\n    }\n    $max_run = $run if $run > $max_run;\n    return $max_run;\n}",
    "    my $max_run = 0;\n    my $run = 0;\n    my @chars = split //, $test_str;\n    for my $char (@chars) {\n        if ($char =~ /[A-Z]/) {\n            $run++;\n        } else {\n            $run = 0;\n        }\n        $max_run = $run if $run > $max_run;\n    }\n    return $max_run;\n}",
    "    my $max_run = 0;\n    my $run = 0;\n    for my $c (split //, $test_str) {\n        if ($c =~ /[A-Z]/) {\n            $run++;\n        } else {\n            $max_run = $run if $run > $max_run;\n            $run = 0;\n        }\n    }\n    $max_run = $run if $run > $max_run;\n    return $max_run;\n}",
    "    my $max_run = 0;\n    my $run = 0;\n    my @chars = split //, $test_str;\n    for my $char (@chars) {\n        if ($char =~ /[A-Z]/) {\n            $run++;\n        } else {\n            $run = 0;\n        }\n        if ($run > $max_run) {\n            $max_run = $run;\n        }\n    }\n    return $max_run;\n}",
    "    my $max_run = 0;\n    my $cur_run = 0;\n    foreach my $char (split //, $test_str) {\n        if ($char =~ /[A-Z]/) {\n            $cur_run++;\n        } else {\n            $cur_run = 0;\n        }\n        if ($cur_run > $max_run) {\n            $max_run = $cur_run;\n        }\n    }\n    return $max_run;\n}",
    "    my $max_run = 0;\n    my $run = 0;\n    for my $char (split //, $test_str) {\n        if ($char =~ /[A-Z]/) {\n            $run++;\n            $max_run = $run if $run > $max_run;\n        } else {\n            $run = 0;\n        }\n    }\n    return $max_run;\n}"
  ]
}