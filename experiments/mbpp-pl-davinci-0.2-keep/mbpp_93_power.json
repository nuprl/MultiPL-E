{
  "name": "mbpp_93_power",
  "language": "pl",
  "prompt": "# Write a function to calculate the value of 'a' to the power 'b'.\nsub power {\n    my($a, $b) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_93_power.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&power;\n        if(eq_deeply($candidate->(3, 4),81)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 3),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 5),3125)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $result = 1;\n    for (my $i = 0; $i < $b; $i++) {\n        $result *= $a;\n    }\n    return $result;\n}",
    "    my $result = 1;\n    for (my $i = 0; $i < $b; $i++) {\n        $result *= $a;\n    }\n    return $result;\n}",
    "    my $result = 1;\n    for (my $i = 0; $i < $b; $i++) {\n        $result *= $a;\n    }\n    return $result;\n}",
    "    my $result = 1;\n    while ($b) {\n        $result *= $a;\n        $b--;\n    }\n    return $result;\n}",
    "    my $result = 1;\n    for (my $i = 0; $i < $b; $i++) {\n        $result *= $a;\n    }\n    return $result;\n}",
    "    my $result = 1;\n    for (my $i = 0; $i < $b; $i++) {\n        $result *= $a;\n    }\n    return $result;\n}",
    "    my $result = 1;\n    for (my $i = 0; $i < $b; $i++) {\n        $result *= $a;\n    }\n    return $result;\n}",
    "    my $result = 1;\n    for (1..$b) {\n        $result *= $a;\n    }\n    return $result;\n}",
    "    my $result = 1;\n    for (my $i = 0; $i < $b; $i++) {\n        $result *= $a;\n    }\n    return $result;\n}",
    "    my $result = 1;\n    for (my $i = 0; $i < $b; $i++) {\n        $result *= $a;\n    }\n    return $result;\n}",
    "    my $result = 1;\n    for (1..$b) {\n        $result *= $a;\n    }\n    return $result;\n}",
    "    my $result = 1;\n    for (my $i = 0; $i < $b; $i++) {\n        $result *= $a;\n    }\n    return $result;\n}",
    "    my $result = 1;\n    for (my $i = 0; $i < $b; $i++) {\n        $result *= $a;\n    }\n    return $result;\n}",
    "    my $result = 1;\n    for (my $i = 0; $i < $b; $i++) {\n        $result *= $a;\n    }\n    return $result;\n}",
    "    return $a ** $b;\n}",
    "    return $a ** $b;\n}",
    "    my $result = 1;\n    for (my $i = 0; $i < $b; $i++) {\n        $result *= $a;\n    }\n    return $result;\n}",
    "    return $a ** $b;\n}",
    "    my $result = 1;\n    while ($b > 0) {\n        $result *= $a;\n        $b--;\n    }\n    return $result;\n}",
    "    my $result = 1;\n    for (my $i = 0; $i < $b; $i++) {\n        $result *= $a;\n    }\n    return $result;\n}"
  ]
}