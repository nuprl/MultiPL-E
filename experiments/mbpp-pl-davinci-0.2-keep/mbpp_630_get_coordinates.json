{
  "name": "mbpp_630_get_coordinates",
  "language": "pl",
  "prompt": "# Write a function to extract all the adjacent coordinates of the given coordinate tuple.\nsub get_coordinates {\n    my($test_tup) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_coordinates;\n        if(eq_deeply($candidate->([3, 4]),[[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5]),[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6]),[[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @coordinates = ();\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    push @coordinates, [$x-1, $y-1];\n    push @coordinates, [$x-1, $y];\n    push @coordinates, [$x-1, $y+1];\n    push @coordinates, [$x, $y-1];\n    push @coordinates, [$x, $y+1];\n    push @coordinates, [$x+1, $y-1];\n    push @coordinates, [$x+1, $y];\n    push @coordinates, [$x+1, $y+1];\n    return @coordinates;\n}",
    "    my @coordinates;\n    my($x, $y) = @$test_tup;\n    for my $i (-1, 0, 1) {\n        for my $j (-1, 0, 1) {\n            if ($i != 0 || $j != 0) {\n                push @coordinates, [$x + $i, $y + $j];\n            }\n        }\n    }\n    return @coordinates;\n}",
    "    my @coordinates = ();\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    push @coordinates, [$x, $y+1];\n    push @coordinates, [$x, $y-1];\n    push @coordinates, [$x+1, $y];\n    push @coordinates, [$x-1, $y];\n    return @coordinates;\n}",
    "    my @coordinates;\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    push @coordinates, [$x-1, $y-1];\n    push @coordinates, [$x-1, $y];\n    push @coordinates, [$x-1, $y+1];\n    push @coordinates, [$x, $y-1];\n    push @coordinates, [$x, $y+1];\n    push @coordinates, [$x+1, $y-1];\n    push @coordinates, [$x+1, $y];\n    push @coordinates, [$x+1, $y+1];\n    return @coordinates;\n}",
    "    my @coordinates;\n    my @test_tup = @$test_tup;\n    my $x = $test_tup[0];\n    my $y = $test_tup[1];\n    push @coordinates, [$x-1, $y-1];\n    push @coordinates, [$x, $y-1];\n    push @coordinates, [$x+1, $y-1];\n    push @coordinates, [$x-1, $y];\n    push @coordinates, [$x+1, $y];\n    push @coordinates, [$x-1, $y+1];\n    push @coordinates, [$x, $y+1];\n    push @coordinates, [$x+1, $y+1];\n    return @coordinates;\n}",
    "    my @coordinates = ();\n    my @test_tup = @{$test_tup};\n    my $x = $test_tup[0];\n    my $y = $test_tup[1];\n    my $z = $test_tup[2];\n    my $w = $test_tup[3];\n    my $v = $test_tup[4];",
    "    my @coordinates;\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    push @coordinates, [$x-1, $y-1];\n    push @coordinates, [$x-1, $y];\n    push @coordinates, [$x-1, $y+1];\n    push @coordinates, [$x, $y-1];\n    push @coordinates, [$x, $y+1];\n    push @coordinates, [$x+1, $y-1];\n    push @coordinates, [$x+1, $y];\n    push @coordinates, [$x+1, $y+1];\n    return @coordinates;\n}",
    "    my @coordinates;\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    push @coordinates, [$x, $y+1];\n    push @coordinates, [$x, $y-1];\n    push @coordinates, [$x+1, $y];\n    push @coordinates, [$x-1, $y];\n    push @coordinates, [$x+1, $y+1];\n    push @coordinates, [$x-1, $y-1];\n    push @coordinates, [$x+1, $y-1];\n    push @coordinates, [$x-1, $y+1];\n    return @coordinates;\n}",
    "    my @coordinates;\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    push @coordinates, [$x-1, $y-1];\n    push @coordinates, [$x-1, $y];\n    push @coordinates, [$x-1, $y+1];\n    push @coordinates, [$x, $y-1];\n    push @coordinates, [$x, $y+1];\n    push @coordinates, [$x+1, $y-1];\n    push @coordinates, [$x+1, $y];\n    push @coordinates, [$x+1, $y+1];\n    return @coordinates;\n}",
    "    my @coordinates;\n    my @test_tup = @$test_tup;\n    my $x = $test_tup[0];\n    my $y = $test_tup[1];\n    for my $i (-1, 0, 1) {\n        for my $j (-1, 0, 1) {\n            if ($i == 0 && $j == 0) {\n                next;\n            }\n            my $x_coord = $x + $i;\n            my $y_coord = $y + $j;\n            if ($x_coord < 0 || $x_coord > $x_max || $y_coord < 0 || $y_coord > $y_max) {\n                next;\n            }\n            push @coordinates, [$x_coord, $y_coord];\n        }\n    }\n    return @coordinates;\n}",
    "    my @coordinates;\n    foreach my $i (-1,0,1) {\n        foreach my $j (-1,0,1) {\n            my $tup = [$test_tup->[0]+$i, $test_tup->[1]+$j];\n            push @coordinates, $tup;\n        }\n    }\n    return @coordinates;\n}",
    "    my @coordinates = ();\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    push @coordinates, [$x-1, $y];\n    push @coordinates, [$x+1, $y];\n    push @coordinates, [$x, $y-1];\n    push @coordinates, [$x, $y+1];\n    return @coordinates;\n}",
    "    my @coordinates;\n    for my $i (-1, 0, 1) {\n        for my $j (-1, 0, 1) {\n            my $tup = [$test_tup->[0] + $i, $test_tup->[1] + $j];\n            push @coordinates, $tup;\n        }\n    }\n    return @coordinates;\n}",
    "    my @tup = @$test_tup;\n    my @coordinates;\n    for my $i (0..$#tup) {\n        my $tup = $tup[$i];\n        my @coordinate = @$tup;\n        push @coordinates, \\@coordinate;\n    }\n    return @coordinates;\n}",
    "    my @coordinates = ();\n    my @test_tup = @$test_tup;\n    my $x = $test_tup[0];\n    my $y = $test_tup[1];\n    my $z = $test_tup[2];\n    my $w = $test_tup[3];\n    my $v = $test_tup[4];\n    my $u = $test_tup[5];\n    my $t = $test_tup[6];\n    my $s = $test_tup[7];\n    my $r = $test_tup[8];\n    my $q = $test_tup[9];\n    my $p = $test_tup[10];\n    my $o = $test_tup[11];\n    my $n = $test_tup[12];\n    my $m = $test_tup[13];\n    my $l = $test_tup[14];\n    my $k = $test_tup[15];\n    my $j = $test_tup[16];\n    my $i = $test_tup[17];\n    my $h = $test_tup[18];\n    my $g = $test_tup[19];\n    my $f = $test_tup[20];\n    my $e = $test_tup[21];\n    my $d = $test_tup[22];\n    my $c = $test_tup[23];\n    my $b = $test_tup[24];\n    my $a = $test_tup[25];\n    my $z_1 = $test_tup[26];\n    my $y_1 = $test_tup[27];\n    my $x_1 = $test_tup[28];\n    my $w_1 = $test_tup[29];\n    my $v_1 = $test_tup[30];\n    my $u_1 = $test_tup[31];\n    my $t_1 = $test_tup[32];\n    my $s_1 = $test_t",
    "    my @coordinates;\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    push @coordinates, [$x-1, $y-1];\n    push @coordinates, [$x-1, $y];\n    push @coordinates, [$x-1, $y+1];\n    push @coordinates, [$x, $y-1];\n    push @coordinates, [$x, $y+1];\n    push @coordinates, [$x+1, $y-1];\n    push @coordinates, [$x+1, $y];\n    push @coordinates, [$x+1, $y+1];\n    return @coordinates;\n}",
    "    my @coordinates = ();\n    my @test_tup = @$test_tup;\n    my $x = $test_tup[0];\n    my $y = $test_tup[1];\n    push @coordinates, [$x-1, $y-1];\n    push @coordinates, [$x-1, $y];\n    push @coordinates, [$x-1, $y+1];\n    push @coordinates, [$x, $y-1];\n    push @coordinates, [$x, $y+1];\n    push @coordinates, [$x+1, $y-1];\n    push @coordinates, [$x+1, $y];\n    push @coordinates, [$x+1, $y+1];\n    return @coordinates;\n}",
    "    my @coordinates = ();\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    push @coordinates, [$x-1, $y-1];\n    push @coordinates, [$x, $y-1];\n    push @coordinates, [$x+1, $y-1];\n    push @coordinates, [$x-1, $y];\n    push @coordinates, [$x+1, $y];\n    push @coordinates, [$x-1, $y+1];\n    push @coordinates, [$x, $y+1];\n    push @coordinates, [$x+1, $y+1];\n    return @coordinates;\n}",
    "    my @coordinates;\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    my $z = $test_tup->[2];\n    push @coordinates, [$x-1, $y, $z];\n    push @coordinates, [$x+1, $y, $z];\n    push @coordinates, [$x, $y-1, $z];\n    push @coordinates, [$x, $y+1, $z];\n    push @coordinates, [$x, $y, $z-1];\n    push @coordinates, [$x, $y, $z+1];\n    return @coordinates;\n}",
    "    my @coordinates;\n    foreach my $i (-1,0,1) {\n        foreach my $j (-1,0,1) {\n            my $coord = [$test_tup->[0] + $i, $test_tup->[1] + $j];\n            push @coordinates, $coord;\n        }\n    }\n    return @coordinates;\n}"
  ]
}