{
  "name": "mbpp_587_list_tuple",
  "language": "pl",
  "prompt": "# Write a function to convert a list to a tuple.\nsub list_tuple {\n    my($listx) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_587_list_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&list_tuple;\n        if(eq_deeply($candidate->([5, 10, 7, 4, 15, 3]),[5, 10, 7, 4, 15, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 5, 6, 2, 3, 4, 4, 7]),[2, 4, 5, 6, 2, 3, 4, 4, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([58, 44, 56]),[58, 44, 56])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $tuplex = ();\n    foreach my $item (@$listx) {\n        $tuplex = $tuplex . $item;\n    }\n    return $tuplex;\n}",
    "    my @tuplex = ();\n    foreach my $item (@$listx) {\n        push @tuplex, $item;\n    }\n    return \\@tuplex;\n}",
    "    my($tuplex) = ();\n    foreach my $item (@$listx) {\n        push(@$tuplex, $item);\n    }\n    return $tuplex;\n}",
    "    my @list = @$listx;\n    my $tuple = \\@list;\n    return $tuple;\n}",
    "    my @list = @$listx;\n    my $tuple = \\@list;\n    return $tuple;\n}",
    "    my @listx = @$listx;\n    my $tuplex = \\@listx;\n    return $tuplex;\n}",
    "    my(@listx) = @$listx;\n    my($tuplex) = \\@listx;\n    return($tuplex);\n}",
    "    my @list = @$listx;\n    my $tuple = \\@list;\n    return $tuple;\n}",
    "    my $tuplex = tuple(@$listx);\n    return $tuplex;\n}",
    "    my(@listx) = @$listx;\n    my(@tuplex);\n    foreach my $item (@listx) {\n\tif (ref($item) eq 'ARRAY') {\n\t    push(@tuplex, list_tuple($item));\n\t} else {\n\t    push(@tuplex, $item);\n\t}\n    }\n    return(tuple(@tuplex));\n}",
    "    my @listx = @{$listx};\n    my $tuplex = \\@listx;\n    return $tuplex;\n}",
    "    my(@listx) = @$listx;\n    my($tuple) = [@listx];\n    return $tuple;\n}",
    "    my $tuplex = ();\n    $tuplex = @$listx;\n    return $tuplex;\n}",
    "    my(@tuplex);\n    foreach my $i (@$listx) {\n        push(@tuplex, $i);\n    }\n    return @tuplex;\n}",
    "    my @listx = @$listx;\n    my $tuple = \\@listx;\n    return $tuple;\n}",
    "    my(@listx) = @$listx;\n    my(@tuplex);\n    my($i);\n    for($i=0; $i<=$#listx; $i++) {\n\t$tuplex[$i] = $listx[$i];\n    }\n    return(\\@tuplex);\n}",
    "    my($tuplex) = ();\n    foreach my $item (@$listx) {\n        push(@$tuplex, $item);\n    }\n    return $tuplex;\n}",
    "    my($tuplex) = ();\n    foreach my $item (@$listx) {\n        push(@$tuplex, $item);\n    }\n    return $tuplex;\n}",
    "    my @listy = @$listx;\n    my $tuplex = \\@listy;\n    return $tuplex;\n}",
    "    my($tuplex) = ();\n    foreach $item (@$listx) {\n        push(@$tuplex, $item);\n    }\n    return $tuplex;\n}"
  ]
}