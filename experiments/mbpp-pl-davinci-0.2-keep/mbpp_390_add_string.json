{
  "name": "mbpp_390_add_string",
  "language": "pl",
  "prompt": "# Write a function to apply a given format string to all of the elements in a list.\nsub add_string {\n    my($list_, $string) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add_string;\n        if(eq_deeply($candidate->([1, 2, 3, 4], \"temp{0}\"),[\"temp1\", \"temp2\", \"temp3\", \"temp4\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"a\", \"b\", \"c\", \"d\"], \"python{0}\"),[\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 7, 8], \"string{0}\"),[\"string5\", \"string6\", \"string7\", \"string8\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @list = @$list_;\n    my @new_list;\n    foreach my $item (@list) {\n        push @new_list, $item . $string;\n    }\n    return @new_list;\n}",
    "    my @list = @$list_;\n    my @new_list;\n    foreach my $item (@list) {\n        push @new_list, sprintf($string, $item);\n    }\n    return @new_list;\n}",
    "    my @list = @$list_;\n    my @new_list = ();\n    foreach my $item (@list) {\n        push @new_list, sprintf($string, $item);\n    }\n    return @new_list;\n}",
    "    my @list = @$list_;\n    my @new_list = ();\n    foreach my $item (@list) {\n        push @new_list, sprintf($string, $item);\n    }\n    return @new_list;\n}",
    "    my @list = @$list_;\n    my @new_list = ();\n    foreach my $item (@list) {\n        push @new_list, sprintf($string, $item);\n    }\n    return \\@new_list;\n}",
    "    my @list = @{$list_};\n    my @new_list = ();\n    foreach my $item (@list) {\n        push @new_list, sprintf($string, $item);\n    }\n    return @new_list;\n}",
    "    my @list = @$list_;\n    my @new_list = ();\n    foreach my $element (@list) {\n        push @new_list, sprintf($string, $element);\n    }\n    return @new_list;\n}",
    "    my @list = @$list_;\n    my @new_list;\n    for my $item (@list) {\n        push @new_list, $item . $string;\n    }\n    return @new_list;\n}",
    "    my @list = @$list_;\n    my @new_list;\n    foreach my $item (@list) {\n        push @new_list, sprintf($string, $item);\n    }\n    return @new_list;\n}",
    "    my @new_list = ();\n    foreach my $elem (@$list_) {\n\tpush @new_list, sprintf($string, $elem);\n    }\n    return \\@new_list;\n}",
    "    my @list = @{$list_};\n    my @new_list = ();\n    foreach my $item (@list) {\n        push(@new_list, sprintf($string, $item));\n    }\n    return @new_list;\n}",
    "    my @list = @$list_;\n    my @new_list;\n    foreach my $item (@list) {\n        push @new_list, sprintf($string, $item);\n    }\n    return @new_list;\n}",
    "    my @list = @$list_;\n    my @new_list = ();\n    foreach my $item (@list) {\n        push @new_list, sprintf $string, $item;\n    }\n    return @new_list;\n}",
    "    my @list = @$list_;\n    my @new_list;\n    foreach my $item (@list) {\n        push(@new_list, sprintf($string, $item));\n    }\n    return @new_list;\n}",
    "    my @list = @$list_;\n    my @new_list = ();\n    foreach my $item (@list) {\n        push @new_list, sprintf($string, $item);\n    }\n    return @new_list;\n}",
    "    my @list = @$list_;\n    my @new_list = ();\n    foreach my $item (@list) {\n        push @new_list, sprintf($string, $item);\n    }\n    return @new_list;\n}",
    "    my @list = @$list_;\n    my @new_list;\n    foreach my $item (@list) {\n        push @new_list, sprintf($string, $item);\n    }\n    return @new_list;\n}",
    "    my @list = @{$list_};\n    my @new_list = ();\n    foreach my $item (@list) {\n        push(@new_list, sprintf($string, $item));\n    }\n    return @new_list;\n}",
    "    my @list = @{$list_};\n    my @new_list;\n    foreach my $item (@list) {\n        push @new_list, sprintf($string, $item);\n    }\n    return @new_list;\n}",
    "    my @list = @$list_;\n    my @new_list = ();\n    foreach my $item (@list) {\n        push @new_list, sprintf($string, $item);\n    }\n    return @new_list;\n}"
  ]
}