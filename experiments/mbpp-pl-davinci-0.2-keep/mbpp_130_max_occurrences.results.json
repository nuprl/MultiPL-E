{
  "name": "mbpp_130_max_occurrences",
  "language": "pl",
  "prompt": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = undef;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = 0;\n    my $max_item;\n    while (my($item, $count) = each %count) {\n        if ($count > $max) {\n            $max = $count;\n            $max_item = $item;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    $counts{$_}++ for @$nums;\n    my $max = 0;\n    my $max_key;\n    for my $key (keys %counts) {\n        if ($counts{$key} > $max) {\n            $max = $counts{$key};\n            $max_key = $key;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = undef;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max) {\n            $max = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %counts) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_item = undef;\n    while (my($item, $count) = each %count) {\n        if ($count > $max) {\n            $max = $count;\n            $max_item = $item;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_key = undef;\n    my $max_value = 0;\n    while (my ($key, $value) = each %count) {\n        if ($value > $max_value) {\n            $max_key = $key;\n            $max_value = $value;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %freq = ();\n    foreach my $num (@$nums) {\n        $freq{$num}++;\n    }\n    my $max_freq = 0;\n    my $max_item = undef;\n    foreach my $item (keys %freq) {\n        if ($freq{$item} > $max_freq) {\n            $max_freq = $freq{$item};\n            $max_item = $item;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max) {\n            $max = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max) {\n            $max = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_num = 0;\n    my $max_count = 0;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_num = $num;\n            $max_count = $count{$num};\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num = undef;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp1_88n6eg.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp1_88n6eg.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = max values %count;\n    my @max_keys = grep { $count{$_} == $max } keys %count;\n    return @max_keys;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpm1ofseop.pl line 6, near \"max values\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpm1ofseop.pl line 10.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    my $max = 0;\n    my $max_item;\n    for my $num (@$nums) {\n        $count{$num}++;\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_item = $num;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp5kvhor8p.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmp5kvhor8p.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = max values %count;\n    my @max_keys = grep { $count{$_} == $max } keys %count;\n    return @max_keys;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpm1ofseop.pl line 6, near \"max values\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpm1ofseop.pl line 10.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %counts) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_num = 0;\n    my $max_count = 0;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpl6yy45w2.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpl6yy45w2.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_num = 0;\n    my $max_count = 0;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_num = $num;\n            $max_count = $count{$num};\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_num = $nums->[0];\n    my $max_count = 0;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp22hj4k_a.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp22hj4k_a.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max) {\n            $max = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    while (my($num, $count) = each %counts) {\n        if ($count > $max) {\n            $max = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpwo2b2v3y.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpwo2b2v3y.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my $max = 0;\n    my $max_item = undef;\n    my %counts = ();\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n        if ($counts{$num} > $max) {\n            $max = $counts{$num};\n            $max_item = $num;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp2cqma7og.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmp2cqma7og.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpsmg7jjc_.pl line 9.\nBEGIN failed--compilation aborted at /tmp/tmpsmg7jjc_.pl line 9.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = max values %count;\n    my @max_keys = grep { $count{$_} == $max } keys %count;\n    return @max_keys;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpm1ofseop.pl line 6, near \"max values\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpm1ofseop.pl line 10.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    $counts{$_}++ for @$nums;\n    my $max = max(values %counts);\n    my @max_keys = grep { $counts{$_} == $max } keys %counts;\n    return @max_keys;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpeqxechuk.pl line 10.\nBEGIN failed--compilation aborted at /tmp/tmpeqxechuk.pl line 10.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max_count = (sort { $count{$b} <=> $count{$a} } keys %count)[0];\n    return $max_count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpsc74kk9x.pl line 9.\nBEGIN failed--compilation aborted at /tmp/tmpsc74kk9x.pl line 9.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max) {\n            $max = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = 0;\n    my $max_key;\n    while (my($key, $value) = each %count) {\n        if ($value > $max) {\n            $max = $value;\n            $max_key = $key;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp92m0ylzr.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmp92m0ylzr.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = max values %count;\n    my @max_keys = grep { $count{$_} == $max } keys %count;\n    return @max_keys;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpm1ofseop.pl line 6, near \"max values\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpm1ofseop.pl line 10.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = 0;\n    my $max_num;\n    for my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpg28542ht.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpg28542ht.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = 0;\n    my $max_key;\n    while (my($key, $value) = each %count) {\n        if ($value > $max) {\n            $max = $value;\n            $max_key = $key;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp92m0ylzr.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmp92m0ylzr.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = undef;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpbhzl6f7q.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpbhzl6f7q.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = undef;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpuaz1z76j.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpuaz1z76j.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_key;\n    while (my($key, $value) = each %count) {\n        if ($value > $max) {\n            $max = $value;\n            $max_key = $key;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpswd448o3.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpswd448o3.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpf4prgml0.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpf4prgml0.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = max values %count;\n    my @max_keys = grep { $count{$_} == $max } keys %count;\n    return $max_keys[0];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmp5r6yq94c.pl line 6, near \"max values\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmp5r6yq94c.pl line 10.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_item = undef;\n    foreach my $item (keys %count) {\n        if ($count{$item} > $max) {\n            $max = $count{$item};\n            $max_item = $item;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpsjv9973z.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpsjv9973z.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_key;\n    foreach my $key (keys %count) {\n        if ($count{$key} > $max) {\n            $max = $count{$key};\n            $max_key = $key;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpwalakh49.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpwalakh49.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max) {\n            $max = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max) {\n            $max = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_item;\n    foreach my $item (keys %count) {\n        if ($count{$item} > $max_count) {\n            $max_count = $count{$item};\n            $max_item = $item;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpyl7i0pdn.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpyl7i0pdn.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_num = 0;\n    my $max_count = 0;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_num = $num;\n            $max_count = $count{$num};\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = max(values %count);\n    my @max_keys = grep { $count{$_} == $max } keys %count;\n    return @max_keys;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpwv2tadww.pl line 10.\nBEGIN failed--compilation aborted at /tmp/tmpwv2tadww.pl line 10.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_num = 0;\n    my $max_count = 0;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_num = $num;\n            $max_count = $count{$num};\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_num = 0;\n    my $max_count = 0;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_num = $num;\n            $max_count = $counts{$num};\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpel_11f52.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpel_11f52.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = undef;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    my $max = 0;\n    my $max_item;\n    for my $num (@$nums) {\n        $count{$num}++;\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_item = $num;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp5kvhor8p.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmp5kvhor8p.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_num = 0;\n    my $max_count = 0;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_num = $num;\n            $max_count = $count;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp5bgsisdr.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp5bgsisdr.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = max values %count;\n    my @max_keys = grep { $count{$_} == $max } keys %count;\n    return @max_keys;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpm1ofseop.pl line 6, near \"max values\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpm1ofseop.pl line 10.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = 0;\n    my $max_key;\n    for my $key (keys %count) {\n        if ($count{$key} > $max) {\n            $max = $count{$key};\n            $max_key = $key;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpsxbu0wtu.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpsxbu0wtu.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my $max = 0;\n    my $max_item = undef;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n        if ($counts{$num} > $max) {\n            $max = $counts{$num};\n            $max_item = $num;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpesxaslsm.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpesxaslsm.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_num = undef;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max) {\n            $max = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpqqgez7m6.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpqqgez7m6.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max) {\n            $max = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = max(values %count);\n    my @max_nums = grep { $count{$_} == $max } keys %count;\n    return \\@max_nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7wqoo2ap.pl line 12.\nBEGIN failed--compilation aborted at /tmp/tmp7wqoo2ap.pl line 12.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my $max = 0;\n    my $max_num = 0;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpdiz2ov72.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpdiz2ov72.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_num = 0;\n    my $max_count = 0;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_num = $num;\n            $max_count = $counts{$num};\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpel_11f52.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpel_11f52.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_num = undef;\n    while (my ($num, $count) = each %counts) {\n        if ($count > $max) {\n            $max = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpvl2rzp7p.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpvl2rzp7p.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max) {\n            $max = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = undef;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpuaz1z76j.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpuaz1z76j.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = max(values %count);\n    my @max_keys = grep { $count{$_} == $max } keys %count;\n    return @max_keys;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpwv2tadww.pl line 10.\nBEGIN failed--compilation aborted at /tmp/tmpwv2tadww.pl line 10.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $n (@$nums) {\n        $count{$n}++;\n    }\n    my $max_count = 0;\n    my $max_item;\n    for my $n (keys %count) {\n        if ($count{$n} > $max_count) {\n            $max_count = $count{$n};\n            $max_item = $n;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmprx5pffjp.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmprx5pffjp.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = undef;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpuaz1z76j.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpuaz1z76j.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = max(values %counts);\n    my @max_nums = grep { $counts{$_} == $max_count } keys %counts;\n    return @max_nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmppjbo3okz.pl line 12.\nBEGIN failed--compilation aborted at /tmp/tmppjbo3okz.pl line 12.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max) {\n            $max = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max) {\n            $max = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    while (my($num, $count) = each %counts) {\n        if ($count > $max) {\n            $max = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpwo2b2v3y.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpwo2b2v3y.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_num;\n    my $max_count = 0;\n    while (my($num, $count) = each %counts) {\n        if ($count > $max_count) {\n            $max_num = $num;\n            $max_count = $count;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpjhh_4g7v.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpjhh_4g7v.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    my $max = 0;\n    my $max_item;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_item = $num;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7umy8pxp.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmp7umy8pxp.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = undef;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpuaz1z76j.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpuaz1z76j.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = 0;\n    my $max_key;\n    while (my($key, $value) = each %count) {\n        if ($value > $max) {\n            $max = $value;\n            $max_key = $key;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp92m0ylzr.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmp92m0ylzr.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my $max = 0;\n    my $max_num = 0;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpdiz2ov72.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpdiz2ov72.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = 0;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmph62214c8.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmph62214c8.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    my $max = 0;\n    my $max_item;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_item = $num;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7umy8pxp.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmp7umy8pxp.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num = 0;\n    while (my($num, $count) = each %count) {\n        if ($count > $max) {\n            $max = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp631nqj5o.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp631nqj5o.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = 0;\n    my $max_key;\n    while (my($key, $value) = each %count) {\n        if ($value > $max) {\n            $max = $value;\n            $max_key = $key;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp92m0ylzr.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmp92m0ylzr.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max) {\n            $max = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    while (my($num, $count) = each %counts) {\n        if ($count > $max) {\n            $max = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpwo2b2v3y.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpwo2b2v3y.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = 0;\n    my $max_key;\n    while (my($key, $value) = each %count) {\n        if ($value > $max) {\n            $max = $value;\n            $max_key = $key;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp92m0ylzr.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmp92m0ylzr.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_num = 0;\n    my $max_count = 0;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_num = $num;\n            $max_count = $count;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp5bgsisdr.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp5bgsisdr.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max) {\n            $max = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_key = 0;\n    my $max_value = 0;\n    while (my($key, $value) = each %count) {\n        if ($value > $max_value) {\n            $max_key = $key;\n            $max_value = $value;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpisucsn8c.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpisucsn8c.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %counts) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = undef;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = 0;\n    my $max_key;\n    while (my($key, $value) = each %count) {\n        if ($value > $max) {\n            $max = $value;\n            $max_key = $key;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp92m0ylzr.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmp92m0ylzr.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = undef;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpuaz1z76j.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpuaz1z76j.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = 0;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpbvayhp71.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpbvayhp71.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = max(values %counts);\n    my @max_nums = grep { $counts{$_} == $max_count } keys %counts;\n    return @max_nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpxgcby_gs.pl line 12.\nBEGIN failed--compilation aborted at /tmp/tmpxgcby_gs.pl line 12.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = 0;\n    my $max_key;\n    while (my($key, $value) = each %count) {\n        if ($value > $max) {\n            $max = $value;\n            $max_key = $key;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp92m0ylzr.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmp92m0ylzr.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max_count = max values %count;\n    my @max_items = grep { $count{$_} == $max_count } keys %count;\n    return @max_items;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpq3t14mfc.pl line 6, near \"max values\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpq3t14mfc.pl line 10.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = max values %count;\n    my @max_keys = grep { $count{$_} == $max } keys %count;\n    return @max_keys;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpm1ofseop.pl line 6, near \"max values\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpm1ofseop.pl line 10.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max) {\n            $max = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_key;\n    for my $key (keys %counts) {\n        if ($counts{$key} > $max) {\n            $max = $counts{$key};\n            $max_key = $key;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpvvdbr4nj.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpvvdbr4nj.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = undef;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num = undef;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp1_88n6eg.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp1_88n6eg.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = 0;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpbvayhp71.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpbvayhp71.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_key;\n    while (my($key, $value) = each %counts) {\n        if ($value > $max) {\n            $max = $value;\n            $max_key = $key;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpc1ut6hoh.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpc1ut6hoh.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = max values %count;\n    my @max_keys = grep { $count{$_} == $max } keys %count;\n    return @max_keys;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpm1ofseop.pl line 6, near \"max values\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpm1ofseop.pl line 10.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    my $max = 0;\n    my $max_item = undef;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_item = $num;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpvm_jp1ji.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpvm_jp1ji.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = undef;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my $max = 0;\n    my $max_num = 0;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpdiz2ov72.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpdiz2ov72.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = 0;\n    my $max_key;\n    for my $key (keys %count) {\n        if ($count{$key} > $max) {\n            $max = $count{$key};\n            $max_key = $key;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpsxbu0wtu.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpsxbu0wtu.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_key = (sort {$count{$b} <=> $count{$a}} keys %count)[0];\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpu1nkvk15.pl line 11.\nBEGIN failed--compilation aborted at /tmp/tmpu1nkvk15.pl line 11.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_item;\n    foreach my $item (keys %count) {\n        if ($count{$item} > $max_count) {\n            $max_count = $count{$item};\n            $max_item = $item;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpyl7i0pdn.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpyl7i0pdn.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_num = undef;\n    while (my($num, $count) = each %counts) {\n        if ($count > $max) {\n            $max = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp1kgnjcmx.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp1kgnjcmx.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts = ();\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_num = undef;\n    while (my($num, $count) = each %counts) {\n        if ($count > $max) {\n            $max = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmppfx0kh9e.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmppfx0kh9e.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %counts) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}