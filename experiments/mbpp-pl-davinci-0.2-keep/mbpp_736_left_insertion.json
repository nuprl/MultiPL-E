{
  "name": "mbpp_736_left_insertion",
  "language": "pl",
  "prompt": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nsub left_insertion {\n    my($a, $x) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&left_insertion;\n        if(eq_deeply($candidate->([1, 2, 4, 5], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 5], 3),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 5], 7),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $l = 0;\n    my $r = scalar(@$a) - 1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($a->[$m] < $x) {\n            $l = $m + 1;\n        }\n        else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}",
    "    my $i = 0;\n    my $j = @$a;\n    while ($i < $j) {\n        my $k = int(($i + $j) / 2);\n        if ($x > $a->[$k]) {\n            $i = $k + 1;\n        } else {\n            $j = $k;\n        }\n    }\n    return $i;\n}",
    "    my $i = 0;\n    my $j = $#$a;\n    while ($i < $j) {\n        my $k = int(($i + $j) / 2);\n        if ($a->[$k] < $x) {\n            $i = $k + 1;\n        } else {\n            $j = $k;\n        }\n    }\n    return $i;\n}",
    "    my $low = 0;\n    my $high = scalar(@$a) - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($x <= $a->[$mid]) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $low;\n}",
    "    my $l = 0;\n    my $r = scalar @$a;\n    while ($l < $r) {\n        my $m = int(($l + $r) / 2);\n        if ($a->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}",
    "    my $i = 0;\n    my $j = @$a;\n    while ($i < $j) {\n        my $k = int(($i + $j) / 2);\n        if ($a->[$k] < $x) {\n            $i = $k + 1;\n        } else {\n            $j = $k;\n        }\n    }\n    return $i;\n}",
    "    my $l = 0;\n    my $r = scalar(@$a) - 1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($a->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}",
    "    my $l = 0;\n    my $r = scalar @$a;\n    while ($l < $r) {\n        my $m = int(($l + $r) / 2);\n        if ($a->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}",
    "    my $l = 0;\n    my $r = scalar @$a - 1;\n    while ($l < $r) {\n        my $m = int(($l + $r) / 2);\n        if ($a->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}",
    "    my $l = 0;\n    my $r = scalar @$a - 1;\n    while($l < $r) {\n        my $m = int(($l + $r) / 2);\n        if($a->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m;\n        }\n    }\n    return $l;\n}",
    "    my $l = 0;\n    my $r = scalar(@$a) - 1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($a->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}",
    "    my $l = 0;\n    my $r = scalar(@$a) - 1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($a->[$m] >= $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $l;\n}",
    "    my $i = 0;\n    while($i < @$a && $a->[$i] < $x) {\n        $i++;\n    }\n    return $i;\n}",
    "    my $i = 0;\n    my $j = scalar @$a;\n    while ($i < $j) {\n        my $k = int(($i + $j) / 2);\n        if ($x <= $a->[$k]) {\n            $j = $k;\n        } else {\n            $i = $k + 1;\n        }\n    }\n    return $i;\n}",
    "    my $left = 0;\n    my $right = @$a - 1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($a->[$mid] < $x) {\n            $left = $mid + 1;\n        }\n        else {\n            $right = $mid - 1;\n        }\n    }\n    return $left;\n}",
    "    my $i = 0;\n    my $j = scalar @$a - 1;\n    while ($i < $j) {\n        my $k = int(($i + $j) / 2);\n        if ($a->[$k] < $x) {\n            $i = $k + 1;\n        } else {\n            $j = $k;\n        }\n    }\n    return $i;\n}",
    "    my $l = 0;\n    my $r = scalar(@$a) - 1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($a->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $l;\n}",
    "    my $i = 0;\n    my $j = @$a;\n    while ($i < $j) {\n        my $k = int(($i + $j) / 2);\n        if ($a->[$k] < $x) {\n            $i = $k + 1;\n        } else {\n            $j = $k;\n        }\n    }\n    return $i;\n}",
    "    my $i = 0;\n    my $j = $#$a;\n    while ($i < $j) {\n        my $k = int(($i + $j) / 2);\n        if ($a->[$k] < $x) {\n            $i = $k + 1;\n        } else {\n            $j = $k;\n        }\n    }\n    return $i;\n}",
    "    my $i = 0;\n    my $j = scalar @$a - 1;\n    while ($i < $j) {\n        my $k = int(($i + $j) / 2);\n        if ($a->[$k] < $x) {\n            $i = $k + 1;\n        } else {\n            $j = $k;\n        }\n    }\n    return $i;\n}"
  ]
}