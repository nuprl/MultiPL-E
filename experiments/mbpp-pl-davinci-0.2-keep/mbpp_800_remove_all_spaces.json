{
  "name": "mbpp_800_remove_all_spaces",
  "language": "pl",
  "prompt": "# Write a function to remove all whitespaces from a string.\nsub remove_all_spaces {\n    my($text) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_800_remove_all_spaces.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_all_spaces;\n        if(eq_deeply($candidate->(\"python  program\"),\"pythonprogram\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"python   programming    language\"),\"pythonprogramminglanguage\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"python                     program\"),\"pythonprogram\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"   python                     program\"),\"pythonprogram\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    $text =~ s/\\s+//g;\n    return $text;\n}",
    "    $text =~ s/\\s+//g;\n    return $text;\n}",
    "    $text =~ s/\\s+//g;\n    return $text;\n}",
    "    $text =~ s/\\s+//g;\n    return $text;\n}",
    "    $text =~ s/\\s+//g;\n    return $text;\n}",
    "    $text =~ s/\\s+//g;\n    return $text;\n}",
    "    $text =~ s/\\s+//g;\n    return $text;\n}",
    "    $text =~ s/\\s+//g;\n    return $text;\n}",
    "    $text =~ s/\\s+//g;\n    return $text;\n}",
    "    $text =~ s/\\s//g;\n    return $text;\n}",
    "    $text =~ s/\\s+//g;\n    return $text;\n}",
    "    $text =~ s/\\s+//g;\n    return $text;\n}",
    "    $text =~ s/\\s+//g;\n    return $text;\n}",
    "    $text =~ s/\\s+//g;\n    return $text;\n}",
    "    $text =~ s/\\s+//g;\n    return $text;\n}",
    "    $text =~ s/\\s//g;\n    return $text;\n}",
    "    $text =~ s/\\s//g;\n    return $text;\n}",
    "    $text =~ s/\\s+//g;\n    return $text;\n}",
    "    $text =~ s/\\s+//g;\n    return $text;\n}",
    "    $text =~ s/\\s+//g;\n    return $text;\n}"
  ]
}