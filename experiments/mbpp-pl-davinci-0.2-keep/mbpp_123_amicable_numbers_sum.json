{
  "name": "mbpp_123_amicable_numbers_sum",
  "language": "pl",
  "prompt": "# Write a function to sum all amicable numbers from 1 to a specified number.\nsub amicable_numbers_sum {\n    my($limit) = @_;\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&amicable_numbers_sum;\n        if(eq_deeply($candidate->(999),504)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9999),31626)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(99),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $sum = 0;\n    for (my $i = 1; $i < $limit; $i++) {\n        my $j = sum_divisors($i);\n        if ($i != $j && sum_divisors($j) == $i) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}",
    "    my $sum = 0;\n    for my $i (1..$limit) {\n        my $j = sum_proper_divisors($i);\n        if ($i != $j && sum_proper_divisors($j) == $i) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}",
    "    my $sum = 0;\n    for (my $i = 1; $i <= $limit; $i++) {\n        my $j = sum_of_divisors($i);\n        if ($i != $j && sum_of_divisors($j) == $i) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}",
    "    my $sum = 0;\n    for my $i (1..$limit) {\n        my $j = sum_of_divisors($i);\n        if ($i != $j && sum_of_divisors($j) == $i) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}",
    "    my $sum = 0;\n    for my $i (1..$limit) {\n        my $j = sum_divisors($i);\n        if ($i != $j && sum_divisors($j) == $i) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}",
    "    my $sum = 0;\n    for (1..$limit) {\n        my $pair = amicable_pair($_);\n        $sum += $_ if $pair;\n    }\n    return $sum;\n}",
    "    my $sum = 0;\n    for (my $i = 1; $i <= $limit; $i++) {\n        my $divisor_sum = divisor_sum($i);\n        if ($divisor_sum > $i && $divisor_sum <= $limit && $i == divisor_sum($divisor_sum)) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}",
    "    my $sum = 0;\n    for my $i (1..$limit) {\n        my $j = sum_of_divisors($i);\n        if ($i != $j && $i == sum_of_divisors($j)) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}",
    "    my $sum = 0;\n    for (my $i = 1; $i < $limit; $i++) {\n        my $j = sum_proper_divisors($i);\n        if ($i != $j && sum_proper_divisors($j) == $i) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}",
    "    my $sum = 0;\n    for (my $i = 1; $i <= $limit; $i++) {\n        my $j = sum_proper_divisors($i);\n        if ($i != $j && sum_proper_divisors($j) == $i) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}",
    "    my $sum = 0;\n    for my $i (1..$limit) {\n        my $j = sum_proper_divisors($i);\n        if ($i != $j && $i == sum_proper_divisors($j)) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}",
    "    my $sum = 0;\n    for (1..$limit) {\n        my $a = sum_proper_divisors($_);\n        my $b = sum_proper_divisors($a);\n        if ($_ == $b && $_ != $a) {\n            $sum += $_;\n        }\n    }\n    return $sum;\n}",
    "    my $sum = 0;\n    for my $i (1..$limit) {\n        my $j = sum_of_divisors($i);\n        if ($i != $j && $i == sum_of_divisors($j)) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}",
    "    my $sum = 0;\n    for my $i (1..$limit) {\n        my $j = sum_divisors($i);\n        if ($i != $j && sum_divisors($j) == $i) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}",
    "    my $sum = 0;\n    for my $i (1..$limit) {\n        my $j = sum_divisors($i);\n        if ($i != $j && sum_divisors($j) == $i) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}",
    "    my $sum = 0;\n    for (my $i = 1; $i <= $limit; $i++) {\n        my $j = sum_of_divisors($i);\n        if ($i != $j && $i == sum_of_divisors($j)) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}",
    "    my $sum = 0;\n    for my $i (1..$limit) {\n        my $j = sum_proper_divisors($i);\n        if ($j != $i && sum_proper_divisors($j) == $i) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}",
    "    my $sum = 0;\n    for my $i (1..$limit) {\n        my $j = sum_proper_divisors($i);\n        if ($i != $j && $i == sum_proper_divisors($j)) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}",
    "    my $sum = 0;\n    for (my $i = 1; $i <= $limit; $i++) {\n        my $j = sum_of_divisors($i);\n        if ($i != $j && sum_of_divisors($j) == $i) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}",
    "    my $sum = 0;\n    for (my $i = 1; $i < $limit; $i++) {\n        my $j = sum_of_divisors($i);\n        if ($i != $j && sum_of_divisors($j) == $i) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}"
  ]
}