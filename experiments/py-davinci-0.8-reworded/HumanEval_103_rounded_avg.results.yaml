language: py
name: HumanEval_103_rounded_avg
results:
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n <= m:\n        rounded_avg = round(((n + m) / 2))\n        return(bin(rounded_avg))\n\
    \    else:\n        return(-1)\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        avg = int(sum(range(n, m+1))/(m-n+1)\
    \ + 0.5)\n        return bin(avg)\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3e4w2__e.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp3e4w2__e.py\", line 38,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp3e4w2__e.py\", line\
    \ 26, in check\n    assert candidate(964, 977) == '0b1111001010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        binary = \"\"\n        sum = 0\n\
    \        for i in range(n, m+1):\n            sum += i\n        sum = round(sum/(m-n+1))\n\
    \        while sum > 0:\n            if sum % 2 == 0:\n                binary\
    \ = \"0\" + binary\n            else:\n                binary = \"1\" + binary\n\
    \            sum = int(sum/2)\n        return \"0b\" + binary\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = sum(range(n, m + 1)) // (m - n + 1)\n \
    \   return '0b' + bin(avg)[2:]\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp22tb83y6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp22tb83y6.py\", line 38,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp22tb83y6.py\", line\
    \ 28, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        return\
    \ '0b' + bin(round(avg))[2:]\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        average = (n + m) / 2\n      \
    \  average = math.ceil(average)\n        average = bin(average)\n        return\
    \ average\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcd0g9aw0.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpcd0g9aw0.py\", line 40,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd0g9aw0.py\", line\
    \ 26, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmpcd0g9aw0.py\"\
    , line 22, in rounded_avg\n    average = math.ceil(average)\nNameError: name 'math'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    # YOUR\
    \ CODE HERE\n    if n>m:\n        return -1\n    else:\n        binary_num = 0\n\
    \        for i in range(n,m+1):\n            binary_num += i\n        return bin(round(binary_num/(m-n+1)))\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)\n\ndef\
    \ check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5453gk1u.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp5453gk1u.py\", line 38,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp5453gk1u.py\", line\
    \ 28, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return bin(round((n + m) / 2))\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return bin(round((n + m) / 2))\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n\
    \nimport doctest\ndoctest.testmod()\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return bin(round((sum(range(n,\
    \ m+1)))/(m-n+1)))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    # Your code here\n    sum = 0\n    for i in range(n,\
    \ m+1):\n        sum += i\n    return bin(round(sum/(m-n+1)))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return bin(round((m+n)/2))\n\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return bin(int(round((n + m) /\
    \ 2)))\n    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    summ = n\n    count = 1\n    for i in range(n+1,\
    \ m+1):\n        summ += i\n        count += 1\n    avg = summ / count\n    return\
    \ '0b' + bin(round(avg))[2:]\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        total = 0\n        for i in range(n,\
    \ m+1):\n            total += i\n        avg = total / (m-n+1)\n        return\
    \ bin(round(avg))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpswn8cici.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpswn8cici.py\", line 35,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpswn8cici.py\", line\
    \ 21, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    avg\
    \ = (n + m) // 2\n    return bin(avg) if n <= m else -1\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4jw202fb.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp4jw202fb.py\", line 35,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp4jw202fb.py\", line\
    \ 25, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n>m:\n        return -1\n    else:\n        return bin(round((n+m)/2))\ndef\
    \ check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    return bin(round((n + m) / 2))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n      \
    \  sum += i\n    avg = sum/(m+1-n)\n    rounded_avg = round(avg)\n    binary =\
    \ bin(rounded_avg)[2:]\n    return f'0b{binary}'\ndef check(candidate):\n    assert\
    \ candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert\
    \ candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n\
    \    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    answer = sum(range(n, m + 1))\n    answer = int(round(answer\
    \ / (m - n + 1)))\n    answer = bin(answer)\n    return answer\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return str(bin(avg))\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n <= m:\n        total = 0\n        for i in range(n, m + 1):\n            total\
    \ += i\n        avg = total // (m - n + 1)\n        return bin(avg)\n    else:\n\
    \        return -1\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvuyki1kl.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpvuyki1kl.py\", line 41,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpvuyki1kl.py\", line\
    \ 31, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = int(round((n + m) / 2))\n    return bin(avg)\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)\ndef\
    \ check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp00e_ev1m.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp00e_ev1m.py\", line 37,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp00e_ev1m.py\", line\
    \ 27, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return bin(int(round((n + m) /\
    \ 2)))\n\n\"\"\"\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiqwamhjd.py\", line 23\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 41)\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    return bin(round((sum(range(n, m + 1)))/(m -\
    \ n + 1)))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    x = n + m\n    y = x // 2\n    z = bin(y)\n \
    \   return z\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbnxbehmn.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpbnxbehmn.py\", line 40,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpbnxbehmn.py\", line\
    \ 30, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    # your\
    \ code here\n    if n > m:\n        return -1\n    rounded_avg = (n + m) // 2\n\
    \    return bin(rounded_avg)\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5803pnd4.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp5803pnd4.py\", line 38,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp5803pnd4.py\", line\
    \ 28, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return bin(round((n + m) / 2))\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        nums = []\n        for i in range(n,\
    \ m+1):\n            nums.append(i)\n        avg = sum(nums) / len(nums)\n   \
    \     rounded = round(avg)\n        bin_string = bin(rounded)[2:]\n        return\
    \ f'0b{bin_string}'\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = round((m + n) / 2)\n    return bin(avg)\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        total = 0\n        for num in\
    \ range(n, m + 1):\n            total += num\n        average = int(total / (m\
    \ - n + 1))\n        return f\"0b{average:b}\"\ndef check(candidate):\n    assert\
    \ candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert\
    \ candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n\
    \    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwh2va6c2.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpwh2va6c2.py\", line 41,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpwh2va6c2.py\", line\
    \ 31, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return bin(round((m + n) / 2))\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    return bin(round((n + m) / 2))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        sum = 0\n        for i in range(n,\
    \ m+1):\n            sum += i\n        bin_val = bin(round(sum/(m-n+1)))\n   \
    \     return bin_val\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        total = (m + n) * (m - n + 1)\
    \ / 2\n        return bin(int(round(total / (m - n + 1))))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    # Your\
    \ code here\n    if n > m:\n        return -1\n    else:\n        avg = sum(range(n,\
    \ m+1))/(m-n+1)\n        return bin(round(avg))\n    \nimport doctest\ndoctest.testmod()\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n <= m:\n        average = (n + m) // 2\n        return bin(average)\n    else:\n\
    \        return -1\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp__q3v3j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp__q3v3j6.py\", line 38,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp__q3v3j6.py\", line\
    \ 28, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = int(round((m+n)/2))\n    return '0b' +\
    \ bin(avg)[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return bin(int(round((n + m) /\
    \ 2)))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return f\"0b{bin(round((n + m)\
    \ / 2))[2:]}\"\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    total\
    \ = 0\n    count = 0\n    if n > m:\n        return -1\n    for num in range(n,\
    \ m + 1):\n        total += num\n        count += 1\n    avg = total // count\n\
    \    return bin(avg)\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10,\
    \ 20))\nprint(rounded_avg(20, 33))\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc31yzx1w.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpc31yzx1w.py\", line 47,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpc31yzx1w.py\", line\
    \ 37, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: '0b11

    -1

    0b1111

    0b11010

    '
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    new_n = bin(n)[2:]\n    new_m = bin(m)[2:]\n\
    \    avg = (n + m) // 2\n    new_avg = bin(avg)[2:]\n    return f\"0b{new_avg}\"\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4nnzk1hv.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp4nnzk1hv.py\", line 40,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp4nnzk1hv.py\", line\
    \ 30, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    return f\"0b{bin(round((sum(range(n, m+1)))/(m-n+1)))[2:]}\"\
    \n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        ans = 0\n        for num in range(n,\
    \ m+1):\n            ans += num\n        ans = ans / (m - n + 1)\n        if ans\
    \ % 1 >= 0.5:\n            ans = int(ans) + 1\n        else:\n            ans\
    \ = int(ans)\n        return bin(ans)\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptd_mh8zy.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmptd_mh8zy.py\", line 46,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmptd_mh8zy.py\", line\
    \ 34, in check\n    assert candidate(964, 977) == '0b1111001010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = sum(range(n, m + 1)) / (m - n + 1)\n  \
    \  avg = round(avg)\n    return bin(avg)\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    total = 0\n    while n <= m:\n        total +=\
    \ n\n        n += 1\n    answer = str(total / (m - n + 1))[0]\n    return f'0b{answer}'\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz069pmyi.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpz069pmyi.py\", line 42,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpz069pmyi.py\", line\
    \ 28, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmpz069pmyi.py\"\
    , line 24, in rounded_avg\n    answer = str(total / (m - n + 1))[0]\nZeroDivisionError:\
    \ division by zero\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    if n == m:\n        return bin(n)\n    return\
    \ f\"0b{round(sum(range(n, m+1))/(m-n+1)):b}\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n   \
    \ assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    #YOUR\
    \ CODE HERE\n    if n > m:\n        return -1\n    else:\n        rounded_num\
    \ = round((n + m) / 2)\n        binary_num = bin(rounded_num)\n        return\
    \ binary_num\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    pass\n\
    \    \n    \n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n \
    \   assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_t06t7yr.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp_t06t7yr.py\", line 37,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp_t06t7yr.py\", line\
    \ 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = (n + m) // 2\n    return \"{:b}\".format(avg)\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpncdlyj9u.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpncdlyj9u.py\", line 38,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpncdlyj9u.py\", line\
    \ 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        sum = 0\n        for item in range(n,\
    \ m+1):\n            sum += item\n        rounded_avg = round(sum/(m+1-n))\n \
    \       return bin(rounded_avg)\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    # your code here\ndef check(candidate):\n   \
    \ assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7qfg6kia.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp7qfg6kia.py\", line 36,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp7qfg6kia.py\", line\
    \ 22, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        res = 0\n        for i in range(n,\
    \ m+1):\n            res += i\n        return bin(round(res/(m-n+1)))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        sum_ = 0\n        for i in range(n,\
    \ m+1):\n            sum_ += i\n        avg = round(sum_ / (m+1-n))\n        return\
    \ f'0b{avg:b}'\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return bin(round((sum(range(n,\
    \ m+1)) / (m - n + 1))))\n\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n      \
    \  sum += i\n    avg = round(sum/(m-n+1))\n    return bin(avg)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = int(round((n + m) / 2))\n    return bin(avg)\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        n_avg = int(sum(range(n, m+1))/(m-n+1))\n\
    \        n_avg_binary = bin(n_avg)[2:]\n        return f'0b{n_avg_binary}'\ndef\
    \ check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbf5es6bg.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpbf5es6bg.py\", line 39,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpbf5es6bg.py\", line\
    \ 29, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return bin(round((n + m) / 2))\n\
    \nprint(rounded_avg(6, 10))\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: '0b1000

    '
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    floor = n\n    sum_ = n\n    while n < m:\n \
    \       n += 1\n        sum_ += n\n    return round(sum_ / (m - floor + 1))\n\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_jwwvoon.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp_jwwvoon.py\", line 43,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp_jwwvoon.py\", line\
    \ 29, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    # if\
    \ n > m return -1\n    if n > m:\n        return -1\n    # find range: m - n +\
    \ 1\n    num = m - n + 1\n    # sum(range): (m + n) * num / 2\n    avg = int(((m\
    \ + n) * num / 2) + 0.5)\n    # divide by range, round to nearest int\n    # convert\
    \ int to binary\n    return bin(avg)\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1zm9k_rt.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp1zm9k_rt.py\", line 44,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp1zm9k_rt.py\", line\
    \ 30, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return bin(round((sum(range(n,\
    \ m+1)) / (m - n + 1))))\n    \nprint(rounded_avg(10, 20))\nprint(rounded_avg(20,\
    \ 33))\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '0b1111

    0b11010

    0b11

    -1

    '
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        nums = list(range(n, m+1))\n \
    \       avg = sum(nums) // len(nums)\n        return bin(avg)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5vmgp3ga.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp5vmgp3ga.py\", line 40,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp5vmgp3ga.py\", line\
    \ 30, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    sum_\
    \ = (n + m) * (m - n + 1) // 2\n    return bin(round(sum_ / (m - n + 1))) if n\
    \ <= m else -1\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        rounded_avg = int(round((m+n)/2))\n\
    \        avg_bin = bin(rounded_avg)[2:]\n        return f'0b{avg_bin}'\n\ndef\
    \ check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    return bin(round((n + m) / 2))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    s = sum(range(n, m + 1))\n    avg = s // (m -\
    \ n + 1)\n    return bin(avg)\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptu0tjq14.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmptu0tjq14.py\", line 38,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmptu0tjq14.py\", line\
    \ 28, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    # your\
    \ code here\n    if n > m:\n        return -1\n    else:\n        avg = round((n\
    \ + m) / 2)\n        return bin(avg)\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n>m:\n        return -1\n    total = 0\n    for i in range(n, m+1):\n      \
    \  total += i\n    avg = total/(m-n+1)\n    avg = round(avg)\n    return f\"0b{avg:b}\"\
    \n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return '0b' + bin(round((n + m)\
    \ / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n   \
    \ assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        avg = round((sum(range(n, m+1))\
    \ / (m-n+1)))\n        return bin(avg)\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    '''\n    def rounded_avg(n, m):\n\t    avg = round((n + m) /\
    \ 2)\n\t    return bin(avg)\n\t    \n\t'''\ndef check(candidate):\n    assert\
    \ candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert\
    \ candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n\
    \    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    avg\
    \ = round(((n + m) / 2))\n    if n > m:\n        return -1\n    else:\n      \
    \  return bin(avg)\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    mid_sum = int((n + m) / 2)\n    return f\"0b{bin(mid_sum)[2:]}\"\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf026_v17.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpf026_v17.py\", line 37,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpf026_v17.py\", line\
    \ 27, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)\ndef\
    \ check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp00e_ev1m.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp00e_ev1m.py\", line 37,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp00e_ev1m.py\", line\
    \ 27, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return round(sum(range(n, m+1))/(m-n+1))\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd4kyyzla.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpd4kyyzla.py\", line 38,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpd4kyyzla.py\", line\
    \ 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    bin_avg = bin(int(round((m+n)/2)))\n    return\
    \ '0b' + bin_avg[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = round((m + n) / 2)\n    return bin(avg)\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    from\
    \ math import ceil\n    if n > m:\n        return -1\n    avg = ceil((n + m) /\
    \ 2)\n    return f\"0b{avg:b}\"\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbr4z20hr.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpbr4z20hr.py\", line 38,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpbr4z20hr.py\", line\
    \ 26, in check\n    assert candidate(964, 977) == '0b1111001010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    #return\
    \ -1 if n is greater than m.\n    if n > m:\n        return -1\n    #find the\
    \ average of the two integers, including them both\n    avg = sum(range(n, m+1))\
    \ / (m-n+1)\n    #round the average up to the nearest whole number\n    avg =\
    \ round(avg)\n    #convert the average to binary\n    avg = bin(avg)\n    #remove\
    \ the '0b' from the binary number\n    avg = avg[2:]\n    return avg\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn4po8scu.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpn4po8scu.py\", line 46,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpn4po8scu.py\", line\
    \ 32, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        average = math.ceil(((n + m) /\
    \ 2))\n        return bin(average)\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwnqct0bm.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpwnqct0bm.py\", line 39,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpwnqct0bm.py\", line\
    \ 25, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmpwnqct0bm.py\"\
    , line 21, in rounded_avg\n    average = math.ceil(((n + m) / 2))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = sum(range(n, m + 1)) / (m - n + 1)\n  \
    \  return bin(round(avg))\n\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    total = 0\n    for i in range(n, m + 1):\n  \
    \      total += i\n    return bin(round(total / (m - n + 1)))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        binary = bin(int(round((n + m)\
    \ / 2)))\n        return binary\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7,\
    \ 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '0b11

    -1

    0b1111

    0b11010

    '
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return bin(math.ceil((n + m) /\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1untdb4d.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp1untdb4d.py\", line 38,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp1untdb4d.py\", line\
    \ 24, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmp1untdb4d.py\"\
    , line 21, in rounded_avg\n    return bin(math.ceil((n + m) / 2))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n   \
    \     return bin(avg)\n\ndef check(candidate):\n    assert candidate(1, 5) ==\
    \ '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977)\
    \ == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert\
    \ candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n\
    \    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902)\
    \ == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert\
    \ candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5,\
    \ 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    elif n == m:\n        return n\n    else:\n \
    \       avg = int(n + ((m - n) / 2))\n        return bin(avg)\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpywu07fky.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpywu07fky.py\", line 40,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpywu07fky.py\", line\
    \ 30, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n <= m:\n        avg = sum(range(n, m + 1)) / (m - n + 1)\n        avg = round(avg)\n\
    \        return bin(avg)\n    else:\n        return -1\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return bin(math.ceil((n + m) /\
    \ 2))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa7r1ct5d.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpa7r1ct5d.py\", line 37,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpa7r1ct5d.py\", line\
    \ 23, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmpa7r1ct5d.py\"\
    , line 21, in rounded_avg\n    return bin(math.ceil((n + m) / 2))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    avg\
    \ = sum(range(n, m+1)) / (m - n + 1)\n    if n > m:\n        return -1\n    return\
    \ bin(round(avg))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    return bin(round((n + m) / 2))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    # Fill\
    \ in your code here\n    return bin(sum(range(n, m+1))//(m-n+1)) if n <= m else\
    \ -1\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp28hd19_s.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp28hd19_s.py\", line 35,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp28hd19_s.py\", line\
    \ 25, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = int(round((n + m) / 2))\n    return f\"\
    0b{avg:b}\"\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n   \
    \ assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        sum_range = sum(range(n, m+1))\n\
    \        avg = round(sum_range / (m-n+1))\n        return bin(avg)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    sum_from_n_to_m = sum(range(n, m + 1))\n    avg\
    \ = sum_from_n_to_m / (m - n + 1)\n    return bin(round(avg))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        avg = round(((n + m) / 2))\n \
    \       return f'0b{avg:b}'\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    res = 0\n    while n <= m:\n        res += n\n\
    \        n += 1\n    return bin(round(res / (m - n + 1)))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuaxm6e3k.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpuaxm6e3k.py\", line 40,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpuaxm6e3k.py\", line\
    \ 26, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmpuaxm6e3k.py\"\
    , line 24, in rounded_avg\n    return bin(round(res / (m - n + 1)))\nZeroDivisionError:\
    \ division by zero\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        rounded_sum = round((sum(range(n,\
    \ m+1))/(m-n+1)))\n        return f'0b{rounded_sum:b}'\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        binary = bin(int(round((m + n)\
    \ / 2)))\n        return binary\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return \"{:b}\"\
    .format(avg)\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiueg4hzp.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpiueg4hzp.py\", line 37,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiueg4hzp.py\", line\
    \ 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    # Binary\
    \ representation of a number\n    # bin(n) = '0b1111'\n    # So we need to slice\
    \ the prefix '0b'\n    # use '>>>' (Two's complement)\n    # For 0b0110 >>> 2\
    \ = 0b0001\n    # For 0b1010 >>> 2 = 0b0011\n    n = n if n <= m else -1\n   \
    \ avg = int(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg >> 1)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppx44xwx3.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmppx44xwx3.py\", line 43,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmppx44xwx3.py\", line\
    \ 29, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    rounded_average = round((m+n)/2)\n    rounded_average_bin\
    \ = bin(rounded_average)\n    return rounded_average_bin\n\nprint(rounded_avg(1,\
    \ 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20,\
    \ 33))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '0b11

    -1

    0b1111

    0b11010

    '
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    return bin(round((n + m) / 2))\n\nprint(rounded_avg(20,\
    \ 33))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '0b11010

    '
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return bin(round((sum(range(n,\
    \ m+1)) / (m-n+1))))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        num = sum(range(n, m+1))\n   \
    \     rounded = round(num / (m-n+1))\n        return bin(rounded)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return \"{:>b}\".format(round((n\
    \ + m) / 2))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnlwi6jbn.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnlwi6jbn.py\", line 37,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpnlwi6jbn.py\", line\
    \ 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    ans = sum(range(n, m + 1)) / (m - n + 1)\n  \
    \  return bin(round(ans))\n\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = sum(range(n, m + 1)) / (m - n + 1)\n  \
    \  rounded_avg = round(avg)\n    return bin(rounded_avg)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return bin(round((n + m) / 2))\n\
    \nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\n\
    print(rounded_avg(20, 33))\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: '0b11

    -1

    0b1111

    0b11010

    '
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return '0b' + bin(round((n + m)\
    \ / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n \
    \   assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    #initialize\
    \ temp variable\n    temp = 0\n    #initialize count variable\n    count = 0\n\
    \    #check if n is greater than m, return -1\n    if n > m:\n        return -1\n\
    \    #calculate sum of n to m\n    for i in range(n, m+1):\n        temp += i\n\
    \        count += 1\n    #calculate rounded average\n    rounded_avg = round(temp/count)\n\
    \    #convert to binary\n    binary = bin(rounded_avg)\n    #return binary\n \
    \   return binary\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)\n\ndef\
    \ check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5453gk1u.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp5453gk1u.py\", line 38,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp5453gk1u.py\", line\
    \ 28, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n>m:\n        return -1\n    else:\n        avg=sum(range(n,m+1))/(m-n+1)\n\
    \        return bin(round(avg))\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    count = 0\n    for i in range(n, m+1):\n    \
    \    count += i\n    return bin(round(count/(m+1-n)))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = int(round((m+n)/2))\n    return '0b' +\
    \ bin(avg)[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = sum(range(n, m + 1)) / (m - n + 1)\n  \
    \  return bin(round(avg))\ndef check(candidate):\n    assert candidate(1, 5) ==\
    \ '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977)\
    \ == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert\
    \ candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n\
    \    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902)\
    \ == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert\
    \ candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5,\
    \ 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    res = round((n + m) / 2)\n    return bin(res)\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    tot = 0\n    for i in range(n, m+1):\n      \
    \  tot += i\n    avg = round(tot/(m+1-n))\n    return bin(avg)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return \"0b\" + bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    # your\
    \ code here\n    \n    \ndef check(candidate):\n    assert candidate(1, 5) ==\
    \ '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977)\
    \ == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert\
    \ candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n\
    \    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902)\
    \ == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert\
    \ candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5,\
    \ 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpziedel8_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpziedel8_.py\", line 36,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpziedel8_.py\", line\
    \ 22, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = int(sum(range(n, m + 1)) / (m - n + 1)\
    \ + 0.5)\n    return bin(avg)\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqtpdq4yu.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpqtpdq4yu.py\", line 37,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqtpdq4yu.py\", line\
    \ 25, in check\n    assert candidate(964, 977) == '0b1111001010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return (n + m) // 2\n\nprint(rounded_avg(20,\
    \ 33))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl2fi9bhx.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpl2fi9bhx.py\", line 39,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpl2fi9bhx.py\", line\
    \ 25, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: '26

    '
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return bin(round((n + m) / 2))\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        total = sum(i for i in range(n,\
    \ m+1))\n        return bin(round(total / (m - n + 1)))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpswn8cici.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpswn8cici.py\", line 35,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpswn8cici.py\", line\
    \ 21, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = sum(range(n, m + 1)) / (m - n + 1)\n  \
    \  avg = int(round(avg))\n    return '0b' + bin(avg)[2:]\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return bin(round((n + m) / 2))\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    r =\
    \ ((m - n + 1) * (n + m)) // 2\n    n = n if n <= m else -1\n    if n == -1:\n\
    \        return n\n    else:\n        return bin(round(r / (m - n + 1)))\n\ndef\
    \ check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    return bin(round((m+n)/2))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        sum = 0\n        for i in range(n,\
    \ m+1):\n            sum += i\n        avg = round(sum/(m+1-n))\n        return\
    \ bin(avg)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    pass\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpet4_fftf.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpet4_fftf.py\", line 34,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpet4_fftf.py\", line\
    \ 20, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    summ = 0\n    for i in range(n, m + 1):\n   \
    \     summ += i\n    average = round(summ / (m - n + 1))\n    return bin(average)\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = int(round((n + m) / 2))\n    binary = \"\
    {0:b}\".format(avg)\n    return binary\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7,\
    \ 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm54k18sp.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpm54k18sp.py\", line 42,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpm54k18sp.py\", line\
    \ 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: '11

    -1

    1111

    11010

    '
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    total = 0\n    for num in range(n, m + 1):\n\
    \        total += num\n    avg = int(total / (m - n + 1))\n    return f\"0b{bin(avg)[2:]}\"\
    \n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp60h0hwkz.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp60h0hwkz.py\", line 41,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp60h0hwkz.py\", line\
    \ 31, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    # YOUR\
    \ CODE HERE\n    if n > m:\n        return -1\n    else:\n        my_range = m\
    \ - n + 1\n        avg = round(sum(range(n, m + 1)) / my_range)\n        return\
    \ \"0b\" + bin(avg)[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) ==\
    \ '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977)\
    \ == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert\
    \ candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n\
    \    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902)\
    \ == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert\
    \ candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5,\
    \ 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return f\"0b{bin(round((n + m)\
    \ / 2))[2:]}\"\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    num_sum\
    \ = 0\n    num_count = 0\n    if n > m:\n        return -1\n    else:\n      \
    \  for num in range(n, m + 1):\n            num_sum += num\n            num_count\
    \ += 1\n    avg = num_sum // num_count\n    # print(bin(avg))\n    return bin(avg)\n\
    \n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcdx9p8ln.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpcdx9p8ln.py\", line 46,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcdx9p8ln.py\", line\
    \ 36, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    total\
    \ = 0\n    if n > m:\n        return -1\n    for i in range(n, m + 1):\n     \
    \   total += i\n    avg = round(total / (m - n + 1))\n    # return avg\n    return\
    \ bin(avg)\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10,\
    \ 20))\nprint(rounded_avg(20, 33))\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: '0b11

    -1

    0b1111

    0b11010

    '
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    return\
    \ -1 if n > m else bin(math.ceil((n + m) / 2))\n    \nprint(rounded_avg(20, 33))\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptwtuz2hj.py\", line\
    \ 20, in <module>\n    print(rounded_avg(20, 33))\n  File \"/tmp/tmptwtuz2hj.py\"\
    , line 18, in rounded_avg\n    return -1 if n > m else bin(math.ceil((n + m) /\
    \ 2))\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = sum(range(n, m + 1)) / (m - n + 1)\n  \
    \  return bin(round(avg))\n\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = int(round((m + n) / 2))\n    return f\"\
    0b{avg:b}\"\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n   \
    \ assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpswn8cici.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpswn8cici.py\", line 35,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpswn8cici.py\", line\
    \ 21, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    return bin(round((n + m) / 2))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    return bin(int(round((sum(range(n, m + 1)) /\
    \ (m - n + 1)))))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    # YOUR\
    \ CODE HERE\n    if n > m:\n        return -1\n    return bin(round((n + m) /\
    \ 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        total = 0\n        for i in range(n,\
    \ m+1):\n            total += i\n        avg = total/(m-n+1)\n        if avg%1\
    \ >= 0.5:\n            return f\"0b{bin(round(avg))[2:]}\"\n        else:\n  \
    \          return f\"0b{bin(round(avg))[2:]}\"\n\ndef check(candidate):\n    assert\
    \ candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert\
    \ candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n\
    \    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = int(round((n + m) / 2))\n    return bin(avg)\n\
    \    \n    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n   \
    \ assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        avg = int(round((n + m) / 2))\n\
    \        return bin(avg)\n\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    return bin(round((n + m) / 2))\n    \n\nprint(rounded_avg(1,\
    \ 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20,\
    \ 33))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '0b11

    -1

    0b1111

    0b11010

    '
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    nums = [num for num in range(n, m + 1)]\n   \
    \ avg = sum(nums) / len(nums)\n    avg = int(round(avg))\n    return bin(avg)\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = int(round((n + m) / 2))\n    return bin(avg)\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        avg = round(((n + m) / 2))\n \
    \       return bin(avg)\ndef check(candidate):\n    assert candidate(1, 5) ==\
    \ '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977)\
    \ == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert\
    \ candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n\
    \    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902)\
    \ == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert\
    \ candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5,\
    \ 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = math.ceil((n + m) / 2)\n    binary = bin(avg)\n\
    \    return binary\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4keqwa7y.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp4keqwa7y.py\", line 39,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp4keqwa7y.py\", line\
    \ 25, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmp4keqwa7y.py\"\
    , line 20, in rounded_avg\n    avg = math.ceil((n + m) / 2)\nNameError: name 'math'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return f\"0b{avg:b}\"\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    average = int(round((n + m) / 2))\n    return\
    \ bin(average)\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return bin(round((sum(range(n,\
    \ m+1)))/(m-n+1)))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    # Padding for '0b' prefix\n    bin_answer = f'0b{round(mean(range(n,\
    \ m + 1)))}'\n    return bin_answer\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn_ls40k_.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpn_ls40k_.py\", line 38,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpn_ls40k_.py\", line\
    \ 24, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmpn_ls40k_.py\"\
    , line 21, in rounded_avg\n    bin_answer = f'0b{round(mean(range(n, m + 1)))}'\n\
    NameError: name 'mean' is not defined\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpswn8cici.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpswn8cici.py\", line 35,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpswn8cici.py\", line\
    \ 21, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    elif n == m:\n        return bin(n)\n    else:\n\
    \        return bin(round((sum(range(n, m+1)) / (m - n + 1))))\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        nums = [i for i in range(n, m+1)]\n\
    \        avg = sum(nums) // len(nums)\n        return bin(avg)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfqnv_vj6.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpfqnv_vj6.py\", line 40,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpfqnv_vj6.py\", line\
    \ 30, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    a = sum(range(n, m + 1)) / (m - n + 1)\n    return\
    \ bin(round(a))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    if n == m:\n        return bin(n)\n    else:\n\
    \        return bin(round((n + m) / 2))\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        res = (n + m) // 2\n        return\
    \ bin(res)\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxxptg1se.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpxxptg1se.py\", line 38,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpxxptg1se.py\", line\
    \ 28, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    total = 0\n    for num in range(n, m + 1):\n\
    \        total += num\n    avg = int(total / (m - n + 1))\n    return bin(avg)\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz071je1b.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpz071je1b.py\", line 41,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpz071je1b.py\", line\
    \ 31, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n>m:\n        return -1\n    avg = round((n+m)/2)\n    avg_bin = bin(avg)[2:]\n\
    \    return avg_bin\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpme89rgka.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpme89rgka.py\", line 39,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpme89rgka.py\", line\
    \ 25, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n>m:\n        return -1\n    average=(n+m)/2\n    average=int(average)\n   \
    \ average=bin(average)\n    return average\n\ndef check(candidate):\n    assert\
    \ candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert\
    \ candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n\
    \    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpykof5ecp.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpykof5ecp.py\", line 40,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpykof5ecp.py\", line\
    \ 30, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    return bin(int(math.ceil((n + m) / 2)))\ndef\
    \ check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn0fhnsvq.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpn0fhnsvq.py\", line 36,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpn0fhnsvq.py\", line\
    \ 22, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmpn0fhnsvq.py\"\
    , line 20, in rounded_avg\n    return bin(int(math.ceil((n + m) / 2)))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        return bin(round((sum(range(n,\
    \ m+1)) / (m - n + 1))))\n\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    print(int(round(sum(range(n, m+1))/(m-n+1))))\n\
    \    return bin(int(round(sum(range(n, m+1))/(m-n+1))))\nrounded_avg(1, 5)\n\n\
    \"\"\"\nSolution:\n    def rounded_avg(n, m):\n        if n > m:\n           \
    \ return -1\n        return bin(int(round(sum(range(n, m+1))/(m-n+1))))\n\"\"\"\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '3

    3

    10

    970

    996

    706

    366

    429

    626

    215

    5

    '
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = int(math.ceil((n + m) / 2))\n    return\
    \ bin(avg)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpomoccdaw.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpomoccdaw.py\", line 38,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpomoccdaw.py\", line\
    \ 24, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmpomoccdaw.py\"\
    , line 20, in rounded_avg\n    avg = int(math.ceil((n + m) / 2))\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    avg\
    \ = int(math.ceil((n + m) / 2))\n    if n > m:\n        return -1\n    else:\n\
    \        return bin(avg)\n\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfqk_5u2t.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpfqk_5u2t.py\", line 39,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpfqk_5u2t.py\", line\
    \ 25, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmpfqk_5u2t.py\"\
    , line 18, in rounded_avg\n    avg = int(math.ceil((n + m) / 2))\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    return\
    \ None\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcpyisbc0.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpcpyisbc0.py\", line 35,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcpyisbc0.py\", line\
    \ 21, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        sum = 0\n        for i in range(n,\
    \ m+1):\n            sum += i\n        avg = sum / (m - n + 1)\n        binary\
    \ = bin(round(avg))\n        return binary\ndef check(candidate):\n    assert\
    \ candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert\
    \ candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n\
    \    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    ans = round((sum(range(n, m+1))/((m-n)+1)))\n\
    \    return bin(ans)\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    return '0b' + format(int(round((n + m) / 2)),\
    \ 'b')\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = sum(range(n, m + 1)) / (m - n + 1)\n  \
    \  avg = int(round(avg))\n    return bin(avg)\n\ndef check(candidate):\n    assert\
    \ candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert\
    \ candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n\
    \    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    return bin(round((n + m) / 2))\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n>m:\n        return -1\n    else:\n        sum = 0\n        for i in range(n,\
    \ m+1):\n            sum += i\n        average = sum/(m-n+1)\n        average\
    \ = math.ceil(average)\n        rounded_avg = \"{0:b}\".format(average)\n    \
    \    return rounded_avg\n\ndef check(candidate):\n    assert candidate(1, 5) ==\
    \ '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977)\
    \ == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert\
    \ candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n\
    \    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902)\
    \ == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert\
    \ candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5,\
    \ 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8s9r9v4k.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8s9r9v4k.py\", line 44,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp8s9r9v4k.py\", line\
    \ 30, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmp8s9r9v4k.py\"\
    , line 25, in rounded_avg\n    average = math.ceil(average)\nNameError: name 'math'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    nums\
    \ = []\n    if n > m:\n        return -1\n    for i in range(n, m+1):\n      \
    \  nums.append(i)\n    avg = int(round(sum(nums)/len(nums)))\n    return bin(avg)\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = (n + m) / 2\n    return bin(int(round(avg)))\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        rounded_avg = round((n + m) /\
    \ 2)\n        return bin(rounded_avg)\n        \n\ndef check(candidate):\n   \
    \ assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    avg = total\
    \ // (m - n + 1)\n    avg_bin = bin(avg)[2:]\n    return f'0b{avg_bin}'\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphuwqhbg2.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmphuwqhbg2.py\", line 39,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmphuwqhbg2.py\", line\
    \ 29, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    else:\n        average = 0\n        numbers =\
    \ [x for x in range(n, m+1)]\n        print(numbers)\n        for i in numbers:\n\
    \            average += i\n        average = average//len(numbers)\n        return\
    \ bin(average)\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10,\
    \ 20))\nprint(rounded_avg(20, 33))\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6yh47mzj.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp6yh47mzj.py\", line 48,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp6yh47mzj.py\", line\
    \ 38, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: '[1, 2, 3, 4, 5]

    0b11

    -1

    [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]

    0b1111

    [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

    0b11010

    [1, 2, 3, 4, 5]

    [7, 8, 9, 10, 11, 12, 13]

    [964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977]

    [996, 997]

    [560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
    576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591,
    592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607,
    608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623,
    624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639,
    640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655,
    656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
    672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687,
    688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
    704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
    720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
    736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
    752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
    768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
    784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
    800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
    816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
    832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
    848, 849, 850, 851]

    '
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpswn8cici.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpswn8cici.py\", line 35,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpswn8cici.py\", line\
    \ 21, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    return f\"0b{bin(round((n + m) / 2))[2:]}\"\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    return '0b' + bin(round((n + m) / 2))[2:]\ndef\
    \ check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    # write\
    \ your code here\n    if n > m:\n        return -1\n    dec = int(round((n + m)\
    \ / 2))\n    return f\"0b{dec:b}\"\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n      \
    \  sum += i\n    rounded_result = round(sum/(m-n+1))\n    return bin(rounded_result)\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpswn8cici.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpswn8cici.py\", line 35,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpswn8cici.py\", line\
    \ 21, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = int(round(((n + m) / 2)))\n    return bin(avg)\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: 0
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = sum(range(n, m + 1)) / (m - n + 1)\n  \
    \  return f\"0b{bin(round(avg))[2:]}\"\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822755
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)\n\ndef\
    \ check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5453gk1u.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp5453gk1u.py\", line 38,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp5453gk1u.py\", line\
    \ 28, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  stdout: ''
  timestamp: 1659822755
