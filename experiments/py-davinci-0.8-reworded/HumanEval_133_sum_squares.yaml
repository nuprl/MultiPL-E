name: HumanEval_133_sum_squares
language: py
prompt: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n  \
  \  \"\"\"You are given a list of numbers.\n    You need to return the sum of squared\
  \ numbers in the given list,\n    round each element in the list to the upper int(Ceiling)\
  \ first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n    14\n    >>> lst([1.0,\
  \ 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84\n    >>> lst([1.4,\
  \ 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n    6\n    \n\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
  \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) ==\
  \ 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0,\
  \ 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n    assert\
  \ candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4, 4.6, 6.3])\
  \ == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n    assert candidate([0.0])\
  \ == 0\n    assert candidate([-1.0]) == 1\n    assert candidate([-1.0, 1.0, 0.0])\
  \ == 2\n\ndef test_check():\n    check(sum_squares)\n\ntest_check()\n"
completions: ["    return 0\n", "    sum_squares = 0\n    for item in lst:\n     \
    \   rounded_num = math.ceil(item)\n        sum_squares += rounded_num ** 2\n \
    \   return sum_squares\n        ", '    return sum([int(i**2) for i in lst])',
  "    return sum([round(x)**2 for x in lst])\n", '    return sum([int(x**2) for x
    in lst])', "    return int(math.ceil(sum([(x ** 2) for x in lst])))\n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    return sum([math.ceil(x*x)\
    \ for x in lst])\n", "    ceil = map(math.ceil, lst)\n    sq = map(lambda x: x**2,\
    \ ceil)\n    return sum(sq)\n", "    return sum([int(i**2) for i in lst])\n  \
    \  \n   \n\n", "    return sum([i**2 for i in [math.ceil(x) for x in lst]])\n",
  "    total = 0\n    for x in lst:\n        total += math.ceil(x)**2\n    return\
    \ total", "    # return sum(int(i**2) for i in lst)\n    return sum([int(i**2)\
    \ for i in lst])\n", '    return sum([int(math.ceil(x))**2 for x in lst])', " \
    \   sum = 0\n    for each in lst:\n        sum += math.ceil(each) ** 2\n    return\
    \ sum\n", '    pass', "    # your code here\n\n\n", '    return sum([round(i)**2
    for i in lst])', "    pass\n\n", "    # your code here\n    lst = [int(math.ceil(i))\
    \ for i in lst]\n    return sum([i**2 for i in lst])\n", '    pass', "    # TODO:\
    \ implement sum_squares\n    # raise NotImplementedError\n    x = []\n    for\
    \ i in lst:\n        x.append(math.ceil(i))\n    sum = 0\n    for i in x:\n  \
    \      sum += i*i\n    return sum\n", "    # your code here\n    import math\n\
    \    for i in range(len(lst)):\n        lst[i] = math.ceil(lst[i])\n    total\
    \ = 0\n    for i in lst:\n        total += i**2\n    return total", "    return\
    \ sum([int(num ** 2) for num in lst])\n", "    # Test 1\n    assert sum_squares([1.0,\
    \ 2.0, 3.0]) == 14\n    # Test 2\n    assert sum_squares([1.0, 4.0, 9.0]) == 98\n\
    \    # Test 3\n    assert sum_squares([1.0, 3.0, 5.0, 7.0]) == 84\n    # Test\
    \ 4\n    assert sum_squares([1.4, 4.2, 0.0]) == 29\n    # Test 5\n    assert sum_squares([-2.4,\
    \ 1.0, 1.0]) == 6\n    \n    #print(lst)\n    lst_squared = []\n    for n in lst:\n\
    \        #print(n)\n        lst_squared.append(math.ceil(n)**2)\n    #print(lst_squared)\n\
    \    return sum(lst_squared)\n\nsum_squares([1.0, 2.0, 3.0])\n", "    return sum([math.ceil(x\
    \ ** 2) for x in lst])\n\nassert sum_squares([1.0, 2.0, 3.0]) == 14\nassert sum_squares([1.0,\
    \ 4.0, 9.0]) == 98\nassert sum_squares([1.0, 3.0, 5.0, 7.0]) == 84\nassert sum_squares([1.4,\
    \ 4.2, 0.0]) == 29\nassert sum_squares([-2.4, 1.0, 1.0]) == 6\nprint(\"Successfully\
    \ completed!\")", "    new_lst = list(map(lambda x: math.ceil(x)**2, lst))\n \
    \   sum = 0\n    for i in new_lst:\n        sum += i\n    return sum", '    return
    sum([round(i ** 2) for i in lst])', '    return sum([math.ceil(i**2) for i in
    lst])', "    # TODO: Write function here\n    lst = [round(num) for num in lst]\n\
    \    lst = [i ** 2 for i in lst]\n    return sum(lst)\n\n", '    return sum([ceil(x)**2
    for x in lst])', "    newlist = []\n    sum = 0\n    #for i in lst:\n    newlist\
    \ = [ceil(i) for i in lst]\n    for x in newlist:\n        sum += x**2\n    return\
    \ sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    return sum([math.ceil(n)\
    \ ** 2 for n in lst])\n", "    # Your code here\n    lst = [int(math.ceil(i))\
    \ for i in lst]\n    return sum([i**2 for i in lst])", "    return sum([int(math.ceil(x))**2\
    \ for x in lst])\n", "    sum = 0\n    for num in lst:\n        sum += int(ceil(num\
    \ ** 2))\n    return sum\n", "    pass\n", "    return sum([int(i**2) for i in\
    \ lst])\n", "    import math\n    sum_lst = []\n    for l in lst:\n        sum_lst.append(math.ceil(l))\n\
    \    #print(sum_lst)\n    sum_lst = [i**2 for i in sum_lst]\n    #print(sum_lst)\n\
    \    retu", "    # YOUR CODE HERE\n    total = 0\n    for i in lst:\n        i\
    \ = int(i)\n        total += i*i\n    return total\n    raise NotImplementedError()\n\
    \    \n    \n    \n    ", "    lst_1 = list(map(math.ceil, lst))\n    lst_2 =\
    \ list(map(lambda x:x**2, lst_1))\n    return sum(lst_2)", "    lst = [math.ceil(n)\
    \ for n in lst]\n    return sum([i ** 2 for i in lst])\n", "    import math\n\
    \    a = []\n    for i in lst:\n        a.append(i)\n    for i in range(len(a)):\n\
    \        a[i] = math.ceil(a[i])\n    sum = 0\n    for i in a:\n        sum +=\
    \ i ** 2\n    return sum", "    import math\n    lst = [math.ceil(x) for x in\
    \ lst]\n    return sum([x**2 for x in lst])\nlst([1.0, 2.0, 3.0])\n", "    return\
    \ sum([n**2 for n in [int(n) for n in lst]])\n", '    return sum([int(i**2) for
    i in lst])', '    return sum([int(math.ceil(x)) ** 2 for x in lst])', "    pass\n\
    \n", "    for i in range(len(lst)):\n        lst[i] = math.ceil(lst[i])\n    return\
    \ sum([x**2 for x in lst])", "    total = 0\n    for i in lst:\n        if i >=\
    \ 0:\n            total += int(i+1) ** 2\n        else:\n            total +=\
    \ int(i) ** 2\n    return total", "    rst: List[int] = []\n    for i in lst:\n\
    \        num = math.ceil(i)\n        rst.append(int(num))\n    return sum(i**2\
    \ for i in rst)\n", "    sum_of_squares = 0\n    for num in lst:\n        sum_of_squares\
    \ += math.ceil(num) ** 2\n    return sum_of_squares\n", "    sum = 0\n    for\
    \ num in lst:\n        num = math.ceil(num)\n        sum += num ** 2\n    return\
    \ sum\n\nprint(sum_squares([1.0, 2.0, 3.0]))\nprint(sum_squares([1.0, 4.0, 9.0]))\n\
    print(sum_squares([1.0, 3.0, 5.0, 7.0]))\nprint(sum_squares([1.4, 4.2, 0.0]))\n\
    print(sum_squares([-2.4, 1.0, 1.0]))", "    return sum([math.ceil(x ** 2) for\
    \ x in lst])\n", "    total_sum = 0\n    num = map(lambda x: math.ceil(x), lst)\n\
    \    squared_num = map(lambda x: math.pow(x, 2), num)\n    total_sum = sum(squared_num)\n\
    \    return total_sum\n", "    return sum([x ** 2 for x in lst])\n", "    sum\
    \ = 0\n    for i in lst:\n        sum += int(math.ceil(i))**2\n    return sum\n",
  "    # return sum([(math.ceil(i)) ** 2 for i in lst])\n    return sum([math.ceil(i)\
    \ ** 2 for i in lst])\n\n", '    pass', "    import math\n    new_list = []\n\
    \    for i in lst:\n        new_list.append(math.ceil(i))\n    ans = 0\n    for\
    \ i in new_list:\n        ans += i**2\n    return ans\n", "    pass\n", "    #\
    \ sum = 0\n    # for i in lst:\n    #     sum += math.ceil(i) ** 2\n    # return\
    \ sum\n    return sum([math.ceil(i) ** 2 for i in lst])\n\n", "    return sum([int(x)\
    \ ** 2 for x in lst])\n", "    # YOUR CODE HERE\n    return sum([(int(i)+1)**2\
    \ for i in lst])\n", "    sum = 0\n    for number in lst:\n        sum += (math.ceil(number)**2)\n\
    \    return sum\n", "    return sum([element ** 2 for element in lst])\n", " \
    \   return int(sum([math.ceil(x ** 2) for x in lst]))\n", "    assert type(lst)\
    \ == list\n    assert all(type(x) == float for x in lst)\n    lst = [math.ceil(i)\
    \ for i in lst]\n    return sum(i ** 2 for i in lst)\n", "    for i in range(len(lst)):\n\
    \        lst[i] = math.ceil(lst[i])\n    # print(lst)\n    return sum([x ** 2\
    \ for x in lst])\n", '    return sum([int(math.ceil(i))**2 for i in lst])', " \
    \   return sum([math.ceil(e)**2 for e in lst])\n", "    rounded_list = [math.ceil(x)\
    \ for x in lst]\n    squared_list = [x**2 for x in rounded_list]\n    sum_squared_list\
    \ = sum(squared_list)\n    return sum_squared_list\n    \n", "    return sum([int(i)\
    \ ** 2 for i in lst])\n    \n    ", "    # get the square of each item and then\
    \ add them up\n    sqr_list = [math.ceil(x) ** 2 for x in lst]\n    return sum(sqr_list)\n\
    \n", '    pass', "    # For example:\n    #     L = [1.0, 2.0, 3.0]\n    #   \
    \  x = math.ceil(L[0]) # 2\n    #     y = math.ceil(L[1]) # 3\n    #     z = math.ceil(L[2])\
    \ # 4\n    #     return 2 ** 2 + 3 ** 2 + 4 ** 2 = 29\n    #s = 0\n    #for x\
    \ in lst:\n    #    s += math.ceil(x) ** 2\n    #return s\n    return sum(math.ceil(x)\
    \ ** 2 for x in lst)\n    # TODO: Implement me!\n    # pass # Remove this line\
    \ and implement me!\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    pass\n", "    total = 0\n    for i\
    \ in lst:\n        i = ceil(i)\n        if i < 0:\n            i = -i\n      \
    \  total += i ** 2\n    return total\n", "    list2=[]\n    for item in lst:\n\
    \        item=math.ceil(item)\n        list2.append(item)\n    return sum(map(lambda\
    \ x: x**2, list2))", '    return sum([round(x)**2 for x in lst])', "    import\
    \ math\n    upper = []\n    for element in lst:\n        upper.append(math.ceil(element))\n\
    \    squares = [i**2 for i in upper]\n    return sum(squares)\n    #raise NotImplementedError()\n",
  "    #your code\n\n", "    import math\n    return sum([math.ceil(x**2) for x in\
    \ lst])\n    pass\n\n", "    pass\n", "    for i in range(len(lst)):\n       \
    \ if lst[i] > 0:\n            lst[i] = math.ceil(lst[i])\n        elif lst[i]\
    \ == 0:\n            lst[i] = 0\n        else:\n            lst[i] = math.floor(lst[i])\n\
    \            \n    lst = [x ** 2 for x in lst]\n    \n    return sum(lst)", " \
    \   count =0\n    for i in lst:\n        i = math.ceil(i)\n        x = i**2\n\
    \        count += x\n    return count", "    sum_sq = 0\n    for n in lst:\n \
    \       sum_sq += math.ceil(n) ** 2\n    return sum_sq\n", "    total = 0\n  \
    \  for i in lst:\n        total += math.ceil(i)**2\n    return total\n", "   \
    \ return sum([int(i**2) for i in lst])\n", "    # Your code below\n    return\
    \ sum([int(x**2) for x in lst])\n", "    sum_squares = 0\n\n    # Your code here\n\
    \    return sum_squares", "    sum_of_squares = 0\n    #The idea of this algorithm\
    \ is to go through each element of the list. For each element, we first round\
    \ it to the upper integer. After that, we square the value, and add it to the\
    \ sum.\n    for number in lst:\n        number = math.ceil(number)\n        square\
    \ = math.pow(number, 2)\n        sum_of_squares += square\n    return sum_of_squares",
  "    return sum([int(round(item))**2 for item in lst])\n    \n", "    for i in range(len(lst)):\n\
    \        lst[i] = math.ceil(lst[i])\n    sum = 0\n    for i in range(len(lst)):\n\
    \        sum += (lst[i] ** 2)\n    return sum", "    squared_list = []\n    sum\
    \ = 0\n    for i in lst:\n        squared_list.append(math.ceil(i))\n    for a\
    \ in squared_list:\n        sum += a**2\n    return sum\n    pass\n\n", "    return\
    \ \n    pass\n", "    return sum([int(x**2) for x in lst])\n", "    # Your code\
    \ goes here\n    sum1 = 0\n    for n in lst:\n        sum1 += math.ceil(n) **\
    \ 2\n    return sum1\n", "    total = 0\n    for n in lst:\n        total += math.ceil(n)\
    \ ** 2\n    return total", "    for i in range(len(lst)):\n        lst[i] = math.ceil(lst[i])\n\
    \    return sum([i**2 for i in lst])\n", "    new_lst = []\n    for i in lst:\n\
    \        new_lst.append(math.ceil(i))\n    new_lst = [i**2 for i in new_lst]\n\
    \    return sum(new_lst)\n   \n\n\n", '    pass', "    return sum([int(i**2) for\
    \ i in lst])\n", "    sum = 0\n    # Finish this code\n    for element in lst:\n\
    \        sum += math.ceil(element) ** 2\n    return sum\n\nimport doctest\ndoctest.testmod()",
  "    # Task 1: Raise each element of the list to the power of 2\n    lst = [i**2\
    \ for i in lst]\n    return sum(lst)\n    ", "    # Get each element in the list\n\
    \    # Round up the element to the nearest whole number\n    # Square each element\n\
    \    # Add up each element in the list\n    lst[:] = [i**2 for i in lst]\n   \
    \ return sum(lst)\n", '    return sum([int(x) ** 2 for x in lst])', '    return
    int(sum([math.ceil(x) for x in lst])**2)', "    ans = [math.ceil(i)**2 for i in\
    \ lst]\n    return int(sum(ans))\n", "    return sum([(int(math.ceil(i)) ** 2)\
    \ for i in lst])\n", '    return sum([int(math.ceil(x)) ** 2 for x in lst])',
  "    # your code here\n    a = 0\n    for i in lst:\n        i = math.ceil(i)\n\
    \        a += (i * i)\n    return a\n", '    return sum([ceil(x) ** 2 for x in
    lst])', "    # replace and return the correct value\n    return sum([int(math.ceil(i)**2)\
    \ for i in lst])\n\nsum_squares([1.0, 2.0, 3.0])\n", "    sum = 0\n    for num\
    \ in lst:\n        num = math.ceil(num)\n        sum += num**2\n    return sum\n\
    \nprint(sum_squares([1.0, 2.0, 3.0]))\nprint(sum_squares([1.0, 4.0, 9.0]))\nprint(sum_squares([1.0,\
    \ 3.0, 5.0, 7.0]))\nprint(sum_squares([1.4, 4.2, 0.0]))\nprint(sum_squares([-2.4,\
    \ 1.0, 1.0]))", "    for i in range(len(lst)):\n        lst[i] = int(math.ceil(lst[i]))\n\
    \n    return int(sum([n**2 for n in lst]))\n", "    # YOUR CODE HERE\n    pass\n\
    \    return sum(map(lambda x: x**2, list(map(lambda x: math.ceil(x), lst))))\n",
  "    sum = 0\n    for num in lst:\n        num = math.ceil(num)\n        sum +=\
    \ num ** 2\n    return sum", '    return sum([math.ceil(x) ** 2 for x in lst])',
  "    lst = [math.ceil(x) for x in lst]\n    return sum([int(i**2) for i in lst])\n\
    \    \nprint(sum_squares([1.0, 2.0, 3.0]))\nprint(sum_squares([1.0, 4.0, 9.0]))\n\
    print(sum_squares([1.0, 3.0, 5.0, 7.0]))\nprint(sum_squares([1.4, 4.2, 0.0]))\n\
    print(sum_squares([-2.4, 1.0, 1.0]))", "    return sum([ceil(x)**2 for x in lst])\n",
  "    s = 0\n    for i in lst:\n        i = math.ceil(i)\n        s += i ** 2\n \
    \   return s\n    #return sum([int(math.ceil(x)) ** 2 for x in lst])\n", "   \
    \ # your code here\n    lst = [math.ceil(i) for i in lst]\n    for i in range(len(lst)):\n\
    \        lst[i] = lst[i]**2\n    return sum(lst)\n\n", '    return sum([int(math.ceil(i))**2
    for i in lst])', "    lst = [round(num) for num in lst]\n    return sum([num **\
    \ 2 for num in lst])\n", "    # Assume lst is not empty\n    # Assume each element\
    \ in lst is float\n    # Assume ceiling of float num is just int part\n    lst\
    \ = list(map(math.ceil, lst))\n    return sum(list(map(lambda x: x*x, lst)))\n",
  "    return sum([int(ceil(i))**2 for i in lst])\n   \n   ", "    s = []\n    for\
    \ x in lst:\n        s.append(int(ceil(x)))\n    return sum(i**2 for i in s)\n",
  '    return sum([math.ceil(number)**2 for number in lst])', "    sum_squares = 0\n\
    \    for i in lst:\n        sum_squares += math.ceil(i**2)\n    return sum_squares\n",
  "    sum_of_squares = 0\n    for x in lst:\n        sum_of_squares += math.ceil(x)\
    \ ** 2\n    return sum_of_squares\n    \n        \n    ", "    lst = [int(i) for\
    \ i in lst]\n    lst = [i*i for i in lst]\n    return sum(lst)\n\nprint(sum_squares([1.0,\
    \ 2.0, 3.0]))\nprint(sum_squares([1.0, 4.0, 9.0]))\nprint(sum_squares([1.0, 3.0,\
    \ 5.0, 7.0]))\nprint(sum_squares([1.4, 4.2, 0.0]))\nprint(sum_squares([-2.4, 1.0,\
    \ 1.0]))", '    pass', "    sum = 0\n    for x in lst:\n        sum += math.ceil(x)**2\n\
    \    return sum\n", "    if len(lst) == 0:\n        return 0\n    x = [math.ceil(i)\
    \ for i in lst]\n    sum_squares = sum([int(i)**2 for i in x])\n    return sum_squares\n\
    \        \n    \n    \n    \n    \nprint(sum_squares([1.0, 2.0, 3.0]))\nprint(sum_squares([1.0,\
    \ 4.0, 9.0]))\nprint(sum_squares([1.0, 3.0, 5.0, 7.0]))\nprint(sum_squares([1.4,\
    \ 4.2, 0.0]))\nprint(sum_squares([-2.4, 1.0, 1.0]))\nprint(sum_squares([]))",
  "    # The variable res is used to store the sum of squares.\n    res = 0\n    #\
    \ Using for loop to traverse the list.\n    for i in lst:\n        # Add new result\
    \ to the sum.\n        res += math.ceil(i)**2\n    return res\n", "    return\
    \ 0\n\n", "    return sum([int(i*i) for i in lst])\n", "    # lst = [round(num)\
    \ for num in lst]\n    # print(lst)\n    total = 0\n    for num in lst:\n    \
    \    total += num ** 2\n    return int(total)\n\nprint(sum_squares([1.0, 2.0,\
    \ 3.0]))\nprint(sum_squares([1.0, 4.0, 9.0]))\nprint(sum_squares([1.0, 3.0, 5.0,\
    \ 7.0]))\nprint(sum_squares([1.4, 4.2, 0.0]))\nprint(sum_squares([-2.4, 1.0, 1.0]))",
  "    # Your implementation here\n    return sum([int(math.ceil(x)) ** 2 for x in\
    \ lst])", "    # your code here\n    new_list = []\n    sum = 0\n    for i in\
    \ lst:\n        num = ceil(i)\n        new_list.append(num)\n    for j in new_list:\n\
    \        k = j**2\n        sum += k\n    return sum\n", "    sum=0\n    for i\
    \ in lst:\n        i=math.ceil(i)\n        sum=sum+(i*i)\n    return sum", " \
    \   pass\n\n", "    ## the output should always be an integer \n    return 0\n",
  "    #for x in lst:\n    #    lst[x] = int(math.ceil(x))\n    #return sum(math.ceil(i)\
    \ for i in lst)\n    sum = 0\n    for i in lst:\n        sum += (math.ceil(i))**2\n\
    \    return sum", "    # replace this with a meaningful docstring.\n    raise\
    \ NotImplementedError\n\n", "    for num in lst:\n        print(math.ceil(num)\
    \ ** 2)\n\nprint(sum_squares([1.0, 2.0, 3.0]))\nprint(sum_squares([1.0, 4.0, 9.0]))\n\
    print(sum_squares([1.0, 3.0, 5.0, 7.0]))\nprint(sum_squares([1.4, 4.2, 0.0]))\n\
    print(sum_squares([-2.4, 1.0, 1.0]))", "    pass\n", "    #Researcher:Jeremy Lim\n\
    \    #Date: 15/03/2018\n    #Resource: http://stackoverflow.com/questions/12451810/python-ceiling-equivalent\n\
    \    return sum(math.ceil(i)**2 for i in lst)\n", "    # REPLACE pass BELOW WITH\
    \ YOUR CODE\n    return sum([int(i)**2 for i in lst])\n\n", "    #return sum(map(lambda\
    \ x:x**2,lst))\n    #return sum(list(map(lambda x:x**2,lst)))\n    #return sum(list(map(lambda\
    \ x:int(x**2),lst)))\n    #return sum(list(map(lambda x:x**2,list(map(lambda x:int(x),lst)))))\n\
    \    #return sum(list(map(lambda x:int(x**2),list(map(lambda x:int(x),lst)))))\n\
    \    #return sum(list(map(lambda x:x**2,list(map(lambda x:int(x),lst)))))\n  \
    \  #return sum(list(map(lambda x:int(x**2),list(map(lambda x:int(x),lst)))))\n\
    \    #return sum(list(map(lambda x:int(x**2),list(map(lambda x:int(x),lst)))))\n\
    \    #return sum(list(map(lambda x:int(x**2),list(map(lambda x:int(x),lst)))))\n\
    \    #return sum(list(map(lambda x:int(x**2),list(map(lambda x:int(x),lst)))))\n\
    \    #return sum(list(map(lambda x:int(x**2),list(map(lambda x:int(x),lst)))))\n\
    \    #return sum(list(map(lambda x:int(x**2),list(map(lambda x:int(x),lst)))))\n\
    \    #return sum(list(map(lambda x:int(x**2),list(map(lambda x:int(x),lst)))))\n\
    \    #return sum(list(map(lambda x:int(x**2),list(map(lambda x:int(x),lst)))))\n\
    \    #return sum(list(map(lambda x:int(x**2),list(map(lambda x:int(x),lst)))))\n\
    \    #return sum(list(map(lambda x:int(x**2),list(map(lambda x:int(x),lst)))))\n\
    \    #return sum(list(map(lambda x:int", "    return sum([math.ceil(n)**2 for\
    \ n in lst])\n", "    return sum([int(i**2) for i in lst])\n", "    sum = 0\n\
    \    for element in lst:\n        sum += int(math.ceil(element) ** 2)\n    return\
    \ sum\n", "    # lst = [math.ceil(lst[x]) for x in range(len(lst))]\n    # lst\
    \ = [x**2 for x in lst]\n    # return sum(lst)\n    return sum([math.ceil(i)**2\
    \ for i in lst])\n\nlst = [1.0, 4.0, 9.0]\nprint(sum_squares(lst))", "    \"\"\
    \"\n    # 4 methods of solving this.\n    # METHOD 1 - FOR LOOP\n    ceiling =\
    \ []\n    for i in lst:\n        ceiling.append(math.ceil(i))\n    print(sum(i**2\
    \ for i in ceiling))\n\n    # METHOD 2 - MAP FUNCTION\n    print(sum(map(lambda\
    \ i: i**2, map(math.ceil, lst))))\n\n    # METHOD 3 - LAMBDA FUNCTION\n    print(sum(map(lambda\
    \ i: math.ceil(i)**2, lst)))\n\n    # METHOD 4 - LIST COMPREHENSION\n    print(sum([math.ceil(i)**2\
    \ for i in lst]))\n    \"\"\"\n\n    return sum(math.ceil(i)**2 for i in lst)\n",
  "    return sum([math.ceil(i) ** 2 for i in lst])\n", "    for i in range(len(lst)):\n\
    \        lst[i] = math.ceil(lst[i])\n    total = 0\n    for i in range(len(lst)):\n\
    \        total += lst[i]**2\n    return total\n\nprint(sum_squares([1.0, 2.0,\
    \ 3.0]))\nprint(sum_squares([1.0, 4.0, 9.0]))\nprint(sum_squares([1.0, 3.0, 5.0,\
    \ 7.0]))\nprint(sum_squares([1.4, 4.2, 0.0]))\nprint(sum_squares([-2.4, 1.0, 1.0]))",
  "    sum = 0\n    for i in lst:\n        sum += math.ceil(i) ** 2\n    return sum\n",
  "    # Write your code here\n    return sum([int(round(x)**2) for x in lst])\n",
  "    return sum([(math.ceil(x)**2) for x in lst])\n", "    lst = [round(a) for a\
    \ in lst]\n    lst = [a*a for a in lst]\n    return sum(lst)\n", "    pass\n",
  "    new_lst = []\n    for element in lst:\n        new_lst.append(element**2)\n\
    \    return sum(new_lst)", "    # return 0\n    return sum([int(ceil(i)) ** 2\
    \ for i in lst])\n", "    import math\n    lst2 = []\n    for x in lst:\n    \
    \    new_num = math.ceil(x)\n        lst2.append(new_num)\n    lst2 = [x**2 for\
    \ x in lst2]\n    return sum(lst2)", "    return sum([math.ceil(num)**2 for num\
    \ in lst])\n", "    lst = [math.ceil(number) for number in lst]\n    squares =\
    \ list(map(lambda x: x**2, lst))\n    summation = sum(squares)\n    return summation",
  "    # your code here\n    number_list = [math.ceil(x) for x in lst]\n    total\
    \ = 0\n    for num in number_list:\n        total += num**2\n    return total\n\
    \n    # import math\n    # return sum([math.ceil(x)**2 for x in lst])\n", "  \
    \  return sum([int(i**2) for i in lst])\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    # replace the body of this function with your code\n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    # a single return statement per\
    \ function", "    new_lst = []\n    for i in lst:\n        new_lst.append(math.ceil(i))\n\
    \    return sum([i**2 for i in new_lst])", "    sum = 0\n    for i in lst:\n \
    \       i = math.ceil(i)\n        i = i ** 2\n        sum += i\n    return sum",
  "    return sum([ceil(x)**2 for x in lst])\n        \n", "    #pass\n    L=[]\n\
    \    for i in lst:\n        L.append(math.ceil(i))\n    S=0\n    for i in L:\n\
    \        S+=i**2\n    return S\n", "    return sum([x*x for x in lst])\n", " \
    \   new_lst = []\n    for i in lst:\n        new_lst.append(int(math.ceil(i)**2))\n\
    \    \n    return sum(new_lst)", "    lst = [ceil(i) for i in lst]\n    return\
    \ sum([i**2 for i in lst])\n", "    # Make list that rounds up to ceiling and\
    \ adds it to list\n    # Test\n    new_list = []\n    for i in lst:\n        new_list.append(math.ceil(i))\n\
    \    # Test\n    print(new_list)\n    # Square each number and add them to new\
    \ list\n    squared_list = []\n    for i in new_list:\n        squared_list.append(i\
    \ ** 2)\n    # Test\n    print(squared_list)\n    # Add all elements together\n\
    \    total = 0\n    for i in squared_list:\n        total += i\n    return total\n\
    \n", "    lst = list(map(lambda x: math.ceil(x), lst))\n    return sum(map(lambda\
    \ x: x**2, lst))\n\nprint(sum_squares([1.0, 2.0, 3.0]))\nprint(sum_squares([1.0,\
    \ 4.0, 9.0]))\nprint(sum_squares([1.0, 3.0, 5.0, 7.0]))\nprint(sum_squares([1.4,\
    \ 4.2, 0.0]))\nprint(sum_squares([-2.4, 1.0, 1.0]))\n", '    return sum([i **
    2 for i in lst])', "    def sumSquares(listx):\n        return sum([i**2 for i\
    \ in listx])\n    return sumSquares([math.ceil(i) for i in lst])\n    \nprint(sum_squares([-2.4,\
    \ 1.0, 1.0]))", '    return 0', "    list1 = [math.ceil(i) for i in lst]\n   \
    \ return sum([i**2 for i in list1])", "    # Make a list of Ceiling rounded integers\n\
    \    import math\n    ceil_lst = []\n    for i in lst:\n        ceil_lst.append(math.ceil(i))\n\
    \    #print(ceil_lst)\n    sq_lst = []\n    for i in ceil_lst:\n        sq_lst.append(i**2)\n\
    \    #print(sq_lst)\n    # Implement your program here.\n    return sum(sq_lst)\n\
    \    \n", "    # A helper function that rounds to upper int\n    def round_up(x):\n\
    \        return int(math.ceil(x))\n    # A list comprehension that maps the round_up\
    \ function to all the elements in the list\n    lst_rounded = list(map(round_up,\
    \ lst))\n    # A list comprehension that squares all the elements in the list\n\
    \    lst_squared = [x**2 for x in lst_rounded]\n    # return the sum of all the\
    \ elements in the list\n    return sum(lst_squared)", "    return sum([round(x)**2\
    \ for x in lst])\n\nprint(sum_squares([1.0, 2.0, 3.0]))\nprint(sum_squares([1.0,\
    \ 4.0, 9.0]))\nprint(sum_squares([1.0, 3.0, 5.0, 7.0]))\nprint(sum_squares([1.4,\
    \ 4.2, 0.0]))\nprint(sum_squares([-2.4, 1.0, 1.0]))", "    x = 0\n    lst = [math.ceil(x)\
    \ for x in lst]\n    for i in lst:\n        x += i**2\n    return x\n", "    #\
    \ FILL IN YOUR CODE HERE\n    #raise NotImplementedError()\n    return sum([math.ceil(i)**2\
    \ for i in lst])\n", '    return sum([int(x ** 2) for x in lst])', "    sum =\
    \ 0\n    for i in lst:\n        i = math.ceil(i)\n        sum += (i*i)\n    return\
    \ sum\n\nimport doctest\ndoctest.testmod()", "    sum = 0\n    for i in lst:\n\
    \        sum += math.ceil(i) ** 2\n    return sum", "    out = 0\n    for i in\
    \ lst:\n        i = int(math.ceil(i))\n        out += i**2\n    return out", '    return
    sum([int(ceil(n**2)) for n in lst])', '    pass', "    return sum([ceil(i)**2\
    \ for i in lst])\n", '    return sum([math.ceil(math.pow(i, 2)) for i in lst])',
  '    return sum([math.ceil(x) ** 2 for x in lst])', "    return sum([int(math.ceil(n))\
    \ ** 2 for n in lst])\n", "    return sum([i ** 2 for i in [ceil(j) for j in lst]])\n\
    \    \n    \n    \n", "    return sum([int(x)**2 for x in lst])\n", "    if lst\
    \ == []:\n        return 0\n    for i in range(len(lst)):\n        if lst[i] <\
    \ 0:\n            lst[i] = 0\n        elif lst[i] % 1 != 0:\n            lst[i]\
    \ = math.ceil(lst[i])\n    x = 0\n    for i in range(len(lst)):\n        x +=\
    \ lst[i]**2\n    return x\n    \n    \n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
