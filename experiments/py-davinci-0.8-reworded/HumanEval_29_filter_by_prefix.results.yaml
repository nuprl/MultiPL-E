language: py
name: HumanEval_29_filter_by_prefix
results:
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    # Write your code here\n    return filter(lambda s: s.startswith(prefix),\
    \ strings)\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n\
    \    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpngll3cxw.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpngll3cxw.py\", line 18,\
    \ in test_check\n    check(filter_by_prefix)\n  File \"/tmp/tmpngll3cxw.py\",\
    \ line 14, in check\n    assert candidate([], 'john') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return list(filter(lambda x: x.startswith(prefix), strings))\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return list(filter(lambda x: x.startswith(prefix), strings))\n\
    \n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    results = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            results.append(s)\n    return results\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    prefix_len = len(prefix)\n    return [w for w in strings if w[:prefix_len]\
    \ == prefix]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n\
    \    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [i for i in strings if i.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return list(filter(lambda x: x.startswith(prefix), strings))\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return list(filter(lambda s: s.startswith(prefix), strings))\n\
    \nfilter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    output = []\n    for word in strings:\n        if word.startswith(prefix):\n\
    \            output.append(word)\n    return output\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \nfilter_by_prefix([], 'a')\nfilter_by_prefix(['abc', 'bcd', 'cde', 'array'],\
    \ 'a')\n\nimport doctest\ndoctest.testmod()\n\n\"\"\"\ndoctest can be run simply\
    \ by running python3 -m doctest test_file.py.\n\nWhen you run doctest, you should\
    \ see no output. This is ideal, meaning that all of your tests have passed successfully.\
    \ \nIf there are any failures, you will see a message such as:\n\n**********************************************************************\n\
    File \"test_file.py\", line 7, in __main__.filter_by_prefix\nFailed example:\n\
    \    filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\nExpected:\n    ['abc',\
    \ 'array']\nGot:\n    ['abc']\n**********************************************************************\n\
    \nThis indicates that the doctest failed on line 7 of test_file.py for the example\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a').\n\nYou can read more\
    \ about the format of doctest output on the official documentation: https://docs.python.org/3/library/doctest.html#doctest-output\n\
    \"\"\"\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return list(filter(lambda s: s.startswith(prefix), strings))\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    filtered = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            filtered.append(s)\n    return filtered\n\nfilter_by_prefix([], 'a')\n\
    \nfilter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    new_list = []\n    for i in strings:\n        if i.startswith(prefix):\n\
    \            new_list.append(i)\n    return new_list\n\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    pass\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpevei_8w0.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpevei_8w0.py\", line 16,\
    \ in test_check\n    check(filter_by_prefix)\n  File \"/tmp/tmpevei_8w0.py\",\
    \ line 12, in check\n    assert candidate([], 'john') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n    \n\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    pass\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpevei_8w0.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpevei_8w0.py\", line 16,\
    \ in test_check\n    check(filter_by_prefix)\n  File \"/tmp/tmpevei_8w0.py\",\
    \ line 12, in check\n    assert candidate([], 'john') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    filtered = [s for s in strings if s.startswith(prefix)]\n   \
    \ return filtered\n\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    filtered = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            filtered.append(s)\n    return filtered\n\nstrings = ['abc', 'bcd',\
    \ 'cde', 'array']\nprefix = 'a'\nprint(filter_by_prefix(strings, prefix))\ndef\
    \ check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '[''abc'', ''array'']

    '
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [i for i in strings if i.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    def func(x):\n        return x.startswith(prefix)\n    return\
    \ list(filter(func, strings))\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [str_ for str_ in strings if str_.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [str for str in strings if str.startswith(prefix)]\n \
    \   \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [i for i in strings if i.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n\
    \            filtered.append(string)\n    return filtered\n\nstrings = ['abc',\
    \ 'bcd', 'cde', 'array']\nprefix = 'a'\nfiltered = filter_by_prefix(strings, prefix)\n\
    print(filtered)\ndef check(candidate):\n    assert candidate([], 'john') == []\n\
    \    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '[''abc'', ''array'']

    '
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppldot2hg.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmppldot2hg.py\", line 18,\
    \ in test_check\n    check(filter_by_prefix)\n  File \"/tmp/tmppldot2hg.py\",\
    \ line 14, in check\n    assert candidate([], 'john') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    res = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            res.append(s)\n    return res\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [st for st in strings if st.startswith(prefix)]\n\nprint(filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a'))\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '[''abc'', ''array'']

    '
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    filtered = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            filtered.append(s)\n    return filtered\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    filtered = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            filtered.append(s)\n    return filtered\n\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    def has_prefix(string):\n        return string.startswith(prefix)\n\
    \    return list(filter(has_prefix, strings))\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    strings_filtered = []\n    for string in strings:\n        if\
    \ string.startswith(prefix):\n            strings_filtered.append(string)\n  \
    \  return strings_filtered\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    new_list = []\n    for i in strings:\n        if i.startswith(prefix):\n\
    \            new_list.append(i)\n    return new_list\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [st for st in strings if st.startswith(prefix)]\n\ndef\
    \ check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n \ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    retval = []\n    for x in strings:\n        if x.startswith(prefix):\n\
    \            retval.append(x)\n    return retval\n\ndef check(candidate):\n  \
    \  assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    answer = []\n    for string in strings:\n        if string.startswith(prefix):\n\
    \            answer.append(string)\n    return answer\n\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [i for i in strings if i.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    res = []\n    for string in strings:\n        if string.startswith(prefix):\n\
    \            res.append(string)\n    return res\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [word for word in strings if word.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \nprint(filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a'))\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '[''abc'', ''array'']

    '
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    if strings == []:\n        return []\n    else:\n        return\
    \ [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    output_list = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            output_list.append(s)\n    return output_list\n```\n\n```python\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp7vyn7dt6.py\", line 15\n    ```\n    ^\nSyntaxError: invalid\
    \ syntax\n"
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [item for item in strings if item.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    n = len(prefix)\n    return [s for s in strings if s[:n] == prefix]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [word for word in strings if word.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    # Empty list case\n    if not strings:\n        return []\n \
    \   else:\n        output = []\n        for item in strings:\n            if item.startswith(prefix):\n\
    \                output.append(item)\n        return output\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n \ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n\
    \            filtered.append(string)\n    return filtered\n\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    strings = [str for str in strings if str.startswith(prefix)]\n\
    \    return strings\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823269
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    def prefix_mismatch(s: str) -> bool:\n        \"\"\" Test whether\
    \ s[0] matches the first character of the prefix. \"\"\"\n        return prefix[0]\
    \ != s[0]\n    # TODO: finish this function.\n    pass\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp53ca0vjp.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp53ca0vjp.py\", line 21,\
    \ in test_check\n    check(filter_by_prefix)\n  File \"/tmp/tmp53ca0vjp.py\",\
    \ line 17, in check\n    assert candidate([], 'john') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [word for word in strings if word.startswith(prefix)]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n```\n\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpbyxldvlw.py\", line 11\n    ```\n    ^\nSyntaxError: invalid\
    \ syntax\n"
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \nfilter_by_prefix([], 'a')\nfilter_by_prefix(['abc', 'bcd', 'cde', 'array'],\
    \ 'a')\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    if not strings:\n        return []\n    else:\n        return\
    \ list(filter(lambda s: s.startswith(prefix), strings))\n\nprint(filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a'))\n\n\"\"\"\nQUESTION 2:\n\nUsing list comprehension,\
    \ complete the following function to return the number of\nstrings in the input\
    \ list that start with a given prefix.\n\"\"\"\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '[''abc'', ''array'']

    '
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    output = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            output.append(s)\n    return output\n\ndef check(candidate):\n  \
    \  assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    filtered = []\n    for item in strings:\n        if item.startswith(prefix):\n\
    \            filtered.append(item)\n    return filtered\n\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [i for i in strings if i.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \nfilter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\nimport doctest\n\n\
    doctest.testmod()\n\ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823269
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n\
    \            filtered.append(string)\n    return filtered\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823269
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    filter_results = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            filter_results.append(s)\n    return filter_results\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823269
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    strings_prefix = []\n    for string in strings:\n        if string.startswith(prefix):\n\
    \            strings_prefix.append(string)\n    return strings_prefix\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [w for w in strings if w.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823269
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    filtered = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            filtered.append(s)\n    return filtered\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\nfilter_by_prefix([],\
    \ 'a')\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823269
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1einge0h.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmp1einge0h.py\", line 17,\
    \ in test_check\n    check(filter_by_prefix)\n  File \"/tmp/tmp1einge0h.py\",\
    \ line 13, in check\n    assert candidate([], 'john') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1einge0h.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmp1einge0h.py\", line 17,\
    \ in test_check\n    check(filter_by_prefix)\n  File \"/tmp/tmp1einge0h.py\",\
    \ line 13, in check\n    assert candidate([], 'john') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \nstrings = ['abc', 'bcd', 'cde', 'array']\nfilter_by_prefix(strings, 'a')\n\n\
    from typing import List\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823269
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [i for i in strings if i.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \nprint(filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a'))\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '[''abc'', ''array'']

    '
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    matched_strings = []\n    for string in strings:\n        if\
    \ string.startswith(prefix):\n            matched_strings.append(string)\n   \
    \ return matched_strings\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823269
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    filtered = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            filtered.append(s)\n    return filtered\n\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    output_list = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            output_list.append(s)\n    return output_list\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823269
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [word for word in strings if word.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    # NOTE:  This is (somewhat surprisingly) quite an involved problem,\
    \ which I haven't solved perfectly.\n    #        There are about 3-4 different\
    \ ways to approach it, and this approach is just one of them.\n    #        The\
    \ important thing to do is to try your best to solve the problem, and then move\
    \ on.\n\n    # TODO: write me\n    return []\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf0j6urmc.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpf0j6urmc.py\", line 22,\
    \ in test_check\n    check(filter_by_prefix)\n  File \"/tmp/tmpf0j6urmc.py\",\
    \ line 19, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n"
  stdout: ''
  timestamp: 1659823269
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    filtered = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            filtered.append(s)\n    return filtered\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [i for i in strings if i.startswith(prefix)]\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    filtered = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            filtered.append(s)\n    return filtered\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    filtered = []\n    for s in strings:\n        if s.startswith(prefix):\n\
    \            filtered.append(s)\n    return filtered\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [item for item in strings if item.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
