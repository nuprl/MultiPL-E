name: HumanEval_91_is_bored
language: py
prompt: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string of\
  \ words, and your task is to count the number\n    of boredoms. A boredom is a sentence\
  \ that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
  \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
  \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
  \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
  \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I will\
  \ be productive. will kill It') == 2\n    assert candidate('You and I are going\
  \ for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
completions: ["    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            count += 1\n    return count\n", "    pass\n", "    count = 0\n \
    \   for sentence in S.split('.'):\n        count += sentence.startswith('I')\n\
    \    return count\n", "    boredoms = 0\n    for sentence in re.split(r'[.?!]',\
    \ S):\n        if re.match(r'\\s*I\\s+', sentence):\n            boredoms += 1\n\
    \    return boredoms\n\n", "    boredoms = 0\n    sentences = S.split('.')\n \
    \   for sentence in sentences:\n        words = sentence.split()\n        if words\
    \ and words[0] == 'I':\n            boredoms += 1\n    return boredoms\n\n", " \
    \   boredoms = 0\n    for sentence in S.split('. '):\n        if 'I' == sentence[0]:\n\
    \            boredoms += 1\n    return boredoms\n\n", "    boredoms = 0\n    for\
    \ sentence in S.split('.'):\n        if sentence.split()[0] == 'I':\n        \
    \    boredoms += 1\n    return boredoms\n", "    boredoms = 0\n    sents = S.split('.!?')\n\
    \    for sent in sents:\n        words = sent.split()\n        if len(words) >\
    \ 0 and words[0] == 'I':\n            boredoms += 1\n    return boredoms\n", " \
    \   boredoms = 0\n    for sentence in S.split('. '):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n", "    boredom = 0\n    for\
    \ sentence in S.split('.'):\n        sentence = sentence.strip()\n        if sentence[0]\
    \ == 'I':\n            boredom += 1\n    return boredom\n\n", "    boredoms =\
    \ 0\n    sentence = ''\n    sentences = S.split('.')\n    for sentence in sentences:\n\
    \        sentence = sentence.strip()\n        if sentence:\n            if sentence[0]\
    \ == 'I':\n                boredoms += 1\n    return boredoms\n\n", "    # return\
    \ sum(S.startswith('I ') for S in S.split('.'))\n    return sum(S.startswith('I\
    \ ') for S in S.split('.'))\n\n\n", "    return sum(1 for s in S.split('.') if\
    \ s.strip().startswith('I'))\n\n", "    return sum(line.strip().startswith('I')\
    \ for line in S.split('.', 1))", "    sen = S.split('.')\n    bored = 0\n    for\
    \ sentence in sen:\n        if sentence.startswith('I'):\n            bored +=\
    \ 1\n    return bored\n\n", "    boredoms = 0\n    words = S.split()\n    for\
    \ index, word in enumerate(words):\n        if (word.capitalize() == 'I' and index\
    \ == 0\n                or words[index - 1][-1] in '.!?'):\n            boredoms\
    \ += 1\n    return boredoms\n\n", "    c = 0\n    for s in S.split('.'):\n   \
    \     if s.strip().startswith('I'):\n            c += 1\n    return c\n", "  \
    \  sentences = [s.strip() for s in S.split('.')]\n    return len([s for s in sentences\
    \ if s and s[0] == 'I'])\n\n", "    boredoms = 0\n    word_list = S.split()\n\
    \    for word in word_list:\n        if word[0] == 'I':\n            boredoms\
    \ += 1\n    return boredoms\n\n", "    return len([s for s in S.split('.') if\
    \ s.strip().startswith('I')])\n```\n\n```python"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
