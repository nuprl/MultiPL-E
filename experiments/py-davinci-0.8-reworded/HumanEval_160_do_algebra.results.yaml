name: HumanEval_160_do_algebra
language: py
results:
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    if len(operator) != len(operand) - 1:\n   \
    \     raise ValueError(\"Invalid number of operators\")\n    expr = [str(operand[0])]\n\
    \    for idx, op in enumerate(operator):\n        expr.append(op)\n        expr.append(str(operand[idx\
    \ + 1]))\n    return eval(\"\".join(expr))\ndef check(candidate):\n    assert\
    \ candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+',\
    \ '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4])\
    \ == 8\n\ndef test_check():\n    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    operator = list(operator)\n    operand = list(operand)\n\
    \    operand.insert(0, 0)\n    while len(operator) > 0:\n        op = operator.pop(0)\n\
    \        if op == '+':\n            operand[0] += operand[1]\n        elif op\
    \ == '-':\n            operand[0] -= operand[1]\n        elif op == '*':\n   \
    \         operand[0] *= operand[1]\n        elif op == '//':\n            operand[0]\
    \ //= operand[1]\n        elif op == '**':\n            operand[0] **= operand[1]\n\
    \        operand.pop(1)\n    return operand[0]\ndef check(candidate):\n    assert\
    \ candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+',\
    \ '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4])\
    \ == 8\n\ndef test_check():\n    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwyb9z5x3.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpwyb9z5x3.py\", line 51,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmpwyb9z5x3.py\", line 46,\
    \ in check\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    assert len(operator) == len(operand) - 1\n\
    \    assert all(type(num) == int for num in operand)\n    assert len(operator)\
    \ >= 1\n    assert len(operand) >= 2\n\n    # TODO\n    output = operand[0]\n\
    \    for i in range(len(operator)):\n        if operator[i] == '+':\n        \
    \    output += operand[i+1]\n        elif operator[i] == '-':\n            output\
    \ -= operand[i+1]\n        elif operator[i] == '*':\n            output *= operand[i+1]\n\
    \        elif operator[i] == '//':\n            output //= operand[i+1]\n    \
    \    elif operator[i] == '**':\n            output **= operand[i+1]\n    return\
    \ output\n\n\ndef check(candidate):\n    assert candidate(['**', '*', '+'], [2,\
    \ 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n\
    \    assert candidate(['//', '*'], [7, 3, 4]) == 8\n\ndef test_check():\n    check(do_algebra)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5bk2iaf6.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmp5bk2iaf6.py\", line 55,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmp5bk2iaf6.py\", line 51,\
    \ in check\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    res = operand[0]\n    for i in range(len(operator)):\n\
    \        if operator[i] == '+':\n            res += operand[i+1]\n        elif\
    \ operator[i] == '-':\n            res -= operand[i+1]\n        elif operator[i]\
    \ == '*':\n            res *= operand[i+1]\n        elif operator[i] == '//':\n\
    \            res //= operand[i+1]\n        elif operator[i] == '**':\n       \
    \     res **= operand[i+1]\n    return res\ndef check(candidate):\n    assert\
    \ candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+',\
    \ '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4])\
    \ == 8\n\ndef test_check():\n    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvtnl5so7.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpvtnl5so7.py\", line 47,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmpvtnl5so7.py\", line 43,\
    \ in check\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    # calculate the algebraic expression in the\
    \ same order as given\n    if len(operator) == len(operand) - 1:\n        result\
    \ = operand[0]\n        i = 0\n        while i < len(operator):\n            if\
    \ operator[i] == '+':\n                result += operand[i+1]\n            elif\
    \ operator[i] == '-':\n                result -= operand[i+1]\n            elif\
    \ operator[i] == '*':\n                result *= operand[i+1]\n            elif\
    \ operator[i] == '//':\n                result //= operand[i+1]\n            elif\
    \ operator[i] == '**':\n                result **= operand[i+1]\n            i\
    \ += 1\n        return result\n    return None\n\nprint(do_algebra(['+', '-',\
    \ '*'], [2, 3, 4, 5]))\ndef check(candidate):\n    assert candidate(['**', '*',\
    \ '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5])\
    \ == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8\n\ndef test_check():\n\
    \    check(do_algebra)\n\ntest_check()\n"
  stdout: "5\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdkt3fklw.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpdkt3fklw.py\", line 54,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmpdkt3fklw.py\", line 50,\
    \ in check\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    final_string = \"\"\n    for i in range(len(operator)):\n\
    \        final_string += str(operand[i]) + operator[i]\n    final_string += str(operand[-1])\n\
    \    return eval(final_string)\ndef check(candidate):\n    assert candidate(['**',\
    \ '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3,\
    \ 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8\n\ndef test_check():\n\
    \    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    try:\n        expr = str(operand[0])\n    \
    \    i = 0\n        for o in operator:\n            expr += \" \" + o + \" \"\
    \ + str(operand[i+1])\n            i += 1\n        return eval(expr)\n    except:\n\
    \        raise NotImplementedError(\"Please implement this function\")\n\ndef\
    \ check(candidate):\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n\
    \    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//',\
    \ '*'], [7, 3, 4]) == 8\n\ndef test_check():\n    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    if len(operator) + 1 != len(operand):\n   \
    \     raise IndexError(\"The length of operator list is equal to the length of\
    \ operand list minus one\")\n    if len(operator) == 0:\n        raise IndexError(\"\
    Operator list has at least one operator\")\n    if len(operand) == 1:\n      \
    \  raise IndexError(\"Operand list has at least two operands\")\n    total = operand[0]\n\
    \    for i in range(len(operator)):\n        if operator[i] == '+':\n        \
    \    total += operand[i+1]\n        elif operator[i] == '-':\n            total\
    \ -= operand[i+1]\n        elif operator[i] == '*':\n            total *= operand[i+1]\n\
    \        elif operator[i] == '//':\n            total //= operand[i+1]\n     \
    \   elif operator[i] == '**':\n            total **= operand[i+1]\n        else:\n\
    \            raise ValueError(f\"Unexpected operator {operator[i]}\")\n    return\
    \ total\ndef check(candidate):\n    assert candidate(['**', '*', '+'], [2, 3,\
    \ 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n   \
    \ assert candidate(['//', '*'], [7, 3, 4]) == 8\n\ndef test_check():\n    check(do_algebra)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd0tf12nw.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmpd0tf12nw.py\", line 55,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmpd0tf12nw.py\", line 51,\
    \ in check\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    exp = str(operand[0])\n    for i in range(len(operator)):\n\
    \        exp += f\" {operator[i]} {operand[i+1]}\"\n    return eval(exp)\n\nprint(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]))\nprint(do_algebra(['+', '//', '-'], [10, 5, 1, 3]))\n\
    print(do_algebra(['+', '*', '//', '-'], [2, 3, 10, 5, 8]))\ndef check(candidate):\n\
    \    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+',\
    \ '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4])\
    \ == 8\n\ndef test_check():\n    check(do_algebra)\n\ntest_check()\n"
  stdout: "9\n12\n0\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    result = operand[0]\n    for i in range(len(operator)):\n\
    \        if operator[i] == '+':\n            result += operand[i+1]\n        elif\
    \ operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i]\
    \ == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n\
    \            result //= operand[i+1]\n        elif operator[i] == '**':\n    \
    \        result **= operand[i+1]\n    return result\ndef check(candidate):\n \
    \   assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+',\
    \ '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4])\
    \ == 8\n\ndef test_check():\n    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp13focfti.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp13focfti.py\", line 47,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmp13focfti.py\", line 43,\
    \ in check\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    result = operand[0]\n    for i in range(len(operator)):\n\
    \        if operator[i] == '+':\n            result += operand[i+1]\n        elif\
    \ operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i]\
    \ == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n\
    \            result //= operand[i+1]\n        elif operator[i] == '**':\n    \
    \        result **= operand[i+1]\n    return result\ndef check(candidate):\n \
    \   assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+',\
    \ '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4])\
    \ == 8\n\ndef test_check():\n    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpelgps_1t.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpelgps_1t.py\", line 47,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmpelgps_1t.py\", line 43,\
    \ in check\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    expr = operand[0]\n    for i in range(1, len(operand)):\n\
    \        if operator[i-1] == '+':\n            expr += operand[i]\n        elif\
    \ operator[i-1] == '-':\n            expr -= operand[i]\n        elif operator[i-1]\
    \ == '*':\n            expr *= operand[i]\n        elif operator[i-1] == '//':\n\
    \            expr //= operand[i]\n        elif operator[i-1] == '**':\n      \
    \      expr **= operand[i]\n    return expr\ndef check(candidate):\n    assert\
    \ candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+',\
    \ '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4])\
    \ == 8\n\ndef test_check():\n    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp15c9w96t.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp15c9w96t.py\", line 47,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmp15c9w96t.py\", line 43,\
    \ in check\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    if len(operator) > len(operand):\n        raise\
    \ Exception(\"operator list can not be greater than operand list minus one\")\n\
    \    elif len(operator) == 0:\n        raise Exception(\"operator list should\
    \ be greater than zero\")\n    elif len(operand) == 0:\n        raise Exception(\"\
    operand list should be greater than zero\")\n    else:\n        result = operand[0]\n\
    \        for i in range(len(operator)):\n            if operator[i] == '+':\n\
    \                result += operand[i+1]\n            elif operator[i] == '-':\n\
    \                result -= operand[i+1]\n            elif operator[i] == '*':\n\
    \                result *= operand[i+1]\n            elif operator[i] == '//':\n\
    \                result //= operand[i+1]\n            elif operator[i] == '**':\n\
    \                result **= operand[i+1]\n            else:\n                raise\
    \ Exception(\"Only basic algebra operations is allowed\")\n        return result\n\
    \nprint(do_algebra(['+', '*', '-'], [2, 3, 4, 5]))\ndef check(candidate):\n  \
    \  assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+',\
    \ '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4])\
    \ == 8\n\ndef test_check():\n    check(do_algebra)\n\ntest_check()\n"
  stdout: "15\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj3840zq3.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpj3840zq3.py\", line 58,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmpj3840zq3.py\", line 54,\
    \ in check\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    def get_operator(op: str) -> int:\n       \
    \ if op == '+':\n            return 0\n        elif op == '-':\n            return\
    \ 1\n        elif op == '*':\n            return 2\n        elif op == '//':\n\
    \            return 3\n        elif op == '**':\n            return 4\n      \
    \  else:\n            raise Exception(\"Illegal operator.\")\n\n    def calculate(op1:\
    \ int, op2: int, oper: int) -> int:\n        if oper == 0:\n            return\
    \ op1 + op2\n        elif oper == 1:\n            return op1 - op2\n        elif\
    \ oper == 2:\n            return op1 * op2\n        elif oper == 3:\n        \
    \    return op1 // op2\n        elif oper == 4:\n            return op1 ** op2\n\
    \        else:\n            raise Exception(\"Illegal operator.\")\n\n    def\
    \ do_algebra_helper(operator: List[str], operand: List[int], left: int, right:\
    \ int) -> int:\n        if left == right:\n            return operand[left]\n\
    \        elif left + 1 == right:\n            return calculate(operand[left],\
    \ operand[right], get_operator(operator[left]))\n        else:\n            low\
    \ = get_operator(operator[left])\n            high = get_operator(operator[right\
    \ - 1])\n            if low < high:\n                return calculate(operand[left],\
    \ do_algebra_helper(operator, operand, left + 1, right), low)\n            else:\n\
    \                return calculate(do_algebra_helper(operator, operand, left, right\
    \ - 1), operand[right], high)\n\n    return do_algebra_helper(operator, operand,\
    \ 0, len(operand))\n\nprint(do_algebra(['+', '*', '-'], [2, 3, 4, 5]))\nprint(do_algebra(['-',\
    \ '+', '*'], [2, 3, 4, 5]))\nprint(do_algebra(['+', '+', '+', '+'], [1, 2, 3,\
    \ 4, 5]))\nprint(do_algebra(\ndef check(candidate):\n    assert candidate(['**',\
    \ '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3,\
    \ 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8\n\ndef test_check():\n\
    \    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpt3fnunpb.py\", line 75\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    result = operand[0]\n    for i in range(1,\
    \ len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n\
    \        elif operator[i-1] == '-':\n            result -= operand[i]\n      \
    \  elif operator[i-1] == '*':\n            result *= operand[i]\n        elif\
    \ operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1]\
    \ == '**':\n            result **= operand[i]\n    return result\ndef check(candidate):\n\
    \    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+',\
    \ '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4])\
    \ == 8\n\ndef test_check():\n    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1x8jbzkm.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp1x8jbzkm.py\", line 47,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmp1x8jbzkm.py\", line 43,\
    \ in check\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate(['**',\
    \ '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3,\
    \ 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8\n\ndef test_check():\n\
    \    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa6xbc06_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpa6xbc06_.py\", line 36,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmpa6xbc06_.py\", line 31,\
    \ in check\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    pass\n```\ndef check(candidate):\n    assert\
    \ candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+',\
    \ '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4])\
    \ == 8\n\ndef test_check():\n    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpdh296yvx.py\", line 29\n    ```\n    ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    result = operand[0]\n    for i in range(1,\
    \ len(operand)):\n        result = operand[i] if operator[i-1] == \"//\" else\
    \ eval(str(result) + operator[i-1] + str(operand[i]))\n    return result\n\ndef\
    \ check(candidate):\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n\
    \    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//',\
    \ '*'], [7, 3, 4]) == 8\n\ndef test_check():\n    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvt9zegow.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpvt9zegow.py\", line 39,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmpvt9zegow.py\", line 35,\
    \ in check\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    # code start here\n    # raise NotImplementedError()\n\
    \    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i]\
    \ == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n\
    \            result -= operand[i+1]\n        elif operator[i] == '*':\n      \
    \      result *= operand[i+1]\n        elif operator[i] == '//':\n           \
    \ result //= operand[i+1]\n        elif operator[i] == '**':\n            result\
    \ **= operand[i+1]\n    return result\n\ndef check(candidate):\n    assert candidate(['**',\
    \ '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3,\
    \ 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8\n\ndef test_check():\n\
    \    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuv0yqsnf.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpuv0yqsnf.py\", line 50,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmpuv0yqsnf.py\", line 46,\
    \ in check\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef do_algebra(operator: List[str], operand:\
    \ List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\n    # TODO: Write you code here\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) ==\
    \ 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//',\
    \ '*'], [7, 3, 4]) == 8\n\ndef test_check():\n    check(do_algebra)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfwzcwe79.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpfwzcwe79.py\", line 38,\
    \ in test_check\n    check(do_algebra)\n  File \"/tmp/tmpfwzcwe79.py\", line 33,\
    \ in check\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\nAssertionError\n"
  exit_code: -1
  status: Exception
