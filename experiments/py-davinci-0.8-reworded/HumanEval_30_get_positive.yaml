name: HumanEval_30_get_positive
language: py
prompt: "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n\
  \    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
  \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
  \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n\
  \    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3,\
  \ 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) ==\
  \ []\n\ndef test_check():\n    check(get_positive)\n\ntest_check()\n"
completions: ["    p = []\n    for i in l:\n        if i > 0:\n            p.append(i)\n\
    \    return p\n", "    return [n for n in l if n > 0]\n", "    return [i for i\
    \ in l if i > 0]\n", "    out = []\n    for num in l:\n        if num > 0:\n \
    \           out.append(num)\n    return out\n", "    return [i for i in l if i\
    \ > 0]\n", "    # positive_list = []\n    # for i in l:\n    #     if i > 0:\n\
    \    #         positive_list.append(i)\n    # return positive_list\n    return\
    \ [n for n in l if n > 0]\n", "    new = []\n    for i in l:\n        if i > 0:\n\
    \            new.append(i)\n    return new\n\n\n", "    return [x for x in l if\
    \ x > 0]\n", "    return [x for x in l if x > 0]\n", "    return [number for number\
    \ in l if number > 0]\n", "    list = []\n    for i in l:\n        if i > 0:\n\
    \            list.append(i)\n    return list\n", "    positive = []\n    for num\
    \ in l:\n        if num > 0:\n            positive.append(num)\n    return positive\n\
    \n\n", "    l = [i for i in l if i > 0]\n    return l\n\n", "    return [x for\
    \ x in l if x >= 0]\n", "    return [number for number in l if number > 0]\n\n",
  "    return [num for num in l if num > 0]\n\n", "    return [num for num in l if\
    \ num > 0]\n", "    positive_numbers = []\n    for number in l:\n        if number\
    \ > 0:\n            positive_numbers.append(number)\n    return positive_numbers\n",
  "    positive_numbers = []\n    for number in l:\n        if number > 0:\n     \
    \       positive_numbers.append(number)\n    return positive_numbers\n", "   \
    \ return [x for x in l if x > 0]\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
