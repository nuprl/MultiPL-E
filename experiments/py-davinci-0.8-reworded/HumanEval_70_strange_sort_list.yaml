name: HumanEval_70_strange_sort_list
language: py
prompt: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
  \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
  \ sorting, is when you start with the minimum value,\n    then maximum of the remaining\
  \ integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
  \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
  \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
  \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
  \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1,\
  \ 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert\
  \ candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
  \ 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
  \ -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
  \    check(strange_sort_list)\n\ntest_check()\n"
completions: ["    n = len(lst)\n    if n % 2 == 0:\n        odd = n - 1\n       \
    \ even = n\n    else:\n        odd = n\n        even = n - 1\n    result = []\n\
    \    for i in range(odd):\n        result.append(lst[i])\n        result.append(lst[i\
    \ + even])\n    return result\n", "    lst = sorted(lst)\n    out = []\n    while\
    \ lst:\n        out.append(lst.pop(0))\n        if not lst:\n            break\n\
    \        out.append(lst.pop())\n    return out", "    lst.sort()\n    i = 0\n\
    \    j = len(lst) - 1\n    while i < j:\n        lst[i], lst[j] = lst[j], lst[i]\n\
    \        i += 1\n        j -= 1\n    return lst\n", "    lst.sort()\n    start\
    \ = 0\n    end = len(lst) - 1\n    while start < end:\n        lst[start], lst[end]\
    \ = lst[end], lst[start]\n        start += 1\n        end -= 1\n    return lst\n",
  "    # if no items in list, return empty list\n    if len(lst) < 1:\n        return\
    \ []\n    # declare variables for use later\n    lst_len = len(lst)\n    lst_sorted\
    \ = sorted(lst)\n    lst_ascend = []\n    lst_descend = []\n    # set variable\
    \ for each item being added to the new lists\n    add_ascend = True\n    # loop\
    \ through sorted list\n    for i in range(lst_len):\n        # use variable to\
    \ alternate lists being added to\n        if add_ascend:\n            lst_ascend.append(lst_sorted[i])\n\
    \            add_ascend = False\n        else:\n            lst_descend.append(lst_sorted[i])\n\
    \            add_ascend = True\n    # reverse list and add the lists together\n\
    \    lst_descend.reverse()\n    lst_new = lst_ascend + lst_descend\n    return\
    \ lst_new", "    res = []\n    i = 0\n    while lst:\n        res.append(min(lst))\n\
    \        lst.remove(min(lst))\n        if lst:\n            res.append(max(lst))\n\
    \            lst.remove(max(lst))\n    return res", "    res = []\n    while lst:\n\
    \        min_val = min(lst)\n        lst.remove(min_val)\n        res.append(min_val)\n\
    \        if lst:\n            max_val = max(lst)\n            lst.remove(max_val)\n\
    \            res.append(max_val)\n    return res\n", "    res = []\n    while\
    \ len(lst) > 0:\n        res.append(min(lst))\n        lst.remove(min(lst))\n\
    \        if len(lst) > 0:\n            res.append(max(lst))\n            lst.remove(max(lst))\n\
    \    return res\n", "    return lst\n\n", "    # TODO implement strange_sort_list\n\
    \    return []\n\n", "    lst.sort()\n    if len(lst) < 2:\n        return lst\n\
    \    else:\n        i = 0\n        while i < len(lst)//2:\n            lst[2*i],\
    \ lst[2*i+1] = lst[2*i+1], lst[2*i]\n            i += 1\n        return lst\n",
  "    if not lst:\n        return []\n    current_minimum = min(lst)\n    sorted_lst\
    \ = [current_minimum]\n    remaining_lst = [num for num in lst if num != current_minimum]\n\
    \    while remaining_lst:\n        if len(remaining_lst) == 1:\n            sorted_lst.append(remaining_lst[0])\n\
    \            break\n        current_minimum = min(remaining_lst)\n        sorted_lst.append(current_minimum)\n\
    \        remaining_lst = [num for num in remaining_lst if num != current_minimum]\n\
    \        current_maximum = max(remaining_lst)\n        sorted_lst.append(current_maximum)\n\
    \        remaining_lst = [num for num in remaining_lst if num != current_maximum]\n\
    \    return sorted_lst", "    sorted_list = sorted(lst)\n    i = 0\n    j = len(sorted_list)\
    \ - 1\n    result = []\n    while i < j:\n        result.append(sorted_list[i])\n\
    \        result.append(sorted_list[j])\n        i += 1\n        j -= 1\n    if\
    \ i == j:\n        result.append(sorted_list[i])\n    return result\n", "    if\
    \ not lst:\n        return []\n    if len(lst) == 1:\n        return lst\n   \
    \ if len(lst) == 2:\n        return [min(lst), max(lst)]\n    lst = sorted(lst)\n\
    \    i = 1\n    # lst[0] is minimum, lst[-1] is maximum\n    min_lst = [lst[0]]\n\
    \    max_lst = [lst[-1]]\n    while i < len(lst) - 1:\n        min_lst.append(lst[i])\n\
    \        i += 1\n        max_lst.append(lst[i])\n        i += 1\n    return min_lst\
    \ + list(reversed(max_lst))", "    sorted_list = sorted(lst)\n    order = sorted_list[::2]\
    \ + sorted_list[1::2]\n    return order\n", "    lst.sort()\n    n = len(lst)\n\
    \    start = 0\n    end = n - 1\n    res = []\n    while start <= end:\n     \
    \   res.append(lst[start])\n        if start != end:\n            res.append(lst[end])\n\
    \        start += 1\n        end -= 1\n    return res\n", "    if not lst:\n \
    \       return []\n    min_val = min(lst)\n    if min_val == max(lst):\n     \
    \   return lst\n    else:\n        new_lst = []\n        new_lst.append(min_val)\n\
    \        lst.remove(min_val)\n        new_lst.append(max(lst))\n        lst.remove(max(lst))\n\
    \        return new_lst + strange_sort_list(lst)\n", "    lst.sort()\n    res\
    \ = [lst[0]]\n    lst.pop(0)\n    for i in range(0, len(lst) // 2):\n        res.append(lst[-1])\n\
    \        res.append(lst[0])\n        lst.pop()\n        lst.pop(0)\n    if len(lst)\
    \ > 0:\n        res.append(lst[0])\n    return res", "    if not lst:\n      \
    \  return []\n    if len(lst) == 1:\n        return lst\n    sorted_list = sorted(lst)\n\
    \    first_half = sorted_list[:len(sorted_list) // 2]\n    second_half = sorted_list[len(sorted_list)\
    \ // 2:]\n    second_half.reverse()\n    return [first_half.pop(0) if first_half\
    \ else second_half.pop(0) for _ in range(len(sorted_list))]", "    ordered = sorted(lst)\n\
    \    result = []\n    while ordered:\n        min_val = ordered.pop(0)\n     \
    \   max_val = ordered.pop() if ordered else None\n        result.append(min_val)\n\
    \        if max_val:\n            result.append(max_val)\n        ordered = ordered[::-1]\n\
    \    return result\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
