name: HumanEval_92_any_int
language: py
prompt: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
  \ a function that takes 3 numbers.\n    Returns true if one of the numbers is equal\
  \ to the sum of the other two, and all numbers are integers.\n    Returns false\
  \ in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n\
  \    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n\
  \    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
  \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
  \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
  \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
  \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
  \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
completions: ["    return all([type(x) is int, type(y) is int, type(z) is int]) and\
    \ (x == y + z or y == x + z or z == x + y)\n\n\n", "    if type(x) == int and\
    \ type(y) == int and type(z) == int:\n        if x + y == z or x + z == y or y\
    \ + z == x:\n            return True\n        else:\n            return False\n\
    \    else:\n        return False\n        \n        \n        ", "    if x ==\
    \ y + z or y == x + z or z == x + y:\n        return True\n    else:\n       \
    \ return False\n\n", "    # check if all are integers\n    if (math.ceil(x) ==\
    \ x) and (math.ceil(y) == y) and (math.ceil(z) == z):\n        # check if any\
    \ one is equal to the sum of the others\n        if (x == y + z) or (y == x +\
    \ z) or (z == x + y):\n            return True\n        else:\n            return\
    \ False\n    else:\n        return False\n\n", "    return round(x) == round(y\
    \ + z) or round(y) == round(x + z) or round(z) == round(x + y)\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \n", "    # Replace the line below with all your code. Remember to return the\
    \ requested data.\n    if x==y+z or y==x+z or z==x+y:\n        return True\n \
    \   else:\n        return False\n    \n\nany_int(5, 2, 7)\n\n", "    if isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or\
    \ x + z == y or y + z == x:\n            return True\n        else:\n        \
    \    return False\n    else:\n        return False\n\n", "    numbers = [x, y,\
    \ z]\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n\
    \            if i == j:\n                continue\n            for k in range(len(numbers)):\n\
    \                if k == i or k == j:\n                    continue\n        \
    \        if numbers[i] == numbers[j] + numbers[k] and numbers[i] == int(numbers[i])\
    \ and numbers[j] == int(numbers[j]) and numbers[k] == int(numbers[k]):\n     \
    \               return True\n                else:\n                    continue\n\
    \    return False\nany_int(3.6, -2.2, 2)\n", "    return (x == y + z or y == x\
    \ + z or z == x + y) and isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n", "    if (x == (y + z)) or (y == (x + z)) or (z == (x + y)):\n   \
    \     if (x - int(x) == 0) and (y - int(y) == 0) and (z - int(z) == 0):\n    \
    \        return True\n        else:\n            return False\n    else:\n   \
    \     return False\n\n", "    if (x == y + z or y == x + z or z == x + y) and\
    \ (x == int(x) and y == int(y) and z == int(z)):\n        return True\n    else:\n\
    \        return False\n\n", "    if (int(x) == int(y) + int(z)) or (int(y) ==\
    \ int(x) + int(z)) or (int(z) == int(x) + int(y)):\n        return True\n    else:\n\
    \        return False\n\nany_int(5, 2, 7)\nany_int(3, 2, 2)\nany_int(3, -2, 1)\n\
    any_int(3.6, -2.2, 2)\n\n\n", "    return ((x == y + z) or (y == x + z) or (z\
    \ == x + y)) and isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n",
  "    a = [x, y, z]\n    a.sort()\n    if a[2] != a[0] + a[1]:\n        return False\n\
    \    else:\n        return type(a[0]) == int and type(a[1]) == int and type(a[2])\
    \ == int\n \n ", "    if (x + y == z or x + z == y or y + z == x) and (x == int(x)\
    \ and y == int(y) and z == int(z)):\n        return True\n    else:\n        return\
    \ False\n\n\"\"\"\nSolution by:\n    s0nus\n\"\"\"", "    # Solution 1\n    if\
    \ x == y + z and x.is_integer() and y.is_integer() and z.is_integer():\n     \
    \   return True\n    elif x == y + z and x.is_integer() and y.is_integer() and\
    \ z.is_integer():\n        return True\n    elif y == x + z and x.is_integer()\
    \ and y.is_integer() and z.is_integer():\n        return True\n    return False\n\
    \n    # Solution 2\n    if not all(x.is_integer() for x in [x, y, z]):\n     \
    \   return False\n    return x == y + z or y == x + z or z == x + y\n    \n  \
    \  # Solution 3\n    return all([x.is_integer(), y.is_integer(), z.is_integer()])\
    \ and any([x == y + z, y == x + z, z == x + y])\n", "    if isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or x +\
    \ y == z or x + z == y:\n            return True\n        else:\n            return\
    \ False\n    else:\n        return False\n\n", "    if isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x +\
    \ z == y) or (y + z == x):\n            return True\n        else:\n         \
    \   return False\n    else:\n        return False\nany_int(3, -2, 1)\n\n%%timeit\n\
    any_int(3, 2, 2)\n\n%%timeit\nany_int(3, -2, 1)\n\n%%timeit\nany_int(3.6, -2.2,\
    \ 2)\n\n%%timeit\nany_int(2.2, 3.2, 5.4)\n\n%%timeit\nany_int(3, -2, 1)\n ", '    return
    (x+y == z or x+z == y or y+z == x) and (type(x)==int and type(y)==int and type(z)==int)',
  "    if ((x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0\
    \ and z % 1 == 0)):\n        return True\n    else:\n        return False\n\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
