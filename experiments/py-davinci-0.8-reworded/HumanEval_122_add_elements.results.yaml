language: py
name: HumanEval_122_add_elements
results:
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for num in\
    \ arr[:k]:\n        if num < 100:\n            total += num\n    return total\n\
    \ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   \
    \ assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(map(lambda e:\
    \ e if e < 100 else 100, arr[:k]))\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp14kui1tc.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp14kui1tc.py\", line 27,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmp14kui1tc.py\", line\
    \ 21, in check\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    s = 0\n    for num in arr[:k]:\n\
    \        num_digits = len(str(num))\n        if num_digits <= 2:\n           \
    \ s += num\n    return s\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    i = 0\n    res = 0\n   \
    \ while i < k:\n        if arr[i] >= 100:\n            res += arr[i] % 100\n \
    \       else:\n            res += arr[i]\n        i += 1\n    return res\n\ndef\
    \ check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert\
    \ candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqjefdvqg.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpqjefdvqg.py\", line 35,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpqjefdvqg.py\", line\
    \ 29, in check\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum_ = 0\n    for n in arr[:k]:\n\
    \        if n < 100:\n            sum_ += n\n    return sum_\n\n\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num for num in\
    \ arr[:k] if len(str(num)) < 3)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(elem for elem\
    \ in arr[:k] if len(str(elem)) <= 2)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i for i in arr[:k]\
    \ if i <= 99)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(el for el in\
    \ arr[:k] if len(str(el)) <= 2)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    digits_sum = 0\n    # iterate\
    \ over the first k elements in arr\n    for i in range(k):\n        num = arr[i]\n\
    \        # the number is only one digit\n        if num < 10:\n            digits_sum\
    \ += num\n        # the number is two digits\n        elif num >= 10 and num <\
    \ 100:\n            digits_sum += num\n        # the number is three digits\n\
    \        else:\n            digits_sum += (num // 100)\n    return digits_sum\n\
    \ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   \
    \ assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfbnfcb0z.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpfbnfcb0z.py\", line 40,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpfbnfcb0z.py\", line\
    \ 34, in check\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return\
    \ 0\n    else:\n        if arr[k-1] > 9:\n            return add_elements(arr,\
    \ k-1)\n        else:\n            return arr[k-1] + add_elements(arr, k-1)\n\n\
    def check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert\
    \ candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8nk7l7y_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp8nk7l7y_.py\", line 33,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmp8nk7l7y_.py\", line\
    \ 28, in check\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(el for el in\
    \ arr[:k] if el <= 99)\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i for i in arr[:k]\
    \ if i < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for i in\
    \ range(k):\n        if arr[i] < 100:\n            total += arr[i]\n    return\
    \ total\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) ==\
    \ 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(filter(lambda\
    \ x: len(str(x)) <= 2, arr[:k]))\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n for n in arr[:k]\
    \ if 9 < n < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpio87hupo.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpio87hupo.py\", line 27,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpio87hupo.py\", line\
    \ 20, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum_ = 0\n    for num in\
    \ arr[:k]:\n        if num < 100:\n            sum_ += num\n    return sum_\n\n\
    def check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert\
    \ candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    i = 0\n    count = 0\n \
    \   sum = 0\n    while count < k:\n        if arr[i] < 100:\n            sum +=\
    \ arr[i]\n            count += 1\n        i += 1\n    return sum\n\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxzuksf7e.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxzuksf7e.py\", line 35,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpxzuksf7e.py\", line\
    \ 29, in check\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # 1. brute force\n    #\
    \ 2. dynamic programming\n    # 3. greedy\n\n    # ex: [1, 2, 3, 4]\n    # dynamic\
    \ programming approach\n    # 1. last two digits are a two digit number\n    #\
    \ ex: [1, 2, 3, 4]\n    # ex: [1, 2, 3, 10]\n    # ex: [1, 2, 3, 100]\n    # 2.\
    \ last two digits are not a two digit number\n    # ex: [1, 2, 3, 4000]\n    #\
    \ ex: [1, 2, 3, 9]\n    # ex: [1, 2, 3, 5]\n    # base case:\n    # if k < 3:\n\
    \    #   return sum(arr[:k])\n    # dp[0] = sum(arr[:k])\n    # for i in range(1,\
    \ k):\n    #   if arr[k-i] < 10:\n    #       dp[i] = dp[i-1] + arr[k-i]\n   \
    \ #   else:\n    #       dp[i] = dp[i-1]\n    # return dp[k-1]\n\n    # dynamic\
    \ programming approach\n    # dp[i] = sum(arr[i:k])\n    # base case:\n    # if\
    \ k < 3:\n    #   return sum(arr[:k])\n    # dp[0] = sum(arr[:k])\n    # for i\
    \ in range(1, k):\n    #   if arr[k-i] < 10:\n    #       dp[i] = dp[i-1] + arr[k-i]\n\
    \    #   else:\n    #       dp[i] = dp[i-1]\n    # return dp[k-1]\n\n    # more\
    \ dynamic programming approach\n    # dp[i] = sum(arr[i:k])\n    # base case:\n\
    \    # if k < 3:\n    #   return sum(arr[:k])\n    # dp[0] = sum(arr[:k])\n  \
    \  # for i in range(1, k):\n    #   if arr[k\ndef check(candidate):\n    assert\
    \ candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\
    \ == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvb5ld6g5.py\", line\
    \ 73, in <module>\n    test_check()\n  File \"/tmp/tmpvb5ld6g5.py\", line 71,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpvb5ld6g5.py\", line\
    \ 64, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # todo: implement this\n\
    \    return 0\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyf_gzsnh.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpyf_gzsnh.py\", line 28,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpyf_gzsnh.py\", line\
    \ 21, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    s = 0\n    for i in range(min(k,\
    \ len(arr))):\n        if 10 <= arr[i] <= 99:\n            s += arr[i]\n    return\
    \ s\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n\
    \    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2rt537f9.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp2rt537f9.py\", line 31,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmp2rt537f9.py\", line\
    \ 24, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    res = 0\n    for el in arr[:k]:\n\
    \        if el // 100 == 0:\n            res += el\n    return res\n\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprrq62n7j.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmprrq62n7j.py\", line 31,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmprrq62n7j.py\", line\
    \ 24, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # O(n)\n    return sum(min(i,\
    \ 100) for i in arr[:k])\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq6981z4x.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpq6981z4x.py\", line 28,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpq6981z4x.py\", line\
    \ 22, in check\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x for x in arr[:k]\
    \ if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i for i in arr[:k]\
    \ if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(v for v in arr[:k]\
    \ if v < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    i = 0\n    res = 0\n   \
    \ while i < k:\n        num = str(arr[i])\n        if len(num) <= 2:\n       \
    \     res += arr[i]\n        i += 1\n    return res\ndef check(candidate):\n \
    \   assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for i in\
    \ range(k):\n        if 10 <= arr[i] < 100:\n            total += arr[i]\n   \
    \ return total\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnrex6z27.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpnrex6z27.py\", line 31,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpnrex6z27.py\", line\
    \ 24, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i for i in arr[:k]\
    \ if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoufsnqe1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpoufsnqe1.py\", line 28,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpoufsnqe1.py\", line\
    \ 21, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i for i in arr[:k]\
    \ if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for i in\
    \ range(k):\n        if arr[i] <= 99:\n            total += arr[i]\n    return\
    \ total\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) ==\
    \ 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    k = min(k, len(arr))\n \
    \   sum = 0\n    for i in range(k):\n        num = str(arr[i])\n        if len(num)\
    \ <= 2:\n            sum += arr[i]\n    return sum\n\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    s = 0\n    for i in range(k):\n\
    \        if len(str(arr[i])) <= 2:\n            s += arr[i]\n    return s\n\n\
    def check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert\
    \ candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    k = min(k, len(arr))\n \
    \   res = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n     \
    \       res += arr[i]\n    return res\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x for x in arr[:k]\
    \ if x <= 99)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    res = 0\n    for i in range(min(k,\
    \ len(arr))):\n        if len(str(arr[i])) <= 2:\n            res += arr[i]\n\
    \    return res\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    i = 0\n    val = 0\n   \
    \ while i < k:\n        if 100 > arr[i] >= 10:\n            val += arr[i]\n  \
    \      i += 1\n    return val\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphizk8fi9.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmphizk8fi9.py\", line 33,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmphizk8fi9.py\", line\
    \ 26, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Initialize the sum\n \
    \   s = 0\n\n    # Loop through the first k elements\n    for i in range(k):\n\
    \        # Find the number of digits in the current number\n        d = 0\n  \
    \      while arr[i] > 0:\n            arr[i] //= 10\n            d += 1\n\n  \
    \      # If at most two digits in the number, add to the sum\n        if d <=\
    \ 2:\n            s += arr[i]\n\n    return s\ndef check(candidate):\n    assert\
    \ candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\
    \ == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprnont0mr.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmprnont0mr.py\", line 41,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmprnont0mr.py\", line\
    \ 34, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(filter(lambda\
    \ x: x < 100, arr[:k]))\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x for x in arr[:k]\
    \ if x <= 99)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i for i in arr[:k]\
    \ if i < 100)\n\n\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x for x in arr[:k]\
    \ if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    def one_or_two_digits(n:\
    \ int) -> bool:\n        return (n < 10) or (n < 100)\n\n    def count_digits(n:\
    \ int) -> int:\n        if n < 10:\n            return 1\n        elif n < 100:\n\
    \            return 2\n        else:\n            return 3\n\n    # This doesn't\
    \ work because we don't know the size of k\n    # return sum(n for n in arr[:k]\
    \ if one_or_two_digits(n))\n\n    # Instead we can just add up each element of\
    \ arr[:k] until we hit more than 2 digits\n    i = 0\n    sum = 0\n    while i\
    \ < k:\n        if one_or_two_digits(arr[i]):\n            sum += arr[i]\n   \
    \     i += 1\n    return sum\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i for i in arr[:k]\
    \ if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x for x in arr[:k]\
    \ if x < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    res = 0\n    for n in arr[:k]:\n\
    \        if n < 100:\n            res += n\n    return res\n\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i for i in arr[:k]\
    \ if i < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    k = min(k, len(arr))\n \
    \   return sum(val for val in arr[:k] if val // 10 != 0 and val // 100 == 0)\n\
    \ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   \
    \ assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgk6i45me.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgk6i45me.py\", line 28,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpgk6i45me.py\", line\
    \ 21, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n for n in arr[:k]\
    \ if n < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(val for val in\
    \ arr[:k] if val < 100)\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    count = 0\n    for num in\
    \ arr[:k]:\n        count += num if num < 100 else num // 100\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   \
    \ assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnfathhdk.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpnfathhdk.py\", line 31,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpnfathhdk.py\", line\
    \ 25, in check\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(ele for ele in\
    \ arr[:k] if ele < 100)\n\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for i in\
    \ range(k):\n        total += arr[i] // 100 + (arr[i] % 100) // 10 + arr[i] %\
    \ 10\n    return total\ndef check(candidate):\n    assert candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm0z_kf08.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm0z_kf08.py\", line 29,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpm0z_kf08.py\", line\
    \ 22, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i for i in arr[:k]\
    \ if i < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num for num in\
    \ arr[:k] if num < 100)\n\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i for i in arr[:k]\
    \ if len(str(i)) <= 2)\ndef check(candidate):\n    assert candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i for i in arr[:k]\
    \ if i < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(int(i) for i\
    \ in map(str, arr[:k]) if len(i) < 3)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Number of values that\
    \ are within the constraint (at most 2 digits)\n    k_adjusted = 0\n    # Sum\
    \ of the elements that fall within the constraint\n    sum_two_digits = 0\n\n\
    \    for i in range(k):\n        # If the element is 2 digits or less, increment\
    \ k_adjusted and sum_two_digits\n        if arr[i] // 100 == 0:\n            k_adjusted\
    \ += 1\n            sum_two_digits += arr[i]\n\n    # Return the result\n    return\
    \ sum_two_digits\n\n\ndef check(candidate):\n    assert candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo286txjx.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpo286txjx.py\", line 40,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpo286txjx.py\", line\
    \ 33, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n for n in arr[:k]\
    \ if n < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    temp = 0\n    k = min(k,\
    \ len(arr))\n    for i in range(k):\n        if arr[i] < 100:\n            temp\
    \ += arr[i]\n    return temp\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i for i in arr[:k]\
    \ if i <= 99)\n\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(arr[i] for i\
    \ in range(k) if arr[i] <= 99)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x for x in arr[:k]\
    \ if x < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    def has_two_digits(num:\
    \ int) -> bool:\n        if num < 10:\n            return False\n        elif\
    \ num >= 10 and num < 100:\n            return True\n        else:\n         \
    \   return False\n\n    sum = 0\n    for i in range(k):\n        if has_two_digits(arr[i]):\n\
    \            sum += arr[i]\n    return sum\ndef check(candidate):\n    assert\
    \ candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\
    \ == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1bzhmc6q.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp1bzhmc6q.py\", line 38,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmp1bzhmc6q.py\", line\
    \ 31, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(map(int, [el\
    \ for el in arr[:k] if len(str(el)) <= 2]))\n\ndef check(candidate):\n    assert\
    \ candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\
    \ == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num for num in\
    \ arr[:k] if num < 100)\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n for n in arr[:k]\
    \ if n < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(elem for elem\
    \ in arr[:k] if len(str(elem)) <= 2)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x for x in arr[:k]\
    \ if x < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    count = 0\n    for i in\
    \ range(k):\n        if arr[i] > 9 and arr[i] < 100:\n            count += arr[i]\n\
    \    return count\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpybif_74z.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpybif_74z.py\", line 31,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpybif_74z.py\", line\
    \ 24, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x for x in arr[:k]\
    \ if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    count = 0\n    for i in\
    \ range(k):\n        if len(str(arr[i])) <= 2:\n            count += arr[i]\n\
    \    return count\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    count = 0\n    for num in\
    \ arr[:k]:\n        if num // 10 == 0:\n            count += num\n        elif\
    \ num // 100 == 0:\n            count += num\n    return count\n\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppspp05gp.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppspp05gp.py\", line 33,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmppspp05gp.py\", line\
    \ 26, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for i in\
    \ range(k):\n        if arr[i] >= 100:\n            continue\n        else:\n\
    \            total += arr[i]\n    return total\n\ndef check(candidate):\n    assert\
    \ candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\
    \ == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num for num in\
    \ arr[:k] if num <= 99)\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for i in\
    \ range(k):\n        if arr[i] < 100:\n            total += arr[i]\n    return\
    \ total\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) ==\
    \ 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    res = 0\n    for i in range(min(k,\
    \ len(arr))):\n        if arr[i] < 100:\n            res += arr[i]\n    return\
    \ res\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n\
    \    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    ctr = 0\n    count = 0\n\
    \    for i in range(k):\n        if count == 2:\n            break\n        if\
    \ arr[i] < 10:\n            ctr += arr[i]\n            count += 1\n        else:\n\
    \            ctr += arr[i] % 10\n            count += 1\n    return ctr\n\ndef\
    \ check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert\
    \ candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9vaf9o2v.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp9vaf9o2v.py\", line 38,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmp9vaf9o2v.py\", line\
    \ 31, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    i = 0\n    _sum = 0\n  \
    \  while i < k:\n        if arr[i] < 100:\n            _sum += arr[i]\n      \
    \  i += 1\n    return _sum\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    if len(arr) == 1:\n    \
    \    return arr[0]\n    s = 0\n    for num in arr[:k]:\n        if len(str(num))\
    \ <= 2:\n            s += num\n    return s\n\ndef check(candidate):\n    assert\
    \ candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\
    \ == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    count = 0\n    for num in\
    \ arr[:k]:\n        num_str = str(num)\n        if len(num_str) == 1 or len(num_str)\
    \ == 2:\n            count += num\n    return count\n\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(filter(lambda\
    \ x: x < 100, arr[:k]))\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(int(num) for\
    \ num in map(str, arr[:k]) if len(num) < 3)\n\ndef check(candidate):\n    assert\
    \ candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\
    \ == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(el for el in\
    \ arr[:k] if el < 100)\n\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for num in\
    \ arr[:k]:\n        if abs(num) < 100:\n            total += num\n    return total\n\
    \ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   \
    \ assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(min(i, 99) for\
    \ i in arr[:k])\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd5cqcbv4.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpd5cqcbv4.py\", line 27,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpd5cqcbv4.py\", line\
    \ 21, in check\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(item for item\
    \ in arr[:k] if len(str(item)) <= 2)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for i in\
    \ range(k):\n        if len(str(arr[i])) < 3:\n            total += arr[i]\n \
    \   return total\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    s = 0\n    for el in arr[:k]:\n\
    \        if el < 100:\n            s += el\n    return s\n\n\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    count = 0\n    for i in\
    \ range(k):\n        if 10 <= arr[i] <= 99:\n            count += arr[i]\n   \
    \ return count\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeip7hcku.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpeip7hcku.py\", line 30,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpeip7hcku.py\", line\
    \ 23, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i for i in arr[:k]\
    \ if i < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    elements_sum = 0\n    for\
    \ element in arr[:k]:\n        if len(str(element)) <= 2:\n            elements_sum\
    \ += element\n    return elements_sum\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # return sum(el for el in\
    \ arr[:k] if el < 100)\n    n = 0\n    res = 0\n    while n < k:\n        res\
    \ += arr[n] if arr[n] < 100 else 0\n        n += 1\n    return res\n\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    n = 0\n    for i in range(k):\n\
    \        if len(str(arr[i])) <= 2:\n            n += arr[i]\n    return n\n\n\
    def check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert\
    \ candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(filter(lambda\
    \ x: x < 100, arr[:k]))\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num for num in\
    \ arr[:k] if num < 100)\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum = 0\n    for x in arr[:k]:\n\
    \        # sum of digits is always less than length of number\n        if x <\
    \ 10:\n            sum += x\n        elif x < 100:\n            sum += x // 10\
    \ + x % 10\n    return sum\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuifu67p1.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpuifu67p1.py\", line 34,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpuifu67p1.py\", line\
    \ 29, in check\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # sum elements with 2 digits\
    \ from start of list\n    return sum(x for x in arr[:k] if 10 <= x <= 99)\n\n\
    def check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert\
    \ candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdglbx02d.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpdglbx02d.py\", line 28,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpdglbx02d.py\", line\
    \ 21, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for i in\
    \ range(k):\n        total += arr[i] if arr[i] < 100 else 100\n    return total\n\
    \ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   \
    \ assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeluoy0m8.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpeluoy0m8.py\", line 30,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpeluoy0m8.py\", line\
    \ 24, in check\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    def helper(num: int) ->\
    \ int:\n        n = 0\n        while num > 0:\n            num = num // 10\n \
    \           n += 1\n        return n\n\n    ans = 0\n    for i in range(k):\n\
    \        n = helper(arr[i])\n        if n <= 2:\n            ans += arr[i]\n \
    \   return ans\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n for n in arr[:k]\
    \ if n < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum_ = 0\n    for i in range(k):\n\
    \        if arr[i] >= 10 and arr[i] < 100:\n            sum_ += arr[i]\n    return\
    \ sum_\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n\
    \    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphi6v5u_z.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphi6v5u_z.py\", line 30,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmphi6v5u_z.py\", line\
    \ 23, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    out = 0\n    for i in range(k):\n\
    \        if arr[i] < 100:\n            out += arr[i]\n    return out\n\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # return sum(x for x in\
    \ arr[:k] if x < 100)\n    # return sum(min(100, x) for x in arr[:k])\n    # return\
    \ sum(x if x < 100 else 100 for x in arr[:k])\n    return sum(x if x < 100 else\
    \ 100 for x in arr[:k])\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjgxx8a1a.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpjgxx8a1a.py\", line 30,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpjgxx8a1a.py\", line\
    \ 24, in check\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    count = 0\n    for i in\
    \ range(k):\n        if arr[i] < 100:\n            count += arr[i]\n    return\
    \ count\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n\
    \    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    k = min(k, len(arr))\n \
    \   total = 0\n    for n in arr[:k]:\n        total += n if n < 100 else 99\n\
    \    return total\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc_knqg9e.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpc_knqg9e.py\", line 31,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpc_knqg9e.py\", line\
    \ 25, in check\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    s = 0\n    for i in range(k):\n\
    \        if arr[i] < 100:\n            s += arr[i]\n    return s\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    count = 0\n    digits =\
    \ 0\n    for num in arr:\n        while num > 0:\n            num //= 10\n   \
    \         digits += 1\n        if digits <= 2:\n            count += num\n   \
    \     digits = 0\n        k -= 1\n        if k == 0:\n            break\n    return\
    \ count\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n\
    \    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp05jgqtgq.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp05jgqtgq.py\", line 38,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmp05jgqtgq.py\", line\
    \ 31, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(\n        el\
    \ if el < 100 else 100\n        for el in arr[:k]\n    )\n\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp94xsvpom.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp94xsvpom.py\", line 30,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmp94xsvpom.py\", line\
    \ 24, in check\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(map(lambda n:\
    \ n if n < 100 else 0, arr[:k]))\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    count = 0\n    for i in\
    \ range(k):\n        if arr[i] > 9 and arr[i] < 100:\n            count += arr[i]\n\
    \    return count\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpybif_74z.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpybif_74z.py\", line 31,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpybif_74z.py\", line\
    \ 24, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    answer = 0\n    for i in\
    \ range(k):\n        if len(str(arr[i])) <= 2:\n            answer += arr[i]\n\
    \    return answer\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n     \
    \   return 0\n\n    count = 0\n    for n in arr[:k]:\n        num_digits = len(str(n))\n\
    \        if num_digits <= 2:\n            count += n\n\n    return count\n\ndef\
    \ check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert\
    \ candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(elem for elem\
    \ in arr[:k] if elem < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(e for e in arr[:k]\
    \ if e < 100)\n\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x for x in arr[:k]\
    \ if x < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    index = 0\n\
    \    while index < k:\n        num = arr[index]\n        if num < 10:\n      \
    \      total += num\n        elif num < 100:\n            total += num % 10 +\
    \ num // 10\n        index += 1\n    return total\n\ndef check(candidate):\n \
    \   assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwdo75tom.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpwdo75tom.py\", line 36,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpwdo75tom.py\", line\
    \ 31, in check\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    l = 0\n    r = 0\n    sum\
    \ = 0\n    while r < k:\n        if len(str(arr[r])) > 2:\n            r += 1\n\
    \        else:\n            sum += arr[r]\n            r += 1\n            l +=\
    \ 1\n    return sum\n\ndef check(candidate):\n    assert candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(arr[i] for i\
    \ in range(k) if len(str(arr[i])) < 3)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoufsnqe1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpoufsnqe1.py\", line 28,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpoufsnqe1.py\", line\
    \ 21, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum = 0\n    for i in range(k):\n\
    \        if arr[i] < 100:\n            sum += arr[i]\n    return sum\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i for i in arr[:k]\
    \ if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num for num in\
    \ arr[:k] if len(str(num)) < 3)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(e for e in arr[:k]\
    \ if e < 100)\n\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(arr[i] for i\
    \ in range(k) if 10 <= arr[i] <= 99)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4o_r8m0.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpw4o_r8m0.py\", line 28,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpw4o_r8m0.py\", line\
    \ 21, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for i in\
    \ range(k):\n        if len(str(arr[i])) < 3:\n            total += arr[i]\n \
    \   return total\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum_ = 0\n    for i in range(k):\n\
    \        if 0 <= arr[i] <= 99:\n            sum_ += arr[i]\n    return sum_\n\n\
    def check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert\
    \ candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp975921uv.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp975921uv.py\", line 31,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmp975921uv.py\", line\
    \ 24, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(filter(lambda\
    \ x: x <= 99, arr[:k]))\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for num in\
    \ arr[:k]:\n        if num < 100:\n            total += num\n    return total\n\
    \ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   \
    \ assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(a for a in arr[:k]\
    \ if a < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(filter(lambda\
    \ x: x < 100, arr[:k]))\ndef check(candidate):\n    assert candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    cnt = 0\n    sums = 0\n\
    \    for num in arr:\n        if cnt == k:\n            break\n        if num\
    \ < 100:\n            sums += num\n            cnt += 1\n    return sums\n\ndef\
    \ check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert\
    \ candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2pw_xyfs.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp2pw_xyfs.py\", line 35,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmp2pw_xyfs.py\", line\
    \ 29, in check\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    s = 0\n    for i in range(min(k,\
    \ len(arr))):\n        if arr[i] >= 100:\n            s += arr[i]\n        elif\
    \ arr[i] >= 10:\n            s += arr[i]\n        else:\n            s += arr[i]\n\
    \    return s\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmpkvv111.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpmpkvv111.py\", line 34,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpmpkvv111.py\", line\
    \ 28, in check\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    out = 0\n    for i in range(k):\n\
    \        if arr[i] < 10:\n            out += arr[i]\n        elif arr[i] < 100:\n\
    \            out += arr[i] % 10 + (arr[i] // 10)\n    return out\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiojutohk.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpiojutohk.py\", line 32,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpiojutohk.py\", line\
    \ 27, in check\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x for x in arr[:k]\
    \ if x < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x for x in arr[:k]\
    \ if x < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    count = 0\n    res = 0\n\
    \    while count < k:\n        element = arr[count]\n        if len(str(element))\
    \ <= 2:\n            res += element\n        count += 1\n    return res\n\ndef\
    \ check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert\
    \ candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n for n in arr[:k]\
    \ if n < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n for n in arr[:k]\
    \ if 0 <= n <= 99)\n\ndef check(candidate):\n    assert candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiv2jzko9.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpiv2jzko9.py\", line 27,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpiv2jzko9.py\", line\
    \ 20, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum = 0\n    for i in range(k):\n\
    \        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum\n\
    \ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   \
    \ assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x for x in arr[:k]\
    \ if x < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i for i in arr[:k]\
    \ if len(str(i)) <= 2)\ndef check(candidate):\n    assert candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum = 0\n    for i in range(k):\n\
    \        if arr[i] <= 99:\n            sum += arr[i]\n    return sum\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    count = 0\n    n = len(arr)\n\
    \    for i in range(k):\n        if arr[i] < 100:\n            count += arr[i]\n\
    \        else:\n            count += arr[i] // 100 + arr[i] % 100 // 10\n    return\
    \ count\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) ==\
    \ 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcvx8son7.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpcvx8son7.py\", line 34,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpcvx8son7.py\", line\
    \ 28, in check\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(filter(lambda\
    \ x: x < 100, arr[:k]))\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return\
    \ 0\n    total = 0\n    for i in range(k):\n        if arr[i] > 9 and arr[i] <\
    \ 100:\n            total += arr[i]\n    return total\n\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnw8yhscu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpnw8yhscu.py\", line 33,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpnw8yhscu.py\", line\
    \ 26, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    res = 0\n    for i in range(k):\n\
    \        if len(str(arr[i])) <= 2:\n            res += arr[i]\n    return res\n\
    \ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   \
    \ assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x for x in arr[:k]\
    \ if x < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for idx,\
    \ num in enumerate(arr):\n        if idx == k:\n            break\n        if\
    \ len(str(num)) <= 2:\n            total += num\n    return total\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(val for val in\
    \ arr[:k] if val < 100)\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(elem for elem\
    \ in arr[:k] if elem < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x for x in arr[:k]\
    \ if 0 <= x <= 99)\n\n\ndef check(candidate):\n    assert candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt_32enkh.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpt_32enkh.py\", line 28,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpt_32enkh.py\", line\
    \ 21, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    two_digit_sum = 0\n    curr_index\
    \ = 0\n    while curr_index < k:\n        num = arr[curr_index]\n        if len(str(num))\
    \ > 2:\n            while num > 0:\n                two_digit_sum += num % 100\n\
    \                num //= 100\n        else:\n            two_digit_sum += num\n\
    \        curr_index += 1\n    return two_digit_sum\ndef check(candidate):\n  \
    \  assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplivkr176.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmplivkr176.py\", line 37,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmplivkr176.py\", line\
    \ 31, in check\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    res = 0\n    for i in range(k):\n\
    \        if arr[i] <= 99:\n            res += arr[i]\n    return res\n\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n for n in arr[:k]\
    \ if n < 100)\n\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    _sum = 0\n    for i in range(k):\n\
    \        if 0 <= arr[i] <= 9:\n            _sum += arr[i]\n        elif 10 <=\
    \ arr[i] <= 99:\n            _sum += arr[i]\n    return _sum\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp77jcnafx.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp77jcnafx.py\", line 32,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmp77jcnafx.py\", line\
    \ 25, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x for x in arr[:k]\
    \ if x >= 10 and x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjrbeiydt.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpjrbeiydt.py\", line 28,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpjrbeiydt.py\", line\
    \ 21, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for i in\
    \ range(k):\n        if arr[i] > 99:\n            total += arr[i] // 100\n   \
    \     elif arr[i] > 9:\n            total += arr[i] // 10\n        else:\n   \
    \         total += arr[i]\n    return total\n\ndef check(candidate):\n    assert\
    \ candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\
    \ == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4waz201k.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp4waz201k.py\", line 35,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmp4waz201k.py\", line\
    \ 29, in check\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    counter = 0\n    total =\
    \ 0\n    while counter < k:\n        if len(str(arr[counter])) > 2:\n        \
    \    counter += 1\n            continue\n        total += arr[counter]\n     \
    \   counter += 1\n    return total\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    i = 0\n    s = 0\n    while\
    \ i < k:\n        if arr[i] > 9 and arr[i] < 100:\n            s += arr[i]\n \
    \       i += 1\n    return s\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsya1mqqq.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpsya1mqqq.py\", line 33,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpsya1mqqq.py\", line\
    \ 26, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    if len(arr) > 100 or k >\
    \ len(arr):\n        raise ValueError('Invalid input')\n\n    return sum(n for\
    \ n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum = 0\n    for i in range(k):\n\
    \        if arr[i] < 100:\n            sum += arr[i]\n    return sum\n\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    count = 0\n    for i in\
    \ range(k):\n        if arr[i] < 100:\n            count += arr[i]\n    return\
    \ count\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n\
    \    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum = 0\n    for num in\
    \ arr[:k]:\n        if num < 100:\n            sum += num\n    return sum\ndef\
    \ check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert\
    \ candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i for i in arr[:k]\
    \ if i < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for i in\
    \ range(k):\n        element = arr[i]\n        if element < 10:\n            total\
    \ += element\n        elif element < 100:\n            total += element // 10\
    \ + element % 10\n    return total\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_813hfam.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp_813hfam.py\", line 34,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmp_813hfam.py\", line\
    \ 29, in check\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n for n in arr[:k]\
    \ if n < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n if n < 100\
    \ else 99 for n in arr[:k])\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq4o7co5i.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpq4o7co5i.py\", line 27,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpq4o7co5i.py\", line\
    \ 21, in check\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for i in\
    \ range(k):\n        if 99 < arr[i] < 1000:\n            total += arr[i]\n   \
    \ return total\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb4wk6pg4.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpb4wk6pg4.py\", line 31,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpb4wk6pg4.py\", line\
    \ 24, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x for x in arr[:k]\
    \ if x < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Sum of first K elements\n\
    \    k_sum = sum(arr[:k])\n\n    # Add back in the values of the remaining items\
    \ if they don't have more than 2 digits\n    remaining_items = [item for item\
    \ in arr[k:] if item <= 99]\n    remaining_sum = sum(remaining_items)\n\n    return\
    \ k_sum + remaining_sum\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ldlje3r.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp1ldlje3r.py\", line 34,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmp1ldlje3r.py\", line\
    \ 27, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(filter(lambda\
    \ x: x <= 99, arr[:k]))\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    res = 0\n    for idx, el\
    \ in enumerate(arr):\n        if idx < k and 9 < el < 100:\n            res +=\
    \ el\n    return res\n\ndef check(candidate):\n    assert candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9hqxa4ko.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9hqxa4ko.py\", line 31,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmp9hqxa4ko.py\", line\
    \ 24, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(el for el in\
    \ arr[:k] if el < 100)\n\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i for i in arr[:k]\
    \ if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    answer = 0\n    for i in\
    \ range(k):\n        if arr[i] >= 10 and arr[i] < 100:\n            answer +=\
    \ arr[i]\n    return answer\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprct6s2x7.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmprct6s2x7.py\", line 30,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmprct6s2x7.py\", line\
    \ 23, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    digit_count = 0\n    sum\
    \ = 0\n    for i in range(k):\n        if digit_count == 2:\n            break\n\
    \        elif arr[i] >= 100:\n            sum += arr[i]\n            digit_count\
    \ += 1\n        elif arr[i] < 100:\n            sum += arr[i]\n    return sum\n\
    \ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   \
    \ assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd5blcvmy.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpd5blcvmy.py\", line 37,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpd5blcvmy.py\", line\
    \ 31, in check\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num for num in\
    \ arr[:k] if num < 100)\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x for x in arr[:k]\
    \ if x // 10 < 1 or x // 100 < 1)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    answer = 0\n    for i in\
    \ range(k):\n        if arr[i] < 100:\n            answer += arr[i]\n    return\
    \ answer\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) ==\
    \ 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(filter(lambda\
    \ x: 10 > x > 0, arr[:k]))\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprasa8r1z.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmprasa8r1z.py\", line 28,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmprasa8r1z.py\", line\
    \ 21, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    if not arr:\n        return\
    \ 0\n\n    counter = 0\n    curr_sum = 0\n    for i in range(len(arr)):\n    \
    \    if counter == k:\n            break\n        if len(str(arr[i])) <= 2:\n\
    \            curr_sum += arr[i]\n            counter += 1\n    return curr_sum\n\
    \n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   \
    \ assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp45554o62.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp45554o62.py\", line 39,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmp45554o62.py\", line\
    \ 33, in check\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    index = 0\n\
    \    while index < k:\n        if arr[index] < 100:\n            total += arr[index]\n\
    \        index += 1\n    return total\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    if len(arr) < 1 or len(arr)\
    \ > 100:\n        raise ValueError(\"Length of array must be between 1 and 100\"\
    )\n    if k < 1 or k > len(arr):\n        raise ValueError(\"Value of k must be\
    \ between 1 and the length of the array\")\n\n    k_elements = arr[:k]\n    total\
    \ = 0\n    for num in k_elements:\n        if num < 10:\n            total +=\
    \ num\n        elif num < 100:\n            total += num % 10 + num // 10\n  \
    \      else:\n            total += num % 10 + num // 10 % 10 + num // 100\n  \
    \  return total\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp36_iet8.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpp36_iet8.py\", line 41,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpp36_iet8.py\", line\
    \ 35, in check\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for el in\
    \ arr[:k]:\n        if el < 100:\n            total += el\n    return total\n\n\
    def check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert\
    \ candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(el for el in\
    \ arr[:k] if el < 100)\n\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    k = min(k, len(arr))\n \
    \   return sum(min(num, 99) for num in arr[:k])\n\ndef check(candidate):\n   \
    \ assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\
    \ == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvn99o5bv.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpvn99o5bv.py\", line 28,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpvn99o5bv.py\", line\
    \ 22, in check\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return\
    \ 0\n    arr = arr[:k]\n    return sum(x for x in arr if x < 100)\n\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num for num in\
    \ arr[:k] if num < 100)\n\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n for n in arr[:k]\
    \ if n < 100)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x for x in arr[:k]\
    \ if 10 <= x <= 99)\n\ndef check(candidate):\n    assert candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm68st3cy.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpm68st3cy.py\", line 27,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpm68st3cy.py\", line\
    \ 20, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    i = 0\n    j = k\n    sum\
    \ = 0\n    while j > 0:\n        if arr[i] < 10:\n            sum += arr[i]\n\
    \            j -= 1\n        elif arr[i] < 100:\n            sum += arr[i]\n \
    \           j -= 1\n        else:\n            j -= 1\n        i += 1\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n\
    \    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    l = len(arr)\n    i = 0\n\
    \    total = 0\n    while i < k and i < l:\n        if arr[i] < 100:\n       \
    \     total += arr[i]\n        i += 1\n    return total\n\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(elem for elem\
    \ in arr[:k] if 0 <= elem <= 99)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphueuax_3.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmphueuax_3.py\", line 27,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmphueuax_3.py\", line\
    \ 20, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i for i in arr[:k]\
    \ if i <= 99)\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2)\
    \ == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert\
    \ candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    count = 0\n    i = 0\n \
    \   while count < k:\n        if len(str(arr[i])) <= 2:\n            count +=\
    \ 1\n        i += 1\n    return sum(arr[:i])\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\
    \ == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0a3s9xtg.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp0a3s9xtg.py\", line 34,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmp0a3s9xtg.py\", line\
    \ 28, in check\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    res = 0\n    i = 0\n   \
    \ while i < k:\n        if arr[i] < 100:\n            res += arr[i]\n        i\
    \ += 1\n    return res\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820894
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i for i in arr[:k]\
    \ if i <= 99)\n\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820893
