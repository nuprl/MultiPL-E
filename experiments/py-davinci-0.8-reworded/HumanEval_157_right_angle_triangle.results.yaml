language: py
name: HumanEval_157_right_angle_triangle
results:
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # YOUR CODE HERE\n    sides = [a, b, c]\n\
    \    hypotenuse = max(sides)\n    other_sides = [s for s in sides if s != hypotenuse]\n\
    \    return hypotenuse ** 2 == other_sides[0] ** 2 + other_sides[1] ** 2\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdkv8q6ve.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpdkv8q6ve.py\", line 34,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdkv8q6ve.py\"\
    , line 24, in check\n    assert candidate(2, 2, 2) == False\n  File \"/tmp/tmpdkv8q6ve.py\"\
    , line 17, in right_angle_triangle\n    return hypotenuse ** 2 == other_sides[0]\
    \ ** 2 + other_sides[1] ** 2\nIndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # Put your code here\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiixk1nw9.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpiixk1nw9.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpiixk1nw9.py\"\
    , line 18, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwkf3y_hf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwkf3y_hf.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpwkf3y_hf.py\"\
    , line 19, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    return a\
    \ ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return c**2 == a**2 + b**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfkxzviki.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfkxzviki.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpfkxzviki.py\"\
    , line 19, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # TODO: implement me\n    pass\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpewv60cdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpewv60cdp.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpewv60cdp.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    return a\
    \ ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    angle = [a, b, c]\n    angle.sort()\n    if\
    \ angle[0]**2 + angle[1]**2 == angle[2]**2:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a ** 2 + b ** 2 == c ** 2:\n        return\
    \ True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9vu1z1p6.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9vu1z1p6.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp9vu1z1p6.py\"\
    , line 22, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # TODO: use the triangle inequality theorem\
    \ to implement this\n    if (a ** 2 + b ** 2 == c ** 2) or (a ** 2 + c ** 2 ==\
    \ b ** 2) or (c ** 2 + b ** 2 == a ** 2):\n        return True\n    else:\n  \
    \      return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # Write your code here\n    c = max(a, b,\
    \ c)\n    if a*a + b*b == c*c:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpag8tkqef.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpag8tkqef.py\", line 34,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpag8tkqef.py\"\
    , line 23, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a**2 + b**2 == c**2:\n        return True\n\
    \    elif b**2 + c**2 == a**2:\n        return True\n    elif a**2 + c**2 == b**2:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if isinstance(a, (int, float)) and isinstance(b,\
    \ (int, float)) and isinstance(c, (int, float)):\n        return abs(a**2 + b**2\
    \ - c**2) < 1e-5 or abs(a**2 + c**2 - b**2) < 1e-5 or abs(b**2 + c**2 - a**2)\
    \ < 1e-5\n    else:\n        raise TypeError(\"Input must be a number\")\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if (a ** 2 + b ** 2 == c ** 2) or (b ** 2\
    \ + c ** 2 == a ** 2) or (c ** 2 + a ** 2 == b ** 2):\n        return True\n \
    \   else:\n        return False\n    # Solution from teacher\n    x, y, z = sorted([a,\
    \ b, c])\n    return x ** 2 + y ** 2 == z ** 2\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a == 0 or b == 0 or c == 0:\n        return\
    \ False\n    else:\n        if (a*a + b*b == c*c) or (a*a + c*c == b*b) or (b*b\
    \ + c*c == a*a):\n            return True\n        else:\n            return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqbd_89w_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqbd_89w_.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpqbd_89w_.py\"\
    , line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return (a * a + b * b == c * c) or (a * a\
    \ + c * c == b * b) or (c * c + b * b == a * a)\n\ndef check(candidate):\n   \
    \ assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    arr = [a, b, c]\n    arr.sort()\n    return\
    \ (arr[0] ** 2) + (arr[1] ** 2) == (arr[2] ** 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return (a ** 2 + b ** 2 == c ** 2) or (a **\
    \ 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # Your code here\n    if a**2 + b**2 == c**2:\n\
    \        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1a7iefr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpo1a7iefr.py\", line 34,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpo1a7iefr.py\"\
    , line 23, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return False\n\ndef check(candidate):\n  \
    \  assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjoo7o5b0.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjoo7o5b0.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjoo7o5b0.py\"\
    , line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a**2 + b**2 == c**2:\n        return True\n\
    \    elif a**2 + c**2 == b**2:\n        return True\n    elif b**2 + c**2 == a**2:\n\
    \        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return c ** 2 == a ** 2 + b ** 2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjii0c2mg.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjii0c2mg.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjii0c2mg.py\"\
    , line 18, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    max_side = max(a, b, c)\n    sum_of_other_two_sides\
    \ = sum(side for side in (a, b, c) if side != max_side)\n    return max_side **\
    \ 2 == sum_of_other_two_sides ** 2\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi971662u.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpi971662u.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpi971662u.py\"\
    , line 19, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # YOUR CODE HERE\n    pass\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmxua7iqu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmxua7iqu.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpmxua7iqu.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # angle = np.arccos((a*a + b*b - c*c)/(2*a*b))\n\
    \    # if angle == 90:\n    #     return True\n    # else:\n    #     return False\n\
    \    # Fails due to floating point error\n    return a*a + b*b == c*c\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa8qo9tl_.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpa8qo9tl_.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpa8qo9tl_.py\"\
    , line 24, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return all([a > 0, b > 0, c > 0, a**2 + b**2\
    \ == c**2])\n\nassert right_angle_triangle(3, 4, 5)\nassert not right_angle_triangle(1,\
    \ 2, 3)\n \n\"\"\"\nProblem 4:\nFind the area of any polygon (Convex). \nArea\
    \ = 1/2 * x1 * y2 - x2 * y1 + ... + xn * y1 - yn * x1\nNote: For convex polygon,\
    \ there will be no intersection. \nAlso, counter clockwise is positive and clockwise\
    \ is negative.\n\"\"\"\nfrom typing import List\nimport numpy as np\nfrom numpy.polynomial.polynomial\
    \ import polyval\nfrom numpy.polynomial.polynomial import polyfromroots\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfo0_g07x.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpfo0_g07x.py\", line 44,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpfo0_g07x.py\"\
    , line 33, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820421
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    sides = [a, b, c]\n    hypotenuse = max(sides)\n\
    \    cathetus_1 = min(sides)\n    cathetus_2 = sum(sides) - hypotenuse - cathetus_1\n\
    \    if hypotenuse ** 2 == cathetus_1 ** 2 + cathetus_2 ** 2:\n        return\
    \ True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    return a**2\
    \ + b**2 == c**2\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if c**2 == a**2 + b**2:\n        return True\n\
    \    return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprvj374e0.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmprvj374e0.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmprvj374e0.py\"\
    , line 21, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    sides = [a, b, c]\n    sides.sort()\n    return\
    \ sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # YOUR CODE HERE\n    sides = [a, b, c]\n\
    \    sides.sort()\n    if sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2:\n  \
    \      return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # Your code here\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppyq5blfp.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmppyq5blfp.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppyq5blfp.py\"\
    , line 18, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a = abs(a)\n    b = abs(b)\n    c = abs(c)\n\
    \    if (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2):\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return a**2 + b**2 == c**2 or b**2 + c**2\
    \ == a**2 or c**2 + a**2 == b**2\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        return\
    \ False\n    sides = sorted([a, b, c])\n    return abs(pow(sides[0], 2) + pow(sides[1],\
    \ 2) - pow(sides[2], 2)) < .000001\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if (a**2 + b**2 == c**2) or (a**2 + c**2 ==\
    \ b**2) or (b**2 + c**2 == a**2):\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a ** 2 + b ** 2 == c ** 2:\n        return\
    \ True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpazynfhcy.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpazynfhcy.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpazynfhcy.py\"\
    , line 21, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # Calculate the maximum length side\n    max_side\
    \ = max(a, b, c)\n    # Calculate the sum of the other two sides\n    other_sides\
    \ = a + b + c - max_side\n    # Return the comparison\n    return max_side **\
    \ 2 == other_sides ** 2\n\n\ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3plnvo4n.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp3plnvo4n.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3plnvo4n.py\"\
    , line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    side_list = [a, b, c]\n    side_list.sort()\n\
    \    if side_list[0] * side_list[0] + side_list[1] * side_list[1] == side_list[2]\
    \ * side_list[2]:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptdoynibf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmptdoynibf.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptdoynibf.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmptdoynibf.py\"\
    , line 13, in right_angle_triangle\n    raise NotImplementedError()\nNotImplementedError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b,\
    \ int) or not isinstance(c, int):\n        raise TypeError(\"Arguments must be\
    \ integer\")\n    if a == 0 or b == 0 or c == 0:\n        raise ValueError(\"\
    Arguments must be greater than 0\")\n    sides = [a, b, c]\n    sides.sort()\n\
    \    if sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2:\n        return True\n\
    \    return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return (a**2) + (b**2) == (c**2)\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjwwv4ad3.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpjwwv4ad3.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjwwv4ad3.py\"\
    , line 19, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwkf3y_hf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwkf3y_hf.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpwkf3y_hf.py\"\
    , line 19, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    sides = [a, b, c]\n    sides.sort()\n    return\
    \ sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2\n    pass\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # TODO: Write solution here\n    if (a*a+b*b)==c*c\
    \ or (b*b+c*c)==a*a or (a*a+c*c)==b*b:\n        return True\n    else:\n     \
    \   return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a == 0 or b == 0 or c == 0:\n        return\
    \ False\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n\
    \        return True\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    def sqr(x):\n        return x * x\n    return\
    \ sqr(a) + sqr(b) == sqr(c) or sqr(a) + sqr(c) == sqr(b) or sqr(b) + sqr(c) ==\
    \ sqr(a)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n \
    \   assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    sides = [a, b, c]\n    sides.sort()\n    sides[0]**2\
    \ + sides[1]**2 == sides[2]**2\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgqi10tnk.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpgqi10tnk.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpgqi10tnk.py\"\
    , line 19, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # complete the function body\n    return\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9f7ujds1.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9f7ujds1.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp9f7ujds1.py\"\
    , line 18, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    hyp = max(a, b, c)\n    other_sides = min(a,\
    \ b, c) + min(abs(a - b), abs(a - c), abs(b - c))\n    return hyp**2 == other_sides**2\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeogsabab.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpeogsabab.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpeogsabab.py\"\
    , line 19, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a > b:\n        if a > c:\n           \
    \ if (a**2) == (b**2) + (c**2):\n                return True\n            else:\n\
    \                return False\n        else:\n            if (c**2) == (b**2)\
    \ + (a**2):\n                return True\n            else:\n                return\
    \ False\n    else:\n        if b > c:\n            if (b**2) == (a**2) + (c**2):\n\
    \                return True\n            else:\n                return False\n\
    \        else:\n            if (c**2) == (a**2) + (b**2):\n                return\
    \ True\n            else:\n                return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # answer here\n    x = [a, b, c]\n    x.sort()\n\
    \    if (x[0] ** 2) + (x[1] ** 2) == (x[2] ** 2):\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    raise NotImplementedError\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjowdlyy.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpwjowdlyy.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpwjowdlyy.py\"\
    , line 16, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpwjowdlyy.py\"\
    , line 13, in right_angle_triangle\n    raise NotImplementedError\nNotImplementedError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a > b and a > c:\n        return a**2 ==\
    \ b**2 + c**2\n    elif b > a and b > c:\n        return b**2 == a**2 + c**2\n\
    \    elif c > a and c > b:\n        return c**2 == a**2 + b**2\n    else:\n  \
    \      return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    d = [a, b, c]\n    d.sort()\n    if d[0]**2\
    \ + d[1]**2 == d[2]**2:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjrc896e1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjrc896e1.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjrc896e1.py\"\
    , line 18, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if c ** 2 == a ** 2 + b ** 2:\n        return\
    \ True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp71v1eijn.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp71v1eijn.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp71v1eijn.py\"\
    , line 22, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a > 0 and b > 0 and c > 0:\n        if\
    \ c ** 2 == a ** 2 + b ** 2:\n            return True\n        elif a ** 2 ==\
    \ b ** 2 + c ** 2:\n            return True\n        elif b ** 2 == a ** 2 + c\
    \ ** 2:\n            return True\n        else:\n            return False\n  \
    \  else:\n        return False\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    c = max(a, b, c)\n    a, b = min(a, b), (a\
    \ + b + c - min(a, b) - c)\n    if a ** 2 + b ** 2 == c ** 2:\n        return\
    \ True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5cj7t6ic.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp5cj7t6ic.py\", line 34,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp5cj7t6ic.py\"\
    , line 23, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjrc896e1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjrc896e1.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjrc896e1.py\"\
    , line 18, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    if a >\
    \ c:\n        a, c = c, a\n    if b > c:\n        b, c = c, b\n    if a**2 + b**2\
    \ == c**2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return (a ** 2 + b ** 2 == c ** 2) or (a **\
    \ 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return (a * a + b * b == c * c) or (a * a\
    \ + c * c == b * b) or (b * b + c * c == a * a)\n\n\ndef check(candidate):\n \
    \   assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # Find if given three sides form a right angle\
    \ triangle.\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2\
    \ == sides[2]**2\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # 1. rearrange the sides based on their length\n\
    \    # 2. check if the side that is the longest is the square of the sum of the\n\
    \    #    other two sides.\n    # 3. return a boolean value accordingly\n    return\
    \ max(a, b, c) == (min(a, b, c)**2 + middle(a, b, c)**2)**0.5\n    # NOTE: you\
    \ can also use the math.hypot function.\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpksswp8sw.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpksswp8sw.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpksswp8sw.py\"\
    , line 22, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpksswp8sw.py\"\
    , line 17, in right_angle_triangle\n    return max(a, b, c) == (min(a, b, c)**2\
    \ + middle(a, b, c)**2)**0.5\nNameError: name 'middle' is not defined\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return max(a, b, c)**2 == a**2 + b**2 + c**2\
    \ - max(a, b, c)**2\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a < 0 or b < 0 or c < 0:\n        return\
    \ False\n    if a > b:\n        a, b = b, a\n    if b > c:\n        b, c = c,\
    \ b\n    if a > b:\n        a, b = b, a\n    return c**2 == a**2 + b**2\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    longest_side = max(a, b, c)\n    others =\
    \ sorted([a, b, c])[:2]\n    return longest_side ** 2 == sum(i ** 2 for i in others)\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfznrdbrh.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpfznrdbrh.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpfznrdbrh.py\"\
    , line 18, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwkf3y_hf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwkf3y_hf.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpwkf3y_hf.py\"\
    , line 19, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    sides = sorted([a, b, c])\n    return (sides[0]\
    \ ** 2) + (sides[1] ** 2) == (sides[2] ** 2)\n \n \ndef check(candidate):\n  \
    \  assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    return a**2\
    \ + b**2 == c**2\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    side_list = [a, b, c]\n    side_list.sort()\n\
    \    if side_list[0] ** 2 + side_list[1] ** 2 == side_list[2] ** 2:\n        return\
    \ True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a == 0 or b == 0 or c == 0:\n        return\
    \ False\n    side_a, side_b, side_c = (sorted([a, b, c]))\n    return side_a **\
    \ 2 + side_b ** 2 == side_c ** 2\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1,\
    \ 2, 3))\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: 'True

    False

    '
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # Write your code here\n    maximum = max(a,\
    \ b, c)\n    # print(maximum)\n    if pow(maximum, 2) == pow(a, 2) + pow(b, 2)\
    \ + pow(c, 2) - pow(maximum, 2):\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n    raise NotImplementedError\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9duvvitr.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9duvvitr.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp9duvvitr.py\"\
    , line 18, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmp9duvvitr.py\"\
    , line 14, in right_angle_triangle\n    raise NotImplementedError\nNotImplementedError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    sides = sorted([a, b, c])\n    return sides[0]\
    \ ** 2 + sides[1] ** 2 == sides[2] ** 2\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return c ** 2 == a ** 2 + b ** 2\n\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp66o9kl2j.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp66o9kl2j.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp66o9kl2j.py\"\
    , line 20, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return (a ** 2 + b ** 2 == c ** 2) or (a **\
    \ 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2)\n\n@check50.check()\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxd9il5wu.py\", line\
    \ 15, in <module>\n    @check50.check()\nNameError: name 'check50' is not defined\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return (a**2 + b**2 == c**2) or (a**2 + c**2\
    \ == b**2) or (b**2 + c**2 == a**2)\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    sides = sorted([a, b, c])\n    return sides[0]\
    \ ** 2 + sides[1] ** 2 == sides[2] ** 2\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    sides = sorted([a, b, c])\n    return sides[0]\
    \ ** 2 + sides[1] ** 2 == sides[2] ** 2\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return max(a, b, c)**2 == a**2 + b**2 + c**2\
    \ - max(a, b, c)**2\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return abs(a ** 2 + b ** 2 - c ** 2) < 0.001\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdd19rw_m.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpdd19rw_m.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdd19rw_m.py\"\
    , line 19, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # convert to list to use sort()\n    sides\
    \ = [a, b, c]\n    sides.sort()\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2]\
    \ ** 2\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n   \
    \ assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # Find the longest side of the triangle\n\
    \    if a > b and a > c:\n        longest_side = a\n        other_sides = b, c\n\
    \    elif b > a and b > c:\n        longest_side = b\n        other_sides = a,\
    \ c\n    else:\n        longest_side = c\n        other_sides = a, b\n    # Pythagorean\
    \ theorem states that in any right triangle, the area of the \n    # square whose\
    \ side is the hypotenuse (the side opposite the right angle) \n    # is equal\
    \ to the sum of the areas of the squares whose sides are the two \n    # legs\
    \ (the two sides that meet at a right angle).\n    if longest_side ** 2 == other_sides[0]\
    \ ** 2 + other_sides[1] ** 2:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return a * a + b * b == c * c or b * b + c\
    \ * c == a * a or a * a + c * c == b * b\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # Write your code here\n    pass\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6pxdmugr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp6pxdmugr.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp6pxdmugr.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqbd_89w_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqbd_89w_.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpqbd_89w_.py\"\
    , line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    sides = [a, b, c]\n    sides.sort()\n    if\
    \ sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    raise NotImplementedError\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpplnaamfk.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpplnaamfk.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpplnaamfk.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpplnaamfk.py\"\
    , line 13, in right_angle_triangle\n    raise NotImplementedError\nNotImplementedError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    x, y, z = sorted([a, b, c])\n    return x\
    \ ** 2 + y ** 2 == z ** 2\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    side_arr = [a, b, c]\n    side_arr.sort()\n\
    \    return side_arr[0]**2 + side_arr[1]**2 == side_arr[2]**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a == b and a == c:\n        return False\n\
    \    else:\n        return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2\
    \ + c**2 == a**2)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # check if the three sides are integer\n \
    \   if not isinstance(a, int) or not isinstance(b, int) or not isinstance(c, int):\n\
    \        raise TypeError('The three sides of a triangle must be integer!')\n \
    \   \n    # check if the three sides are positive\n    if a <= 0 or b <= 0 or\
    \ c <= 0:\n        raise ValueError('The three sides of a triangle must be positive!')\n\
    \    \n    # check if three sides can form a triangle\n    if not a + b > c and\
    \ a + c > b and b + c > a:\n        raise ValueError('The three sides cannot form\
    \ a triangle!')\n    \n    # check if the three sides can form a right-angled\
    \ triangle\n    return abs(a**2 + b**2 - c**2) < 1e-8 or abs(a**2 + c**2 - b**2)\
    \ < 1e-8 or abs(b**2 + c**2 - a**2) < 1e-8\n    \n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe0p3ou2_.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe0p3ou2_.py\", line 43,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpe0p3ou2_.py\"\
    , line 31, in check\n    assert candidate(1, 2, 3) == False\n  File \"/tmp/tmpe0p3ou2_.py\"\
    , line 23, in right_angle_triangle\n    raise ValueError('The three sides cannot\
    \ form a triangle!')\nValueError: The three sides cannot form a triangle!\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # TODO\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps7rut6np.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmps7rut6np.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmps7rut6np.py\"\
    , line 18, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a = sorted([a, b, c])\n    return a[0]**2\
    \ + a[1]**2 == a[2]**2\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    return a**2\
    \ + b**2 == c**2\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # do not change the code above this line\n\
    \    raise NotImplementedError(\"function right_angle_triangle is not implemented\
    \ yet\")\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n \
    \   assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk0yteoj5.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpk0yteoj5.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpk0yteoj5.py\"\
    , line 18, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpk0yteoj5.py\"\
    , line 14, in right_angle_triangle\n    raise NotImplementedError(\"function right_angle_triangle\
    \ is not implemented yet\")\nNotImplementedError: function right_angle_triangle\
    \ is not implemented yet\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a = a**2\n    b = b**2\n    c = c**2\n   \
    \ if a+b == c or a+c == b or b+c == a:\n        return True\n    else:\n     \
    \   return False\n    \n    \ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    sides = sorted([a, b, c])\n    return sides[0]\
    \ ** 2 + sides[1] ** 2 == sides[2] ** 2\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return abs(c**2 - (a**2 + b**2)) < 0.00001\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2jxfu_a2.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp2jxfu_a2.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp2jxfu_a2.py\"\
    , line 19, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjrc896e1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjrc896e1.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjrc896e1.py\"\
    , line 18, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    return c\
    \ ** 2 == a ** 2 + b ** 2\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a**2 + b**2 == c**2:\n        return True\n\
    \    else:\n        return False\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprdg7ppng.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmprdg7ppng.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmprdg7ppng.py\"\
    , line 21, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a ** 2 + b ** 2 == c ** 2:\n        return\
    \ True\n    return False\n\n\ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpolhjaos7.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpolhjaos7.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpolhjaos7.py\"\
    , line 21, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if (a**2) + (b**2) == (c**2):\n        return\
    \ True\n    elif (a**2) + (c**2) == (b**2):\n        return True\n    elif (b**2)\
    \ + (c**2) == (a**2):\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # find the maximum length to be c\n    if\
    \ c > a and c > b:\n        tmp = c\n        c = a\n        a = tmp\n    elif\
    \ b > a and b > c:\n        tmp = b\n        b = a\n        a = tmp\n    # start\
    \ the right angle logic\n    if a * a == b * b + c * c:\n        return True\n\
    \    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # using the pythagoras theorem\n    if a **\
    \ 2 + b ** 2 == c ** 2:\n        return True\n    elif a ** 2 + c ** 2 == b **\
    \ 2:\n        return True\n    elif b ** 2 + c ** 2 == a ** 2:\n        return\
    \ True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    arr = [a, b, c]\n    arr.sort()\n    a, b,\
    \ c = arr[0], arr[1], arr[2]\n    return c ** 2 == a ** 2 + b ** 2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # Use the Pythagorean theorem:\n    #    a\xB2\
    \ + b\xB2 = c\xB2\n    #  \u2234 a\xB2 + b\xB2 = (\u221Aa\xB2 + \u221Ab\xB2)\xB2\
    \n    #  \u2234 a\xB2 + b\xB2 = a\xB2 + 2\u221A(a\xB2b\xB2) + b\xB2\n    #  \u2234\
    \ 2\u221A(a\xB2b\xB2) = c\xB2 - a\xB2 - b\xB2\n    return 2 * math.sqrt(a ** 2\
    \ * b ** 2) == c ** 2 - a ** 2 - b ** 2\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgjedp73v.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpgjedp73v.py\", line 34,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpgjedp73v.py\"\
    , line 21, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpgjedp73v.py\"\
    , line 18, in right_angle_triangle\n    return 2 * math.sqrt(a ** 2 * b ** 2)\
    \ == c ** 2 - a ** 2 - b ** 2\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return  a ** 2 + b ** 2 == c ** 2 \n\nassert\
    \ right_angle_triangle(3, 4, 5)\nassert not right_angle_triangle(1, 2, 3)\n \n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6k0pjrvg.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp6k0pjrvg.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp6k0pjrvg.py\"\
    , line 22, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    assert (a > 0) and (b > 0) and (c > 0)\n \
    \   assert isinstance(a, int) and isinstance(b, int) and isinstance(c, int)\n\
    \    x = [a, b, c]\n    x.sort()\n    a, b, c = x\n    if (a**2 + b**2) == c**2:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if c > max(a, b):\n        a, b, c = c, a,\
    \ b\n    if a*a == b*b + c*c:\n        return True\n    return False\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return (a**2 + b**2 == c**2) or (a**2 + c**2\
    \ == b**2) or (b**2 + c**2 == a**2)\n    pass\n\n\ndef check(candidate):\n   \
    \ assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    hyp = max(a, b, c)\n    x = min(a, b, c)\n\
    \    y = sum([a, b, c]) - x - hyp\n    return (hyp ** 2) == (x ** 2) + (y ** 2)\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdvb466b2.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpdvb466b2.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdvb466b2.py\"\
    , line 19, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a == 0 or b == 0 or c == 0:\n        return\
    \ False\n    return abs(a*a+b*b-c*c) < 1e-8 or abs(a*a+c*c-b*b) < 1e-8 or abs(b*b+c*c-a*a)\
    \ < 1e-8\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n \
    \   assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if max(a, b, c)**2 == (a**2 + b**2 + c**2\
    \ - max(a, b, c)**2):\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    sides = sorted([a, b, c])\n    return sides[0]**2\
    \ + sides[1]**2 == sides[2]**2\n    \ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n \n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp86ubk5nq.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp86ubk5nq.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp86ubk5nq.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2 or a ** 2\
    \ + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2\n\nprint(right_angle_triangle(3,\
    \ 4, 5))\nprint(right_angle_triangle(1, 2, 3))\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: 'True

    False

    '
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2\
    \ == b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a **\
    \ 2 + c ** 2\n    elif c > a and c > b:\n        return c ** 2 == a ** 2 + b **\
    \ 2\n    else:\n        return False\n\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return True\n    # raise NotImplementedError\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4pypvobf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4pypvobf.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp4pypvobf.py\"\
    , line 18, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    lst = [a, b, c]\n    lst.sort()\n    if lst[0]\
    \ ** 2 + lst[1] ** 2 == lst[2] ** 2:\n        return True\n    else:\n       \
    \ return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqbd_89w_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqbd_89w_.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpqbd_89w_.py\"\
    , line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # PUT YOUR CODE HERE\n    return a*a + b*b\
    \ == c*c\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n \
    \   assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6tpygzag.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp6tpygzag.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp6tpygzag.py\"\
    , line 20, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return a*a + b*b == c*c\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpprtxp4fz.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpprtxp4fz.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpprtxp4fz.py\"\
    , line 18, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqbd_89w_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqbd_89w_.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpqbd_89w_.py\"\
    , line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    cathetus_a, cathetus_b, hypotenuse = sorted([a,\
    \ b, c])\n    return (cathetus_a**2 + cathetus_b**2) == hypotenuse**2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # sort by length\n    sides = sorted([a, b,\
    \ c])\n    hypotenuse = sides[2]\n    first_cathetus = sides[0]\n    second_cathetus\
    \ = sides[1]\n    return (hypotenuse ** 2) == (first_cathetus ** 2 + second_cathetus\
    \ ** 2)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    sides = sorted([a, b, c])\n    return sides[0]\
    \ ** 2 + sides[1] ** 2 == sides[2] ** 2\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return a**2 + b**2 == c**2\nprint(right_angle_triangle(3,\
    \ 4, 5))\nprint(right_angle_triangle(1, 2, 3))\n\n\"\"\"\n6. Write a function\
    \ to compute the sum of natural numbers from 1 to n.\nExample:\n    >>> sum_naturals(5)\n\
    \    15\n\"\"\"\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7m7tczft.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp7m7tczft.py\", line 37,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp7m7tczft.py\"\
    , line 26, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: 'True

    False

    '
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbet1xyqt.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbet1xyqt.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpbet1xyqt.py\"\
    , line 18, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # pass\n    # YOUR CODE HERE\n    if a**2\
    \ + b**2 == c**2:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr0yay_5d.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpr0yay_5d.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpr0yay_5d.py\"\
    , line 24, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a > b and a > c:\n        return (a **\
    \ 2) == (b ** 2) + (c ** 2)\n    elif b > a and b > c:\n        return (b ** 2)\
    \ == (a ** 2) + (c ** 2)\n    elif c > a and c > b:\n        return (c ** 2) ==\
    \ (a ** 2) + (b ** 2)\n    else:\n        return False\n    \n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if (c ** 2 == a ** 2 + b ** 2):\n        return\
    \ True\n    else:\n        return False\n    \ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfi2rqifp.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpfi2rqifp.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpfi2rqifp.py\"\
    , line 21, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return a**2 == b**2 + c**2 or b**2 == a**2\
    \ + c**2 or c**2 == a**2 + b**2\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return (a**2 + b**2 == c**2) or (a**2 + c**2\
    \ == b**2) or (b**2 + c**2 == a**2)\n    \ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    hyp = max(a, b, c)\n    remaining = a + b\
    \ + c - hyp\n    return hyp ** 2 == remaining ** 2\n \n \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptue7_4l0.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmptue7_4l0.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptue7_4l0.py\"\
    , line 19, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    return a\
    \ ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    lst = [a, b, c]\n    lst.sort()\n    return\
    \ lst[2] ** 2 == lst[0] ** 2 + lst[1] ** 2\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return (a ** 2 + b ** 2 == c ** 2) or (a **\
    \ 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2)\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a**2 + b**2 == c**2:\n        return True\n\
    \    else:\n        return False\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprdg7ppng.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmprdg7ppng.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmprdg7ppng.py\"\
    , line 21, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if c**2 == a**2 + b**2:\n        return True\n\
    \    else:\n        return False\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpamfum0lg.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpamfum0lg.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpamfum0lg.py\"\
    , line 21, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    length = sorted([a, b, c])\n    return length[0]**2\
    \ + length[1]**2 == length[2]**2\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    sides = [a, b, c]\n    sides.sort()\n    return\
    \ sides[0]**2 + sides[1]**2 == sides[2]**2\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    sides = [a, b, c]\n    sides.sort()\n    if\
    \ a ** 2 + b ** 2 == c ** 2:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8k4do4m.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpi8k4do4m.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpi8k4do4m.py\"\
    , line 24, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    hypo = max(a, b, c)\n    if a ** 2 + b **\
    \ 2 + c ** 2 - hypo ** 2 == hypo ** 2:\n        return True\n    else:\n     \
    \   return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # Get the hypotenuse\n    hypotenuse = max(a,\
    \ b, c)\n    # Get the shortest side\n    leg = min(a, b, c)\n    # Get the remaining\
    \ side\n    remaining_side = (a + b + c) - hypotenuse - leg\n    return leg**2\
    \ + remaining_side**2 == hypotenuse**2\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a = sorted([a, b, c])\n    print(a)\n    if\
    \ a[0]**2 + a[1]**2 == a[2]**2:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '[3, 4, 5]

    [1, 2, 3]

    [6, 8, 10]

    [2, 2, 2]

    [7, 24, 25]

    [5, 7, 10]

    [5, 12, 13]

    [8, 15, 17]

    [48, 55, 73]

    [1, 1, 1]

    [2, 2, 10]

    '
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if (a**2 + b**2 == c**2 or a**2 + c**2 ==\
    \ b**2 or b**2 + c**2 == a**2):\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # x, y, z = sorted([a, b, c])\n    # return\
    \ x**2 + y**2 == z**2\n    return c > a and c > b and c**2 == a**2 + b**2\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcm3axupc.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpcm3axupc.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpcm3axupc.py\"\
    , line 20, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    sides = [a, b, c]\n    sides.sort()\n    if\
    \ (sides[0]**2 + sides[1]**2) == sides[2]**2:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyf_c6fyp.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpyf_c6fyp.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpyf_c6fyp.py\"\
    , line 18, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpyf_c6fyp.py\"\
    , line 14, in right_angle_triangle\n    raise NotImplementedError()\nNotImplementedError\n"
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return (a ** 2 + b ** 2 == c ** 2) or (a **\
    \ 2 + c ** 2 == b ** 2) or (c ** 2 + b ** 2 == a ** 2)\n    # TODO: Return whether\
    \ the sum of any two sides\n    #       equals the third.\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a > b:\n        if a > c:\n           \
    \ return a**2 == b**2 + c**2\n        else:\n            return c**2 == a**2 +\
    \ b**2\n    else:\n        if b > c:\n            return b**2 == a**2 + c**2\n\
    \        else:\n            return c**2 == a**2 + b**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a_sq = a * a\n    b_sq = b * b\n    c_sq =\
    \ c * c\n    return a_sq + b_sq == c_sq or a_sq + c_sq == b_sq or b_sq + c_sq\
    \ == a_sq\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if c > a and c > b:\n        return c ** 2\
    \ == a ** 2 + b ** 2\n    elif b > a and b > c:\n        return b ** 2 == a **\
    \ 2 + c ** 2\n    elif a > b and a > c:\n        return a ** 2 == b ** 2 + c **\
    \ 2\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return (a**2 + b**2 == c**2) or (a**2 + c**2\
    \ == b**2) or (b**2 + c**2 == a**2)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if (a ** 2 + b ** 2 == c ** 2) or (a ** 2\
    \ + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2):\n        return True\n \
    \   else:\n        return False\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    sorted_triangle = sorted([a, b, c])\n    a,\
    \ b, c = sorted_triangle\n    # Pythagorean's theorem.\n    return (a ** 2) +\
    \ (b ** 2) == (c ** 2)\n\n\ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    sides = [a, b, c]\n    sides.sort()\n    if\
    \ sides[2]**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n \n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp86ubk5nq.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp86ubk5nq.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp86ubk5nq.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # Your code here\n    return (a**2 + b**2\
    \ == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # check if the given values make a triangle\n\
    \    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    # after\
    \ this check c will be hypotenuse\n    if b > c:\n        a, b = b, a\n    if\
    \ a > c:\n        a, c = c, a\n    # using pythagorean theorem\n    if (a**2 +\
    \ b**2) == c**2:\n        return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjrc896e1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjrc896e1.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjrc896e1.py\"\
    , line 18, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return all([a ** 2 + b ** 2 == c ** 2, a <\
    \ b + c, b < a + c, c < a + b])\n    \ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp29e_sn9t.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp29e_sn9t.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp29e_sn9t.py\"\
    , line 18, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a > b and a > c:\n        return b**2 +\
    \ c**2 == a**2\n    elif b > a and b > c:\n        return a**2 + c**2 == b**2\n\
    \    else:\n        return a**2 + b**2 == c**2\n    # return (a > b and a > c\
    \ and b**2 + c**2 == a**2) or \\\n    #        (b > a and b > c and a**2 + c**2\
    \ == b**2) or \\\n    #        (a**2 + b**2 == c**2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    sides = [a, b, c]\n    sides.sort()\n    return\
    \ sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2\n\ndef check(candidate):\n  \
    \  assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # write your code here\n    res = False\n\
    \    if a > 0 and b > 0 and c > 0:\n        a, b, c = sorted([a, b, c])\n    \
    \    if a * a + b * b == c * c:\n            res = True\n    return res\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        return\
    \ False\n    sides = [a, b, c]\n    sides.sort()\n    return (sides[0] ** 2) +\
    \ (sides[1] ** 2) == (sides[2] ** 2)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmgappxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppmgappxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppmgappxd.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820418
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return (abs(c**2 - (a**2 + b**2)) < 1e-10)\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt4w7in_f.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpt4w7in_f.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpt4w7in_f.py\"\
    , line 18, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820419
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return abs(a ** 2 + b ** 2 - c ** 2) < 0.00001\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8ypjcs_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpk8ypjcs_.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpk8ypjcs_.py\"\
    , line 18, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820419
