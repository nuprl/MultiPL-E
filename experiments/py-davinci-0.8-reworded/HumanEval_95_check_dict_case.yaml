name: HumanEval_95_check_dict_case
language: py
prompt: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) -> bool:\n\
  \    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\
  \ \n    case or all keys are strings in upper case, else return False.\n    The\
  \ function should return False is the given dictionary is empty.\n    Examples:\n\
  \    >>> check_dict_case({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> check_dict_case({\
  \ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> check_dict_case({\
  \ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> check_dict_case({\
  \ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({\
  \ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
  \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
  \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
  \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
  \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
  \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
  \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
  test_check()\n"
completions: ["    #keys = list(dict.keys())\n\n    #return keys == keys.lower() or\
    \ keys == keys.upper()\n    #return False if not dict else all(map(str.islower,\
    \ dict.keys())) or all(map(str.isupper, dict.keys()))\n    return all(x.islower()\
    \ for x in dict.keys()) or all(x.isupper() for x in dict.keys())\n\n", "    if\
    \ len(dict) == 0:\n        return False\n    if any(not isinstance(x, str) for\
    \ x in dict.keys()):\n        return False\n    if any(not x.islower() for x in\
    \ dict.keys()):\n        if any(not x.isupper() for x in dict.keys()):\n     \
    \       return False\n    return True\n", '    pass', "    return\n", "    lower_keys\
    \ = [k.islower() for k in dict.keys()]\n    upper_keys = [k.isupper() for k in\
    \ dict.keys()]\n    return (all(lower_keys) or all(upper_keys)) and (len(dict)\
    \ > 0)\n", "    if not dict:\n        return False\n    else:\n        for k,\
    \ v in dict.items():\n            if not isinstance(k, str):\n               \
    \ return False\n            if k.isupper() and k.islower():\n                return\
    \ False\n            else:\n                x = k.isupper()\n                for\
    \ key in dict.keys():\n                    if x != key.isupper():\n          \
    \              return False\n                    else:\n                     \
    \   return True\n", "    # True if all keys are strings in lower case or all keys\
    \ are strings in upper case\n    pass", "    if len(dict) == 0:\n        return\
    \ False\n    else:\n        dict_values = dict.values()\n        dict_keys = dict.keys()\n\
    \        if len(set(dict_values)) == 1:\n            if all(char.islower() for\
    \ char in dict_keys):\n                return True\n            elif all(char.isupper()\
    \ for char in dict_keys):\n                return True\n            else:\n  \
    \              return False\n        else:\n            return False", "    if\
    \ len(dict) == 0:\n        return False\n    lowercase = 0\n    uppercase = 0\n\
    \    for key in dict:\n        if key.islower():\n            lowercase += 1\n\
    \        elif key.isupper():\n            uppercase += 1\n        else:\n    \
    \        return False\n    if lowercase == len(dict) or uppercase == len(dict):\n\
    \        return True\n    else:\n        return False\n", "    if len(dict) ==\
    \ 0:\n        return False\n    elif dict.keys() == dict.keys():\n        return\
    \ True\n    else:\n        return False\n", "    count = 0\n    for key in dict:\n\
    \        if key.islower():\n            count += 1\n        elif key.isupper():\n\
    \            count -= 1\n        else:\n            return False\n    if count\
    \ == len(dict) or count == -len(dict):\n        return True\n    else:\n     \
    \   return False\n", "    return (sum(map(str.islower, dict.keys())) == len(dict)\
    \ or\n            sum(map(str.isupper, dict.keys())) == len(dict)) and len(dict)\
    \ > 0\n", "    pass\n", "    if len(dict) == 0:\n        return False\n    case\
    \ = dict.keys()[0].islower()\n    for key in dict.keys():\n        if case !=\
    \ key.islower():\n            return False\n    return True", "    # if len(dict)\
    \ == 0:\n    #     return False\n    # lst = list(dict.keys())\n    # lst = [str(i)\
    \ for i in lst]\n    # print(lst)\n    # if lst[0].islower():\n    #     for key\
    \ in lst:\n    #         if key.isupper():\n    #             return False\n \
    \   #     return True\n    # else:\n    #     for key in lst:\n    #         if\
    \ key.islower():\n    #             return False\n    #     return True\n    if\
    \ not dict:\n        return False\n    else:\n        lower = True\n        upper\
    \ = True\n        for key in dict:\n            if key != key.lower():\n     \
    \           lower = False\n            if key != key.upper():\n              \
    \  upper = False\n        return lower or upper\n\nprint(check_dict_case({ 'a':\
    \ 'apple', 'b': 'banana' }))", "    lower, upper = [], []\n    for key in dict:\n\
    \        lower.append(key.islower())\n        upper.append(key.isupper())\n  \
    \  return False if (len(dict) == 0) or (any(lower) and any(upper)) else True\n\
    \nprint(check_dict_case({'a': 'apple', 'b': 'banana'}))", "    #print(dict)\n\
    \    if len(dict) == 0:\n        return False\n    else:\n        for x in dict:\n\
    \            #print(x)\n            if (x.islower() and x.isupper()) or not x.isalpha():\n\
    \                return False\n            else:\n                for y in dict:\n\
    \                    #print(y)\n                    if not x.islower() and not\
    \ x.isupper():\n                        return False\n                    else:\n\
    \                        return True\n", "    return False\n", "    all_lower\
    \ = True\n    all_upper = True\n    for k in dict.keys():\n        if not (isinstance(k,\
    \ str)):\n            return False\n        if not k.islower():\n            all_lower\
    \ = False\n        if not k.isupper():\n            all_upper = False\n    return\
    \ (all_lower or all_upper)\n", "    if len(dict) == 0:\n        return False\n\
    \    for value in dict.values():\n        if not isinstance(value, str):\n   \
    \         return False\n    for key in dict.keys():\n        if not isinstance(key,\
    \ str):\n            return False\n    if any(char.isupper() for char in dict.keys()):\n\
    \        if any(char.islower() for char in dict.keys()):\n            return False\n\
    \    if any(char.islower() for char in dict.keys()):\n        if any(char.isupper()\
    \ for char in dict.keys()):\n            return False\n    return True"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
