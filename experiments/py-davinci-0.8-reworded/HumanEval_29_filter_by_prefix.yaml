name: HumanEval_29_filter_by_prefix
language: py
prompt: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
  \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that\
  \ start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>>\
  \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
  \    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([], 'john') == []\n    assert\
  \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
  \ 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
completions: ["    # Write your code here\n    return filter(lambda s: s.startswith(prefix),\
    \ strings)\n", "    return [s for s in strings if s.startswith(prefix)]\n", " \
    \   return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return\
    \ list(filter(lambda x: x.startswith(prefix), strings))\n\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    results = []\n    for s in strings:\n\
    \        if s.startswith(prefix):\n            results.append(s)\n    return results\n",
  "    prefix_len = len(prefix)\n    return [w for w in strings if w[:prefix_len]\
    \ == prefix]\n", "    return [i for i in strings if i.startswith(prefix)]\n",
  "    return [string for string in strings if string.startswith(prefix)]\n", '    return
    [s for s in strings if s.startswith(prefix)]', "    return list(filter(lambda\
    \ x: x.startswith(prefix), strings))\n", "    return list(filter(lambda s: s.startswith(prefix),\
    \ strings))\n\nfilter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')", '    return
    [s for s in strings if s.startswith(prefix)]', "    return [s for s in strings\
    \ if s.startswith(prefix)]\n", "    output = []\n    for word in strings:\n  \
    \      if word.startswith(prefix):\n            output.append(word)\n    return\
    \ output\n", "    return [s for s in strings if s.startswith(prefix)]\n", "  \
    \  return [s for s in strings if s.startswith(prefix)]\n", "    return [string\
    \ for string in strings if string.startswith(prefix)]\n\nfilter_by_prefix([],\
    \ 'a')\nfilter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\nimport doctest\n\
    doctest.testmod()\n\n\"\"\"\ndoctest can be run simply by running python3 -m doctest\
    \ test_file.py.\n\nWhen you run doctest, you should see no output. This is ideal,\
    \ meaning that all of your tests have passed successfully. \nIf there are any\
    \ failures, you will see a message such as:\n\n**********************************************************************\n\
    File \"test_file.py\", line 7, in __main__.filter_by_prefix\nFailed example:\n\
    \    filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\nExpected:\n    ['abc',\
    \ 'array']\nGot:\n    ['abc']\n**********************************************************************\n\
    \nThis indicates that the doctest failed on line 7 of test_file.py for the example\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a').\n\nYou can read more\
    \ about the format of doctest output on the official documentation: https://docs.python.org/3/library/doctest.html#doctest-output\n\
    \"\"\"\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n",
  '    return [x for x in strings if x.startswith(prefix)]']
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
