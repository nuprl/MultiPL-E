name: HumanEval_23_strlen
language: py
prompt: "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n\
  \    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x')\
  \ == 1\n    assert candidate('asdasnakj') == 9\n\ndef test_check():\n    check(strlen)\n\
  \ntest_check()\n"
completions: ["    length = 0\n    for char in string:\n        length += 1\n    return\
    \ length\n\n", "    return len(string)\n\n", "    return len(string)\n", "   \
    \ if string == '':\n        return 0\n    return 1 + strlen(string[1:])\n\n",
  "    return len(string)\n", "    l = 0\n    for c in string:\n        l += 1\n \
    \   return l\n", "    if string:\n        return 1 + strlen(string[1:])\n    return\
    \ 0\n\n\n@dataclass", "    return len(string)\n\n", "    length = 0\n    for c\
    \ in string:\n        length += 1\n    return length\n\n", "    return len(string)\n",
  "    return len(string)\n", "    string = str\n    # add one to the length of 'string'\n\
    \    return len(string) + 1\n\n", "    if not string:\n        return 0\n    return\
    \ 1 + strlen(string[1:])\n\n", "    length = 0\n    for char in string:\n    \
    \    length += 1\n    return length\n\n", "    return len(string)\n\n", "    return\
    \ len(string)\n", "    if string:\n        return 1 + strlen(string[1:])\n   \
    \ return 0\n\n\n@memoize", "    return len(string)\n", "    length = 0\n    for\
    \ _ in string:\n        length += 1\n    return length\n", "    return len(string)\n\
    \n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
