language: py
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [n for n in values\
    \ if isinstance(n, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    integer_values = []\n\
    \    for value in values:\n        if isinstance(value, int):\n            integer_values.append(value)\n\
    \    return integer_values\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    filtered_list = []\n\
    \    for item in values:\n        if isinstance(item, int):\n            filtered_list.append(item)\n\
    \    return filtered_list\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ i: isinstance(i, int), values))\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\nimport unittest\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for\
    \ value in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [ value for value\
    \ in values if isinstance(value, int) ]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    filtered_int = []\n\
    \    for element in values:\n        if isinstance(element, int):\n          \
    \  filtered_int.append(element)\n    return filtered_int\n\nfilter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [element for\
    \ element in values if isinstance(element, int)]\n\ndef check(candidate):\n  \
    \  assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [ x for x in\
    \ values if isinstance(x, int) ]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ v: isinstance(v, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val\
    \ in values if isinstance(val, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    values_integers = []\n\
    \    for value in values:\n        if isinstance(value, int):\n            values_integers.append(value)\n\
    \    return values_integers\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    filtered_values = []\n\
    \    for i in values:\n        if isinstance(i, int):\n            filtered_values.append(i)\n\
    \    return filtered_values\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    assert isinstance(values,\
    \ list)\n    return [int(v) for v in values if isinstance(v, int)]\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ value: isinstance(value, int), values))\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    integers = []\n    for\
    \ value in values:\n        if isinstance(value, int):\n            integers.append(value)\n\
    \    return integers\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val\
    \ in values if isinstance(val, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    lista = []\n    for\
    \ item in values:\n        if isinstance(item, int):\n            lista.append(item)\n\
    \    return lista\n\ndef check(candidate):\n    assert candidate([]) == []\n \
    \   assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    new_list = []\n    for\
    \ i in values:\n        if type(i) == int:\n            new_list.append(i)\n \
    \   return new_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ n: isinstance(n, int), values))\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val\
    \ in values if isinstance(val, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    int_list = []\n    for\
    \ value in values:\n        if isinstance(value, int):\n            int_list.append(value)\n\
    \    return int_list\n\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    new_list = []\n    for\
    \ value in values:\n        if isinstance(value, int):\n            new_list.append(value)\n\
    \    return new_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    # v = []\n    # for\
    \ x in values:\n    #     if isinstance(x, int):\n    #         v.append(x)\n\
    \    # return v\n    return [x for x in values if isinstance(x, int)]\n\nprint(filter_integers([1,\
    \ 2, 3, 'abc', {  }, []]))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '[1, 2, 3]

    '
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    values_to_filter = []\n\
    \    for value in values:\n        if isinstance(value, int):\n            values_to_filter.append(value)\n\
    \    return values_to_filter\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    # \u043D\u0430\u043F\
    \u0438\u0448\u0438\u0442\u0435 \u043A\u043E\u0434 \u0442\u0443\u0442\n    # \u043C\
    \u043E\u0436\u043D\u043E \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\
    \u0430\u0442\u044C \u0444\u0443\u043D\u043A\u0446\u0438\u044E isinstance\n   \
    \ # \u043A\u043E\u0442\u043E\u0440\u0430\u044F \u0432\u043E\u0437\u0432\u0440\u0430\
    \u0449\u0430\u0435\u0442 True \u0435\u0441\u043B\u0438 \u043E\u0431\u044A\u0435\
    \u043A\u0442 \u043F\u0440\u0438\u043D\u0430\u0434\u043B\u0435\u0436\u0438\u0442\
    \ \u043A\u043B\u0430\u0441\u0441\u0443:\n    # >>> isinstance(3, int)\n    # True\n\
    \    # >>> isinstance('abc', int)\n    # False\n    pass\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgmx77cd0.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpgmx77cd0.py\", line 25,\
    \ in test_check\n    check(filter_integers)\n  File \"/tmp/tmpgmx77cd0.py\", line\
    \ 20, in check\n    assert candidate([]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    integers = []\n    for\
    \ i in values:\n        if isinstance(i, int):\n            integers.append(i)\n\
    \    return integers\n\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val\
    \ in values if isinstance(val, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [n for n in values\
    \ if isinstance(n, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    int_list = []\n    for\
    \ elem in values:\n        if isinstance(elem, int):\n            int_list.append(elem)\n\
    \    return int_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(num) for\
    \ num in values if isinstance(num, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ n: isinstance(n, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    integers = []\n    for\
    \ value in values:\n        if isinstance(value, int):\n            integers.append(value)\n\
    \    return integers\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    values = list(filter(lambda\
    \ x: type(x) == int, values))\n    return values\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    output_list = []\n \
    \   for val in values:\n        if isinstance(val, int):\n            output_list.append(val)\n\
    \    return output_list\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val\
    \ in values if isinstance(val, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp56r9ai37.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp56r9ai37.py\", line 19,\
    \ in test_check\n    check(filter_integers)\n  File \"/tmp/tmp56r9ai37.py\", line\
    \ 14, in check\n    assert candidate([]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ value: isinstance(value, int), values))\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppp5x96x5.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmppp5x96x5.py\", line 18,\
    \ in test_check\n    check(filter_integers)\n  File \"/tmp/tmppp5x96x5.py\", line\
    \ 13, in check\n    assert candidate([]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [ value for value\
    \ in values if isinstance(value, int) ]\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    new_list = []\n    for\
    \ item in values:\n        if isinstance(item, int):\n            new_list.append(item)\n\
    \    return new_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    for value in values:\n\
    \        if not isinstance(value, int):\n            values.remove(value)\n  \
    \  return values\n\ndef check(candidate):\n    assert candidate([]) == []\n  \
    \  assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3g9u9423.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp3g9u9423.py\", line 21,\
    \ in test_check\n    check(filter_integers)\n  File \"/tmp/tmp3g9u9423.py\", line\
    \ 17, in check\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n    \n    # Integers in python 3.x are\
    \ not of type 'int' (they are of type 'long')\n    # return [value for value in\
    \ values if type(value) == type(1)]\n    \n    # use this for python 3.x\n   \
    \ # return [value for value in values if isinstance(value, int) or isinstance(value,\
    \ long)]\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    integers = []\n    for\
    \ i in values:\n        if isinstance(i, int):\n            integers.append(i)\n\
    \    return integers\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [num for num\
    \ in values if isinstance(num, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n    # using a list comprehension\n    # keep = []\n\
    \    # for item in values:\n    #     if isinstance(item, int):\n    #       \
    \  keep.append(item)\n    # return keep\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ v: isinstance(v, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\nprint(filter_integers([1, 2, 3, 'abc', {\
    \  }, []]))\nprint(filter_integers(['a', 3.14, 5]))\ndef check(candidate):\n \
    \   assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '[1, 2, 3]

    [5]

    '
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    int_list = []\n    for\
    \ value in values:\n        if isinstance(value, int):\n            int_list.append(value)\n\
    \    return int_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    filtered_values = []\n\
    \    for value in values:\n        if isinstance(value, int):\n            filtered_values.append(value)\n\
    \    return filtered_values\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    integers = []\n    for\
    \ i in values:\n        if isinstance(i, int):\n            integers.append(i)\n\
    \    return integers\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    # return []\n    # if\
    \ not isinstance(values, list):\n    #     raise ValueError('Expected list as\
    \ values')\n    # return [val for val in values if isinstance(val, int)]\n   \
    \ return [val for val in values if isinstance(val, int)]\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    # return []\n    # TODO:\
    \ Replace [] with correct value\n    filtered_integers = []\n    for value in\
    \ values:\n        if isinstance(value, int):\n            filtered_integers.append(value)\n\
    \    return filtered_integers\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val\
    \ in values if isinstance(val, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    # implement your code\
    \ here\n    filtered_list = []\n    for value in values:\n        if isinstance(value,\
    \ int):\n            filtered_list.append(value)\n    return filtered_list\n \
    \   \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([4,\
    \ {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3,\
    \ 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    filtered_list = []\n\
    \    for value in values:\n        if isinstance(value, int):\n            filtered_list.append(value)\n\
    \    return filtered_list\n    \n    \n    \n    \ndef check(candidate):\n   \
    \ assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    new_list = []\n    for\
    \ x in values:\n        if type(x) == int:\n            new_list.append(x)\n \
    \   return new_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [n for n in values\
    \ if isinstance(n, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ val: isinstance(val, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    pass\n\nfilter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpasqk2zs3.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpasqk2zs3.py\", line 19,\
    \ in test_check\n    check(filter_integers)\n  File \"/tmp/tmpasqk2zs3.py\", line\
    \ 14, in check\n    assert candidate([]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [n for n in values\
    \ if isinstance(n, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [element for\
    \ element in values if isinstance(element, int)]\n\nimport doctest\ndoctest.testmod()\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4,\
    \ {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3,\
    \ 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ n: isinstance(n, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ v: isinstance(v, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    # TODO: implement this\n\
    \    new_list = []\n    for n in values:\n        if type(n) == int:\n       \
    \     new_list.append(n)\n    return new_list\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    # write your code here\n\
    \    return list(filter(lambda x: isinstance(x, int), values))\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\nprint(filter_integers([1, 2, 3, 'abc', {  }, []]))\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4,\
    \ {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3,\
    \ 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: '[1, 2, 3]

    '
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    # You must  use the\
    \ filter built-in function\n    return list(filter(lambda x: type(x) == int, values))\n\
    \n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([4,\
    \ {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3,\
    \ 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [elem for elem\
    \ in values if isinstance(elem, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ x: isinstance(x, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    # your code here\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4,\
    \ {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3,\
    \ 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgpapufr_.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpgpapufr_.py\", line 18,\
    \ in test_check\n    check(filter_integers)\n  File \"/tmp/tmpgpapufr_.py\", line\
    \ 13, in check\n    assert candidate([]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    values = [v for v in\
    \ values if isinstance(v, int)]\n    return values\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    is_int = lambda x: isinstance(x,\
    \ int)\n    # lambda x: isinstance(x, int) (another approach)\n    return list(filter(is_int,\
    \ values))\n    # filter(<function is_int at 0x039EA9F0>, values) (another approach)\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([4,\
    \ {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3,\
    \ 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
