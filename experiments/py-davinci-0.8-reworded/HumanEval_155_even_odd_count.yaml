name: HumanEval_155_even_odd_count
language: py
prompt: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n\
  \    \"\"\"Given an integer. return a tuple that has the number of even and odd\
  \ digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n\
  \    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
  \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
  \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) ==\
  \ (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1,\
  \ 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
completions: ["    even_count = 0\n    odd_count = 0\n    num = abs(num)\n    while\
    \ num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n\
    \            odd_count += 1\n        num //= 10\n    return even_count, odd_count\n",
  "    num = abs(num)\n\n    even = 0\n    odd = 0\n\n    while num:\n        if num\
    \ % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    \
    \    num //= 10\n\n    return even, odd\n\n", "    even = 0\n    odd = 0\n   \
    \ while num != 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n\
    \            odd += 1\n        num = num // 10\n    return even, odd\n", '    return
    0, 0', "    return (len([n for n in str(num) if int(n) % 2 == 0]), len([n for\
    \ n in str(num) if int(n) % 2 != 0]))\n", "    even = 0\n    odd = 0\n    num_abs\
    \ = abs(num)\n    while num_abs > 0:\n        remainder = num_abs % 10\n     \
    \   if remainder % 2 == 0:\n            even += 1\n        else:\n           \
    \ odd += 1\n        num_abs //= 10\n    return even, odd\n\n", "    even, odd\
    \ = 0, 0\n    for i in range(0, len(str(num))):\n        if int(str(num)[i]) %\
    \ 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return\
    \ even, odd\n\n", "    even = 0\n    odd = 0\n    if num < 0:\n        num = abs(num)\n\
    \    while num != 0:\n        if num % 2 == 0:\n            even += 1\n      \
    \  else:\n            odd += 1\n        num = num // 10\n    return even, odd\n",
  "    even_count = 0\n    odd_count = 0\n    num = abs(num)\n\n    while num > 0:\n\
    \        if num % 2 == 0:\n            even_count += 1\n        else:\n      \
    \      odd_count += 1\n        num //= 10\n\n    return even_count, odd_count\n",
  "    even = 0\n    odd = 0\n    for digit in str(num):\n        if int(digit) %\
    \ 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return\
    \ (even, odd)\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))", "  \
    \  even_count = 0\n    odd_count = 0\n    for i in str(num):\n        if int(i)\
    \ % 2 == 0:\n            even_count += 1\n        else:\n            odd_count\
    \ += 1\n    return even_count, odd_count\n\n", "    if num < 0:\n        num =\
    \ abs(num)\n    else:\n        num = num\n    odd_number = 0\n    even_number\
    \ = 0\n    while num > 0:\n        remainder = num % 10\n        if remainder\
    \ % 2 == 0:\n            even_number += 1\n        else:\n            odd_number\
    \ += 1\n        num = num // 10\n    return even_number, odd_number\n", "    count_odd\
    \ = 0\n    count_even = 0\n    if num < 0:\n        num = -num\n    while num\
    \ > 0:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n\
    \            count_odd += 1\n        num = num // 10\n    return count_even, count_odd\n\
    \n", "    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n    \
    \    if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n   \
    \         odd_count += 1\n    return even_count, odd_count\n", "    num = str(num)\n\
    \    even_count = 0\n    odd_count = 0\n    for digit in num:\n        if int(digit)\
    \ % 2 == 0:\n            even_count += 1\n        else:\n            odd_count\
    \ += 1\n    return (even_count, odd_count)\n\n", "    # Convert the given number\
    \ to a string\n    num_string = str(num)\n    # Set the initial count of even\
    \ numbers and odd numbers to 0\n    even_count = 0\n    odd_count = 0\n    # Iterate\
    \ over each character in the string\n    for character in num_string:\n      \
    \  # Check if the character is an even number, and increase the even_count by\
    \ 1\n        if int(character) % 2 == 0:\n            even_count += 1\n      \
    \  # Else it is an odd number, so increase the odd_count by 1\n        else:\n\
    \            odd_count += 1\n    # Return a tuple with the even_count and odd_count\n\
    \    return (even_count, odd_count)\n", "    number_of_evens = 0\n    number_of_odds\
    \ = 0\n    if num == 0:\n        return (0,0)\n    else:\n        for digit in\
    \ str(abs(num)):\n            if int(digit) % 2 == 0:\n                number_of_evens\
    \ += 1\n            else:\n                number_of_odds += 1\n    return (number_of_evens,\
    \ number_of_odds)\n\nprint(even_odd_count(-12))", "    even_count, odd_count =\
    \ 0, 0\n    while num != 0:\n        if (num % 10) % 2 == 0:\n            even_count\
    \ += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return\
    \ even_count, odd_count\n\n", "    even_count = 0\n    odd_count = 0\n    while\
    \ num != 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n\
    \            odd_count += 1\n        num = num // 10\n    return even_count, odd_count",
  "    if num < 0:\n        num = abs(num)\n    even_counter = 0\n    odd_counter\
    \ = 0\n    while num:\n        if num % 2 == 0:\n            even_counter += 1\n\
    \        else:\n            odd_counter += 1\n        num //= 10\n    return even_counter,\
    \ odd_counter\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
