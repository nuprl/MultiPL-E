name: HumanEval_152_compare
language: py
prompt: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
  \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
  \ of some long-awaited\n    event is finally known. The feelings and thoughts you\
  \ have at that moment are\n    definitely worth noting down and comparing.\n   \
  \ Your task is to determine if a person correctly guessed the results of a number\
  \ of matches.\n    You are given two arrays of scores and guesses of equal length,\
  \ where each index shows a match. \n    Return an array of the same length denoting\
  \ how far off each guess was. If they have guessed correctly,\n    the value is\
  \ 0, and if not, the value is the absolute difference between the guess and the\
  \ score.\n    \n    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2,\
  \ 3, 4, 2, -2])\n    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4,\
  \ 1, 1, 0, 0, -2])\n    [4, 4, 1, 0, 0, 6]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3,\
  \ 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0,\
  \ 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
  \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0,\
  \ 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
completions: ["    return [abs(game[i] - guess[i]) for i in range(len(game))]\n\n",
  "    return [abs(scores - guess) for scores, guess in zip(game, guess)]\n\nprint(compare([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\nprint(compare([0, 5, 0, 0, 0, 4], [4,\
    \ 1, 1, 0, 0, -2]))", "    res = []\n    for i in range(len(game)):\n        res.append(abs(game[i]\
    \ - guess[i]))\n    return res\n", "    return [abs(guess[i] - game[i]) for i\
    \ in range(len(game))]\n", "    diff = []\n    for i in range(len(game)):\n  \
    \      if game[i] == guess[i]:\n            diff.append(0)\n        else:\n  \
    \          diff.append(abs(game[i] - guess[i]))\n    return diff\n\nprint(compare([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\nprint(compare([0, 5, 0, 0, 0, 4], [4,\
    \ 1, 1, 0, 0, -2]))", "    return list(map(lambda x: abs(x[0] - x[1]), zip(game,\
    \ guess)))\n    ", "    return [abs(s - g) if s != g else 0 for s, g in zip(game,\
    \ guess)]\n\n", "    return [abs(g - s) if g != s else 0 for s, g in zip(game,\
    \ guess)]\n", "    return [abs(x - y) if x != y else 0 for x, y in zip(game, guess)]\n\
    \n", "    res = []\n    for i in range(len(game)):\n        res.append(abs(game[i]\
    \ - guess[i]))\n    return res\n\n", "    res = []\n    for i in range(len(game)):\n\
    \        if (game[i] == guess[i]):\n            res.append(0)\n        else:\n\
    \            res.append(abs(game[i] - guess[i]))\n    return res", "    res =\
    \ []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n      \
    \      res.append(0)\n        else:\n            res.append(abs(game[i] - guess[i]))\n\
    \    return res\n", '    return list(map(lambda x: abs(x[0] - x[1]), zip(game,
    guess)))', "    return [abs(a - b) if a != b else 0 for a, b in zip(game, guess)]\n",
  '    return [abs(i-j) for i, j in zip(game, guess)]', "    return [abs(a - b) if\
    \ a != b else 0 for a, b in zip(game, guess)]\n", "    return list(map(lambda\
    \ p: 0 if p[0] == p[1] else abs(p[0] - p[1]), zip(game, guess)))\n\n", "    if\
    \ len(game) == len(guess):\n        res = [abs(i - j) for i, j in zip(game, guess)]\n\
    \        return res\n", "    return [abs(game[i] - guess[i]) for i in range(len(game))]\n\
    \n", "    return [abs(a - b) if a != b else 0 for a, b in zip(game, guess)]\n\
    \    \n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
