name: HumanEval_58_common
language: py
prompt: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n\
  \    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5,\
  \ 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5,\
  \ 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3,\
  \ 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n  \
  \  assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\
  \ntest_check()\n"
completions: ["    return sorted(set(l1) & set(l2))\n\n", "    return sorted(set(l1)\
    \ & set(l2))\n\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1)\
    \ & set(l2))\n\n", "    c = list(set(l1) & set(l2))\n    c.sort()\n    return\
    \ c\n", "    # To-do\n    return sorted(list(set(l1) & set(l2)))\n", "    return\
    \ sorted(set(l1) & set(l2))\n\n", "    return sorted(set(l1) & set(l2))\n", " \
    \   s1 = set(l1)\n    s2 = set(l2)\n    s3 = s1 & s2\n    return sorted(list(s3))\n",
  "    # Return sorted unique common elements for two lists.\n    # return sorted(set(l1)\
    \ & set(l2))\n    common_list = []\n    for item in l1:\n        if item in l2:\n\
    \            common_list.append(item)\n    return sorted(list(set(common_list)))\n\
    \n", "    common = []\n    for item in l1:\n        if item in l2:\n         \
    \   common.append(item)\n    return sorted(list(set(common)))\n\n", "    l1 =\
    \ set(l1)\n    l2 = set(l2)\n    return sorted(l1 & l2)\n\n", "    l1 = set(l1)\n\
    \    l2 = set(l2)\n    return sorted(l1 & l2)\n", "    return sorted(set(l1) &\
    \ set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    # TODO: Implement\
    \ me\n    return []\n\n", "    return sorted(set(l1) & set(l2))\n", "    lst =\
    \ []\n    for i in l1:\n        if i in l2:\n            lst.append(i)\n    return\
    \ sorted(list(set(lst)))\n\n", "    # TODO 1: Write the body of this function,\
    \ using a set-based approach\n    pass\n", "    return sorted(set(l1) & set(l2))\n\
    \n", "    pass\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    l3 = []\n    for elem in l1:\n        if elem in l2:\n \
    \           l3.append(elem)\n    return sorted(set(l3))\n", "    seen = set()\n\
    \    common = []\n    for n in l1:\n        if n in l2 and n not in seen:\n  \
    \          common.append(n)\n            seen.add(n)\n    return sorted(common)\n",
  "    ret = []\n    for e in l1:\n        if e in l2 and e not in ret:\n        \
    \    ret.append(e)\n    return sorted(ret)\n", "    return sorted(set(l1) & set(l2))\n",
  "    return sorted(set(l1) & set(l2))\n\n", "    return sorted(set(l1) & set(l2))\n",
  "    s1 = set(l1)\n    s2 = set(l2)\n    return sorted(s1 & s2)\n", "    return\
    \ sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n\n", " \
    \   common_l = []\n    for i in l1:\n        if i in l2:\n            common_l.append(i)\n\
    \    return list(set(common_l))\n\n", "    set1 = set(l1)\n    set2 = set(l2)\n\
    \    return sorted(set1 & set2)\n", "    s1 = set(l1)\n    s2 = set(l2)\n    return\
    \ sorted(s1 & s2)\n\n", "    c = list(set(l1) & set(l2))\n    c.sort()\n    return\
    \ c\n\n", "    if len(l1) > len(l2):\n        l2, l1 = l1, l2\n    return sorted(set(l1)\
    \ & set(l2))\n\n", "    # Set comprehension\n    return sorted(list({x for x in\
    \ l1 if x in l2}))\n", "    #set1 = set(l1)\n    #set2 = set(l2)\n    #return\
    \ sorted(set1 & set2)\n    return sorted(set(l1) & set(l2))\n", "    # your code\
    \ goes here\n    return sorted(list(set(l1) & set(l2)))\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    return sorted(set(l1) & set(l2))\n\n", "    for i in l1:\n\
    \        if i in l2:\n            l2.remove(i)\n            print(i)\n\ncommon([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])", "    return sorted(set(l1)\
    \ & set(l2))\n\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1)\
    \ & set(l2))\n\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1)\
    \ & set(l2))\n\n", "    # Return sorted unique common elements\n    return sorted(set(l1)\
    \ & set(l2))\n\n", "    common_set = set(l1) & set(l2)\n    return sorted(list(common_set))\n",
  "    cmn = list(set(l1) & set(l2))\n    cmn.sort()\n    return cmn\n\n", "    set1\
    \ = set(l1)\n    set2 = set(l2)\n    return sorted(set1 & set2)\n", "    a = set(l1)\n\
    \    b = set(l2)\n    c = list(a & b)\n    c.sort()\n    return c\n", "    return\
    \ sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "  \
    \  # TODO: implement this\n    pass\n", "    return sorted(set(l1) & set(l2))\n",
  "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n",
  "    #l3 = []\n    #for i in l1:\n    #    if i in l2:\n    #        l3.append(i)\n\
    \    #return l3\n    return list(set(l1) & set(l2))\n", "    return sorted(set(l1)\
    \ & set(l2))\n\n", "    return sorted(set(l1) & set(l2))\n", "    l1.sort()\n\
    \    l2.sort()\n    pointer_a = 0\n    pointer_b = 0\n    result = []\n    while\
    \ pointer_a < len(l1) and pointer_b < len(l2):\n        if l1[pointer_a] == l2[pointer_b]:\n\
    \            result.append(l1[pointer_a])\n            pointer_a += 1\n      \
    \      pointer_b += 1\n        elif l1[pointer_a] < l2[pointer_b]:\n         \
    \   pointer_a += 1\n        else:\n            pointer_b += 1\n    return result\n",
  "    if l1 and l2:\n        return sorted(set(l1) & set(l2))\n    return []\n\n",
  "    return sorted(set(l1) & set(l2))\n\n", "    # FIXME: Tricky to do in a list\
    \ comprehension\n    return sorted(list(set(l1) & set(l2)))\n", "    # create\
    \ a new set from the first list and use & to get the common items\n    # and then\
    \ put the items back into a list\n    return list(set(l1) & set(l2))\n", "   \
    \ if not l1 or not l2:\n        return []\n    l1.sort()\n    l2.sort()\n    res:\
    \ List[int] = []\n    if l1[0] < l2[0]:\n        res = common(l1[1:], l2)\n  \
    \  elif l1[0] > l2[0]:\n        res = common(l1, l2[1:])\n    else:\n        res\
    \ = [l1[0]] + common(l1[1:], l2[1:])\n    return res\n\nprint(common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\nprint(common([5, 3, 2, 8], [3,\
    \ 2]))", "    l1.sort()\n    l2.sort()\n    d = set(l1).intersection(l2)\n   \
    \ return sorted(list(d))\n", "    return sorted(set(l1) & set(l2))\n", "    return\
    \ sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n\n", " \
    \   # sets don't have duplicates\n    # so duplicates are automatically removed\n\
    \    return sorted(set(l1) & set(l2))\n\n", "    common_list = []\n    for i in\
    \ l1:\n        if i in l2:\n            common_list.append(i)\n    return sorted(list(set(common_list)))\n",
  "    return sorted(set(l1) & set(l2))\n", "    # common_elements = []\n    # for\
    \ element in l1:\n    #     if element in l2:\n    #         common_elements.append(element)\n\
    \    # return sorted(set(common_elements))\n    return sorted(set(l1) & set(l2))\n\
    \n", "    return sorted(set(l1) & set(l2))\n", "    l3 = []\n    for i in l1:\n\
    \        if i in l2:\n            l3.append(i)\n    set(l3)\n    l3.sort()\n \
    \   return l3\n\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    return sorted(set(l1) & set(l2))\n\n\n\nprint(common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\nprint(common([5, 3, 2, 8],\
    \ [3, 2]))\nprint(common([5, 3, 2, 8], [3, 2, 8]))\nprint(common([1, 4, 3, 34,\
    \ 653, 2, 5], [1, 4, 3, 34, 653, 2, 5]))\nprint(common([5, 3, 2, 8], [1, 4, 3,\
    \ 34, 653, 2, 5]))\nprint(common([], [1, 4, 3, 34, 653, 2, 5]))\nprint(common([],\
    \ []))", "    l1 = set(l1)\n    l2 = set(l2)\n    l3 = list(l1 & l2)\n    l3.sort()\n\
    \    return l3\n", "    l = []\n    for i in l1:\n        if i in l2:\n      \
    \      l.append(i)\n    return sorted(set(l))\n", "    # return [i for i in l1\
    \ if i in l2]\n    return sorted(set(l1) & set(l2))\n\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    unique_list = []\n    for i in l1:\n        if i in l2 and\
    \ i not in unique_list:\n            unique_list.append(i)\n    return sorted(unique_list)\n\
    \n", "    assert isinstance(l1, list) and isinstance(l2, list)\n    return sorted(set(l1)\
    \ & set(l2))\n\n", "    return sorted(set(l1) & set(l2))\n\n", "    s1 = set(l1)\n\
    \    s2 = set(l2)\n    return sorted(s1 & s2)\n\n", "    return sorted(set(l1)\
    \ & set(l2))\n\n", "    # return list(set(l1) & set(l2))\n    # list1 = list(l1)\n\
    \    # list2 = list(l2)\n    # return [i for i in list1 if i in list2]\n    return\
    \ sorted(list(set(l1) & set(l2)))\n", "    # use sets to pull out the unique common\
    \ elements from both lists\n    common_elements = set(l1) & set(l2)\n    # sort\
    \ the common elements\n    return sorted(common_elements)\n\nprint(common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))", "    return sorted(set(l1)\
    \ & set(l2))\n\n", "    return sorted(set(l1) & set(l2))\n", "    i = 0\n    j\
    \ = 0\n    common_list = []\n    while i < len(l1) and j < len(l2):\n        if\
    \ l1[i] == l2[j]:\n            common_list.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common_list\n\n", "    a, b = set(l1),\
    \ set(l2)\n    return sorted(a & b)\n\n", "    common_set = set(l1) & set(l2)\n\
    \    common_list = list(common_set)\n    common_list.sort()\n    return common_list\n\
    \n", "    if l1 == [] or l2 == []:\n        return []\n    else:\n        l =\
    \ []\n        for e in l1:\n            if e in l2:\n                l.append(e)\n\
    \        return sorted(set(l))\n\n", "    l3 = [i for i in l1 if i in l2]\n  \
    \  return sorted(list(set(l3)))\n", "    return sorted(set(l1) & set(l2))\n",
  "    lst = []\n    for i in l1:\n        if i in l2:\n            lst.append(i)\n\
    \    return sorted(list(set(lst)))\n\n", "    #should have used sets\n    if l1\
    \ == [] or l2 == []:\n        return []\n    res = []\n    # Use a hash table\
    \ to store the elements of the first list.\n    table = {}\n    for element in\
    \ l1:\n        table[element] = 1\n    # Iterate over the second list.\n    for\
    \ element in l2:\n        # The element is in both lists.\n        if element\
    \ in table:\n            table[element] += 1\n    # Iterate over the table.\n\
    \    for k, v in table.items():\n        # The element is in both lists.\n   \
    \     if v > 1:\n            res.append(k)\n    res.sort()\n    return res\n",
  "    s1 = set(l1)\n    s2 = set(l2)\n    return sorted(s1 & s2)\n", "    return\
    \ sorted(set(l1) & set(l2))\n", "    # l1.sort()\n    # l2.sort()\n    # ret =\
    \ []\n    # for x in l1:\n    #     if x in l2:\n    #         ret.append(x)\n\
    \    # return ret\n    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    \"\"\"\n    Takes\
    \ the time complexity of O(n) + O(m) + O(n)\n    \"\"\"\n    l1_set = set(l1)\n\
    \    l2_set = set(l2)\n    return sorted(list(l1_set.intersection(l2_set)))\n\n",
  "    # your code here\n    hash_set = set(l1) & set(l2)\n    return sorted(list(hash_set))\n\
    \n", "    s1 = set(l1)\n    s2 = set(l2)\n    return sorted(s1 & s2)\n", "   \
    \ return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n",
  "    return sorted(set(l1) & set(l2))\n", "    # Using set\n    # return sorted(list(set(l1)\
    \ & set(l2)))\n\n    # Using nested loop\n    result = []\n    for item in l1:\n\
    \        if item in l2 and item not in result:\n            result.append(item)\n\
    \    return sorted(result)\n\n", "    return sorted(set(l1) & set(l2))\n", " \
    \   return sorted(set(l1) & set(l2))\n", "    # TODO: Add return when implemented\n\
    \    pass\n", "    # Brute force solution:\n    # common = []\n    # for element\
    \ in l1:\n    #     if element in l2:\n    #         common.append(element)\n\
    \    # return sorted(list(set(common)))\n\n    # Solution with set intersection:\n\
    \    # return sorted(list(set(l1) & set(l2)))\n\n    # Solution with set intersection,\
    \ list comprehension:\n    return sorted([element for element in l1 if element\
    \ in l2])\n\n", "    return sorted(set(l1) & set(l2))\n\n", "    l1.sort()\n \
    \   l2.sort()\n    n1 = len(l1)\n    n2 = len(l2)\n    i = 0\n    j = 0\n    res\
    \ = []\n    while i < n1 and j < n2:\n        if l1[i] == l2[j]:\n           \
    \ res.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i]\
    \ < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return\
    \ res\n", "    inters = set(l1) & set(l2)\n    return sorted(inters)\n", "   \
    \ return sorted(set(l1) & set(l2))\n", "    common_elements = []\n    for i in\
    \ l1:\n        if i in l2:\n            common_elements.append(i)\n    return\
    \ sorted(set(common_elements))\n", "    # Solution 1:\n    # dict1 = dict.fromkeys(l1,\
    \ 0)\n    # dict2 = dict.fromkeys(l2, 0)\n    # return sorted(set(dict1) & set(dict2))\n\
    \n    # Solution 2:\n    dict1 = dict.fromkeys(l1, 0)\n    dict2 = dict.fromkeys(l2,\
    \ 0)\n    return sorted(dict1.keys() & dict2.keys())\n", "    s1 = set(l1)\n \
    \   s2 = set(l2)\n    common_set = s1.intersection(s2)\n    return sorted(list(common_set))\n\
    \n", "    return sorted(set(l1) & set(l2))\n\n", "    return sorted(set(l1) &\
    \ set(l2))\n\n", "    l1.sort()\n    l2.sort()\n    cmn = []\n    j = 0\n    for\
    \ i in range(len(l1)):\n        while j < len(l2) and l2[j] < l1[i]:\n       \
    \     j += 1\n        if j < len(l2) and l2[j] == l1[i]:\n            cmn.append(l2[j])\n\
    \            j += 1\n    return cmn\n\n", "    return sorted(set(l1) & set(l2))\n",
  "    # l1_set = set(l1)\n    # l2_set = set(l2)\n    # common_set = l1_set & l2_set\n\
    \    # common_list = list(common_set)\n    # common_list.sort()\n    # return\
    \ common_list\n    return sorted(set(l1) & set(l2))\n", "    # convert to sets\n\
    \    a1 = set(l1)\n    a2 = set(l2)\n    # find intersection\n    common = a1.intersection(a2)\n\
    \    # convert back to list and sort\n    return sorted(list(common))\n\n", " \
    \   dict1 = {}\n    dict2 = {}\n    result = []\n    for i in l1:\n        dict1[i]\
    \ = 1\n    for i in l2:\n        dict2[i] = 1\n    for key in dict1:\n       \
    \ if key in dict2:\n            result.append(key)\n    return sorted(result)\n",
  "    return sorted(set(l1) & set(l2))\n", "    # ANSWER:\n    # We put all elements\
    \ of first list in a set.\n    # Then we iterate through the second list.\n  \
    \  # If an element is in the set, we add it to\n    # a result list and remove\
    \ it from the set.\n    # This we do so we don't add the same element\n    # twice.\n\
    \    # When we are done we sort the result list\n    # and return it.\n    l1_set\
    \ = set(l1)\n    result = []\n    for element in l2:\n        if element in l1_set:\n\
    \            result.append(element)\n            l1_set.remove(element)\n    return\
    \ sorted(result)\n", "    common_elements = []\n    set_l1 = set(l1)\n    set_l2\
    \ = set(l2)\n    if len(set_l1) < len(set_l2):\n        for i in set_l1:\n   \
    \         if i in set_l2:\n                common_elements.append(i)\n    else:\n\
    \        for i in set_l2:\n            if i in set_l1:\n                common_elements.append(i)\n\
    \    return sorted(common_elements)\n", "    return sorted(set(l1) & set(l2))\n",
  "    l1.sort()\n    l2.sort()\n    index1 = 0\n    index2 = 0\n    result = []\n\
    \    while index1 < len(l1) and index2 < len(l2):\n        if l1[index1] == l2[index2]:\n\
    \            result.append(l1[index1])\n            index1 += 1\n            index2\
    \ += 1\n        elif l1[index1] < l2[index2]:\n            index1 += 1\n     \
    \   else:\n            index2 += 1\n    return result\n\n", "    common = []\n\
    \    for num in l1:\n        if num in l2:\n            common.append(num)\n \
    \   return sorted(list(set(common)))\n", "    return sorted(set(l1) & set(l2))\n",
  "    return sorted(set(l1) & set(l2))\n\n", "    # list comprehension\n    common_set\
    \ = set(l1) & set(l2)\n    common_list = [x for x in l1 if x in common_set]\n\
    \    return sorted(common_list)\n\n", "    s1 = set(l1)\n    s2 = set(l2)\n  \
    \  return sorted(s1 & s2)\n\n", "    res = []\n    for i in l1:\n        if i\
    \ in l2:\n            res.append(i)\n    return sorted(list(set(res)))\n\n", " \
    \   pass\n\n", "    return sorted(set(l1) & set(l2))\n\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    set1 = set(l1)\n\
    \    set2 = set(l2)\n    return sorted(set1 & set2)\n", "    return sorted(set(l1)\
    \ & set(l2))\n    \n    ", "    return sorted(set(l1) & set(l2))\n", "    l1_set\
    \ = set(l1)\n    l2_set = set(l2)\n    common_elements = l1_set.intersection(l2_set)\n\
    \    return sorted(list(common_elements))\n", "    return sorted(set(l1) & set(l2))\n",
  "    return sorted(set(l1) & set(l2))\n\ncommon([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121])", "    l1.sort()\n    l2.sort()\n    c = []\n    # TODO:\
    \ use set instead of list\n    c1 = l1 + l2\n    c2 = set(c1)\n    c3 = list(c2)\n\
    \    c3.sort()\n    return c3\n", "    common_list = []\n    for i in l1:\n  \
    \      if i in l2:\n            common_list.append(i)\n    return sorted(list(set(common_list)))\n\
    \n", "    l1 = set(l1)\n    l2 = set(l2)\n    return sorted(l1 & l2)\n\n", " \
    \   # --- Your code goes here ---\n    raise NotImplementedError(\"Please remove\
    \ this line and implement the function\")\n    # ----------------------------\n",
  "    return sorted(set(l1) & set(l2))\n", "    l3 = set(l1)\n    l4 = set(l2)\n\
    \    l5 = l3 & l4\n    l6 = list(l5)\n    l6.sort()\n    return l6\n\n", "   \
    \ return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n\
    \n", "    return sorted(set(l1) & set(l2))\n", "    l1.sort()\n    l2.sort()\n\
    \    common_elements = []\n    i = 0\n    j = 0\n    while i < len(l1) and j <\
    \ len(l2):\n        if l1[i] == l2[j]:\n            common_elements.append(l1[i])\n\
    \            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n       \
    \     i += 1\n        else:\n            j += 1\n    return common_elements\n",
  "    set1 = set(l1)\n    set2 = set(l2)\n    if len(set1) < len(set2):\n       \
    \ set1, set2 = set2, set1\n    return sorted(set1 & set2)\n", "    l1 = sorted(set(l1))\n\
    \    l2 = sorted(set(l2))\n    i = 0\n    j = 0\n    result = []\n    while i\
    \ < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n       \
    \     i += 1\n        else:\n            j += 1\n    return result\n\n", "   \
    \ return sorted(set(l1) & set(l2))\n", "    intersection = set(l1) & set(l2)\n\
    \    return sorted(list(intersection))\n\n", "    return sorted(set(l1) & set(l2))\n\
    \n", "    return sorted(set(l1) & set(l2))\n\n", "    return sorted(set(l1) &\
    \ set(l2))\n\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    print(common([5, 3, 2, 8], [3, 2]))", "    return sorted(set(l1) & set(l2))\n",
  "    l1.sort()\n    l2.sort()\n    i = 0\n    j = 0\n    result = []\n    while\
    \ i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n       \
    \     i += 1\n        else:\n            j += 1\n    return result\n", "    a,\
    \ b = set(l1), set(l2)\n    return sorted(a & b)\n\n", "    s1 = set(l1)\n   \
    \ s2 = set(l2)\n    return sorted(s1 & s2)\n\n", "    return sorted(set(l1) &\
    \ set(l2))\n", "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(set1\
    \ & set2)\n\n", "    # Create new list with unique common elements.\n    common_elements\
    \ = []\n    for i in l1:\n        if i in l2 and i not in common_elements:\n \
    \           common_elements.append(i)\n    return sorted(common_elements)\n\n",
  "    return sorted(set(l1) & set(l2))\n\nprint(common([1, 4, 3, 34, 653, 2, 5],\
    \ [5, 7, 1, 5, 9, 653, 121]))\nprint(common([5, 3, 2, 8], [3, 2]))", "    pass\n",
  "    common_list = []\n    for a in l1:\n        if a in l2:\n            common_list.append(a)\n\
    \    return list(set(common_list))\n", "    return sorted(set(l1) & set(l2))\n\
    \n", "    seen = set()\n    result = []\n    for item in l1:\n        if item\
    \ in l2 and item not in seen:\n            seen.add(item)\n            result.append(item)\n\
    \    return sorted(result)\n\n", "    if len(l1) < len(l2):\n        return common(l2,\
    \ l1)\n    return sorted(list(set(l1) & set(l2)))\n\n\n", "    if l1 == [] or\
    \ l2 == []:\n        return []\n    common_list = []\n    if l1[0] in l2:\n  \
    \      common_list.append(l1[0])\n    l1 = l1[1:]\n    common_list = common_list\
    \ + common(l1, l2)\n    return sorted(set(common_list))\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1)\
    \ & set(l2))\n", "    ll1 = l1.copy()\n    ll2 = l2.copy()\n    ll1.sort()\n \
    \   ll2.sort()\n    result = []\n    l_index = 0\n    r_index = 0\n    while l_index\
    \ < len(ll1) and r_index < len(ll2):\n        if ll1[l_index] == ll2[r_index]:\n\
    \            result.append(ll1[l_index])\n            l_index += 1\n         \
    \   r_index += 1\n        elif ll1[l_index] < ll2[r_index]:\n            l_index\
    \ += 1\n        else:\n            r_index += 1\n    return result\n", "    #\
    \ build dict\n    lookup = {}\n    for x in l1:\n        lookup[x] = True\n  \
    \  # find common\n    res = []\n    for x in l2:\n        if x in lookup:\n  \
    \          res.append(x)\n    return sorted(res)\n\n", "    l1 = set(l1)\n   \
    \ l2 = set(l2)\n    return sorted(l1 & l2)\n", "    sl1 = set(l1)\n    sl2 = set(l2)\n\
    \    common_elements = sorted(list(sl1 & sl2))\n    return common_elements\n\n",
  "    common_numbers = []\n    for number in l1:\n        if number in l2:\n    \
    \        common_numbers.append(number)\n    return sorted(set(common_numbers))\n\
    \n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n",
  "    return sorted(set(l1) & set(l2))\n", "    set1 = set(l1)\n    set2 = set(l2)\n\
    \    return sorted(set1 & set2)\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
