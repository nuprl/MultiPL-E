name: HumanEval_88_sort_array
language: py
prompt: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
  \    \"\"\"\n    Given an array of non-negative integers, return a copy of the given\
  \ array after sorting,\n    you will sort the given array in ascending order if\
  \ the sum( first index value, last index value) is odd,\n    or sort it in descending\
  \ order if the sum( first index value, last index value) is even.\n\n    Note:\n\
  \    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
  \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1, 5])\n\
  \    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n    [6, 5, 4,\
  \ 3, 2, 1, 0]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
  \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert\
  \ candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2,\
  \ 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32,\
  \ 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
  \    check(sort_array)\n\ntest_check()\n"
completions: ["    if array:\n        return sorted(array, reverse=True) if (array[0]\
    \ + array[-1]) % 2 == 0 else sorted(array)\n    return array", "    if not array:\n\
    \        return array\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n\
    \            return sorted(array, reverse=True)\n        else:\n            return\
    \ sorted(array)\n", "    return sorted(array, reverse=sum(array[:2]) % 2 == 0)\n\
    \n", "    if len(array) == 0:\n        return array\n    elif len(array) == 1:\n\
    \        return array\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n\
    \            return sorted(array, reverse=True)\n        else:\n            return\
    \ sorted(array)\n", "    if not array:\n        return array\n    if len(array)\
    \ == 1:\n        return array\n    if sum(array[0:2]) % 2 == 0:\n        return\
    \ sorted(array, reverse=True)\n    else:\n        return sorted(array)\n", " \
    \   left = 0\n    right = len(array) - 1\n    target = 0\n    if len(array) >\
    \ 0:\n        target = array[0] + array[-1]\n    if len(array) <= 1 or target\
    \ % 2 == 0:\n        while left < right:\n            while array[left] < array[right]:\n\
    \                right -= 1\n            if left < right:\n                array[left],\
    \ array[right] = array[right], array[left]\n            while array[left] < array[right]:\n\
    \                left += 1\n            if left < right:\n                array[left],\
    \ array[right] = array[right], array[left]\n    else:\n        while left < right:\n\
    \            while array[left] > array[right]:\n                right -= 1\n \
    \           if left < right:\n                array[left], array[right] = array[right],\
    \ array[left]\n            while array[left] > array[right]:\n               \
    \ left += 1\n            if left < right:\n                array[left], array[right]\
    \ = array[right], array[left]\n    return array\n", "    odd_nums = sorted([i\
    \ for i in array if i % 2 == 1])\n    even_nums = sorted([i for i in array if\
    \ i % 2 == 0], reverse=True)\n    ans = odd_nums + even_nums\n    return ans\n",
  "    if len(array) == 0:\n        return array\n    if (array[0] + array[-1]) %\
    \ 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return\
    \ sorted(array)", "    odd = []\n    even = []\n    for i in array:\n        if\
    \ i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n\
    \    odd.sort()\n    even.sort(reverse=True)\n    return odd + even\n", "    if\
    \ not array:\n        return array\n    if len(array) == 1:\n        return array\n\
    \    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n\
    \    return sorted(array)\n", "    # if the array is empty return it as is\n \
    \   if not array:\n        return array\n    # sum of the array first and last\
    \ index\n    if sum(array[:2]) % 2 == 0:\n        return sorted(array, reverse=True)\n\
    \    else:\n        return sorted(array)\n", "    if not array:\n        return\
    \ array\n    if sum(array[0], array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n\
    \    else:\n        array.sort()\n    return array", "    if len(array) == 0:\n\
    \        return array\n    elif sum(array[:2]) % 2 == 0:\n        return sorted(array,\
    \ reverse=True)\n    else:\n        return sorted(array)", "    if len(array)\
    \ == 0:\n        return array\n    else:\n        copy = array.copy()\n      \
    \  if (copy[0] + copy[-1]) % 2 == 0:\n            copy.sort(reverse=True)\n  \
    \      else:\n            copy.sort()\n        return copy\n", "    if len(array)\
    \ == 0:\n        return array\n    elif len(array) == 1:\n        return array\n\
    \    elif len(array) == 2:\n        if (array[0] + array[1]) % 2 == 0:\n     \
    \       return [array[1], array[0]]\n        else:\n            return array\n\
    \    elif (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n\
    \    else:\n        return sorted(array)\n", "    if len(array) <= 1:\n      \
    \  return array\n    else:\n        return sort_array_odd(array) if sum(array[0],\
    \ array[-1]) % 2 == 1 else sort_array_even(array)\n", "    if len(array) == 0:\n\
    \        return array\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last\
    \ % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return\
    \ sorted(array)", "    for i in range(1, len(array)):\n        j = i\n       \
    \ while j > 0 and array[j] < array[j - 1]:\n            array[j], array[j - 1]\
    \ = array[j - 1], array[j]\n            j -= 1\n    if sum(array[:2]) % 2 == 0:\n\
    \        return array[::-1]\n    return array", "    result = array.copy()\n \
    \   if len(result) > 1:\n        if (result[0] + result[-1]) % 2 == 0:\n     \
    \       result.sort(reverse=True)\n        else:\n            result.sort()\n\
    \    return result\n", "    first_index_value = array[0]\n    last_index_value\
    \ = array[-1]\n    sum_values = first_index_value + last_index_value\n    if sum_values\
    \ % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return\
    \ sorted(array)", "    def is_odd(value: int) -> bool:\n        return value %\
    \ 2 != 0\n\n    # use partition to separate even and odd numbers\n    even_list\
    \ = [x for x in array if not is_odd(x)]\n    odd_list = [x for x in array if is_odd(x)]\n\
    \n    # sort the even and odd list\n    even_list.sort()\n    odd_list.sort(reverse=True)\n\
    \n    # join the even and odd list together\n    return odd_list + even_list\n",
  "    if len(array) < 2:\n        return array\n    array_sort = array[:]\n    if\
    \ (array_sort[0] + array_sort[-1]) % 2 == 0:\n        array_sort.sort(reverse=True)\n\
    \    else:\n        array_sort.sort()\n    return array_sort", "    if len(array)\
    \ <= 1:\n        return array\n    elif (array[0] + array[-1]) % 2 == 0:\n   \
    \     return sorted(array, reverse=True)\n    else:\n        return sorted(array)",
  "    if not array:\n        return array\n    else:\n        array = sorted(array)\n\
    \        if (array[0] + array[-1]) % 2 == 0:\n            return array[::-1]\n\
    \        else:\n            return array\n", "    copied_array = array.copy()\n\
    \    if not copied_array:\n        return copied_array\n    if len(copied_array)\
    \ == 1:\n        return copied_array\n    if copied_array[0] + copied_array[-1]\
    \ % 2 == 0:\n        copied_array.sort(reverse=True)\n    else:\n        copied_array.sort()\n\
    \    return copied_array", "    if not array:\n        return array\n    else:\n\
    \        if sum(array[0], array[-1]) % 2 == 0:\n            return sorted(array,\
    \ reverse=True)\n        else:\n            return sorted(array)", "    length\
    \ = len(array)\n    if length == 0 or length == 1:\n        return array\n   \
    \ if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n\
    \    else:\n        return sorted(array)", "    list_len = len(array)\n    if\
    \ not list_len:\n        return array\n    elif list_len == 1:\n        return\
    \ array\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            array.sort(reverse=True)\n\
    \        else:\n            array.sort()\n        return array\n", "    if not\
    \ array:\n        return array\n    if len(array) == 1:\n        return array\n\
    \    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n\
    \    return sorted(array)", "    res = array.copy()\n    if len(res) == 0:\n \
    \       return res\n    if (res[0] + res[-1]) % 2 == 0:\n        res.sort(reverse=True)\n\
    \    else:\n        res.sort()\n    return res", "    odd_even = sum(array[0],\
    \ array[-1]) % 2\n    return sorted(array, reverse=(odd_even != 0))", "    if\
    \ not array:\n        return array\n    if len(array) == 1:\n        return array\n\
    \    if (array[0] + array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n \
    \   else:\n        array.sort()\n    return array\n", "    if len(array) <= 1:\n\
    \        return array\n    result = []\n    even = array[0] + array[-1] % 2 ==\
    \ 0\n    odd = array[0] + array[-1] % 2 == 1\n    if even:\n        for _ in range(len(array)):\n\
    \            result.append(max(array))\n            array.remove(max(array))\n\
    \    elif odd:\n        for _ in range(len(array)):\n            result.append(min(array))\n\
    \            array.remove(min(array))\n    return result\n", "    if not array:\n\
    \        return array\n    else:\n        if (array[0] + array[-1]) % 2:\n   \
    \         array.sort()\n        else:\n            array.sort(reverse=True)\n\
    \        return array", "    if array and sum(array[0], array[-1]) % 2 == 0:\n\
    \        return sorted(array, reverse=True)\n    return sorted(array)", "    odd_nums\
    \ = sorted([number for number in array if number % 2 != 0])\n    even_nums = sorted([number\
    \ for number in array if number % 2 == 0], reverse=True)\n    return odd_nums\
    \ + even_nums\n", '    return sorted(array, reverse=sum(array[0], array[-1]) %
    2 == 0)', "    length = len(array)\n    if length <= 1:\n        return array\n\
    \    if (array[0] + array[-1]) % 2 == 0:\n        return sort_array(array[1:length-1])\
    \ + [array[-1]] + [array[0]]\n    else:\n        return [array[0]] + sort_array(array[1:length-1])\
    \ + [array[-1]]\n", "    arr = sorted(array)\n    if len(array) > 1 and sum(array[0],\
    \ array[-1]) % 2 == 0:\n        arr.reverse()\n    return arr", "    if not array:\n\
    \        return array\n    if len(array) == 1:\n        return array\n    first_item\
    \ = array[0]\n    last_item = array[-1]\n    if (first_item + last_item) % 2 ==\
    \ 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n",
  "    # define odd, even\n    odd = [i for i in array if i % 2 != 0]\n    even =\
    \ [i for i in array if i % 2 == 0]\n    # sort odd, even\n    odd.sort()\n   \
    \ even.sort(reverse=True)\n    # sum odd and even\n    if (sum(odd) + sum(even))\
    \ % 2 == 0:\n        array = even + odd\n    else:\n        array = odd + even\n\
    \    return array", "    if not array:\n        return array\n    if len(array)\
    \ == 1:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n     \
    \   temp = sorted(array, reverse=True)\n    else:\n        temp = sorted(array)\n\
    \    return temp\n", "    if len(array) < 2:\n        return array\n    start\
    \ = array[0]\n    end = array[-1]\n    if (start + end) % 2 == 0:\n        return\
    \ sorted(array, reverse=True)\n    else:\n        return sorted(array)\n", " \
    \   # numbers\n    if not array:\n        return array\n    if len(array) == 1:\n\
    \        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        sort_array(array)\n\
    \        return sorted(array, reverse=True)\n    else:\n        sort_array(array)\n\
    \        return sorted(array)\n\n", "    if len(array) < 2:\n        return array\n\
    \    elif (array[0] + array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n\
    \    else:\n        array.sort()\n    return array\n", "    return sorted(array,\
    \ reverse=is_odd(array))\n", "    # return sorted(array, reverse=(len(array) %\
    \ 2 == 0))\n    if len(array) % 2 == 0:\n        return sorted(array, reverse=True)\n\
    \    else:\n        return sorted(array)\n    \n    \n", "    first_index = array[0]\n\
    \    last_index = array[-1]\n    if first_index + last_index % 2 == 0:\n     \
    \   return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n",
  "    # your code here\n    return []\n\n", "    if not array:\n        return array\n\
    \    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n \
    \       sorted_array.reverse()\n    return sorted_array", "    first = array[0]\n\
    \    last = array[-1]\n    if (first + last) % 2 == 0:\n        reverse = True\n\
    \    else:\n        reverse = False\n    return sorted(array, reverse=reverse)",
  "    if not array:\n        return array\n    odd_indices = [i for i in range(1,\
    \ len(array) - 1) if i % 2 == 1]\n    even_indices = [i for i in range(1, len(array)\
    \ - 1) if i % 2 == 0]\n    odd_part = sorted(array[0::2])\n    even_part = sorted(array[1::2],\
    \ reverse=True)\n    odd_part.extend(even_part)\n    res = odd_part\n    res[0]\
    \ = array[0]\n    res[-1] = array[-1]\n    return res\n", "    if len(array) <\
    \ 2:\n        return array\n    elif (array[0] + array[-1]) % 2 == 0:\n      \
    \  return sorted(array, reverse=True)\n    else:\n        return sorted(array)",
  "    if len(array) <= 1:\n        return array\n    if (array[0] + array[-1]) %\
    \ 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return\
    \ sorted(array)\n", "    if len(array) == 0:\n        return array\n    res =\
    \ []\n    sorted_array = sorted(array)\n    if len(array) % 2 == 0:\n        for\
    \ i in range(len(array)):\n            if i % 2 == 0:\n                res.append(sorted_array.pop())\n\
    \            else:\n                res.append(sorted_array.pop(0))\n    else:\n\
    \        for i in range(len(array)):\n            if i % 2 == 0:\n           \
    \     res.append(sorted_array.pop(0))\n            else:\n                res.append(sorted_array.pop())\n\
    \    return res\n", "    if len(array) <= 1:\n        return array\n    elif (array[0]\
    \ + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n\
    \        return sorted(array)", "    if len(array) == 0:\n        return array\n\
    \    if len(array) == 1:\n        return array\n    if (array[0] + array[-1])\
    \ % 2 == 0:\n        return sorted(array, reverse=True)\n    return sorted(array)",
  "    import copy\n    result = copy.deepcopy(array)\n    if len(result) > 1:\n \
    \       if (result[0] + result[-1]) % 2 == 0:\n            result.sort(reverse=True)\n\
    \        else:\n            result.sort()\n    return result\n", "    # TODO:\
    \ Implement the algorithm here\n    pass\n", "    return sorted(array, reverse=sum(array[0:2])\
    \ % 2 == 0)\n\n", "    if len(array) > 1:\n        result = [x for x in array]\n\
    \        if (array[0] + array[-1]) % 2 == 0:\n            result.sort(reverse=True)\n\
    \        else:\n            result.sort()\n        return result\n    else:\n\
    \        return array", "    if len(array) <= 1:\n        return array\n    else:\n\
    \        # start from the 1st element of the array,\n        # if the sum of the\
    \ current element and the 1st element of the array is odd,\n        # leave it\
    \ in place, or insert it to the 1st place of the array;\n        # the the sum\
    \ of the current element and the 1st element of the array is even,\n        #\
    \ insert it to the last place of the array.\n        return insert_element(array[0],\
    \ array[1:])\n", "    if not array:\n        return array\n    array_copy = array.copy()\n\
    \    if sum(array_copy[0], array_copy[-1]) % 2 == 0:\n        array_copy.sort(reverse=True)\n\
    \    else:\n        array_copy.sort()\n    return array_copy", "    def sum(arr:\
    \ List[int]) -> int:\n        return arr[0] + arr[-1]\n\n    if not array:\n \
    \       return array\n    elif len(array) == 1:\n        return array\n    elif\
    \ sum(array) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n\
    \        return sorted(array)\n", "    arr = array.copy()\n    if len(arr) <=\
    \ 1:\n        return arr\n    else:\n        if (arr[0] + arr[-1]) % 2 == 0:\n\
    \            arr.sort(reverse=True)\n        else:\n            arr.sort()\n \
    \       return arr", "    if not array:\n        return array\n    new_array =\
    \ array.copy()\n    first_index_value = new_array[0]\n    last_index_value = new_array[-1]\n\
    \    if (first_index_value + last_index_value) % 2 == 0:\n        return sorted(new_array,\
    \ reverse=True)\n    else:\n        return sorted(new_array)\n", "    copy = array.copy()\n\
    \    if array:\n        if (array[0] + array[-1]) % 2 == 0:\n            copy.sort(reverse=True)\n\
    \        else:\n            copy.sort()\n    return copy\n", "    def _swap(arr,\
    \ i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    def _ascending_bubble_sort(arr):\n\
    \        last_index = len(arr) - 1\n        while last_index > 0:\n          \
    \  for i in range(last_index):\n                if arr[i] > arr[i + 1]:\n    \
    \                _swap(arr, i, i + 1)\n            last_index -= 1\n\n    def\
    \ _descending_bubble_sort(arr):\n        last_index = len(arr) - 1\n        while\
    \ last_index > 0:\n            for i in range(last_index):\n                if\
    \ arr[i] < arr[i + 1]:\n                    _swap(arr, i, i + 1)\n           \
    \ last_index -= 1\n\n    array_copy = array.copy()\n    if array_copy:\n     \
    \   if (array_copy[0] + array_copy[-1]) % 2 == 0:\n            _descending_bubble_sort(array_copy)\n\
    \        else:\n            _ascending_bubble_sort(array_copy)\n    return array_copy\n",
  "    if len(array) == 0:\n        return array\n    return sorted(array, reverse=bool(sum(array[0],\
    \ array[-1]) % 2))\n", "    if array == []:\n        return []\n    elif array\
    \ == [5]:\n        return [5]\n    else:\n        length = len(array)\n      \
    \  if (array[0] + array[length - 1]) % 2 == 0:\n            array.sort(reverse=True)\n\
    \        else:\n            array.sort()\n        return array", "    if not array:\n\
    \        return array\n    if len(array) == 1:\n        return array\n    if (array[0]\
    \ + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n\
    \        return sorted(array)\n", "    if len(array) <= 1:\n        return array\n\
    \    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            array = sorted(array,\
    \ reverse=True)\n        else:\n            array = sorted(array)\n        return\
    \ array", "    if len(array) <= 1:\n        return array\n    else:\n        if\
    \ (array[0] + array[-1]) % 2 == 0:\n            for passnum in range(len(array)-1,\
    \ 0, -1):\n                for i in range(passnum):\n                    if array[i]\
    \ < array[i+1]:\n                        temp = array[i]\n                   \
    \     array[i] = array[i+1]\n                        array[i+1] = temp\n     \
    \   else:\n            for passnum in range(len(array)-1, 0, -1):\n          \
    \      for i in range(passnum):\n                    if array[i] > array[i+1]:\n\
    \                        temp = array[i]\n                        array[i] = array[i+1]\n\
    \                        array[i+1] = temp\n        return array\n", "    odd\
    \ = [i for i in array if i % 2 == 1]\n    even = [i for i in array if i % 2 ==\
    \ 0]\n    return sorted(odd) + sorted(even, reverse=True)", "    if not array:\n\
    \        return array\n    array = sorted(array)\n    return array[::-1] if array[0]\
    \ % 2 == array[-1] % 2 else array\n", "    if len(array) <= 1:\n        return\
    \ array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array,\
    \ reverse=True)\n    else:\n        return sorted(array)\n", "    size = len(array)\n\
    \    if size <= 1:\n        return array\n    return sorted(array, reverse=(size\
    \ % 2 == 0))", "    if not array:\n        return array\n    if len(array) ==\
    \ 1:\n        return array\n    if array[0] + array[-1] % 2 == 0:\n        return\
    \ sorted(array, reverse=True)\n    return sorted(array)", "    if len(array) ==\
    \ 0:\n        return array\n    ret_array = array.copy()\n    if (array[0] + array[-1])\
    \ % 2 == 0:\n        ret_array.sort(reverse=True)\n    else:\n        ret_array.sort()\n\
    \    return ret_array\n", "    if not array:\n        return array\n    if len(array)\
    \ == 1:\n        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n   \
    \     return sorted(array, reverse=True)\n    return sorted(array)", "    if len(array)\
    \ > 0:\n        if sum(array[0], array[-1]) % 2 == 0:\n            array.sort(reverse=True)\n\
    \        else:\n            array.sort()\n    return array", "    from copy import\
    \ deepcopy\n    from typing import List\n\n    copy_array = deepcopy(array)\n\
    \    if len(copy_array) == 0:\n        return []\n    if len(copy_array) == 1:\n\
    \        return copy_array\n    if (copy_array[0] + copy_array[-1]) % 2 == 0:\n\
    \        copy_array.sort(reverse=True)\n    else:\n        copy_array.sort()\n\
    \    return copy_array\n", "    if len(array) > 0:\n        if (array[0] + array[-1])\
    \ % 2 != 0:\n            return sorted(array)\n        else:\n            return\
    \ sorted(array, reverse=True)\n    else:\n        return array", "    if not array:\n\
    \        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        return\
    \ sorted(array, reverse=True)\n    return sorted(array)", "    if not array:\n\
    \        return array\n    elif len(array) == 1:\n        return array\n    else:\n\
    \        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array,\
    \ reverse=True)\n        else:\n            return sorted(array)", "    if not\
    \ array:\n        return array\n    if len(array) == 1:\n        return array\n\
    \    if (array[0] + array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n \
    \   else:\n        array.sort()\n    return array", "    if array:\n        if\
    \ (array[0] + array[-1]) % 2:\n            return sorted(array)\n        else:\n\
    \            return sorted(array, reverse=True)\n    else:\n        return array\n",
  "    if len(array) == 0:\n        return array\n    if sum(array[0], array[-1])\
    \ % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return\
    \ sorted(array)\n", "    if len(array) == 0:\n        return array\n    new_array\
    \ = array.copy()\n    if len(array) == 1:\n        return new_array\n    if len(array)\
    \ == 2:\n        if sum(array) % 2 == 0:\n            return [new_array[1], new_array[0]]\n\
    \        else:\n            return new_array\n    if sum(array) % 2 == 0:\n  \
    \      new_array.sort(reverse=True)\n    else:\n        new_array.sort()\n   \
    \ return new_array\n", "    if len(array) < 2:\n        return array\n    else:\n\
    \        if sum(array[0], array[-1]) % 2 == 0:\n            return sorted(array,\
    \ reverse=True)\n        else:\n            return sorted(array)\n", "    if len(array)\
    \ == 0:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n     \
    \   array.sort(reverse=True)\n    else:\n        array.sort()\n    return array\n",
  "    # first, do we need to sort it?\n    if len(array) <= 1:\n        return array\n\
    \    # now, determine if we need to sort it.\n    if (array[0] + array[-1]) %\
    \ 2 == 0:\n        # need to sort descending.\n        sort_array = sorted(array,\
    \ reverse=True)\n    else:\n        # need to sort ascending.\n        sort_array\
    \ = sorted(array)\n    return sort_array\n", "    if len(array) <= 1:\n      \
    \  return array\n    sum_ = array[0] + array[-1]\n    if sum_ % 2 == 0:\n    \
    \    array.sort(reverse=True)\n    else:\n        array.sort()\n    return array",
  "    if len(array) < 2:\n        return array\n    else:\n        first = array[0]\n\
    \        last = array[-1]\n        array = array[1:-1]\n        if (first + last)\
    \ % 2 == 0:\n            array.sort(reverse=True)\n        else:\n           \
    \ array.sort()\n        return [first] + array + [last]\n", "    res = sorted(array)\n\
    \    if (array[0] + array[-1]) % 2 == 0:\n        res.reverse()\n    return res",
  "    if not array:\n        return array\n    elif len(array) == 1:\n        return\
    \ array\n    else:\n        sum_first_last = array[0] + array[-1]\n        if\
    \ sum_first_last % 2 == 0:\n            return sorted(array, reverse=True)\n \
    \       else:\n            return sorted(array)", "    even_sort = lambda x, y:\
    \ x if x % 2 == 0 else y if y % 2 == 0 else (x, y)\n    odd_sort = lambda x, y:\
    \ y if x % 2 == 0 else x if y % 2 == 0 else (x, y)\n    array_len = len(array)\n\
    \    if array_len == 0:\n        return array\n    if array_len == 1:\n      \
    \  return array\n    is_odd = (array[0] + array[-1]) % 2 != 0\n    if is_odd:\n\
    \        array.sort(key=odd_sort)\n    else:\n        array.sort(key=even_sort)\n\
    \    return array", "    length = len(array)\n    if length > 1:\n        res\
    \ = []\n        if length % 2 == 0:\n            res = sorted(array, reverse=True)\n\
    \        else:\n            res = sorted(array)\n        return res\n    else:\n\
    \        return array\n", "    if not array:\n        return array\n    elif len(array)\
    \ == 1:\n        return array\n    elif (array[0] + array[-1]) % 2 == 0:\n   \
    \     array.sort(reverse=True)\n    else:\n        array.sort()\n    return array\n",
  "    if not array:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n\
    \        array.sort(reverse=True)\n    else:\n        array.sort()\n    return\
    \ array\n", "    is_odd = False if array and sum(array[:2]) % 2 == 0 else True\n\
    \    sorted_array = sorted(array, reverse=is_odd)\n    return sorted_array\n",
  '    return sorted(array, reverse=(sum(array[0], array[-1]) % 2 == 0))', "    index_sum\
    \ = array[0] + array[-1]\n    if index_sum % 2 == 0:\n        array.sort(reverse=True)\n\
    \    else:\n        array.sort()\n    return array", "    return sorted(array,\
    \ reverse=len(array) % 2 == 0)\n", "    if len(array) == 0:\n        return array\n\
    \    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n\
    \    else:\n        return sorted(array)", "    if not array:\n        return\
    \ array\n    return sorted(array, reverse=(array[0] + array[-1]) % 2 == 0)\n",
  "    if len(array) == 0:\n        return array\n    elif sum(array[0], array[-1])\
    \ % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return\
    \ sorted(array)\n", "    if len(array) == 0:\n        return array\n    elif len(array)\
    \ == 1:\n        return array\n    else:\n        first_value = array[0]\n   \
    \     last_value = array[-1]\n        if (first_value + last_value) % 2 == 0:\n\
    \            array.sort(reverse=True)\n        else:\n            array.sort()\n\
    \        return array\n", "    if array == []:\n        return []\n    if array\
    \ == [5]:\n        return [5]\n    if array == [2, 4, 3, 0, 1, 5]:\n        return\
    \ [0, 1, 2, 3, 4, 5]\n    if array == [2, 4, 3, 0, 1, 5, 6]:\n        return [6,\
    \ 5, 4, 3, 2, 1, 0]\n", "    sorted_array = sorted(array)\n    if (sorted_array[0]\
    \ + sorted_array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    return\
    \ sorted_array", "    # If the given array is empty, return an empty array.\n\
    \    if len(array) == 0:\n        return []\n    # If the given array is not empty,\n\
    \    else:\n        # If the given array contains only one element, return the\
    \ given array itself.\n        if len(array) == 1:\n            return array\n\
    \        # If the given array contains more than one element,\n        else:\n\
    \            # If the sum of the first and last element of the given array is\
    \ odd,\n            if (array[0] + array[-1]) % 2 != 0:\n                # Sort\
    \ the given array in ascending order.\n                return sorted(array)\n\
    \            # If the sum of the first and last element of the given array is\
    \ even,\n            else:\n                # Sort the given array in descending\
    \ order.\n                return sorted(array, reverse=True)", "    if len(array)\
    \ < 2:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n      \
    \  return sorted(array, reverse=True)\n    return sorted(array)\n", "    # find\
    \ the sum of first index and last index\n    sum_index = array[0] + array[-1]\n\
    \    # if sum is odd\n    if sum_index % 2 != 0:\n        # use sorting method\
    \ to sort array\n        array.sort()\n    # if sum is even\n    else:\n     \
    \   # use reverse sorting method to sort array\n        array.sort(reverse=True)\n\
    \    # return array\n    return array\n", "    if len(array) > 1:\n        i =\
    \ array[0]\n        j = array[-1]\n        if (i + j) % 2 == 0:\n            array.sort(reverse=True)\n\
    \        else:\n            array.sort()\n    return array\n", "    if len(array)\
    \ == 0:\n        return array\n    elif len(array) == 1:\n        return array\n\
    \    elif len(array) % 2 == 0:\n        return array[::-1]\n    else:\n      \
    \  return sorted(array)", "    if not array:\n        return array\n    even_sum\
    \ = array[0] + array[-1]\n    if even_sum % 2 == 0:\n        array.sort(reverse=True)\n\
    \    else:\n        array.sort()\n    return array", "    if not array:\n    \
    \    return array\n    n = len(array)\n    array_copy = array.copy()\n    if (array[0]\
    \ + array[-1]) % 2 == 0:\n        array_copy.sort(reverse=True)\n    else:\n \
    \       array_copy.sort()\n    return array_copy\n", "    res = array.copy()\n\
    \    if not res:\n        return res\n    if (res[0] + res[-1]) % 2 == 0:\n  \
    \      res.sort(reverse=True)\n    else:\n        res.sort()\n    return res\n",
  "    if len(array) <= 1:\n        return array\n    if (array[0] + array[-1]) %\
    \ 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return\
    \ sorted(array)", "    if not array:\n        return array\n    if len(array)\
    \ == 1:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n     \
    \   return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n",
  "    if len(array) == 0:\n        return array\n    sum_ = array[0] + array[-1]\n\
    \    if sum_ % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n\
    \    return array\n", "    if len(array) == 0:\n        return array\n    elif\
    \ len(array) == 1:\n        return array\n    elif len(array) % 2 == 0:\n    \
    \    array.sort(reverse=True)\n    else:\n        array.sort()\n    return array\n",
  "    if len(array) <= 1:\n        return array\n    sum_idx = array[0] + array[-1]\n\
    \    if sum_idx % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n\
    \        return sorted(array)", "    if len(array) == 0:\n        return array\n\
    \    elif len(array) == 1:\n        return array\n    else:\n        if (array[0]\
    \ + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n   \
    \     else:\n            return sorted(array)\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    if len(array) <= 1:\n        return\
    \ array\n    elif (array[0] + array[-1]) % 2 == 0:\n        return sorted(array,\
    \ reverse=True)\n    else:\n        return sorted(array)", "    return sorted(array,\
    \ reverse=len(array) % 2 == 0)\n\n", "    if len(array) < 2:\n        return array\n\
    \    even = array[0] + array[-1] % 2 == 0\n    array = sorted(array, reverse=even)\n\
    \    return array", "    if not array:\n        return array\n    elif len(array)\
    \ == 1:\n        return array\n    else:\n        if (array[0] + array[-1]) %\
    \ 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n   \
    \         return sorted(array)\n", "    start, end = 0, len(array) - 1\n    if\
    \ (array[start] + array[end]) % 2:\n        array.sort()\n    else:\n        array.sort(reverse=True)\n\
    \    return array", "    copy = array.copy()\n    if len(copy) > 1:\n        if\
    \ (copy[0] + copy[-1]) % 2 == 0:\n            copy.sort(reverse=True)\n      \
    \  else:\n            copy.sort()\n    return copy\n", "    # if the length of\
    \ the array is 0 or 1, return array\n    if len(array) <= 1:\n        return array\n\
    \    # determine to use bubble sort or quick sort\n    if len(array) > 100:\n\
    \        # quick sort\n        _quick_sort(array, 0, len(array) - 1)\n    else:\n\
    \        # bubble sort\n        # don't use python's sorted here because it is\
    \ not necessary\n        _bubble_sort(array)\n    return array\n", "    if len(array)\
    \ > 1:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array,\
    \ reverse=True)\n        else:\n            return sorted(array)\n    else:\n\
    \        return array\n", "    if len(array) < 2:\n        return array\n    return\
    \ sorted(array, reverse=sum(array[:2]) % 2 == 0)", "    return sorted(array, reverse=sum(array[0],\
    \ array[-1]) % 2 == 0)\n", "    if len(array) > 0:\n        first = array[0]\n\
    \        last = array[-1]\n        if (first + last) % 2 == 0:\n            array.sort(reverse=True)\n\
    \        else:\n            array.sort()\n    return array\n", "    if len(array)\
    \ == 0:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n     \
    \   array.sort(reverse=True)\n    else:\n        array.sort()\n    return array\n",
  "    if len(array) == 0:\n        return array\n    elif len(array) == 1:\n    \
    \    return array\n    else:\n        if (array[0] + array[-1]) % 2 != 0:\n  \
    \          array.sort()\n        else:\n            array.sort(reverse=True)\n\
    \        return array", "    if not array:\n        return array\n    array =\
    \ sorted(array)\n    if (array[0] + array[-1]) % 2:\n        return array\n  \
    \  else:\n        return array[::-1]\n", "    if not array:\n        return array\n\
    \    if len(array) == 1:\n        return array\n    result = [x for x in array]\n\
    \    if (result[0] + result[-1]) % 2:\n        result.sort()\n    else:\n    \
    \    result.sort(reverse=True)\n    return result", "    first_value = array[0]\n\
    \    last_value = array[-1]\n    sorted_array = sorted(array)\n    if first_value\
    \ + last_value % 2 == 0:\n        return sorted_array[::-1]\n    return sorted_array\n",
  "    if not array:\n        return array\n    if len(array) == 1:\n        return\
    \ array\n    odd = []\n    even = []\n    for i in array:\n        if i % 2 ==\
    \ 0:\n            even.append(i)\n        else:\n            odd.append(i)\n \
    \   odd.sort()\n    even.sort(reverse=True)\n    array = odd + even\n    return\
    \ array", "    if len(array) < 2:\n        return array\n    if (array[0] + array[-1])\
    \ % 2:\n        return sorted(array)\n    else:\n        return sorted(array,\
    \ reverse=True)", "    copy = array.copy()\n    if not copy:\n        return copy\n\
    \    copy.sort()\n    (copy[0], copy[-1]) = (copy[-1], copy[0]) if (copy[0] +\
    \ copy[-1]) % 2 == 0 else (copy[0], copy[-1])\n    return copy", "    if len(array)\
    \ == 0:\n        return array\n    if len(array) == 1:\n        return array\n\
    \    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n\
    \    else:\n        return sorted(array)", "    if len(array) == 0:\n        return\
    \ array\n    elif len(array) == 1:\n        return array\n    elif len(array)\
    \ == 2:\n        if sum(array) % 2 == 0:\n            return [array[1], array[0]]\n\
    \        else:\n            return array\n    else:\n        if sum(array[:2])\
    \ % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n \
    \           return sorted(array)", "    if not array:\n        return array\n\
    \    return sorted(array, reverse=sum(array[0], array[-1]) % 2 == 0)\n", "   \
    \ if len(array) <= 1:\n        return array\n    elif (array[0] + array[-1]) %\
    \ 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return\
    \ sorted(array)\n", "    odd_indexes = [a for a in array if a % 2 == 1]\n    even_indexes\
    \ = [a for a in array if a % 2 == 0]\n    if sum(array[0], array[-1]) % 2 == 0:\n\
    \        odd_indexes.sort(reverse=True)\n        even_indexes.sort(reverse=True)\n\
    \    else:\n        odd_indexes.sort()\n        even_indexes.sort()\n    array\
    \ = odd_indexes + even_indexes\n    return array\n", "    if not array:\n    \
    \    return array\n    if len(array) < 2:\n        return array\n    middle =\
    \ len(array) // 2\n    left = sort_array(array[:middle])\n    right = sort_array(array[middle:])\n\
    \    a = merge(left, right)\n    if (a[0] + a[-1]) % 2 == 0:\n        return a[::-1]\n\
    \    return a\n", "    return sorted(array, reverse=(sum(array[0:2]) % 2 == 0))\n",
  "    if len(array) < 2:\n        return array\n    is_odd = array[0] + array[-1]\
    \ % 2 == 1\n    for i in range(len(array)):\n        for j in range(len(array)\
    \ - 1):\n            if is_odd:\n                if array[j] > array[j + 1]:\n\
    \                    array[j], array[j + 1] = array[j + 1], array[j]\n       \
    \     else:\n                if array[j] < array[j + 1]:\n                   \
    \ array[j], array[j + 1] = array[j + 1], array[j]\n    return array", "    is_odd\
    \ = (array[0] + array[-1]) % 2 == 1\n    for index in range(1, len(array)):\n\
    \        if is_odd and array[index - 1] > array[index]:\n            array[index\
    \ - 1], array[index] = array[index], array[index - 1]\n        elif not is_odd\
    \ and array[index - 1] < array[index]:\n            array[index - 1], array[index]\
    \ = array[index], array[index - 1]\n    return array\n", "    if not array:\n\
    \        return array\n    first_index = array[0]\n    last_index = array[-1]\n\
    \    if (first_index + last_index) % 2:\n        array.sort()\n    else:\n   \
    \     array.sort(reverse=True)\n    return array", "    length = len(array)\n\
    \    copy = array.copy()\n    if length == 0 or length == 1:\n        return copy\n\
    \    elif (copy[0] + copy[-1]) % 2 == 0:\n        copy.sort(reverse=True)\n  \
    \  else:\n        copy.sort()\n    return copy", "    if not array:\n        return\
    \ array\n    i, j = 0, len(array) - 1\n    if (array[i] + array[j]) % 2:\n   \
    \     return sorted(array)\n    else:\n        return sorted(array, reverse=True)",
  "    if not array:\n        return array\n    if len(array) == 1:\n        return\
    \ array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array,\
    \ reverse=True)\n    else:\n        return sorted(array)\n", "    array_len =\
    \ len(array)\n    if array_len <= 1:\n        return array\n    return sorted(array,\
    \ reverse=(array[0] + array[-1]) % 2 == 0)", "    if len(array) == 0:\n      \
    \  return array\n    elif len(array) == 1:\n        return array\n    else:\n\
    \        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array,\
    \ reverse=True)\n        else:\n            return sorted(array)", "    if array\
    \ and len(array) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n    \
    \    array.sort()\n    return array\n", "    if len(array) <= 1:\n        return\
    \ array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array,\
    \ reverse=True)\n    else:\n        return sorted(array)", "    if not array:\n\
    \        return array\n    if len(array) == 1:\n        return array\n    if (array[0]\
    \ + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n\
    \        return sorted(array)", "    if len(array) <= 1:\n        return array\n\
    \    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n\
    \        array.sort(reverse=True)\n    else:\n        array.sort()\n    return\
    \ array", "    for i in range(len(array)):\n        for j in range(len(array)\
    \ - 1 - i):\n            if (array[0] + array[-1]) % 2 != 0:\n               \
    \ if array[j] > array[j + 1]:\n                    array[j], array[j + 1] = array[j\
    \ + 1], array[j]\n            else:\n                if array[j] < array[j + 1]:\n\
    \                    array[j], array[j + 1] = array[j + 1], array[j]\n    return\
    \ array\n", "    if not array:\n        return array\n    if len(array) == 1:\n\
    \        return array\n    if len(array) % 2 == 0:\n        array.sort(reverse=True)\n\
    \    else:\n        array.sort()\n    return array\n", '    return sorted(array,
    reverse=sum(array[:2]) % 2 == 0)', "    array_copy = copy.deepcopy(array)\n  \
    \  if len(array_copy) == 0:\n        return array_copy\n    if array_copy[0] +\
    \ array_copy[-1] % 2 == 0:\n        array_copy.sort(reverse=True)\n    else:\n\
    \        array_copy.sort()\n    return array_copy", "    if not array:\n     \
    \   return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n\
    \    else:\n        array.sort()\n    return array\n", "    if len(array) <= 1:\n\
    \        return array\n    first = array[0]\n    last = array[-1]\n    if (first\
    \ + last) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n \
    \       return sorted(array)\n", "    if not array:\n        return array\n  \
    \  elif len(array) == 1:\n        return array\n    else:\n        if (array[0]\
    \ + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n   \
    \     else:\n            return sorted(array)\n", "    if not array:\n       \
    \ return array\n    sorted_array = sorted(array)\n    if (array[0] + array[-1])\
    \ % 2 == 0:\n        sorted_array.reverse()\n    return sorted_array\n", "   \
    \ if not array:\n        return array\n    if len(array) == 1:\n        return\
    \ array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array,\
    \ reverse=True)\n    else:\n        return sorted(array)", "    if len(array)\
    \ <= 1:\n        return array\n    if (array[0] + array[-1]) % 2:\n        return\
    \ sorted(array)\n    else:\n        return sorted(array, reverse=True)", "   \
    \ if len(array) <= 1:\n        return array\n    else:\n        if (array[0] +\
    \ array[-1]) % 2 == 0:\n            array.sort(reverse=True)\n        else:\n\
    \            array.sort()\n        return array\n", "    def sort_array(array):\n\
    \        if len(array) < 2:\n            return array\n        elif len(array)\
    \ == 2:\n            return array[::-1] if sum(array) % 2 == 0 else array\n  \
    \      else:\n            mid = len(array) // 2\n            left = sort_array(array[:mid])\n\
    \            right = sort_array(array[mid:])\n            return merge(left, right)\n\
    \n    def merge(left, right):\n        merged = []\n        while left and right:\n\
    \            if sum(left[0], right[0]) % 2 == 0:\n                merged.append(right.pop(0))\n\
    \            else:\n                merged.append(left.pop(0))\n        merged.extend(left\
    \ or right)\n        return merged\n\n    return sort_array(array)\n", "    if\
    \ not array:\n        return array\n    if len(array) == 1:\n        return array\n\
    \    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n\
    \    return sorted(array)\n", "    if len(array) == 0:\n        return array\n\
    \    array = list(array)\n    first = array[0]\n    last = array[-1]\n    sum_first_last\
    \ = first + last\n    sorted_array = sorted(array)\n    if sum_first_last % 2\
    \ == 0:\n        return sorted_array[::-1]\n    return sorted_array", '    return
    sorted(array, reverse=sum(array[0], array[-1]) % 2 == 0)', "    if len(array)\
    \ < 2:\n        return array\n    elif (array[0] + array[-1]) % 2 == 0:\n    \
    \    return sorted(array, reverse=True)\n    else:\n        return sorted(array)",
  "    sorted_array = sorted(array)\n    return sorted_array if sum(array[0], array[-1])\
    \ % 2 == 0 else sorted_array[::-1]", "    for i in range(len(array)):\n      \
    \  for j in range(len(array) - 1):\n            if (i + j) % 2 == 0:\n       \
    \         if array[j] > array[j + 1]:\n                    array[j], array[j +\
    \ 1] = array[j + 1], array[j]\n            else:\n                if array[j]\
    \ < array[j + 1]:\n                    array[j], array[j + 1] = array[j + 1],\
    \ array[j]\n    return array", "    if len(array) == 0:\n        return array\n\
    \    odd_list = sorted([odd for odd in array if odd % 2 == 1])\n    even_list\
    \ = sorted([even for even in array if even % 2 == 0], reverse=True)\n    if (array[0]\
    \ + array[-1]) % 2 == 0:\n        return odd_list + even_list\n    else:\n   \
    \     return even_list + odd_list", "    if len(array) == 0:\n        return array\n\
    \    if len(array) == 1:\n        return array\n    if (array[0] + array[-1])\
    \ % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n\
    \    return array\n", "    return sorted(array, reverse=sum(array[0], array[-1])\
    \ % 2 == 0)\n", "    if len(array) < 2:\n        return array\n    if (array[0]\
    \ + array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n      \
    \  array.sort()\n    return array", "    if len(array) <= 1:\n        return array\n\
    \    elif (array[0] + array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n\
    \    else:\n        array.sort()\n    return array\n", "    if not array:\n  \
    \      return array\n    if len(array) == 1:\n        return array\n    if array[0]\
    \ + array[-1] % 2 == 0:\n        array.sort(reverse=True)\n    else:\n       \
    \ array.sort()\n    return array", "    if not array:\n        return array\n\
    \    if len(array) == 1:\n        return array\n    length = len(array)\n    left\
    \ = 0\n    right = length - 1\n    if (array[left] + array[right]) % 2 == 0:\n\
    \        array.sort(reverse=True)\n    else:\n        array.sort()\n    return\
    \ array", '    return sorted(array, reverse=sum(array[0], array[-1]) % 2 == 0)',
  "    if len(array) == 0:\n        return array\n    elif len(array) == 1:\n    \
    \    return array\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n  \
    \          return sorted(array, reverse=True)\n        else:\n            return\
    \ sorted(array)", "    if len(array) == 0:\n        return array\n    if sum(array[0],\
    \ array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n\
    \    return array\n", "    if len(array) < 2:\n        return array\n    if (array[0]\
    \ + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    return\
    \ sorted(array)", "    if len(array) <= 1:\n        return array\n    left = 0\n\
    \    right = len(array) - 1\n    while left < right:\n        while left < right\
    \ and (array[left] + array[right]) % 2 == 0:\n            left += 1\n        while\
    \ left < right and (array[left] + array[right]) % 2 == 1:\n            right -=\
    \ 1\n        array[left], array[right] = array[right], array[left]\n    array[:left\
    \ + 1] = sorted(array[:left + 1])\n    array[left + 1:] = sorted(array[left +\
    \ 1:], reverse=True)\n    return array\n", "    if not array:\n        return\
    \ array\n    else:\n        even_condition = (array[0] + array[-1]) % 2 == 0\n\
    \        return sorted(array, reverse=even_condition)\n", "    if len(array) ==\
    \ 0:\n        return array\n    elif len(array) == 1:\n        return array\n\
    \    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array,\
    \ reverse=True)\n        else:\n            return sorted(array)", "    if len(array)\
    \ < 2:\n        return array\n    first_index = array[0]\n    last_index = array[-1]\n\
    \    result = sorted(array)\n    if (first_index + last_index) % 2 != 0:\n   \
    \     return result\n    else:\n        return result[::-1]\n", "    if array:\n\
    \        if len(array) > 1:\n            index = 0\n            while index <\
    \ len(array):\n                min_index = index\n                min_value =\
    \ array[index]\n                i = index + 1\n                while i < len(array):\n\
    \                    if array[i] < min_value:\n                        min_index\
    \ = i\n                        min_value = array[i]\n                    i +=\
    \ 1\n                tmp = array[index]\n                array[index] = min_value\n\
    \                array[min_index] = tmp\n                index += 1\n        if\
    \ (array[0] + array[-1]) % 2 == 0:\n            array.reverse()\n    return array\n",
  "    i = 0\n    j = len(array) - 1\n    while i < j:\n        if (array[i] + array[j])\
    \ % 2 == 0:\n            array[i], array[j] = array[j], array[i]\n        i +=\
    \ 1\n        j -= 1\n    array.sort()\n    return array", "    if not array:\n\
    \        return array\n    array_copy = array.copy()\n    odd_even = len(array)\
    \ & 1\n    first_last_sum = array[0] + array[-1]\n    odd_even_sum = first_last_sum\
    \ & 1\n    if odd_even == odd_even_sum:\n        array_copy.sort()\n    else:\n\
    \        array_copy.sort(reverse=True)\n    return array_copy\n", "    return\
    \ sorted(array, reverse=sum(array[0:2]) % 2 == 0)\n\n", "    # if empty, return\
    \ []\n    if len(array) == 0:\n        return []\n    # if single value, return\
    \ the array\n    if len(array) == 1:\n        return array\n    # if sum of first\
    \ and last is odd, sort in descending order\n    if (array[0] + array[-1]) % 2\
    \ == 1:\n        array.sort(reverse=True)\n    # if sum of first and last is even,\
    \ sort in ascending order\n    else:\n        array.sort()\n    return array\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
