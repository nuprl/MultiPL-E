name: HumanEval_14_all_prefixes
language: py
prompt: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
  \    \"\"\" Return list of all prefixes from shortest to longest of the input string\n\
  \    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
  \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
  \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
completions: ["    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\
    \    return prefixes\n", "    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n", "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\
    \    return prefixes\n", "    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n", "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\
    \    return prefixes\n", "    return [string[:i+1] for i in range(len(string))]\n",
  "    if string == '':\n        return []\n    else:\n        return all_prefixes(string[:-1])\
    \ + [string]\n\n", "    return [string[:i] for i in range(1, len(string) + 1)]\n",
  "    if string == '':\n        return []\n    return [string[:i] for i in range(1,\
    \ len(string) + 1)]\n", "    # return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n    # list_prefixes = []\n    # for i in range(1, len(string) + 1):\n\
    \    #     list_prefixes.append(string[:i])\n    # return list_prefixes\n    list_prefixes\
    \ = []\n    length = len(string)\n    while length > 0:\n        length -= 1\n\
    \        list_prefixes.append(string[:length])\n    return list_prefixes\n", " \
    \   prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\
    \    return prefixes\n", "    list_of_prefixes = []\n    for i in range(len(string)):\n\
    \        list_of_prefixes.append(string[:i+1])\n    return list_of_prefixes\n\n",
  "    return [string[:i+1] for i in range(len(string))]\n", "    if string == '':\n\
    \        return []\n    # return all_prefixes(string[:-1]) + [string]\n    return\
    \ [string[:i] for i in range(1, len(string) + 1)]\n\n", "    return [string[:len_]\
    \ for len_ in range(1, len(string) + 1)]\n", "    #return [string[:i] for i in\
    \ range(1, len(string) + 1)] # \u4E00\u79CD\u7B80\u6D01\u7684\u89E3\u51B3\u65B9\
    \u6848\uFF0Cstring[:i]\u76F4\u63A5\u53D6\u5F97string\u524Di\u4E2A\u5B57\u7B26\uFF0C\
    \u4E0D\u5305\u62EC\u7B2Ci\u4E2A\n    string_list = []\n    string_len = len(string)\n\
    \    index = 0\n    while index < string_len:\n        string_list.append(string[:index\
    \ + 1])\n        index += 1\n    return string_list\n", "    p = []\n    if len(string)\
    \ == 0:\n        return p\n    else:\n        p = [string[:i+1] for i in range(len(string))]\n\
    \    return p\n\n", "    prefixes = []\n    index = 0\n    while index <= len(string):\n\
    \        prefixes.append(string[:index])\n        index += 1\n    return prefixes\n\
    \n", "    return [string[:i] for i in range(1, len(string) + 1)]\n", "    prefixes\
    \ = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\
    \    return prefixes\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
