name: HumanEval_43_pairs_sum_to_zero
language: py
prompt: "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n\
  \    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it\
  \ returns True if there are two distinct elements in the list that\n    sum to zero,\
  \ and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n   \
  \ >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1,\
  \ 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n\
  \    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert\
  \ candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n\
  \    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) ==\
  \ False\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3,\
  \ 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n\
  \    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\ndef test_check():\n   \
  \ check(pairs_sum_to_zero)\n\ntest_check()\n"
completions: ["    for x in l:\n        for y in l:\n            if x+y == 0 and x\
    \ != y:\n                return True\n    return False\n", "    # loop through\
    \ each element in the list\n    for i in range(len(l)):\n        # look at every\
    \ element after i\n        for j in range(i + 1, len(l)):\n            # if the\
    \ sum is zero, return True\n            if l[i] + l[j] == 0:\n               \
    \ return True\n    # if we get through the whole list and never find a pair that\
    \ sums to 0,\n    # return False\n    return False\n", "    S = set()\n    for\
    \ i in l:\n        if i in S:\n            return True\n        else:\n      \
    \      S.add(-i)\n    return False\n", "    l.sort()\n    i, j = 0, len(l) - 1\n\
    \    while i < j:\n        if l[i] + l[j] == 0:\n            return True\n   \
    \     elif l[i] + l[j] < 0:\n            i += 1\n        else:\n            j\
    \ -= 1\n    return False\n", "    l.sort()\n    left = 0\n    right = len(l) -\
    \ 1\n    while left < right:\n        sum = l[left] + l[right]\n        if sum\
    \ == 0:\n            return True\n        elif sum < 0:\n            left += 1\n\
    \        else:\n            right -= 1\n    return False\n", "    if len(l) <\
    \ 2:\n        return False\n    else:\n        h = l[0]\n        i = 1\n     \
    \   while i < len(l):\n            if h + l[i] == 0:\n                return True\n\
    \            else:\n                i += 1\n        return pairs_sum_to_zero(l[1:])\n",
  "    # Inputs: l is a list of integers\n    # Returns: True if l contains two distinct\
    \ elements that sum to zero, False otherwise.\n    # 1. Write a function definition\
    \ here\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n  \
    \          if l[i] + l[j] == 0:\n                return True\n    return False\n\
    \n", "    # make a hash table to hold the values of the input list\n    ht = HashTable(size=len(l))\n\
    \    # loop through list, put items in hash table\n    for item in l:\n      \
    \  ht.set(item, item)\n    # loop through input list again\n    for item in l:\n\
    \        # check if the negative value of that item is in the hash table\n   \
    \     if ht.contains(-item):\n            # if so, return True\n            return\
    \ True\n    # if you get to the end of the loop, return False\n    return False\n\
    \n", "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n  \
    \          if l[i] + l[j] == 0:\n                return True\n    return False\n",
  "    h = {}\n    for i in l:\n        if i in h:\n            h[i] += 1\n      \
    \  else:\n            h[i] = 1\n    for k in h:\n        if -k in h:\n       \
    \     if -k == k and h[k] > 1:\n                return True\n            elif\
    \ -k != k:\n                return True\n    return False\n", "    return False\n",
  "    # set of numbers that complement the ones we've seen so far\n    complement\
    \ = set()\n    for num in l:\n        if num in complement:\n            return\
    \ True\n        complement.add(-num)\n    return False\n", "    return True\n",
  "    num_to_count = {}\n    for i in l:\n        if i in num_to_count:\n       \
    \     num_to_count[i] += 1\n        else:\n            num_to_count[i] = 1\n \
    \   for i in l:\n        if i == 0 and num_to_count[i] >= 2:\n            return\
    \ True\n        elif i != 0 and -i in num_to_count:\n            return True\n\
    \    return False\n\n", "    # trivial cases\n    if len(l) < 2:\n        return\
    \ False\n    if len(l) == 2:\n        return l[0] + l[1] == 0\n    # assume the\
    \ list is sorted\n    l.sort()\n    left = 0\n    right = len(l) - 1\n    while\
    \ left < right:\n        while left < right and l[left] + l[right] > 0:\n    \
    \        right -= 1\n        if left < right and l[left] + l[right] == 0:\n  \
    \          return True\n        left += 1\n    return False\n", "    for i in\
    \ range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] +\
    \ l[j] == 0:\n                return True\n    return False\n", "    # check if\
    \ list is empty\n    if len(l) == 0:\n        return False\n    # sort list\n\
    \    l.sort()\n    # check if 1st element is 0 and last element is 0\n    if l[0]\
    \ == 0 and l[-1] == 0:\n        return True\n    # create two index variables\n\
    \    i = 0\n    j = len(l) - 1\n    # loop while i < j\n    while i < j:\n   \
    \     # check if the sum of elements at index i and j is 0\n        if l[i] +\
    \ l[j] == 0:\n            return True\n        # if the sum is less than 0\n \
    \       elif l[i] + l[j] < 0:\n            # increment i\n            i += 1\n\
    \        # if the sum is greater than 0\n        else:\n            # decrement\
    \ j\n            j -= 1\n    # otherwise, return False\n    return False\n", " \
    \   l = sorted(l)\n    i = 0\n    j = len(l) - 1\n    while i < j:\n        sum\
    \ = l[i] + l[j]\n        if sum == 0:\n            return True\n        elif sum\
    \ < 0:\n            i += 1\n        else:\n            j -= 1\n    return False\n",
  "    # TODO: Add your code here\n    pass\n", "    s = set()\n    for i in l:\n\
    \        if i in s:\n            return True\n        else:\n            s.add(-i)\n\
    \    return False\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
