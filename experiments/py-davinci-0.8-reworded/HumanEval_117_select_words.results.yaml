name: HumanEval_117_select_words
language: py
results:
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    CONSONANTS = 'bcdfghjklmnpqrstvwxyz'\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for char\
    \ in word:\n            if char.lower() in CONSONANTS:\n                count\
    \ += 1\n        if count == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if len(s) == 0:\n        return []\n    else:\n        results\
    \ = []\n        s = s.split()\n        for i in s:\n            i = list(i)\n\
    \            consonants = 0\n            for j in i:\n                if j in\
    \ ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z']:\n                    consonants += 1\n      \
    \      if consonants == n:\n                results.append(''.join(i))\n     \
    \   return results\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjyyb2sea.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpjyyb2sea.py\", line 46,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpjyyb2sea.py\", line\
    \ 38, in check\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError\n    \ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5251kem4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp5251kem4.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp5251kem4.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp5251kem4.py\", line 22, in select_words\n    raise NotImplementedError\n\
    NotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    filtered_words = []\n    for word in words:\n\
    \        for letter in word:\n            if letter.lower() in 'aeiou':\n    \
    \            word = word.replace(letter, '')\n        if len(word) == n:\n   \
    \         filtered_words.append(word)\n    return filtered_words\n    \nprint(select_words('Mary\
    \ had a little lamb', 4))\nprint(select_words('Mary had a little lamb', 3))\n\
    print(select_words('simple white space', 2))\nprint(select_words('Hello world',\
    \ 4))\nprint(select_words('Uncle sam', 3))\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: "['lttl']\n['Mry', 'lmb']\n[]\n['wrld']\n['ncl']\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfpvk3apa.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpfpvk3apa.py\", line 46,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpfpvk3apa.py\", line\
    \ 37, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    return []\n\ndef check(candidate):\n  \
    \  assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbe8igkx3.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpbe8igkx3.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpbe8igkx3.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    words = s.split()\n\
    \    ans = []\n    for word in words:\n        count = 0\n        for letter in\
    \ word:\n            if letter.lower() in consonants:\n                count +=\
    \ 1\n        if count == n:\n            ans.append(word)\n    return ans\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb7b69jjw.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    def num_of_consonants(string):\n        cnt = 0\n        consonants\
    \ = 'bcdfghjklmnpqrstvwxyz'\n        for char in string:\n            if char\
    \ in consonants:\n                cnt += 1\n        return cnt\n    list1 = s.split('\
    \ ')\n    list2 = []\n    for word in list1:\n        if num_of_consonants(word)\
    \ == n:\n            list2.append(word)\n    return list2\n    # complete the\
    \ function body\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph5ewzvgi.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmph5ewzvgi.py\", line 46,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmph5ewzvgi.py\", line\
    \ 38, in check\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    s = s.replace(' ','')\n    # for index, item in enumerate(s):\n\
    \    #     print(index, item)\n    vowels = 'aeiou'\n    con = []\n    lst = []\n\
    \    for index, item in enumerate(s):\n        if item not in vowels:\n      \
    \      con.append(item)\n            if len(con) == n:\n                lst.append(s[index-n+1:index+1])\n\
    \                con = []\n    return lst\n\nprint(select_words('Mary had a little\
    \ lamb', 4))\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  stdout: "['aryh', 'litt', 'lamb']\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp150hss_9.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp150hss_9.py\", line 46,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp150hss_9.py\", line\
    \ 37, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    n_consonants = ['b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n\
    \    lst = s.split()\n    new_lst = []\n    for word in lst:\n        letter_counter\
    \ = 0\n        for letter in word:\n            if letter.lower() in n_consonants:\n\
    \                letter_counter += 1\n        if letter_counter == n:\n      \
    \      new_lst.append(word)\n    return new_lst\n\n\ndef check(candidate):\n \
    \   assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # Assumption:\n    #   - s is a non-empty string consisting of\
    \ letters and spaces\n    #   - n is a natural number\n    #   - The function\
    \ should return a list of words from string s that\n    #     contain exactly\
    \ n consonants\n    # Plan:\n    #   - split s into words, each word separated\
    \ by a space\n    #   - create a list to hold words with n consonants\n    # \
    \  - iterate through each word in s\n    #       - count the number of consonants\
    \ in each word\n    #       - if the count is equal to n, append the word to the\
    \ list\n    #   - return the list\n    words = s.split()\n    n_consonants = []\n\
    \    for word in words:\n        n_count = 0\n        # iterate through each letter\
    \ in word\n        for letter in word:\n            # if the letter is a consonant,\
    \ increment n_count\n            if letter.lower() not in ['a', 'e', 'i', 'o',\
    \ 'u']:\n                n_count += 1\n        # if n_count is equal to n, append\
    \ the word to the list\n        if n_count == n:\n            n_consonants.append(word)\n\
    \    return n_consonants\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    def count_consonants(word: str) -> int:\n        \"\"\"Counts\
    \ the number of consonants in a word\"\"\"\n        count = 0\n        for i in\
    \ word:\n            if i not in \"aeiouAEIOU\":\n                count += 1\n\
    \        return count\n    s_list = s.split()\n    ret_list = []\n    for j in\
    \ s_list:\n        if count_consonants(j) == n:\n            ret_list.append(j)\n\
    \    return ret_list\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        consonants = 0\n        for letter in word:\n            if letter not\
    \ in 'aeiou':\n                consonants += 1\n        if consonants == n:\n\
    \            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpilnmas6f.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpilnmas6f.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpilnmas6f.py\", line\
    \ 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    return [w for w in s.split() if len([c for c in w if c not in\
    \ 'aeiouAEIOU']) == n]\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgovp2tb4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpgovp2tb4.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgovp2tb4.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    vowels = \"aeiou\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        counter = 0\n        for char in word:\n    \
    \        if char.lower() not in vowels:\n                counter += 1\n      \
    \  if counter == n:\n            result.append(word)\n    return result\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # split string into list of words\n    words = s.split()\n  \
    \  output = []\n    # iterate over all words\n    for word in words:\n       \
    \ consonants = 0\n        # iterate over all letters in word\n        for letter\
    \ in word:\n            # if letter is a consonant, add 1 to consonants\n    \
    \        if letter.lower() not in ['a', 'e', 'i', 'o', 'u']:\n               \
    \ consonants += 1\n        # if number of consonants is exactly n, append word\
    \ to output\n        if consonants == n:\n            output.append(word)\n  \
    \  return output\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    num_cons = 0\n    result = []\n    words = s.split()\n    for\
    \ word in words:\n        for c in word:\n            if c not in 'aeiou':\n \
    \               num_cons += 1\n        if num_cons == n:\n            result.append(word)\n\
    \        num_cons = 0\n    return result\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpetbmdpnw.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpetbmdpnw.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpetbmdpnw.py\", line\
    \ 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = []\n    temp = ''\n    for i in s:\n        if i == '\
    \ ':\n            words.append(temp)\n            temp = ''\n        else:\n \
    \           temp += i\n    words.append(temp)\n    print(words)\n    consonants\
    \ = 'bcdfghjklmnpqrstvwxyz'\n    result = []\n    for word in words:\n       \
    \ count = 0\n        for c in word:\n            if c in consonants:\n       \
    \         count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  stdout: "['Mary', 'had', 'a', 'little', 'lamb']\n['Mary', 'had', 'a', 'little',\
    \ 'lamb']\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpistndppo.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpistndppo.py\", line 52,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpistndppo.py\", line\
    \ 44, in check\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0gme74r7.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp0gme74r7.py\", line 35,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp0gme74r7.py\", line\
    \ 26, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
