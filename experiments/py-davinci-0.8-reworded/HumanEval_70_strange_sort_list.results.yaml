language: py
name: HumanEval_70_strange_sort_list
results:
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    n = len(lst)\n\
    \    if n % 2 == 0:\n        odd = n - 1\n        even = n\n    else:\n      \
    \  odd = n\n        even = n - 1\n    result = []\n    for i in range(odd):\n\
    \        result.append(lst[i])\n        result.append(lst[i + even])\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4,\
    \ 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5,\
    \ 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5,\
    \ 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) ==\
    \ [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcfvixlsp.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpcfvixlsp.py\", line 42,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpcfvixlsp.py\"\
    , line 31, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  File\
    \ \"/tmp/tmpcfvixlsp.py\", line 27, in strange_sort_list\n    result.append(lst[i\
    \ + even])\nIndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    lst = sorted(lst)\n\
    \    out = []\n    while lst:\n        out.append(lst.pop(0))\n        if not\
    \ lst:\n            break\n        out.append(lst.pop())\n    return out\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9,\
    \ 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5,\
    \ 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    lst.sort()\n\
    \    i = 0\n    j = len(lst) - 1\n    while i < j:\n        lst[i], lst[j] = lst[j],\
    \ lst[i]\n        i += 1\n        j -= 1\n    return lst\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5158_f85.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp5158_f85.py\", line 38,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp5158_f85.py\"\
    , line 27, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    lst.sort()\n\
    \    start = 0\n    end = len(lst) - 1\n    while start < end:\n        lst[start],\
    \ lst[end] = lst[end], lst[start]\n        start += 1\n        end -= 1\n    return\
    \ lst\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3q2je929.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp3q2je929.py\", line 38,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp3q2je929.py\"\
    , line 27, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # if no items\
    \ in list, return empty list\n    if len(lst) < 1:\n        return []\n    # declare\
    \ variables for use later\n    lst_len = len(lst)\n    lst_sorted = sorted(lst)\n\
    \    lst_ascend = []\n    lst_descend = []\n    # set variable for each item being\
    \ added to the new lists\n    add_ascend = True\n    # loop through sorted list\n\
    \    for i in range(lst_len):\n        # use variable to alternate lists being\
    \ added to\n        if add_ascend:\n            lst_ascend.append(lst_sorted[i])\n\
    \            add_ascend = False\n        else:\n            lst_descend.append(lst_sorted[i])\n\
    \            add_ascend = True\n    # reverse list and add the lists together\n\
    \    lst_descend.reverse()\n    lst_new = lst_ascend + lst_descend\n    return\
    \ lst_new\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4,\
    \ 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5,\
    \ 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5,\
    \ 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) ==\
    \ [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpazijz7c6.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpazijz7c6.py\", line 52,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpazijz7c6.py\"\
    , line 41, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    res = []\n\
    \    i = 0\n    while lst:\n        res.append(min(lst))\n        lst.remove(min(lst))\n\
    \        if lst:\n            res.append(max(lst))\n            lst.remove(max(lst))\n\
    \    return res\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   \
    \ assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    res = []\n\
    \    while lst:\n        min_val = min(lst)\n        lst.remove(min_val)\n   \
    \     res.append(min_val)\n        if lst:\n            max_val = max(lst)\n \
    \           lst.remove(max_val)\n            res.append(max_val)\n    return res\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    res = []\n\
    \    while len(lst) > 0:\n        res.append(min(lst))\n        lst.remove(min(lst))\n\
    \        if len(lst) > 0:\n            res.append(max(lst))\n            lst.remove(max(lst))\n\
    \    return res\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   \
    \ assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    return lst\n\
    \n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm8b6zv2k.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpm8b6zv2k.py\", line 32,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpm8b6zv2k.py\"\
    , line 21, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # TODO implement\
    \ strange_sort_list\n    return []\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf93h1ot1.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpf93h1ot1.py\", line 33,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpf93h1ot1.py\"\
    , line 22, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    lst.sort()\n\
    \    if len(lst) < 2:\n        return lst\n    else:\n        i = 0\n        while\
    \ i < len(lst)//2:\n            lst[2*i], lst[2*i+1] = lst[2*i+1], lst[2*i]\n\
    \            i += 1\n        return lst\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpieynq6ai.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpieynq6ai.py\", line 39,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpieynq6ai.py\"\
    , line 28, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    current_minimum = min(lst)\n    sorted_lst = [current_minimum]\n\
    \    remaining_lst = [num for num in lst if num != current_minimum]\n    while\
    \ remaining_lst:\n        if len(remaining_lst) == 1:\n            sorted_lst.append(remaining_lst[0])\n\
    \            break\n        current_minimum = min(remaining_lst)\n        sorted_lst.append(current_minimum)\n\
    \        remaining_lst = [num for num in remaining_lst if num != current_minimum]\n\
    \        current_maximum = max(remaining_lst)\n        sorted_lst.append(current_maximum)\n\
    \        remaining_lst = [num for num in remaining_lst if num != current_maximum]\n\
    \    return sorted_lst\ndef check(candidate):\n    assert candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsuz6_o_i.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpsuz6_o_i.py\", line 45,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpsuz6_o_i.py\"\
    , line 34, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    sorted_list\
    \ = sorted(lst)\n    i = 0\n    j = len(sorted_list) - 1\n    result = []\n  \
    \  while i < j:\n        result.append(sorted_list[i])\n        result.append(sorted_list[j])\n\
    \        i += 1\n        j -= 1\n    if i == j:\n        result.append(sorted_list[i])\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4])\
    \ == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst)\
    \ == 2:\n        return [min(lst), max(lst)]\n    lst = sorted(lst)\n    i = 1\n\
    \    # lst[0] is minimum, lst[-1] is maximum\n    min_lst = [lst[0]]\n    max_lst\
    \ = [lst[-1]]\n    while i < len(lst) - 1:\n        min_lst.append(lst[i])\n \
    \       i += 1\n        max_lst.append(lst[i])\n        i += 1\n    return min_lst\
    \ + list(reversed(max_lst))\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8,\
    \ 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7kmyuiww.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp7kmyuiww.py\", line 46,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp7kmyuiww.py\"\
    , line 35, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    sorted_list\
    \ = sorted(lst)\n    order = sorted_list[::2] + sorted_list[1::2]\n    return\
    \ order\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4,\
    \ 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5,\
    \ 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5,\
    \ 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) ==\
    \ [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4dznkao5.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4dznkao5.py\", line 33,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp4dznkao5.py\"\
    , line 22, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    lst.sort()\n\
    \    n = len(lst)\n    start = 0\n    end = n - 1\n    res = []\n    while start\
    \ <= end:\n        res.append(lst[start])\n        if start != end:\n        \
    \    res.append(lst[end])\n        start += 1\n        end -= 1\n    return res\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    min_val = min(lst)\n    if min_val == max(lst):\n    \
    \    return lst\n    else:\n        new_lst = []\n        new_lst.append(min_val)\n\
    \        lst.remove(min_val)\n        new_lst.append(max(lst))\n        lst.remove(max(lst))\n\
    \        return new_lst + strange_sort_list(lst)\n\ndef check(candidate):\n  \
    \  assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6,\
    \ 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n \
    \   assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4,\
    \ 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2,\
    \ 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n   \
    \ check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    lst.sort()\n\
    \    res = [lst[0]]\n    lst.pop(0)\n    for i in range(0, len(lst) // 2):\n \
    \       res.append(lst[-1])\n        res.append(lst[0])\n        lst.pop()\n \
    \       lst.pop(0)\n    if len(lst) > 0:\n        res.append(lst[0])\n    return\
    \ res\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg17g65v2.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpg17g65v2.py\", line 40,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpg17g65v2.py\"\
    , line 34, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpg17g65v2.py\"\
    , line 18, in strange_sort_list\n    res = [lst[0]]\nIndexError: list index out\
    \ of range\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    if len(lst) == 1:\n        return lst\n    sorted_list\
    \ = sorted(lst)\n    first_half = sorted_list[:len(sorted_list) // 2]\n    second_half\
    \ = sorted_list[len(sorted_list) // 2:]\n    second_half.reverse()\n    return\
    \ [first_half.pop(0) if first_half else second_half.pop(0) for _ in range(len(sorted_list))]\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  \
    \  assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdn0pmvcb.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpdn0pmvcb.py\", line 38,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpdn0pmvcb.py\"\
    , line 27, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    ordered = sorted(lst)\n\
    \    result = []\n    while ordered:\n        min_val = ordered.pop(0)\n     \
    \   max_val = ordered.pop() if ordered else None\n        result.append(min_val)\n\
    \        if max_val:\n            result.append(max_val)\n        ordered = ordered[::-1]\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4])\
    \ == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi2rhjs2r.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpi2rhjs2r.py\", line 40,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpi2rhjs2r.py\"\
    , line 29, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # lst = sorted(lst)\n\
    \    # while lst:\n    #     n = lst.pop(0)\n    #     s.append(n)\n    #    \
    \ n = lst.pop()\n    #     s.append(n)\n    # return s\n    # return [n for t\
    \ in zip(sorted(lst), sorted(lst, reverse=True)) for n in t if lst]\n    # return\
    \ [lst.pop(0)] + [lst.pop()] + strange_sort_list(lst) if lst else []\n    # return\
    \ [lst.pop(0)] + [lst.pop()] + strange_sort_list(lst) if lst else []\n    # return\
    \ ([lst.pop(0)] + [lst.pop()] + strange_sort_list(lst) if lst else [])\n    return\
    \ ([lst.pop(0)] + [lst.pop()] + strange_sort_list(lst) if lst else [])\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9,\
    \ 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5,\
    \ 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8cip1eql.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp8cip1eql.py\", line 42,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp8cip1eql.py\"\
    , line 32, in check\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \  File \"/tmp/tmp8cip1eql.py\", line 28, in strange_sort_list\n    return ([lst.pop(0)]\
    \ + [lst.pop()] + strange_sort_list(lst) if lst else [])\n  File \"/tmp/tmp8cip1eql.py\"\
    , line 28, in strange_sort_list\n    return ([lst.pop(0)] + [lst.pop()] + strange_sort_list(lst)\
    \ if lst else [])\n  File \"/tmp/tmp8cip1eql.py\", line 28, in strange_sort_list\n\
    \    return ([lst.pop(0)] + [lst.pop()] + strange_sort_list(lst) if lst else [])\n\
    IndexError: pop from empty list\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    # sort list ascending\n    lst.sort()\n    # initialize\
    \ strange_lst\n    strange_lst = []\n    for i in range(len(lst)):\n        #\
    \ swap min and max value of remaining list\n        if i % 2 == 0:\n         \
    \   min_val = lst.pop(0)\n            strange_lst.append(min_val)\n        else:\n\
    \            max_val = lst.pop(-1)\n            strange_lst.append(max_val)\n\
    \    return strange_lst\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8,\
    \ 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ == 0:\n        return []\n    else:\n        new_lst = []\n        copy_lst\
    \ = lst[:]\n        max_val = max(copy_lst)\n        min_val = min(copy_lst)\n\
    \        while len(copy_lst) != 0:\n            new_lst.append(min_val)\n    \
    \        copy_lst.remove(min_val)\n            if len(copy_lst) == 0:\n      \
    \          break\n            new_lst.append(max_val)\n            copy_lst.remove(max_val)\n\
    \            max_val = max(copy_lst)\n            min_val = min(copy_lst)\n  \
    \      return new_lst\ndef check(candidate):\n    assert candidate([1, 2, 3, 4])\
    \ == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqnc8sqjn.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpqnc8sqjn.py\", line 46,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpqnc8sqjn.py\"\
    , line 35, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  File\
    \ \"/tmp/tmpqnc8sqjn.py\", line 31, in strange_sort_list\n    max_val = max(copy_lst)\n\
    ValueError: max() arg is an empty sequence\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9,\
    \ 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5,\
    \ 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc_a5vyz6.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpc_a5vyz6.py\", line 31,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpc_a5vyz6.py\"\
    , line 20, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    sorted_lst = sorted(lst)\n    res = []\n    while sorted_lst:\n\
    \        res.append(sorted_lst.pop(0))\n        if sorted_lst:\n            res.append(sorted_lst.pop())\n\
    \    return res\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   \
    \ assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    lst.sort()\n\
    \    mid = len(lst) // 2\n    lst[mid:], lst[:mid] = lst[:mid], lst[mid:]\n  \
    \  lst[::2], lst[1::2] = lst[:mid], lst[mid:]\n    return lst\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5j8zl60a.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp5j8zl60a.py\", line 35,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp5j8zl60a.py\"\
    , line 24, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    lst = sorted(lst)\n\
    \    lst_end = len(lst) - 1\n    new_lst = []\n    for index in range(0, len(lst)\
    \ // 2):\n        new_lst.append(lst[index])\n        new_lst.append(lst[lst_end\
    \ - index])\n    if len(lst) % 2 != 0:\n        new_lst.append(lst[len(lst) //\
    \ 2])\n    return new_lst\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8,\
    \ 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    out = []\n\
    \    tmp = sorted(lst)\n    lo, hi = 0, len(tmp) - 1\n    for _ in range(len(tmp)):\n\
    \        out.append(tmp[lo])\n        if hi > lo:\n            out.append(tmp[hi])\n\
    \        lo += 1\n        hi -= 1\n    return out\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6,\
    \ 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n \
    \   assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4,\
    \ 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2,\
    \ 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n   \
    \ check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcixmfg79.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpcixmfg79.py\", line 40,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpcixmfg79.py\"\
    , line 29, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    len_lst = len(lst)\n\
    \    if len_lst == 0:\n        return []\n    if len_lst == 1:\n        return\
    \ lst\n    sorted_lst = sorted(lst)\n    mid = len_lst // 2\n    s = [sorted_lst[i]\
    \ for i in range(0, mid)]\n    e = [sorted_lst[i] for i in range(mid, len_lst)]\n\
    \    e.reverse()\n    r = []\n    for x, y in zip(s, e):\n        r.append(x)\n\
    \        r.append(y)\n    if len_lst % 2 != 0:\n        r.append(sorted_lst[-1])\n\
    \    return r\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5,\
    \ 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5,\
    \ 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) ==\
    \ [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph44o4lk8.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmph44o4lk8.py\", line 46,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmph44o4lk8.py\"\
    , line 36, in check\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    lst = sorted(lst)\n\
    \    if len(lst) == 0:\n        return lst\n    if len(lst) % 2 == 0:\n      \
    \  return lst[len(lst) // 2:] + lst[:len(lst) // 2]\n    else:\n        return\
    \ lst[len(lst) // 2 + 1:] + lst[:len(lst) // 2 + 1]\ndef check(candidate):\n \
    \   assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6,\
    \ 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n \
    \   assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4,\
    \ 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2,\
    \ 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n   \
    \ check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgoh594a2.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpgoh594a2.py\", line 36,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpgoh594a2.py\"\
    , line 25, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    odd_lst = []\n    even_lst = []\n    n = len(lst)\n  \
    \  for i in range(n // 2):\n        odd_lst.append(lst[i])\n        even_lst.append(lst[n\
    \ - i - 1])\n    if n % 2:\n        odd_lst.append(lst[n // 2])\n    return odd_lst\
    \ + even_lst\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5,\
    \ 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5,\
    \ 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) ==\
    \ [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_nl7krw6.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp_nl7krw6.py\", line 40,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp_nl7krw6.py\"\
    , line 29, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # TODO: implement\
    \ this function\n    temp = lst[:]\n    temp.sort()\n    ret = []\n    i = 0\n\
    \    index = 0\n    while len(temp) > 0:\n        if (i % 2 == 0):\n         \
    \   ret.append(temp[index])\n            del temp[index]\n        else:\n    \
    \        ret.append(temp[-1])\n            del temp[-1]\n        i += 1\n    return\
    \ ret\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    start = 0\n\
    \    end = len(lst) - 1\n    result = []\n    if not lst:\n        return result\n\
    \    while start <= end:\n        max_num = max(lst[start:end + 1])\n        result.append(max_num)\n\
    \        lst.remove(max_num)\n        start += 1\n        if start > end:\n  \
    \          break\n        min_num = min(lst[start:end + 1])\n        result.append(min_num)\n\
    \        lst.remove(min_num)\n        end -= 1\n    return result\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuiqvbea8.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpuiqvbea8.py\", line 46,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpuiqvbea8.py\"\
    , line 35, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  File\
    \ \"/tmp/tmpuiqvbea8.py\", line 29, in strange_sort_list\n    min_num = min(lst[start:end\
    \ + 1])\nValueError: min() arg is an empty sequence\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # create empty\
    \ list to hold sorted elements\n    sorted_lst = []\n    # iterate through lst\n\
    \    for i in range(len(lst)):\n        # check if list is even\n        if len(lst)\
    \ % 2 == 0:\n            # if even, find min and append to sorted list\n     \
    \       sorted_lst.append(min(lst))\n            # remove from original list\n\
    \            lst.remove(min(lst))\n            # if odd, find max and append to\
    \ sorted list\n            sorted_lst.append(max(lst))\n            # remove from\
    \ original list\n            lst.remove(max(lst))\n        else:\n           \
    \ # if odd, find max and append to sorted list\n            sorted_lst.append(max(lst))\n\
    \            # remove from original list\n            lst.remove(max(lst))\n \
    \           # if even, find min and append to sorted list\n            sorted_lst.append(min(lst))\n\
    \            # remove from original list\n            lst.remove(min(lst))\n \
    \   return sorted_lst\n\ndef check(candidate):\n    assert candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyep81soe.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpyep81soe.py\", line 54,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpyep81soe.py\"\
    , line 43, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  File\
    \ \"/tmp/tmpyep81soe.py\", line 24, in strange_sort_list\n    sorted_lst.append(min(lst))\n\
    ValueError: min() arg is an empty sequence\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: 1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    max_list =\
    \ []\n    min_list = []\n    if len(lst) == 0:\n        return []\n    elif len(lst)\
    \ % 2 == 0:\n        while lst:\n            min_value = min(lst)\n          \
    \  min_list.append(min_value)\n            lst.remove(min_value)\n           \
    \ max_value = max(lst)\n            max_list.append(max_value)\n            lst.remove(max_value)\n\
    \        return [*min_list, *max_list]\n    else:\n        while lst:\n      \
    \      min_value = min(lst)\n            min_list.append(min_value)\n        \
    \    lst.remove(min_value)\n            max_value = max(lst)\n            max_list.append(max_value)\n\
    \            lst.remove(max_value)\n        median = (len(min_list) + len(max_list))\
    \ // 2\n        return [*min_list, *max_list[median:][::-1], *max_list[:median][::-1]]\n\
    \nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\n\
    print(strange_sort_list([7, 7, 7, 7, 7]))\nprint(strange_sort_list([1, 2, 3, 4,\
    \ 5]))\nprint(strange_sort_list([8, 8, 8, 8, 8, 8]))\nprint(strange_sort_list([0,\
    \ 0, 0, 0, 0, 0, 0]))\nprint(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\
    print(strange_sort_list([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpabfhwhid.py\", line 48\n    print(strange_sort_list([0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                            ^\nSyntaxError:\
    \ '[' was never closed\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    new_lst = []\n\
    \    while len(lst) > 0:\n        new_lst.append(min(lst))\n        lst.remove(min(lst))\n\
    \        new_lst.append(max(lst))\n        lst.remove(max(lst))\n    return new_lst\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpphgzwwgu.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpphgzwwgu.py\", line 37,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpphgzwwgu.py\"\
    , line 27, in check\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \  File \"/tmp/tmpphgzwwgu.py\", line 21, in strange_sort_list\n    new_lst.append(max(lst))\n\
    ValueError: max() arg is an empty sequence\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # if lst is\
    \ empty, return empty list\n    if not lst:\n        return []\n    # make a new\
    \ list to build the result\n    result_lst = []\n    # make a copy of the list\
    \ so we can modify it inplace\n    lst_copy = lst.copy()\n    # keep looping through\
    \ until the copy is empty\n    while lst_copy:\n        # pop the smallest value\
    \ and append it to result list\n        result_lst.append(min(lst_copy))\n   \
    \     # remove it from the copy list\n        lst_copy.remove(min(lst_copy))\n\
    \        # if copy list is still not empty\n        if lst_copy:\n           \
    \ # pop the largest value and append it to result list\n            result_lst.append(max(lst_copy))\n\
    \            # remove it from the copy list\n            lst_copy.remove(max(lst_copy))\n\
    \    # return the result list\n    return result_lst\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    ret_list =\
    \ []\n    min_val = min(lst)\n    ret_list.append(min_val)\n    ret_list.append(max(lst))\n\
    \    # lst.pop(lst.index(min_val))\n    # lst.pop(lst.index(max(lst)))\n    #\
    \ print(lst)\n    while len(lst) > 0:\n        # print(lst)\n        min_val =\
    \ min(lst)\n        ret_list.append(min_val)\n        lst.pop(lst.index(min_val))\n\
    \        if len(lst) == 0:\n            break\n        max_val = max(lst)\n  \
    \      ret_list.append(max_val)\n        lst.pop(lst.index(max_val))\n    return\
    \ ret_list\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5,\
    \ 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5,\
    \ 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) ==\
    \ [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5svr1sg3.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp5svr1sg3.py\", line 48,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp5svr1sg3.py\"\
    , line 37, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ < 2:\n        return lst\n    sorted_list = sorted(lst)\n    output = []\n \
    \   for i in range(len(sorted_list)):\n        if i % 2 == 0:\n            output.append(sorted_list[i\
    \ // 2])\n        else:\n            output.append(sorted_list[-1 - (i // 2)])\n\
    \    return output\ndef check(candidate):\n    assert candidate([1, 2, 3, 4])\
    \ == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    srt_lst = lst.copy()\n\
    \    srt_lst.sort()\n    idx = 1\n    while idx < len(srt_lst):\n        srt_lst.insert(idx,\
    \ srt_lst.pop())\n        idx += 2\n    return srt_lst\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    sorted_list\
    \ = sorted(lst)\n    if len(sorted_list) % 2 != 0:\n        sorted_list.append(sorted_list[0])\n\
    \    n = len(sorted_list)//2\n    i = 0\n    j = n\n    res = []\n    while i\
    \ < n and j < len(sorted_list):\n        res.append(sorted_list[i])\n        res.append(sorted_list[j])\n\
    \        i += 1\n        j += 1\n    return res\n\ndef check(candidate):\n   \
    \ assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6,\
    \ 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n \
    \   assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4,\
    \ 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2,\
    \ 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n   \
    \ check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp34_4hnh_.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp34_4hnh_.py\", line 43,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp34_4hnh_.py\"\
    , line 32, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    res = []\n    lst.sort()\n    while lst:\n        res.append(lst.pop(0))\n\
    \        if lst:\n            res.append(lst.pop())\n    return res\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # Create a\
    \ deep copy of the list\n    new_lst = lst[:]\n    # Sort the copy in ascending\
    \ order\n    new_lst.sort()\n    # \n    i = 0\n    j = len(new_lst) - 1\n   \
    \ while i < j:\n        lst[2 * i] = new_lst[i]\n        lst[2 * i + 1] = new_lst[j]\n\
    \        i += 1\n        j -= 1\n    return lst\n\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6,\
    \ 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n \
    \   assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4,\
    \ 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2,\
    \ 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n   \
    \ check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3v1be7g8.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp3v1be7g8.py\", line 44,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp3v1be7g8.py\"\
    , line 34, in check\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ <= 1:\n        return lst\n    copy = lst[:]\n    copy.sort()\n    sorted_lst\
    \ = []\n    for _ in range(len(lst)):\n        sorted_lst.append(copy.pop(0))\n\
    \        if copy:\n            sorted_lst.append(copy.pop())\n    return sorted_lst\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6vmls571.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp6vmls571.py\", line 40,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp6vmls571.py\"\
    , line 29, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  File\
    \ \"/tmp/tmp6vmls571.py\", line 23, in strange_sort_list\n    sorted_lst.append(copy.pop(0))\n\
    IndexError: pop from empty list\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    new_lst = []\n\
    \    for i in range(len(lst)):\n        if i % 2 == 0:\n            new_lst.append(min(lst))\n\
    \        else:\n            new_lst.append(max(lst))\n        lst.remove(new_lst[i])\n\
    \    return new_lst\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4])\
    \ == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    lst.sort()\n\
    \    res = []\n    if len(lst) == 0:\n        return res\n    while lst:\n   \
    \     x = lst.pop(0)\n        y = lst.pop(-1)\n        res.append(x)\n       \
    \ res.append(y)\n    return res\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpixt4gjvm.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpixt4gjvm.py\", line 40,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpixt4gjvm.py\"\
    , line 30, in check\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \  File \"/tmp/tmpixt4gjvm.py\", line 23, in strange_sort_list\n    y = lst.pop(-1)\n\
    IndexError: pop from empty list\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ == 0:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n  \
    \  left, right = 0, len(sorted_lst) - 1\n    while left <= right:\n        result.append(sorted_lst[left])\n\
    \        if left != right:\n            result.append(sorted_lst[right])\n   \
    \     left += 1\n        right -= 1\n    return result\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    odd_nums = []\n    even_nums = []\n    sort_lst = []\n\
    \    new_lst = []\n    for num in lst:\n        if num % 2 == 0:\n           \
    \ even_nums.append(num)\n        else:\n            odd_nums.append(num)\n   \
    \ odd_nums.sort()\n    even_nums.sort()\n    if odd_nums and even_nums:\n    \
    \    sort_lst = odd_nums + even_nums\n    else:\n        sort_lst = odd_nums or\
    \ even_nums\n    for idx in range(0, len(sort_lst), 2):\n        new_lst.append(sort_lst[idx])\n\
    \        if idx + 1 < len(sort_lst):\n            new_lst.append(sort_lst[len(sort_lst)\
    \ - idx - 1])\n    return new_lst\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpncsdh48r.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpncsdh48r.py\", line 51,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpncsdh48r.py\"\
    , line 41, in check\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    s = set(lst)\n    lst.sort()\n    s.remove(lst[0])\n \
    \   return [lst[0]] + strange_sort_list(list(s))\n\ndef check(candidate):\n  \
    \  assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6,\
    \ 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n \
    \   assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4,\
    \ 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2,\
    \ 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n   \
    \ check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp65id6uxr.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp65id6uxr.py\", line 36,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp65id6uxr.py\"\
    , line 25, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ == 0:\n        return []\n    sorted_lst = sorted(lst)\n    for i in range(len(lst)):\n\
    \        if i % 2 == 0:\n            lst[i] = sorted_lst[0]\n            sorted_lst.pop(0)\n\
    \        else:\n            lst[i] = sorted_lst[-1]\n            sorted_lst.pop()\n\
    \    return lst\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   \
    \ assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # TODO: implement\n\
    \    return lst\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   \
    \ assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzp04zlsx.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpzp04zlsx.py\", line 32,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpzp04zlsx.py\"\
    , line 21, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    sorted_list = sorted(lst)\n    start = 0\n    end = len(sorted_list)\
    \ - 1\n    new_list = []\n    while start <= end:\n        if start == end:\n\
    \            new_list.append(sorted_list[start])\n            break\n        new_list.append(sorted_list[start])\n\
    \        new_list.append(sorted_list[end])\n        start += 1\n        end -=\
    \ 1\n    return new_list\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8,\
    \ 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    for i in range(len(lst)//2):\n\
    \        lst[2*i], lst[2*i+1] = min(lst[2*i], lst[2*i+1]), max(lst[2*i], lst[2*i+1])\n\
    \    return lst\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   \
    \ assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzt5hwsoh.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpzt5hwsoh.py\", line 33,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpzt5hwsoh.py\"\
    , line 22, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    return []\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp43hus3fy.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp43hus3fy.py\", line 31,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp43hus3fy.py\"\
    , line 20, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ == 0:\n        return []\n    lst.sort()\n    res = []\n    front, back = 0,\
    \ len(lst) - 1\n    for i in range(len(lst)):\n        if i % 2 == 0:\n      \
    \      res.append(lst[front])\n            front += 1\n        else:\n       \
    \     res.append(lst[back])\n            back -= 1\n    return res\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # Write code\
    \ here\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n    \
    \    return lst\n    # if len(lst) == 2:\n    #     return lst[::-1]\n    min_value\
    \ = min(lst)\n    lst.remove(min_value)\n    max_value = max(lst)\n    lst.remove(max_value)\n\
    \    return [min_value, max_value] + strange_sort_list(lst)\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    lst.remove(min_val)\n\
    \    lst.remove(max_val)\n    return [min_val, max_val] + strange_sort_list(lst)\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfomouv_i.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpfomouv_i.py\", line 37,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpfomouv_i.py\"\
    , line 27, in check\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \  File \"/tmp/tmpfomouv_i.py\", line 23, in strange_sort_list\n    return [min_val,\
    \ max_val] + strange_sort_list(lst)\n  File \"/tmp/tmpfomouv_i.py\", line 23,\
    \ in strange_sort_list\n    return [min_val, max_val] + strange_sort_list(lst)\n\
    \  File \"/tmp/tmpfomouv_i.py\", line 22, in strange_sort_list\n    lst.remove(max_val)\n\
    ValueError: list.remove(x): x not in list\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst)\
    \ == 2:\n        return [min(lst), max(lst)]\n    start_position = 0\n    if lst[0]\
    \ > lst[1]:\n        start_position = 1\n    else:\n        start_position = 0\n\
    \    out = []\n    position = start_position\n    while len(out) < len(lst):\n\
    \        out.append(lst[position])\n        if position + 1 < len(lst):\n    \
    \        if out[-1] < lst[position + 1]:\n                lst = lst[:position]\
    \ + lst[position + 1:]\n                position = position - 1\n            else:\n\
    \                lst = lst[:position] + lst[position + 1:]\n                position\
    \ = position\n        if position < 0:\n            position = 0\n        if len(lst)\
    \ == 1:\n            out.append(lst[0])\n            break\n    return out\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9,\
    \ 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5,\
    \ 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygzfx7k7.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmpygzfx7k7.py\", line 57,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpygzfx7k7.py\"\
    , line 46, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    return lst\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpra5x53p6.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpra5x53p6.py\", line 31,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpra5x53p6.py\"\
    , line 20, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    lst.sort()\n\
    \    i = 1\n    while i < len(lst):\n        lst.insert(i, lst.pop())\n      \
    \  i += 2\n    return lst\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8,\
    \ 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if\
    \ len(lst) == 2:\n        return [min(lst), max(lst)]\n    lst = sorted(lst)\n\
    \    left = lst[:len(lst) // 2]\n    right = lst[len(lst) // 2:]\n    res = []\n\
    \    while len(left) > 0 or len(right) > 0:\n        if len(left) > 0:\n     \
    \       res.append(left.pop(0))\n        if len(right) > 0:\n            res.append(right.pop())\n\
    \    return res\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   \
    \ assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # Base case,\
    \ if list is empty, return empty list\n    if not lst:\n        return []\n\n\
    \    # sort list\n    list.sort(lst)\n\n    # initialize min and max pointers\n\
    \    min_pointer = 0\n    max_pointer = len(lst) - 1\n\n    # initialize output\
    \ list\n    strange_lst = []\n\n    # add minimum and maximum of list to output\
    \ list, until list is empty\n    while len(lst) > 0:\n        # make sure list\
    \ is not empty\n        if len(lst) > 0:\n            # add min and max of list\n\
    \            strange_lst.append(lst[min_pointer])\n            strange_lst.append(lst[max_pointer])\n\
    \n            # pop min and max from list\n            lst.pop(min_pointer)\n\
    \            lst.pop(max_pointer - 1)\n\n            # update max pointer\n  \
    \          max_pointer -= 2\n\n    return strange_lst\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphpzbrftb.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmphpzbrftb.py\", line 59,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmphpzbrftb.py\"\
    , line 49, in check\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \  File \"/tmp/tmphpzbrftb.py\", line 41, in strange_sort_list\n    lst.pop(max_pointer\
    \ - 1)\nIndexError: pop from empty list\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ <= 1:\n        return lst\n    lst.sort()\n    out = [lst[0]]\n    lst = lst[1:]\n\
    \    while len(lst) > 0:\n        if len(lst) % 2 != 0:\n            out.append(lst[-1])\n\
    \            lst = lst[:-1]\n        else:\n            out.append(lst[0])\n \
    \           lst = lst[1:]\n    return out\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4qh6x4_2.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp4qh6x4_2.py\", line 42,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp4qh6x4_2.py\"\
    , line 32, in check\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    sorted_lst\
    \ = sorted(lst)\n    i = 0\n    j = len(sorted_lst) - 1\n    res = []\n    while\
    \ i <= j:\n        res.append(sorted_lst[i])\n        if i != j:\n           \
    \ res.append(sorted_lst[j])\n        i += 1\n        j -= 1\n    return res\n\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  \
    \  assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ == 0:\n        return []\n    vals = sorted(lst)\n    res = []\n    while len(vals)\
    \ > 0:\n        res.append(vals.pop(0))\n        if len(vals) > 0:\n         \
    \   res.append(vals.pop())\n    return res\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    min_lst = sorted(lst)\n\
    \    max_lst = sorted(lst, reverse=True)\n    res = []\n    while len(res) < len(lst):\n\
    \        res.append(min_lst.pop(0))\n        if len(max_lst) > 0:\n          \
    \  res.append(max_lst.pop(0))\n    return res\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp585zut3b.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp585zut3b.py\", line 37,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp585zut3b.py\"\
    , line 27, in check\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    strange_sorted_list\
    \ = []\n    lst_copy = sorted(lst)\n    # Count how many times the loop will run\n\
    \    count = (len(lst_copy) + 1) // 2\n    for num in range(count):\n        #\
    \ Append minimum value\n        strange_sorted_list.append(lst_copy.pop(0))\n\
    \        # Append maximum value, if there are any\n        if lst_copy:\n    \
    \        strange_sorted_list.append(lst_copy.pop())\n    return strange_sorted_list\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9,\
    \ 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5,\
    \ 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc_a5vyz6.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpc_a5vyz6.py\", line 31,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpc_a5vyz6.py\"\
    , line 20, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    res = []\n    while lst:\n        res.append(min(lst))\n\
    \        lst.remove(min(lst))\n        if not lst:\n            break\n      \
    \  res.append(max(lst))\n        lst.remove(max(lst))\n    return res\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    sorted_list\
    \ = sorted(lst)\n    out = []\n    for i in range(len(sorted_list)):\n       \
    \ if i%2 == 0:\n            out.append(sorted_list[i//2])\n        else:\n   \
    \         out.append(sorted_list[-i//2-1])\n    return out\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqm5pm2la.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpqm5pm2la.py\", line 37,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpqm5pm2la.py\"\
    , line 26, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ <= 1:\n        return lst\n    for i in range(len(lst)):\n        if i % 2 ==\
    \ 0:\n            # find the minimum value and place it in the list\n        \
    \    lst[i], lst[lst.index(min(lst[i:]))] = lst[lst.index(min(lst[i:]))], lst[i]\n\
    \        else:\n            # find the maximum value and place it in the list\n\
    \            lst[i], lst[lst.index(max(lst[i:]))] = lst[lst.index(max(lst[i:]))],\
    \ lst[i]\n    return lst\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8,\
    \ 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbk57hvso.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpbk57hvso.py\", line 40,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpbk57hvso.py\"\
    , line 29, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    return sorted(lst,\
    \ key=lambda x: (-x, x))\ndef check(candidate):\n    assert candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpggwgnxds.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpggwgnxds.py\", line 30,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpggwgnxds.py\"\
    , line 19, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    return []\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp43hus3fy.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp43hus3fy.py\", line 31,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp43hus3fy.py\"\
    , line 20, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ <= 1:\n        return lst\n    result = []\n    first_index = 0\n    second_index\
    \ = 1\n    while first_index < len(lst) and second_index < len(lst):\n       \
    \ result.append(lst[first_index])\n        result.append(lst[second_index])\n\
    \        first_index += 2\n        second_index += 2\n    if first_index < len(lst):\n\
    \        result.append(lst[first_index])\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxqrp1l4k.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpxqrp1l4k.py\", line 43,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpxqrp1l4k.py\"\
    , line 32, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # TODO: implement\
    \ function\n    return lst\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa815jfzq.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpa815jfzq.py\", line 33,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpa815jfzq.py\"\
    , line 22, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    lst.sort()\n    for i in range(1, len(lst), 2):\n    \
    \    lst[i - 1], lst[i] = lst[i], lst[i - 1]\n    return lst\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj0a5hx08.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpj0a5hx08.py\", line 36,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpj0a5hx08.py\"\
    , line 25, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    i = 0\n    sort_lst = []\n    for _ in range(len(lst)):\n\
    \        if i % 2 == 0:\n            sort_lst.append(min(lst))\n        else:\n\
    \            sort_lst.append(max(lst))\n        lst.remove(sort_lst[-1])\n   \
    \     i += 1\n    return sort_lst\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    min_int = min(lst)\n    odd_vals = sorted(lst[::2])\n\
    \    even_vals = sorted(lst[1::2])\n    res = [min_int]\n    while odd_vals and\
    \ even_vals:\n        if len(odd_vals) == 1:\n            res.append(odd_vals.pop())\n\
    \        else:\n            res.append(odd_vals.pop())\n            res.append(even_vals.pop())\n\
    \    return res\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   \
    \ assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpql8ubb0y.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpql8ubb0y.py\", line 43,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpql8ubb0y.py\"\
    , line 32, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # if lst is\
    \ empty return empty list\n    if not lst:\n        return []\n    # define min,\
    \ max, min_index, max_index\n    min_index = max_index = 0\n    min_value = max_value\
    \ = lst[0]\n    # iterate list, to find the min and max\n    for i, val in enumerate(lst):\n\
    \        if val < min_value:\n            min_value = val\n            min_index\
    \ = i\n        if val > max_value:\n            max_value = val\n            max_index\
    \ = i\n    # define result list\n    res = []\n    # generate result list\n  \
    \  i = min_index\n    while len(res) < len(lst):\n        res.append(lst[i])\n\
    \        i = max_index if i == min_index else min_index\n    return res\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9,\
    \ 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5,\
    \ 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvw_m2n__.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpvw_m2n__.py\", line 52,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpvw_m2n__.py\"\
    , line 41, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    new_lst = sorted(lst)\n\
    \    for i in range(1, len(new_lst), 2):\n        new_lst[i], new_lst[i-1] = new_lst[i-1],\
    \ new_lst[i]\n    return new_lst\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9tqswhh3.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp9tqswhh3.py\", line 34,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp9tqswhh3.py\"\
    , line 23, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ == 0:\n        return []\n    lst.sort()\n    min_index = 0\n    max_index =\
    \ len(lst) - 1\n    result = []\n    while min_index < max_index:\n        result.append(lst[min_index])\n\
    \        result.append(lst[max_index])\n        min_index += 1\n        max_index\
    \ -= 1\n    if min_index == max_index:\n        result.append(lst[min_index])\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4])\
    \ == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    min_value = min(lst)\n    min_index = lst.index(min_value)\n\
    \    out = [min_value]\n    rest = lst[:min_index] + lst[min_index + 1:]\n   \
    \ return out + strange_sort_list(rest)\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpda6lgkwo.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpda6lgkwo.py\", line 38,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpda6lgkwo.py\"\
    , line 27, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt0_pcoc0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpt0_pcoc0.py\", line 30,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpt0_pcoc0.py\"\
    , line 19, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    lst_len = len(lst)\n\
    \    sorted_list = []\n    if lst_len == 0:\n        return []\n    elif lst_len\
    \ == 1:\n        return lst\n    else:\n        sorted_list.append(min(lst))\n\
    \        lst.remove(min(lst))\n        while len(lst) > 0:\n            # Must\
    \ be even\n            if len(lst) % 2 == 0:\n                sorted_list.append(max(lst))\n\
    \                lst.remove(max(lst))\n                sorted_list.append(min(lst))\n\
    \                lst.remove(min(lst))\n            # Must be odd\n           \
    \ else:\n                sorted_list.append(min(lst))\n                lst.remove(min(lst))\n\
    \                sorted_list.append(max(lst))\n                lst.remove(max(lst))\n\
    \        return sorted_list\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphhhbxm4p.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmphhhbxm4p.py\", line 53,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmphhhbxm4p.py\"\
    , line 42, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  File\
    \ \"/tmp/tmphhhbxm4p.py\", line 37, in strange_sort_list\n    sorted_list.append(max(lst))\n\
    ValueError: max() arg is an empty sequence\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    else:\n        sort_lst = sorted(lst)\n        new_lst\
    \ = []\n        while len(sort_lst) != 0:\n            new_lst.append(sort_lst.pop(0))\n\
    \            if sort_lst:\n                new_lst.append(sort_lst.pop())\n  \
    \      return new_lst\ndef check(candidate):\n    assert candidate([1, 2, 3, 4])\
    \ == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    odd_indices = []\n    even_indices = []\n    result =\
    \ []\n    while lst:\n        odd_indices.append(min(lst))\n        even_indices.append(max(lst))\n\
    \        lst.remove(min(lst))\n        lst.remove(max(lst))\n    for i in range(len(odd_indices)):\n\
    \        result.append(odd_indices[i])\n        if i < len(even_indices):\n  \
    \          result.append(even_indices[i])\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0t9v3tmk.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp0t9v3tmk.py\", line 45,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp0t9v3tmk.py\"\
    , line 35, in check\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \  File \"/tmp/tmp0t9v3tmk.py\", line 26, in strange_sort_list\n    lst.remove(max(lst))\n\
    ValueError: max() arg is an empty sequence\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    lst.sort()\n\
    \    for i in range(len(lst)):\n        if i % 2 == 0:\n            lst[i:], lst[i]\
    \ = lst[i + 1:], lst[i]\n    return lst\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxuv5o2vt.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxuv5o2vt.py\", line 35,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpxuv5o2vt.py\"\
    , line 24, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  File\
    \ \"/tmp/tmpxuv5o2vt.py\", line 20, in strange_sort_list\n    lst[i:], lst[i]\
    \ = lst[i + 1:], lst[i]\nIndexError: list assignment index out of range\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    return sorted(lst[1::2])\
    \ + sorted(lst[::2], reverse=True)\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbrepqgnc.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpbrepqgnc.py\", line 30,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpbrepqgnc.py\"\
    , line 19, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    lst.sort()\n    a, b = lst[:len(lst) // 2], lst[len(lst)\
    \ // 2:]\n    if len(lst) % 2:\n        lst.append(a.pop(0))\n    for i in range(len(b)):\n\
    \        lst.append(b[i])\n        lst.append(a[i])\n    return lst\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprph7idib.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmprph7idib.py\", line 40,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmprph7idib.py\"\
    , line 29, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    left = 0\n\
    \    right = len(lst) - 1\n    sorted_lst = []\n    while left <= right:\n   \
    \     if left == right:\n            sorted_lst.append(lst[left])\n          \
    \  break\n        if left < right:\n            sorted_lst.append(lst[left])\n\
    \            sorted_lst.append(lst[right])\n        left += 1\n        right -=\
    \ 1\n    return sorted_lst\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7usaw51i.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp7usaw51i.py\", line 43,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp7usaw51i.py\"\
    , line 35, in check\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    return sorted(lst)\
    \ + sorted(lst, reverse=True)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6fc8o8u_.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6fc8o8u_.py\", line 32,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp6fc8o8u_.py\"\
    , line 21, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # fill in the\
    \ logic\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n   \
    \     return lst\n    if len(lst) == 2:\n        return [min(lst), max(lst)]\n\
    \    new_lst = []\n    temp_lst = lst.copy()\n    smallest = min(temp_lst)\n \
    \   temp_lst.remove(smallest)\n    new_lst.append(smallest)\n    largest = max(temp_lst)\n\
    \    temp_lst.remove(largest)\n    new_lst.append(largest)\n    while temp_lst:\n\
    \        largest = max(temp_lst)\n        temp_lst.remove(largest)\n        new_lst.append(largest)\n\
    \        smallest = min(temp_lst)\n        temp_lst.remove(smallest)\n       \
    \ new_lst.append(smallest)\n    return new_lst\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb0u1q9yl.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpb0u1q9yl.py\", line 53,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpb0u1q9yl.py\"\
    , line 42, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # sort list\
    \ in ascending order\n    lst.sort()\n    # assign odd and even indices to separate\
    \ lists\n    odd_indices = lst[::2]\n    even_indices = lst[1::2]\n    # add even\
    \ indices to odd indices with reversed order\n    odd_indices.extend(even_indices[::-1])\n\
    \    return odd_indices\ndef check(candidate):\n    assert candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppciublze.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmppciublze.py\", line 37,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmppciublze.py\"\
    , line 26, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # ***\n   \
    \ # START\n    # ***\n    # you code here\n    if len(lst) == 0:\n        return\
    \ []\n    res = []\n    min_i = 0\n    max_i = len(lst) - 1\n    for i in range(0,\
    \ len(lst)):\n        if i % 2 == 0:\n            res.append(lst[min_i])\n   \
    \         min_i += 1\n        else:\n            res.append(lst[max_i])\n    \
    \        max_i -= 1\n    return res\n    # ***\n    # END\n    # ***\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9,\
    \ 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5,\
    \ 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nx9ylad.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp9nx9ylad.py\", line 51,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp9nx9ylad.py\"\
    , line 43, in check\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if\
    \ len(lst) == 2:\n        return [min(lst), max(lst)]\n    new_lst = []\n    if\
    \ lst[0] == lst[1]:\n        if lst[0] == lst[2]:\n            new_lst.append(lst[0])\n\
    \            new_lst.append(lst[1])\n            new_lst.append(lst[2])\n    \
    \        new_lst.append(lst[3])\n        else:\n            new_lst.append(lst[0])\n\
    \            new_lst.append(lst[2])\n            new_lst.append(lst[1])\n    \
    \        new_lst.append(lst[3])\n    elif lst[1] == lst[2]:\n        new_lst.append(lst[0])\n\
    \        new_lst.append(lst[1])\n        new_lst.append(lst[3])\n        new_lst.append(lst[2])\n\
    \    else:\n        new_lst.append(lst[0])\n        new_lst.append(lst[2])\n \
    \       new_lst.append(lst[1])\n        new_lst.append(lst[3])\n    return new_lst\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3w60h9ry.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmp3w60h9ry.py\", line 59,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp3w60h9ry.py\"\
    , line 48, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    sorted_lst\
    \ = sorted(lst)\n    sorted_lst_len = len(sorted_lst)\n    sorted_lst_len_half\
    \ = sorted_lst_len // 2\n    strange_lst = [0] * sorted_lst_len\n    temp_lst\
    \ = sorted_lst[sorted_lst_len_half:]\n    temp_lst_len = len(temp_lst)\n    for\
    \ i in range(temp_lst_len):\n        strange_lst[2 * i] = temp_lst[i]\n    for\
    \ i in range(sorted_lst_len_half):\n        strange_lst[2 * i + 1] = sorted_lst[i]\n\
    \    return strange_lst\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8,\
    \ 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_l88m0b5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp_l88m0b5.py\", line 41,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp_l88m0b5.py\"\
    , line 30, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # sort list\n\
    \    lst.sort()\n    # initialize variables\n    i = 0\n    j = len(lst) - 1\n\
    \    output = []\n    # loop until i and j meet\n    while i <= j:\n        #\
    \ add min value to output list\n        output.append(lst[i])\n        # increment\
    \ i\n        i += 1\n        # if i and j meet, break\n        if i > j:\n   \
    \         break\n        # add max value to output list\n        output.append(lst[j])\n\
    \        # decrement j\n        j -= 1\n    # return list\n    return output\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    result = []\n    sorted_lst = sorted(lst)\n    while len(sorted_lst)\
    \ > 0:\n        result.append(sorted_lst.pop(0))\n        result.append(sorted_lst.pop(-1))\n\
    \    return result\ndef check(candidate):\n    assert candidate([1, 2, 3, 4])\
    \ == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnl4vcy3s.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnl4vcy3s.py\", line 37,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpnl4vcy3s.py\"\
    , line 27, in check\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \  File \"/tmp/tmpnl4vcy3s.py\", line 23, in strange_sort_list\n    result.append(sorted_lst.pop(-1))\n\
    IndexError: pop from empty list\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if\
    \ len(lst) == 2:\n        return [min(lst), max(lst)]\n    else:\n        n =\
    \ len(lst)\n        odd_lst = [lst[i] for i in range(0, n, 2)]\n        even_lst\
    \ = [lst[i] for i in range(1, n, 2)]\n        return strange_sort_list(odd_lst)\
    \ + strange_sort_list(even_lst)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpadug1l2u.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpadug1l2u.py\", line 41,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpadug1l2u.py\"\
    , line 30, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    lst.sort()\n\
    \    res = []\n    i = 0\n    j = len(lst) - 1\n    while i <= j:\n        res.append(lst[i])\n\
    \        i += 1\n        if i <= j:\n            res.append(lst[j])\n        \
    \    j -= 1\n    return res\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    max_lst = max(lst)\n    min_lst = min(lst)\n    sub =\
    \ lst.copy()\n    sub.remove(max_lst)\n    sub.remove(min_lst)\n    return [min_lst,\
    \ max_lst] + strange_sort_list(sub)\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1sb97l25.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp1sb97l25.py\", line 37,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp1sb97l25.py\"\
    , line 27, in check\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \  File \"/tmp/tmp1sb97l25.py\", line 24, in strange_sort_list\n    return [min_lst,\
    \ max_lst] + strange_sort_list(sub)\n  File \"/tmp/tmp1sb97l25.py\", line 24,\
    \ in strange_sort_list\n    return [min_lst, max_lst] + strange_sort_list(sub)\n\
    \  File \"/tmp/tmp1sb97l25.py\", line 23, in strange_sort_list\n    sub.remove(min_lst)\n\
    ValueError: list.remove(x): x not in list\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    return [lst[0]]\
    \ + strange_sort_list(lst[2:]) if lst else []\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprglsn161.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmprglsn161.py\", line 31,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmprglsn161.py\"\
    , line 20, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    min_idx = lst.index(min(lst))\n    max_idx = lst.index(max(lst))\n\
    \    if max_idx == min_idx:\n        return lst\n    return [lst[min_idx]] + strange_sort_list(lst[:min_idx]\
    \ + lst[min_idx + 1: max_idx] + lst[max_idx + 1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphiz4dqhr.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmphiz4dqhr.py\", line 37,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmphiz4dqhr.py\"\
    , line 26, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ < 2:\n        return lst\n    elif len(lst) == 2:\n        return [min(lst),\
    \ max(lst)]\n    else:\n        sorted_lst = sorted(lst)\n        return [x for\
    \ t in zip(sorted_lst[::2], sorted_lst[1::2]) for x in t]\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqoivmpwb.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpqoivmpwb.py\", line 36,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpqoivmpwb.py\"\
    , line 25, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    lst.sort()\n    if len(lst) == 1:\n        return lst\n\
    \    if len(lst) == 2:\n        return [lst[0], lst[1]]\n    sorted_list = []\n\
    \    while len(lst) > 0:\n        first = lst.pop(0)\n        last = lst.pop(-1)\n\
    \        sorted_list.append(first)\n        sorted_list.append(last)\n    return\
    \ sorted_list\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5,\
    \ 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5,\
    \ 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) ==\
    \ [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj2wza0b4.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpj2wza0b4.py\", line 43,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpj2wza0b4.py\"\
    , line 33, in check\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \  File \"/tmp/tmpj2wza0b4.py\", line 27, in strange_sort_list\n    last = lst.pop(-1)\n\
    IndexError: pop from empty list\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    sorted_lst = sorted(lst)\n    res = [sorted_lst[0]]\n\
    \    sorted_lst = sorted_lst[1:]\n    while sorted_lst:\n        res.append(sorted_lst.pop())\n\
    \        res.append(sorted_lst.pop(0))\n    return res\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpevjss2ji.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpevjss2ji.py\", line 39,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpevjss2ji.py\"\
    , line 28, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  File\
    \ \"/tmp/tmpevjss2ji.py\", line 24, in strange_sort_list\n    res.append(sorted_lst.pop(0))\n\
    IndexError: pop from empty list\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ <= 1:\n        return lst\n    elif len(lst) == 2:\n        return [min(lst),\
    \ max(lst)]\n    lst.sort()\n    res = []\n    for i in range(len(lst) // 2):\n\
    \        res.append(lst[i])\n        res.append(lst[len(lst) - 1 - i])\n    if\
    \ len(lst) % 2 == 1:\n        res.append(lst[len(lst) // 2])\n    return res\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    lst = sorted(lst)\n    l = len(lst)\n    c = l//2\n  \
    \  if c%2:\n        a = c\n        b = l//2+1\n    else:\n        a = l//2-1\n\
    \        b = l//2\n    temp = []\n    for i in range(l//2):\n        temp.append(lst[a])\n\
    \        temp.append(lst[b])\n        a-=1\n        b+=1\n    if l%2:\n      \
    \  temp.append(lst[l//2])\n    return temp\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpioegwjyq.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpioegwjyq.py\", line 50,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpioegwjyq.py\"\
    , line 39, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # if the list\
    \ is empty, return empty list\n    if not lst:\n        return []\n    # get the\
    \ length of the list\n    length = len(lst)\n    # if the length is 1, return\
    \ the list\n    if length == 1:\n        return lst\n    # if the length is even,\
    \ set flag to 0, otherwise set flag to 1\n    if length % 2 == 0:\n        flag\
    \ = 0\n    else:\n        flag = 1\n    # get the minimum and maximum of the list\n\
    \    min_val = min(lst)\n    max_val = max(lst)\n    # create a new list and append\
    \ the minimum value\n    ret_lst = [min_val]\n    # start with the smallest value,\
    \ and begin looping through the list\n    current_val = min_val\n    # loop through\
    \ half of the list length minus 1\n    for i in range(length // 2 - 1):\n    \
    \    # set the current value to be the minimum value of list\n        # that has\
    \ not been visited\n        current_val = min(i for i in lst if i > current_val)\n\
    \        # append to new list\n        ret_lst.append(current_val)\n        #\
    \ set the current value to be the maximum value of list\n        # that has not\
    \ been visited\n        current_val = max(i for i in lst if i > current_val)\n\
    \        # append to new list\n        ret_lst.append(current_val)\n    # add\
    \ the last value if the length of the list is odd\n    if flag == 1:\n       \
    \ ret_lst.append(current_val)\n    # return the new list\n    return ret_lst\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4sy4pnwy.py\", line\
    \ 69, in <module>\n    test_check()\n  File \"/tmp/tmp4sy4pnwy.py\", line 67,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp4sy4pnwy.py\"\
    , line 56, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    new_lst = []\n\
    \    while len(lst) > 0:\n        # Always add the min and max of the remaining\
    \ list.\n        new_lst.append(min(lst))\n        new_lst.append(max(lst))\n\
    \        # Remove the min and max from the list.\n        lst.remove(min(lst))\n\
    \        lst.remove(max(lst))\n    return new_lst\ndef check(candidate):\n   \
    \ assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6,\
    \ 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n \
    \   assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4,\
    \ 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2,\
    \ 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n   \
    \ check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_35n45ng.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp_35n45ng.py\", line 38,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp_35n45ng.py\"\
    , line 28, in check\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \  File \"/tmp/tmp_35n45ng.py\", line 24, in strange_sort_list\n    lst.remove(max(lst))\n\
    ValueError: max() arg is an empty sequence\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ == 0:\n        return []\n    lst = sorted(lst)\n    if len(lst) % 2 == 0:\n\
    \        mid = len(lst) // 2\n    else:\n        mid = len(lst) // 2 + 1\n   \
    \ return lst[:mid] + [x for x in reversed(lst[mid:])]\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ivbe2qb.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp1ivbe2qb.py\", line 38,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp1ivbe2qb.py\"\
    , line 27, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    res: List[int]\
    \ = []\n    i: int = 0\n    srt: List[int] = sorted(lst)\n    res.append(srt[i])\n\
    \    i += 1\n    res.append(srt[-i])\n    i += 1\n    while i <= len(srt):\n \
    \       if i == len(srt):\n            break\n        res.append(srt[i])\n   \
    \     i += 1\n        res.append(srt[-i])\n        i += 1\n    return res\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9,\
    \ 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5,\
    \ 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxulf_p6o.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpxulf_p6o.py\", line 44,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpxulf_p6o.py\"\
    , line 33, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ == 0:\n        return []\n    res = []\n    i = 0\n    while len(lst) > 0:\n\
    \        if i % 2 == 0:\n            res.append(min(lst))\n        else:\n   \
    \         res.append(max(lst))\n        lst.remove(res[-1])\n        i += 1\n\
    \    return res\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   \
    \ assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    lst.sort()\n    return lst[::2] + lst[1::2]\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6sje1i7c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp6sje1i7c.py\", line 34,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp6sje1i7c.py\"\
    , line 23, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ == 0:\n        return []\n    evens = [x for x in lst if x % 2 == 0]\n    odds\
    \ = [x for x in lst if x % 2 != 0]\n    evens.sort()\n    odds.sort()\n    odd_maxs\
    \ = odds[::-1]\n    even_maxs = evens[::-1]\n    result = []\n    for i in range(len(lst)):\n\
    \        if i % 2 == 0:\n            result.append(odds.pop())\n        else:\n\
    \            result.append(evens.pop())\n    return result\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmeo8yt13.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpmeo8yt13.py\", line 44,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpmeo8yt13.py\"\
    , line 33, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # sort input\
    \ list and reverse it, so that it starts with the minimum value\n    lst.sort()\n\
    \    lst.reverse()\n    # use temp list to store output\n    temp = []\n    #\
    \ while the input list is not empty,\n    # add minimum and maximum values to\
    \ the temp list\n    while lst:\n        temp.append(lst.pop())\n        if lst:\n\
    \            temp.append(lst.pop(0))\n    # return the temp list\n    return temp\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    sorted_lst\
    \ = sorted(lst)\n    if len(sorted_lst) == 0:\n        return []\n    maxi, mini\
    \ = sorted_lst[-1], sorted_lst[0]\n    res = [mini]\n    for i in range(1, len(sorted_lst)):\n\
    \        if i % 2 == 0:\n            res.append(maxi)\n        else:\n       \
    \     res.append(mini)\n    return res\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1rxcjl02.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp1rxcjl02.py\", line 41,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp1rxcjl02.py\"\
    , line 30, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # Sort the\
    \ list first\n    lst.sort()\n    # Create an empty output list\n    ans = []\n\
    \    # While loop to go over the input list\n    while lst:\n        # Append\
    \ the maximum value to the output list\n        ans.append(lst.pop())\n      \
    \  # Append the minimum value to the output list\n        ans.append(lst.pop(0))\n\
    \    # Return output list\n    return ans\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1vjqos8o.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp1vjqos8o.py\", line 42,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp1vjqos8o.py\"\
    , line 31, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    N = len(lst)\n\
    \    if N == 0:\n        return []\n    elif N == 1:\n        return lst\n   \
    \ else:\n        out = []\n        sort = [x for x in lst]\n        sort.sort()\n\
    \        while len(sort) > 0:\n            out.append(sort.pop(0))\n         \
    \   if len(sort) > 0:\n                out.append(sort.pop(-1))\n        return\
    \ out\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    i = 0\n   \
    \ j = len(lst) - 1\n    res = []\n    lst = sorted(lst)\n    while j >= i:\n \
    \       res.append(lst[i])\n        res.append(lst[j])\n        i += 1\n     \
    \   j -= 1\n    return res\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8,\
    \ 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpinu76szt.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpinu76szt.py\", line 39,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpinu76szt.py\"\
    , line 29, in check\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    # Find the minimum and maximum elements\n    min_elem\
    \ = min(lst)\n    max_elem = max(lst)\n    new_lst = []\n    while min_elem <=\
    \ max_elem:\n        # Append minimum value to the new list\n        new_lst.append(min_elem)\n\
    \        # Append maximum value to the new list\n        new_lst.append(max_elem)\n\
    \        # Increment minimum and decrement maximum\n        min_elem += 1\n  \
    \      max_elem -= 1\n    # Return new list\n    return new_lst\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkaweulg4.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpkaweulg4.py\", line 46,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpkaweulg4.py\"\
    , line 36, in check\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    lst.sort()\n\
    \    start = 0\n    end = len(lst) - 1\n    while start <= end:\n        yield\
    \ lst[start]\n        start += 1\n        if start <= end:\n            yield\
    \ lst[end]\n            end -= 1\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiazdkd5u.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpiazdkd5u.py\", line 38,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpiazdkd5u.py\"\
    , line 27, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    return lst\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpra5x53p6.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpra5x53p6.py\", line 31,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpra5x53p6.py\"\
    , line 20, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823963
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    reversed_lst\
    \ = lst[::-1]\n    sorted_lst = []\n    for x in range(len(lst)):\n        if\
    \ x % 2 == 0:\n            sorted_lst.append(lst[x])\n        else:\n        \
    \    sorted_lst.append(reversed_lst[x])\n    return sorted_lst\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn1ejpobt.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpn1ejpobt.py\", line 37,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpn1ejpobt.py\"\
    , line 26, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    def strange_sort(lst:\
    \ List[int]) -> List[int]:\n        if not lst:\n            return []\n     \
    \   min_int = min(lst)\n        max_int = max(lst)\n        lst.remove(min_int)\n\
    \        lst.remove(max_int)\n        if lst:\n            return [min_int, max_int]\
    \ + strange_sort(lst)\n        else:\n            return [min_int, max_int]\n\
    \    return strange_sort(lst)\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptt03ktqc.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptt03ktqc.py\", line 41,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmptt03ktqc.py\"\
    , line 31, in check\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \  File \"/tmp/tmptt03ktqc.py\", line 28, in strange_sort_list\n    return strange_sort(lst)\n\
    \  File \"/tmp/tmptt03ktqc.py\", line 25, in strange_sort\n    return [min_int,\
    \ max_int] + strange_sort(lst)\n  File \"/tmp/tmptt03ktqc.py\", line 25, in strange_sort\n\
    \    return [min_int, max_int] + strange_sort(lst)\n  File \"/tmp/tmptt03ktqc.py\"\
    , line 23, in strange_sort\n    lst.remove(max_int)\nValueError: list.remove(x):\
    \ x not in list\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    res = []\n\
    \    copy = lst.copy()\n    while len(copy) > 0:\n        res.append(min(copy))\n\
    \        copy.remove(min(copy))\n        if len(copy) == 0:\n            break\n\
    \        res.append(max(copy))\n        copy.remove(max(copy))\n    return res\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    min_lst = []\n\
    \    max_lst = []\n    while lst:\n        min_lst.append(min(lst))\n        lst.remove(min(lst))\n\
    \        if lst:\n            max_lst.append(max(lst))\n            lst.remove(max(lst))\n\
    \    return min_lst + max_lst[::-1]\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxzmpe2cc.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpxzmpe2cc.py\", line 38,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpxzmpe2cc.py\"\
    , line 27, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    low = min(lst)\n\
    \    high = max(lst)\n    result = []\n    for i in range(0, len(lst)):\n    \
    \    if (i % 2 == 0):\n            result.append(low)\n            lst.remove(low)\n\
    \            low = min(lst)\n        else:\n            result.append(high)\n\
    \            lst.remove(high)\n            high = max(lst)\n    return result\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqomnt8z7.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpqomnt8z7.py\", line 43,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpqomnt8z7.py\"\
    , line 32, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  File\
    \ \"/tmp/tmpqomnt8z7.py\", line 28, in strange_sort_list\n    high = max(lst)\n\
    ValueError: max() arg is an empty sequence\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    lst.sort()\n\
    \    for i in range(1, len(lst), 2):\n        lst[i - 1], lst[i] = lst[i], lst[i\
    \ - 1]\n    return lst\ndef check(candidate):\n    assert candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgqe3uklb.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpgqe3uklb.py\", line 33,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpgqe3uklb.py\"\
    , line 22, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # Get copy\
    \ of list\n    lst = lst[:]\n    final_list = []\n    while len(lst) > 0:\n  \
    \      # Pop max element from list\n        final_list.append(max(lst))\n    \
    \    lst.remove(max(lst))\n        # Pop min element from list\n        final_list.append(min(lst))\n\
    \        lst.remove(min(lst))\n    return final_list\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbr8_lqh_.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpbr8_lqh_.py\", line 40,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpbr8_lqh_.py\"\
    , line 29, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    sorted_list\
    \ = sorted(lst)\n    if len(sorted_list) % 2 == 0:\n        return sorted_list[::2]\
    \ + sorted_list[1::2]\n    else:\n        return sorted_list[:len(sorted_list)\
    \ // 2] + \\\n               sorted_list[len(sorted_list) // 2 + 1:] + \\\n  \
    \             [sorted_list[len(sorted_list) // 2]]\ndef check(candidate):\n  \
    \  assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6,\
    \ 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n \
    \   assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4,\
    \ 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2,\
    \ 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n   \
    \ check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9s4uctka.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp9s4uctka.py\", line 36,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp9s4uctka.py\"\
    , line 25, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    lst.sort()\n    lo, hi = 0, len(lst) - 1\n    ret = []\n\
    \    while lo <= hi:\n        ret.append(lst[lo])\n        if lo != hi:\n    \
    \        ret.append(lst[hi])\n        lo += 1\n        hi -= 1\n    return ret\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  \
    \  assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ < 2:\n        return lst\n    # Find min and max values\n    min_val = min(lst)\n\
    \    max_val = max(lst)\n    # Remove these two values from the list\n    lst.remove(min_val)\n\
    \    lst.remove(max_val)\n    # Recursively call this method with remaining values\
    \ in list\n    return [min_val, max_val] + strange_sort_list(lst)\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # Base case\n\
    \    if len(lst) <= 1:\n        return lst\n\n    # Find smallest value and its\
    \ index.\n    min_val = lst[0]\n    min_val_idx = 0\n    for i in range(1, len(lst)):\n\
    \        if lst[i] < min_val:\n            min_val = lst[i]\n            min_val_idx\
    \ = i\n\n    # Find largest value and its index.\n    max_val = lst[0]\n    max_val_idx\
    \ = 0\n    for i in range(1, len(lst)):\n        if lst[i] > max_val:\n      \
    \      max_val = lst[i]\n            max_val_idx = i\n\n    # Swap minimum value\
    \ with maximum value.\n    lst[min_val_idx] = max_val\n    lst[max_val_idx] =\
    \ min_val\n\n    # Recursively build list.\n    lst = strange_sort_list(lst[1:-1])\n\
    \    lst.insert(0, min_val)\n    lst.append(max_val)\n\n    return lst\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9,\
    \ 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5,\
    \ 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz_8ud9_q.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpz_8ud9_q.py\", line 60,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpz_8ud9_q.py\"\
    , line 49, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ == 0:\n        return []\n    lst.sort()\n    res = [lst[0]]\n    for n in lst[1:]:\n\
    \        if len(res) % 2 == 0:\n            res.append(n)\n        else:\n   \
    \         res.insert(0, n)\n    return res\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprhnqdixf.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmprhnqdixf.py\", line 40,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmprhnqdixf.py\"\
    , line 29, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    ordered = sorted(lst)\n\
    \    odd_list = ordered[::2]\n    even_list = ordered[1::2]\n    return odd_list\
    \ + even_list\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   \
    \ assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyvi09uzj.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpyvi09uzj.py\", line 34,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpyvi09uzj.py\"\
    , line 23, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    lst = sorted(lst)\n    res = []\n    while lst:\n    \
    \    res.append(lst.pop(0))\n        if lst:\n            res.append(lst.pop())\n\
    \    return res\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   \
    \ assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ == 0:\n        return []\n    start = 0\n    end = len(lst) - 1\n    result\
    \ = []\n    ascending = True\n    while len(result) < len(lst):\n        if ascending:\n\
    \            idx = start\n            curr_val = lst[idx]\n            curr_idx\
    \ = idx\n            while idx <= end:\n                if lst[idx] < curr_val:\n\
    \                    curr_val = lst[idx]\n                    curr_idx = idx\n\
    \                idx += 1\n            result.append(curr_val)\n            start\
    \ = curr_idx + 1\n        else:\n            idx = end\n            curr_val =\
    \ lst[idx]\n            curr_idx = idx\n            while idx >= start:\n    \
    \            if lst[idx] > curr_val:\n                    curr_val = lst[idx]\n\
    \                    curr_idx = idx\n                idx -= 1\n            result.append(curr_val)\n\
    \            end = curr_idx - 1\n        ascending = not ascending\n    return\
    \ result\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4,\
    \ 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5,\
    \ 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5,\
    \ 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) ==\
    \ [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc1hrzyfb.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpc1hrzyfb.py\", line 60,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpc1hrzyfb.py\"\
    , line 52, in check\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7]\n  File \"/tmp/tmpc1hrzyfb.py\", line 26, in strange_sort_list\n    curr_val\
    \ = lst[idx]\nIndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ == 0:\n        return []\n    lst.sort()\n    middle = len(lst) // 2\n    left\
    \ = lst[:middle]\n    right = lst[middle:]\n    odd = True\n    res = []\n   \
    \ while len(left) > 0 or len(right) > 0:\n        if odd:\n            if len(left)\
    \ > 0:\n                res.append(left.pop(0))\n            else:\n         \
    \       res.append(right.pop(0))\n        else:\n            if len(right) > 0:\n\
    \                res.append(right.pop())\n            else:\n                res.append(left.pop())\n\
    \        odd = not odd\n    return res\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    return sorted(lst)\n\
    \nprint(strange_sort_list([1, 2, 3, 4]))\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc5f35yhj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpc5f35yhj.py\", line 32,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpc5f35yhj.py\"\
    , line 21, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: '[1, 2, 3, 4]

    '
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    N = len(lst)\n\
    \    if N == 0:\n        return []\n    elif N == 1:\n        return lst\n   \
    \ else:\n        lst.sort()\n        i = 0\n        j = N - 1\n        res = []\n\
    \        while i <= j:\n            res.append(lst[i])\n            if i != j:\n\
    \                res.append(lst[j])\n            i += 1\n            j -= 1\n\
    \        return res\ndef check(candidate):\n    assert candidate([1, 2, 3, 4])\
    \ == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ < 2:\n        return lst\n    counter = 0\n    final_list = []\n    while counter\
    \ < len(lst):\n        final_list.append(min(lst))\n        lst.remove(min(lst))\n\
    \        if len(lst) < 1:\n            break\n        final_list.append(max(lst))\n\
    \        lst.remove(max(lst))\n        counter += 2\n    return final_list\n\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  \
    \  assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprabxyf9k.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmprabxyf9k.py\", line 43,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmprabxyf9k.py\"\
    , line 32, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    i = 0\n   \
    \ j = len(lst) - 1\n    sorted_lst = []\n    count = 1\n    while i <= j:\n  \
    \      if count % 2 == 1:\n            sorted_lst.append(min(lst[i], lst[j]))\n\
    \            if lst[i] < lst[j]:\n                i += 1\n            else:\n\
    \                j -= 1\n        else:\n            sorted_lst.append(max(lst[i],\
    \ lst[j]))\n            if lst[i] > lst[j]:\n                i += 1\n        \
    \    else:\n                j -= 1\n        count += 1\n    return sorted_lst\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxgklcf6.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpyxgklcf6.py\", line 49,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpyxgklcf6.py\"\
    , line 45, in check\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5,\
    \ 5, -5, 5, 0, 2, 2, 2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    lst_copy =\
    \ lst.copy()\n    odd = True\n    res = []\n    while lst_copy:\n        if odd:\n\
    \            res.append(min(lst_copy))\n        else:\n            res.append(max(lst_copy))\n\
    \        lst_copy.remove(res[-1])\n        odd = not odd\n    return res\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9,\
    \ 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5,\
    \ 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    list_len = len(lst)\n    if list_len == 1:\n        return\
    \ lst\n    result = []\n    lst.sort()\n    while lst:\n        min_val = lst.pop(0)\n\
    \        result.append(min_val)\n        if not lst:\n            break\n    \
    \    max_val = lst.pop(-1)\n        result.append(max_val)\n    return result\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  \
    \  assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    lst.sort()\n\
    \    i = 0\n    j = len(lst) - 1\n    result = []\n    while i < j:\n        result.append(lst[i])\n\
    \        result.append(lst[j])\n        i += 1\n        j -= 1\n    if i == j:\n\
    \        result.append(lst[i])\n    return result\ndef check(candidate):\n   \
    \ assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6,\
    \ 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n \
    \   assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4,\
    \ 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2,\
    \ 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n   \
    \ check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    sorted_list\
    \ = sorted(lst)\n    length = len(sorted_list)\n    # return input list if length\
    \ is odd.\n    if length % 2 == 1:\n        return lst\n    else:\n        # make\
    \ new empty list\n        strange_list = []\n        # loop through the list while\
    \ start and end\n        # are not the same\n        while len(sorted_list) >\
    \ 1:\n            # append starting and ending integers to strange_list\n    \
    \        strange_list.append(sorted_list.pop(0))\n            strange_list.append(sorted_list.pop())\n\
    \        # if odd number of integers left, append remaining\n        if len(sorted_list)\
    \ == 1:\n            strange_list.append(sorted_list.pop())\n        return strange_list\n\
    \nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\n\
    print(strange_sort_list([]))\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprz0utult.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmprz0utult.py\", line 51,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmprz0utult.py\"\
    , line 41, in check\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    AssertionError\n"
  stdout: '[1, 4, 2, 3]

    [5, 5, 5, 5]

    []

    '
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    sorted_lst = sorted(lst)\n    first = sorted_lst[:len(sorted_lst)\
    \ // 2]\n    second = sorted_lst[len(sorted_lst) // 2:][::-1]\n    return [x for\
    \ x in chain(*zip(first, second))] + [second[-1]] if len(sorted_lst) % 2 else\
    \ [x for x in chain(*zip(first, second))]\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq7plhq17.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpq7plhq17.py\", line 35,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpq7plhq17.py\"\
    , line 24, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  File\
    \ \"/tmp/tmpq7plhq17.py\", line 22, in strange_sort_list\n    return [x for x\
    \ in chain(*zip(first, second))] + [second[-1]] if len(sorted_lst) % 2 else [x\
    \ for x in chain(*zip(first, second))]\nNameError: name 'chain' is not defined\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    lst.sort()\n    new_lst = []\n    last_idx = len(lst)\
    \ - 1\n    for idx in range(0, len(lst)//2 + 1):\n        new_lst.append(lst[idx])\n\
    \        if idx < last_idx:\n            new_lst.append(lst[last_idx])\n     \
    \       last_idx -= 1\n    return new_lst\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpesgpavfh.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpesgpavfh.py\", line 41,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpesgpavfh.py\"\
    , line 30, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ == 0:\n        return []\n    lst = sorted(lst)\n    s, d = 0, 1\n    while\
    \ s < len(lst) and d < len(lst):\n        if s != d:\n            lst[s], lst[d]\
    \ = lst[d], lst[s]\n        s += 2\n        d += 2\n    return lst\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxypbgj2d.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpxypbgj2d.py\", line 40,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpxypbgj2d.py\"\
    , line 29, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    res = []\n\
    \    lst = sorted(lst)\n    while len(lst) > 0:\n        res.append(lst.pop(0))\n\
    \        if len(lst) > 0:\n            res.append(lst.pop())\n    return res\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    left = 0\n\
    \    right = len(lst) - 1\n    res = []\n    while left <= right:\n        if\
    \ left == right:\n            res.append(lst[left])\n            break\n     \
    \   else:\n            res.append(lst[left])\n            res.append(lst[right])\n\
    \            left += 1\n            right -= 1\n    return res\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpncackfbd.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpncackfbd.py\", line 42,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpncackfbd.py\"\
    , line 34, in check\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    min_index = lst.index(min(lst))\n    ret = [lst[min_index]]\n\
    \    remaining = lst[:min_index] + lst[min_index + 1:]\n    if len(remaining)\
    \ == 1:\n        return ret + remaining\n    if len(remaining) == 2:\n       \
    \ return ret + remaining[::-1]\n    return ret + strange_sort_list(remaining[1::2])\
    \ + strange_sort_list(remaining[::2])\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp902w9ik9.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp902w9ik9.py\", line 40,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp902w9ik9.py\"\
    , line 29, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    min_list =\
    \ [min(lst)]\n    max_list = [max(lst)]\n    lst.remove(min(lst))\n    lst.remove(max(lst))\n\
    \    while lst:\n        min_list.append(min(lst))\n        lst.remove(min(lst))\n\
    \        if lst:\n            max_list.append(max(lst))\n            lst.remove(max(lst))\n\
    \    return min_list + max_list[::-1]\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0wmv9_rj.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp0wmv9_rj.py\", line 40,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp0wmv9_rj.py\"\
    , line 29, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ <= 1:\n        return lst\n    # First get list of even positions from back\n\
    \    # Second get list of odd positions from front\n    even_pos = sorted(lst[::2])\n\
    \    odd_pos = sorted(lst[1::2])\n    # Reverse even list and zip with odd list\n\
    \    return list(reversed(even_pos)) + odd_pos\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpross_6k0.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpross_6k0.py\", line 38,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpross_6k0.py\"\
    , line 27, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n\
    \        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n          \
    \  result.append(sorted_lst.pop())\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    min_max_lst\
    \ = []\n    lst.sort()\n    while lst:\n        min_max_lst.append(lst.pop(0))\n\
    \        if lst:\n            min_max_lst.append(lst.pop())\n    return min_max_lst\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  \
    \  assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # your code\
    \ here\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n    \
    \    return lst\n    if lst[0] == lst[-1]:\n        return lst\n    a = min(lst)\n\
    \    lst.remove(a)\n    b = max(lst)\n    lst.remove(b)\n    return [a, b] + strange_sort_list(lst)\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    # First two items are always smallest and biggest.\n \
    \   result = [min(lst), max(lst)]\n    # Start from min, get next item in list,\n\
    \    # that is not already in result.\n    current = min(lst)\n    while len(result)\
    \ < len(lst):\n        current = min([i for i in lst if i not in result])\n  \
    \      result.append(current)\n        current = max([i for i in lst if i not\
    \ in result])\n        result.append(current)\n    return result\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn7uq66nx.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpn7uq66nx.py\", line 42,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpn7uq66nx.py\"\
    , line 32, in check\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \  File \"/tmp/tmpn7uq66nx.py\", line 27, in strange_sort_list\n    current =\
    \ max([i for i in lst if i not in result])\nValueError: max() arg is an empty\
    \ sequence\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ == 0:\n        return []\n    res = []\n    left = min(lst)\n    res.append(left)\n\
    \    lst.remove(left)\n    i = 0\n    while len(lst) > 0:\n        if i % 2 ==\
    \ 0:\n            left = min(lst)\n        else:\n            left = max(lst)\n\
    \        res.append(left)\n        lst.remove(left)\n        i += 1\n    return\
    \ res\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp63jeceg0.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp63jeceg0.py\", line 46,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp63jeceg0.py\"\
    , line 35, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # copy lst\
    \ to tmp_lst\n    tmp_lst = lst.copy()\n    # loop until lst is empty\n    while\
    \ tmp_lst:\n        # pop min value in tmp_lst\n        min_num = min(tmp_lst)\n\
    \        lst.remove(min_num)\n        lst.append(min_num)\n        # pop max value\
    \ in tmp_lst\n        max_num = max(tmp_lst)\n        lst.remove(max_num)\n  \
    \      lst.append(max_num)\n    return lst\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659823969
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # sort list\
    \ from smallest to largest\n    lst.sort()\n    # create a new list to store the\
    \ results\n    sorted_list = []\n    # create a variable to store the index of\
    \ the last element in the list\n    final_index = len(lst) - 1\n    # create a\
    \ variable to keep track of the index of the remaining elements\n    index = 0\n\
    \    # set the loop condition as less than half the length of the list (or else\
    \ it will be out of range)\n    while index < len(lst) // 2:\n        # append\
    \ the smallest remaining element to the new list\n        sorted_list.append(lst[index])\n\
    \        # append the largest remaining element to the new list\n        sorted_list.append(lst[final_index])\n\
    \        # subtract 1 from the final index (to account for the largest element\
    \ being added)\n        final_index -= 1\n        # add 1 to the index (to account\
    \ for the smallest element being added)\n        index += 1\n    # if the list\
    \ has an odd number of elements, append the remaining element to the new list\n\
    \    if len(lst) % 2 == 1:\n        sorted_list.append(lst[final_index])\n   \
    \ # return the new list\n    return sorted_list\n\ndef check(candidate):\n   \
    \ assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6,\
    \ 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n \
    \   assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4,\
    \ 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2,\
    \ 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n   \
    \ check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    sorted_list\
    \ = sorted(lst)\n    left = 0\n    right = len(sorted_list) - 1\n    final_list\
    \ = []\n    while left <= right:\n        if left < right:\n            final_list.append(sorted_list[left])\n\
    \            final_list.append(sorted_list[right])\n        else:\n          \
    \  final_list.append(sorted_list[left])\n        left += 1\n        right -= 1\n\
    \    return final_list\n\ndef check(candidate):\n    assert candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    nums = sorted(lst)\n    res = []\n    i = 0\n    j = len(nums)\
    \ - 1\n    while i < j:\n        res.append(nums[i])\n        res.append(nums[j])\n\
    \        i += 1\n        j -= 1\n    if i == j:\n        res.append(nums[i])\n\
    \    return res\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   \
    \ assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    sorted_lst\
    \ = sorted(lst)\n    output = []\n    for index in range(0, len(sorted_lst), 2):\n\
    \        output.append(sorted_lst[index])\n    for index in range(len(sorted_lst)\
    \ - 1, 0, -2):\n        output.append(sorted_lst[index])\n    return output\n\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  \
    \  assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwq5qwcpx.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpwq5qwcpx.py\", line 37,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpwq5qwcpx.py\"\
    , line 26, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    sorted_list\
    \ = sorted(lst)\n    odd = sorted_list[1::2]\n    even = sorted_list[::2]\n  \
    \  return even + odd[::-1]\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8,\
    \ 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ik6_qx1.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp1ik6_qx1.py\", line 33,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp1ik6_qx1.py\"\
    , line 22, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ == 0:\n        return []\n    res = []\n    start = min(lst)\n    end = max(lst)\n\
    \    while start <= end:\n        res.append(start)\n        res.append(end)\n\
    \        start += 1\n        end -= 1\n    if len(res) > len(lst):\n        res.pop()\n\
    \    return res\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   \
    \ assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0b8a3fko.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp0b8a3fko.py\", line 42,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp0b8a3fko.py\"\
    , line 34, in check\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ <= 1:\n        return lst\n    res = [min(lst)]\n    lst.remove(min(lst))\n\
    \    while lst:\n        res.append(max(lst))\n        lst.remove(max(lst))\n\
    \        if lst:\n            res.append(min(lst))\n            lst.remove(min(lst))\n\
    \    return res\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   \
    \ assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    sorted_lst\
    \ = sorted(lst)\n    res = []\n    i = 0\n    j = len(sorted_lst) - 1\n    while\
    \ i <= j:\n        res.append(sorted_lst[i])\n        if i != j:\n           \
    \ res.append(sorted_lst[j])\n        i += 1\n        j -= 1\n    return res\n\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  \
    \  assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    else:\n        # Find the minimum and maximum value of\
    \ the list.\n        # Sort the list from minimum to maximum.\n        min_int\
    \ = min(lst)\n        max_int = max(lst)\n        lst.sort()\n        odd_index\
    \ = True\n        for i in range(len(lst)):\n            if odd_index:\n     \
    \           yield min_int\n                min_int += 1\n            else:\n \
    \               yield max_int\n                max_int -= 1\n            odd_index\
    \ = not odd_index\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4])\
    \ == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq6jnlt77.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpq6jnlt77.py\", line 48,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpq6jnlt77.py\"\
    , line 37, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    for i in range(len(lst)):\n\
    \        if lst[i] > lst[i+1]:\n            lst[i], lst[i+1] = lst[i+1], lst[i]\n\
    \            i += 2\n        elif lst[i] == lst[i+1]:\n            i += 1\n  \
    \      else:\n            i += 1\n    return lst\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgy4yp9b.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpwgy4yp9b.py\", line 38,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpwgy4yp9b.py\"\
    , line 27, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  File\
    \ \"/tmp/tmpwgy4yp9b.py\", line 18, in strange_sort_list\n    if lst[i] > lst[i+1]:\n\
    IndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if\
    \ len(lst) == 2:\n        return [min(lst), max(lst)]\n    else:\n        new_lst\
    \ = [min(lst)]\n        for i in range(1, (len(lst)//2)+1):\n            new_lst.append(max(lst))\n\
    \            lst.remove(max(lst))\n            new_lst.append(min(lst))\n    \
    \        lst.remove(min(lst))\n        return new_lst\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvi4d6574.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpvi4d6574.py\", line 44,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpvi4d6574.py\"\
    , line 33, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # Write your\
    \ code here.\n    # First, sort the list from smallest to largest\n    sorted_lst\
    \ = sorted(lst)\n    # Start with a variable to hold first half, and start\n \
    \   # an index for first half at 0\n    first_half = []\n    first_half_index\
    \ = 0\n    # Start a variable to hold second half, and start\n    # an index for\
    \ second half at -1\n    second_half = []\n    second_half_index = -1\n    # Iterate\
    \ through the sorted list\n    for num in sorted_lst:\n        # Append first\
    \ element to first half\n        if first_half_index == 0:\n            first_half.append(num)\n\
    \            first_half_index += 1\n        # Append second element to second\
    \ half\n        elif second_half_index == -1:\n            second_half.append(num)\n\
    \            second_half_index -= 1\n        # Append next element to first half\n\
    \        elif first_half_index > 0:\n            first_half.append(num)\n    \
    \        first_half_index += 1\n        # Append next element to second half\n\
    \        elif second_half_index < 0:\n            second_half.append(num)\n  \
    \          second_half_index -= 1\n    # Concatenate lists\n    return first_half\
    \ + second_half\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   \
    \ assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3kb0z_7n.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmp3kb0z_7n.py\", line 60,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp3kb0z_7n.py\"\
    , line 49, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ == 0:\n        return []\n    result = []\n    while len(lst) > 0:\n       \
    \ result.append(min(lst))\n        lst.remove(min(lst))\n        if len(lst) >\
    \ 0:\n            result.append(max(lst))\n            lst.remove(max(lst))\n\
    \    return result\ndef check(candidate):\n    assert candidate([1, 2, 3, 4])\
    \ == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    lst.sort()\n    while len(lst) > 2:\n        new = []\n\
    \        while lst:\n            new.append(lst.pop(0))\n            if lst:\n\
    \                new.append(lst.pop())\n        lst = new\n    return lst\n\n\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  \
    \  assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659823969
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    min_i = 0\n\
    \    max_i = len(lst) - 1\n    sorted_lst = []\n    while min_i <= max_i:\n  \
    \      sorted_lst.append(lst[min_i])\n        if min_i != max_i:\n           \
    \ sorted_lst.append(lst[max_i])\n        min_i += 1\n        max_i -= 1\n    return\
    \ sorted_lst\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5,\
    \ 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5,\
    \ 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) ==\
    \ [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_iyiom_h.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp_iyiom_h.py\", line 40,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp_iyiom_h.py\"\
    , line 32, in check\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    i = 0\n   \
    \ min_val = min(lst)\n    max_val = max(lst)\n    while i < len(lst):\n      \
    \  if lst[i] == min_val:\n            lst[i] = max_val\n        elif lst[i] ==\
    \ max_val:\n            lst[i] = min_val\n        i += 1\n    return lst\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9,\
    \ 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5,\
    \ 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsytnzjt2.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpsytnzjt2.py\", line 39,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpsytnzjt2.py\"\
    , line 28, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    lst = lst.copy()\n\
    \    return lst\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   \
    \ assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmper1z8dcq.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmper1z8dcq.py\", line 32,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmper1z8dcq.py\"\
    , line 21, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    #TODO: Implement\
    \ me\n    pass\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   \
    \ assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo1ozbmp.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpoo1ozbmp.py\", line 32,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpoo1ozbmp.py\"\
    , line 21, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    sorted_list\
    \ = sorted(lst)\n    start_idx = 0\n    end_idx = len(sorted_list) - 1\n    new_list\
    \ = []\n    while start_idx < end_idx:\n        new_list.append(sorted_list[start_idx])\n\
    \        new_list.append(sorted_list[end_idx])\n        start_idx += 1\n     \
    \   end_idx -= 1\n    if start_idx == end_idx:\n        new_list.append(sorted_list[start_idx])\n\
    \    return new_list\n\ndef check(candidate):\n    assert candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    res = []\n\
    \    while lst:\n        res.append(min(lst))\n        lst.remove(min(lst))\n\
    \        if lst:\n            res.append(max(lst))\n            lst.remove(max(lst))\n\
    \    return res\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   \
    \ assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    for i in range(0,\
    \ len(lst), 2):\n        min_index = i\n        max_index = len(lst) - 1 - i\n\
    \        if min_index >= max_index:\n            break\n        if lst[min_index]\
    \ > lst[max_index]:\n            lst[min_index], lst[max_index] = lst[max_index],\
    \ lst[min_index]\n    return lst\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7g6nrily.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp7g6nrily.py\", line 38,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp7g6nrily.py\"\
    , line 27, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    result = []\n\
    \    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n\
    \        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n\
    \    return result\ndef check(candidate):\n    assert candidate([1, 2, 3, 4])\
    \ == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ <= 1:\n        return lst\n    else:\n        mx = max(lst)\n        mn = min(lst)\n\
    \        ind_mx = lst.index(mx)\n        ind_mn = lst.index(mn)\n        lst[ind_mx]\
    \ = mn\n        lst[ind_mn] = mx\n        return [mn] + strange_sort_list(lst[1:-1])\
    \ + [mx]\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4,\
    \ 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5,\
    \ 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5,\
    \ 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) ==\
    \ [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfszbwjn1.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpfszbwjn1.py\", line 40,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpfszbwjn1.py\"\
    , line 29, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    i = 0\n   \
    \ if len(lst) % 2 == 0:\n        # even length list\n        start = 0\n     \
    \   end = len(lst) - 1\n        sorted_lst = []\n        while i < len(lst):\n\
    \            sorted_lst.append(lst[start])\n            sorted_lst.append(lst[end])\n\
    \            start += 1\n            end -= 1\n            i += 2\n    else:\n\
    \        # odd length list\n        start = 0\n        end = len(lst) - 1\n  \
    \      sorted_lst = []\n        while i < len(lst):\n            sorted_lst.append(lst[start])\n\
    \            sorted_lst.append(lst[end])\n            start += 1\n           \
    \ end -= 1\n            i += 2\n        sorted_lst.append(lst[start])\n    return\
    \ sorted_lst\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5,\
    \ 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5,\
    \ 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) ==\
    \ [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmuqaprml.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmpmuqaprml.py\", line 55,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpmuqaprml.py\"\
    , line 45, in check\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    lst.sort()\n\
    \    res = []\n    while lst:\n        res.append(lst.pop(0))\n        if lst:\n\
    \            res.append(lst.pop())\n    return res\ndef check(candidate):\n  \
    \  assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6,\
    \ 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n \
    \   assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4,\
    \ 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2,\
    \ 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n   \
    \ check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    lst.sort()\n\
    \    for i in range(len(lst) // 2):\n        lst.insert(2 * i + 1, lst.pop())\n\
    \    return lst\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   \
    \ assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    sorted_lst = sorted(lst)\n    start_idx = 0\n    result\
    \ = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(start_idx))\n\
    \        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n    return\
    \ result\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4,\
    \ 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5,\
    \ 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5,\
    \ 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) ==\
    \ [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    lst.sort()\n\
    \    for i in range(1, len(lst), 2):\n        lst[i], lst[i - 1] = lst[i - 1],\
    \ lst[i]\n    return lst\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8,\
    \ 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppph5zr2b.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppph5zr2b.py\", line 34,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmppph5zr2b.py\"\
    , line 23, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # Create list\
    \ of odd and even integers\n    odd = []\n    even = []\n    for i in lst:\n \
    \       if i % 2 == 0:\n            even.append(i)\n        else:\n          \
    \  odd.append(i)\n    # Sort both lists in reverse\n    odd.sort(reverse=True)\n\
    \    even.sort(reverse=True)\n    # Fill a new list, alternately picking last\
    \ values from odd and even lists.\n    res = []\n    while (len(odd) + len(even))\
    \ > 0:\n        if len(odd) > 0:\n            res.append(odd.pop())\n        if\
    \ len(even) > 0:\n            res.append(even.pop())\n    return res\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0eaxzl2f.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp0eaxzl2f.py\", line 49,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmp0eaxzl2f.py\"\
    , line 38, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # TODO - You\
    \ fill in here.\n    if not lst:\n        return []\n    original_length = len(lst)\n\
    \    new_lst = [lst[0]]\n    lst.remove(lst[0])\n    max_or_min = 1 # 0 for min,\
    \ 1 for max\n    for _ in range(original_length-1):\n        if max_or_min ==\
    \ 0:\n            new_lst.append(min(lst))\n            lst.remove(min(lst))\n\
    \            max_or_min = 1\n        else:\n            new_lst.append(max(lst))\n\
    \            lst.remove(max(lst))\n            max_or_min = 0\n    return new_lst\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpblgm962y.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpblgm962y.py\", line 47,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpblgm962y.py\"\
    , line 39, in check\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ == 0:\n        return []\n    result = []\n    lst.sort()\n    result.append(lst[0])\n\
    \    lst.pop(0)\n    while len(lst) > 0:\n        last_idx = len(lst) - 1\n  \
    \      result.append(lst[last_idx])\n        lst.pop(last_idx)\n        if len(lst)\
    \ > 0:\n            result.append(lst[0])\n            lst.pop(0)\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4,\
    \ 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5,\
    \ 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5,\
    \ 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) ==\
    \ [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    output = []\n    start = min(lst)\n    end = max(lst)\n\
    \    idx = lst.index(start)\n    while True:\n        output.append(start)\n \
    \       lst.pop(idx)\n        if not lst:\n            break\n        start =\
    \ min(lst)\n        idx = lst.index(start)\n        output.append(end)\n     \
    \   lst.pop(lst.index(end))\n        if not lst:\n            break\n        end\
    \ = max(lst)\n    return output\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprtb0zgeg.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmprtb0zgeg.py\", line 48,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmprtb0zgeg.py\"\
    , line 44, in check\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5,\
    \ 5, -5, 5, 0, 2, 2, 2]\n  File \"/tmp/tmprtb0zgeg.py\", line 25, in strange_sort_list\n\
    \    lst.pop(idx)\nIndexError: pop index out of range\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    minimum = min(lst)\n    minimum_index = lst.index(minimum)\n\
    \    new_lst = [minimum]\n    del lst[minimum_index]\n    while len(lst) > 0:\n\
    \        maximum = max(lst)\n        maximum_index = lst.index(maximum)\n    \
    \    new_lst.append(maximum)\n        del lst[maximum_index]\n        if len(lst)\
    \ > 0:\n            minimum = min(lst)\n            minimum_index = lst.index(minimum)\n\
    \            new_lst.append(minimum)\n            del lst[minimum_index]\n   \
    \ return new_lst\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4])\
    \ == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n\
    \    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst)\
    \ == 0:\n        return []\n    lst.sort()\n    result = []\n    while len(lst)\
    \ > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n        \
    \    result.append(lst.pop(-1))\n    return result\ndef check(candidate):\n  \
    \  assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6,\
    \ 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n \
    \   assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4,\
    \ 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2,\
    \ 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n   \
    \ check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    lst_out = []\n\
    \    lst_sorted = sorted(lst)\n    i = 0\n    max_index = len(lst_sorted) - 1\n\
    \    while i < len(lst_sorted):\n        if i % 2 == 0:\n            lst_out.append(lst_sorted[i\
    \ // 2])\n        else:\n            lst_out.append(lst_sorted[max_index - i //\
    \ 2])\n        i += 1\n    return lst_out\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    lst.sort()\n    new_lst = [lst[0]]\n    lst = lst[1:]\n\
    \    while lst:\n        new_lst.append(lst.pop())\n        if lst:\n        \
    \    new_lst.append(lst.pop(0))\n    return new_lst\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n\
    \    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0,\
    \ 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
    \    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if not lst:\n\
    \        return []\n    start = min(lst)\n    idx = lst.index(start)\n    remaining\
    \ = lst[:idx] + lst[idx+1:]\n    return [start] + strange_sort_list(remaining[::-1])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
    \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) ==\
    \ [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n   \
    \ assert candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) ==\
    \ [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) ==\
    \ [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef\
    \ test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy8v7_5v2.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpy8v7_5v2.py\", line 36,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpy8v7_5v2.py\"\
    , line 25, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: -1
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    return sorted(lst,\
    \ key=lambda x: (x, -x))\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8,\
    \ 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc8jhu66k.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpc8jhu66k.py\", line 31,\
    \ in test_check\n    check(strange_sort_list)\n  File \"/tmp/tmpc8jhu66k.py\"\
    , line 20, in check\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
    \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
    \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    # We reverse\
    \ list, so when using pop(), it will remove the minimum value\n    sorted_lst\
    \ = sorted(lst, reverse=True)\n    res = []\n    # While sorted_lst still has\
    \ values, add minimum and then maximum to result\n    while sorted_lst:\n    \
    \    res.append(sorted_lst.pop())\n        if sorted_lst:\n            res.append(sorted_lst.pop(0))\n\
    \    return res\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   \
    \ assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2,\
    \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111])\
    \ == [111111]\n\ndef test_check():\n    check(strange_sort_list)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823964
