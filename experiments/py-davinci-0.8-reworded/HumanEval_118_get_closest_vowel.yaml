name: HumanEval_118_get_closest_vowel
language: py
prompt: "def get_closest_vowel(word: str) -> str:\n    \"\"\"You are given a word.\
  \ Your task is to find the closest vowel that stands between \n    two consonants\
  \ from the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
  \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
  \ met the above condition. \n\n    You may assume that the given string contains\
  \ English letter only.\n\n    Example:\n    >>> get_closest_vowel('yogurt')\n  \
  \  'u'\n    >>> get_closest_vowel('FULL')\n    'U'\n    >>> get_closest_vowel('quick')\n\
  \    ''\n    >>> get_closest_vowel('ab')\n    ''\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('yogurt') == 'u'\n    assert candidate('full')\
  \ == 'u'\n    assert candidate('easy') == ''\n    assert candidate('eAsy') == ''\n\
  \    assert candidate('ali') == ''\n    assert candidate('bad') == 'a'\n    assert\
  \ candidate('most') == 'o'\n    assert candidate('ab') == ''\n    assert candidate('ba')\
  \ == ''\n    assert candidate('quick') == ''\n    assert candidate('anime') == 'i'\n\
  \    assert candidate('Asia') == ''\n    assert candidate('Above') == 'o'\n\ndef\
  \ test_check():\n    check(get_closest_vowel)\n\ntest_check()\n"
completions: ["    vowels = 'aeiouAEIOU'\n    cons = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n\
    \    i = len(word) - 1\n    closest_vowel = ''\n    while i >= 0:\n        if\
    \ word[i] in vowels:\n            closest_vowel = word[i]\n            if word[i-1]\
    \ in cons:\n                break\n        i -= 1\n    return closest_vowel\n\n",
  "    # remove vowels in the beginning and ending of the word\n    new_word = word.lstrip('aeiouAEIOU')\n\
    \    new_word = new_word.rstrip('aeiouAEIOU')\n    # try finding the vowel from\
    \ the end of the word (from the right)\n    for char in reversed(new_word):\n\
    \        if char in 'aeiouAEIOU':\n            return char\n    return ''\n ",
  "    vowels = 'aeiouAEIOU'\n    prev_is_vowel = False\n    result = ''\n    for\
    \ char in reversed(word):\n        if char in vowels:\n            prev_is_vowel\
    \ = True\n        elif prev_is_vowel:\n            return char\n    return result\n\
    \n", "    vowels = 'aeiouAEIOU'\n    prev_vowel_pos = -1\n    for i in range(len(word)\
    \ - 1, -1, -1):\n        if word[i] in vowels:\n            prev_vowel_pos = i\n\
    \            break\n    return word[prev_vowel_pos] if prev_vowel_pos != -1 else\
    \ ''\n\n", "    word = word[::-1]\n    vowels = 'aeiouAEIOU'\n    result = ''\n\
    \    for i in range(len(word)):\n        if word[i] in vowels:\n            if\
    \ i == 0:\n                return result\n            if word[i-1] not in vowels:\n\
    \                return word[i]\n        else:\n            if i == 0:\n     \
    \           return result\n            if word[i-1] in vowels:\n             \
    \   return result\n    return result\n", "    vowels = 'aeiouAEIOU'\n    for char\
    \ in reversed(word):\n        if char in vowels:\n            closest_vowel =\
    \ char\n            break\n    else:\n        return ''\n    index = 0\n    while\
    \ index < len(word):\n        if word[index] == closest_vowel:\n            break\n\
    \        index += 1\n    else:\n        return ''\n    return closest_vowel\n\n",
  "    reverse_word = word[::-1]\n    vowel_index = 0\n    closest_index = 0\n   \
    \ for index, value in enumerate(reverse_word):\n        if value in VOWELS:\n\
    \            vowel_index = index\n            if vowel_index > closest_index and\
    \ reverse_word[index - 1] not in VOWELS:\n                closest_index = vowel_index\n\
    \    if closest_index == 0:\n        return ''\n    return reverse_word[closest_index]\n\
    \n", '    pass', "    #     vowels = \"aeiou\"\n    #     for i in range(len(word)\
    \ - 1, 0, -1):\n    #         if word[i] in vowels and word[i - 1] not in vowels:\n\
    \    #             return word[i]\n    #     return \"\"\n\n    vowels = \"aeiou\"\
    \n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and\
    \ word[i - 1] not in vowels:\n            return word[i]\n    return \"\"\n\n\n\
    print(get_closest_vowel(\"yogurt\"))\nprint(get_closest_vowel(\"FULL\"))\nprint(get_closest_vowel(\"\
    quick\"))\nprint(get_closest_vowel(\"ab\"))\n\n", "    closest_vowel = \"\"\n\
    \    last_consonant = \"\"\n    for i in range(len(word) - 1, -1, -1):\n     \
    \   if is_vowel(word[i]):\n            if last_consonant != \"\":\n          \
    \      closest_vowel = word[i]\n                break\n        else:\n       \
    \     last_consonant = word[i]\n    return closest_vowel\n", "    pass\n", " \
    \   if len(word) < 3:\n        return ''\n    for i in range(len(word) - 2, 0,\
    \ -1):\n        if word[i] in 'aeiouAEIOU' and word[i-1] not in 'aeiouAEIOU' and\
    \ word[i+1] not in 'aeiouAEIOU':\n            return word[i]\n    return ''\n",
  "    vowels = ['a', 'e', 'i', 'o', 'u']\n    index = -1\n    for i in range(len(word)\
    \ - 1, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels:\n\
    \            index = i\n            break\n    return '' if index == -1 else word[index]\n\
    \n", "    pass\n\n", "    res = ''\n    vowels = 'aeiou'\n    word = word.lower()\n\
    \    word = word[::-1]\n    for i in range(1, len(word)):\n        if word[i]\
    \ in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n       \
    \     res = word[i]\n            break\n    return res\n\n", "    vowels = ['a',\
    \ 'e', 'i', 'o', 'u']\n    for i in range(len(word) - 1, 0, -1):\n        if word[i].lower()\
    \ in vowels and word[i - 1].lower() not in vowels:\n            return word[i]\n\
    \    return ''\n", "    vowels = 'aeiouAEIOU'\n    stack = []\n    vowels_pos\
    \ = []\n    for i, ch in enumerate(word):\n        if ch in vowels:\n        \
    \    vowels_pos.append(i)\n        if len(stack) == 0:\n            stack.append(ch)\n\
    \        elif len(stack) == 1:\n            if not ch in vowels:\n           \
    \     stack.append(ch)\n            else:\n                stack.pop()\n     \
    \   else:\n            stack.pop()\n            if not ch in vowels:\n       \
    \         stack.append(ch)\n            else:\n                pass\n        if\
    \ len(stack) == 2:\n            break\n    if not vowels_pos:\n        return\
    \ ''\n    else:\n        if len(stack) == 2:\n            return word[min(vowels_pos,\
    \ key=lambda pos: abs(pos - i))]\n        else:\n            return word[max(vowels_pos)]\n\
    \n\n", "    # first, look for vowels from the back\n    for char in reversed(word):\n\
    \        if char in 'aeiou':\n            return char\n    \n    # no vowels found\n\
    \    return ''\n\n", "    VOWELS = 'aeiouAEIOU'\n    CONSONANTS = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n\
    \    word = word[::-1]\n    closest_vowel = ''\n    for letter in word:\n    \
    \    if letter in VOWELS:\n            closest_vowel = letter\n        elif letter\
    \ in CONSONANTS:\n            if closest_vowel:\n                return closest_vowel\n\
    \    return closest_vowel\n\n", "    vowels = ['a', 'e', 'i', 'o', 'u']\n    cons_vow_cons\
    \ = [\n        (word[i], word[i + 1], word[i + 2])\n        for i in range(len(word)\
    \ - 2)\n        if word[i] not in vowels and word[i + 2] not in vowels\n    ]\n\
    \    if not cons_vow_cons:\n        return ''\n    min_index = min(cons_vow_cons,\
    \ key=lambda x: len(x[1]))[0]\n    return word[word.rfind(min_index) + 1]\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
