name: HumanEval_118_get_closest_vowel
language: py
prompt: "def get_closest_vowel(word: str) -> str:\n    \"\"\"You are given a word.\
  \ Your task is to find the closest vowel that stands between \n    two consonants\
  \ from the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
  \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
  \ met the above condition. \n\n    You may assume that the given string contains\
  \ English letter only.\n\n    Example:\n    >>> get_closest_vowel('yogurt')\n  \
  \  'u'\n    >>> get_closest_vowel('FULL')\n    'U'\n    >>> get_closest_vowel('quick')\n\
  \    ''\n    >>> get_closest_vowel('ab')\n    ''\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('yogurt') == 'u'\n    assert candidate('full')\
  \ == 'u'\n    assert candidate('easy') == ''\n    assert candidate('eAsy') == ''\n\
  \    assert candidate('ali') == ''\n    assert candidate('bad') == 'a'\n    assert\
  \ candidate('most') == 'o'\n    assert candidate('ab') == ''\n    assert candidate('ba')\
  \ == ''\n    assert candidate('quick') == ''\n    assert candidate('anime') == 'i'\n\
  \    assert candidate('Asia') == ''\n    assert candidate('Above') == 'o'\n\ndef\
  \ test_check():\n    check(get_closest_vowel)\n\ntest_check()\n"
completions: ["    vowels = 'aeiouAEIOU'\n    cons = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n\
    \    i = len(word) - 1\n    closest_vowel = ''\n    while i >= 0:\n        if\
    \ word[i] in vowels:\n            closest_vowel = word[i]\n            if word[i-1]\
    \ in cons:\n                break\n        i -= 1\n    return closest_vowel\n\n",
  "    # remove vowels in the beginning and ending of the word\n    new_word = word.lstrip('aeiouAEIOU')\n\
    \    new_word = new_word.rstrip('aeiouAEIOU')\n    # try finding the vowel from\
    \ the end of the word (from the right)\n    for char in reversed(new_word):\n\
    \        if char in 'aeiouAEIOU':\n            return char\n    return ''\n ",
  "    vowels = 'aeiouAEIOU'\n    prev_is_vowel = False\n    result = ''\n    for\
    \ char in reversed(word):\n        if char in vowels:\n            prev_is_vowel\
    \ = True\n        elif prev_is_vowel:\n            return char\n    return result\n\
    \n", "    vowels = 'aeiouAEIOU'\n    prev_vowel_pos = -1\n    for i in range(len(word)\
    \ - 1, -1, -1):\n        if word[i] in vowels:\n            prev_vowel_pos = i\n\
    \            break\n    return word[prev_vowel_pos] if prev_vowel_pos != -1 else\
    \ ''\n\n", "    word = word[::-1]\n    vowels = 'aeiouAEIOU'\n    result = ''\n\
    \    for i in range(len(word)):\n        if word[i] in vowels:\n            if\
    \ i == 0:\n                return result\n            if word[i-1] not in vowels:\n\
    \                return word[i]\n        else:\n            if i == 0:\n     \
    \           return result\n            if word[i-1] in vowels:\n             \
    \   return result\n    return result\n", "    vowels = 'aeiouAEIOU'\n    for char\
    \ in reversed(word):\n        if char in vowels:\n            closest_vowel =\
    \ char\n            break\n    else:\n        return ''\n    index = 0\n    while\
    \ index < len(word):\n        if word[index] == closest_vowel:\n            break\n\
    \        index += 1\n    else:\n        return ''\n    return closest_vowel\n\n",
  "    reverse_word = word[::-1]\n    vowel_index = 0\n    closest_index = 0\n   \
    \ for index, value in enumerate(reverse_word):\n        if value in VOWELS:\n\
    \            vowel_index = index\n            if vowel_index > closest_index and\
    \ reverse_word[index - 1] not in VOWELS:\n                closest_index = vowel_index\n\
    \    if closest_index == 0:\n        return ''\n    return reverse_word[closest_index]\n\
    \n", '    pass', "    #     vowels = \"aeiou\"\n    #     for i in range(len(word)\
    \ - 1, 0, -1):\n    #         if word[i] in vowels and word[i - 1] not in vowels:\n\
    \    #             return word[i]\n    #     return \"\"\n\n    vowels = \"aeiou\"\
    \n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and\
    \ word[i - 1] not in vowels:\n            return word[i]\n    return \"\"\n\n\n\
    print(get_closest_vowel(\"yogurt\"))\nprint(get_closest_vowel(\"FULL\"))\nprint(get_closest_vowel(\"\
    quick\"))\nprint(get_closest_vowel(\"ab\"))\n\n", "    closest_vowel = \"\"\n\
    \    last_consonant = \"\"\n    for i in range(len(word) - 1, -1, -1):\n     \
    \   if is_vowel(word[i]):\n            if last_consonant != \"\":\n          \
    \      closest_vowel = word[i]\n                break\n        else:\n       \
    \     last_consonant = word[i]\n    return closest_vowel\n", "    pass\n", " \
    \   if len(word) < 3:\n        return ''\n    for i in range(len(word) - 2, 0,\
    \ -1):\n        if word[i] in 'aeiouAEIOU' and word[i-1] not in 'aeiouAEIOU' and\
    \ word[i+1] not in 'aeiouAEIOU':\n            return word[i]\n    return ''\n",
  "    vowels = ['a', 'e', 'i', 'o', 'u']\n    index = -1\n    for i in range(len(word)\
    \ - 1, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels:\n\
    \            index = i\n            break\n    return '' if index == -1 else word[index]\n\
    \n", "    pass\n\n", "    res = ''\n    vowels = 'aeiou'\n    word = word.lower()\n\
    \    word = word[::-1]\n    for i in range(1, len(word)):\n        if word[i]\
    \ in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n       \
    \     res = word[i]\n            break\n    return res\n\n", "    vowels = ['a',\
    \ 'e', 'i', 'o', 'u']\n    for i in range(len(word) - 1, 0, -1):\n        if word[i].lower()\
    \ in vowels and word[i - 1].lower() not in vowels:\n            return word[i]\n\
    \    return ''\n", "    vowels = 'aeiouAEIOU'\n    stack = []\n    vowels_pos\
    \ = []\n    for i, ch in enumerate(word):\n        if ch in vowels:\n        \
    \    vowels_pos.append(i)\n        if len(stack) == 0:\n            stack.append(ch)\n\
    \        elif len(stack) == 1:\n            if not ch in vowels:\n           \
    \     stack.append(ch)\n            else:\n                stack.pop()\n     \
    \   else:\n            stack.pop()\n            if not ch in vowels:\n       \
    \         stack.append(ch)\n            else:\n                pass\n        if\
    \ len(stack) == 2:\n            break\n    if not vowels_pos:\n        return\
    \ ''\n    else:\n        if len(stack) == 2:\n            return word[min(vowels_pos,\
    \ key=lambda pos: abs(pos - i))]\n        else:\n            return word[max(vowels_pos)]\n\
    \n\n", "    # first, look for vowels from the back\n    for char in reversed(word):\n\
    \        if char in 'aeiou':\n            return char\n    \n    # no vowels found\n\
    \    return ''\n\n", "    VOWELS = 'aeiouAEIOU'\n    CONSONANTS = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n\
    \    word = word[::-1]\n    closest_vowel = ''\n    for letter in word:\n    \
    \    if letter in VOWELS:\n            closest_vowel = letter\n        elif letter\
    \ in CONSONANTS:\n            if closest_vowel:\n                return closest_vowel\n\
    \    return closest_vowel\n\n", "    vowels = ['a', 'e', 'i', 'o', 'u']\n    cons_vow_cons\
    \ = [\n        (word[i], word[i + 1], word[i + 2])\n        for i in range(len(word)\
    \ - 2)\n        if word[i] not in vowels and word[i + 2] not in vowels\n    ]\n\
    \    if not cons_vow_cons:\n        return ''\n    min_index = min(cons_vow_cons,\
    \ key=lambda x: len(x[1]))[0]\n    return word[word.rfind(min_index) + 1]\n\n",
  "    pass\n", "    stack = []\n    for ch in word:\n        if ch in 'aeiouAEIOU':\n\
    \            if len(stack) >= 2:\n                stack.append(ch)\n         \
    \       break\n            else:\n                continue\n        else:\n  \
    \          stack.append(ch)\n    if len(stack) == len(word):\n        return ''\n\
    \    else:\n        return stack[-1]\n\n", "    vowels = 'aeiouAEIOU'\n    for\
    \ i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i -\
    \ 1] not in vowels:\n            return word[i]\n    return ''\n", "    vowels\
    \ = 'aeiou'\n    res = ''\n    if len(word) <= 2:\n        return res\n    else:\n\
    \        for i in range(len(word)-2, -1, -1):\n            if word[i] in vowels\
    \ and word[i+1] not in vowels:\n                res = word[i]\n              \
    \  break\n    return res\n\n", "    pass\n\n", "    vowels = 'aeiou'\n    words\
    \ = [x for x in word[::-1] if x not in vowels]\n    if len(words) < 2:\n     \
    \   return ''\n    else:\n        for i in word[::-1]:\n            if i in vowels:\n\
    \                return i\n\n", "    # your code here\n", "    for i in range(len(word)\
    \ - 1, 0, -1):\n        if word[i] in 'aeiou' and word[i-1] not in 'aeiou':\n\
    \            return word[i]\n    return ''\n\n", "    #\n    # your code here\n\
    \    #\n    pass\n```\n\n```", "    if len(word) < 3:\n        return ''\n   \
    \ for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not\
    \ is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n\
    \    return ''\n\n", "    # Your code here\n    vowels = 'AEIOUaeiou'\n    k =\
    \ []\n    for i in range(len(word)):\n        if word[i] in vowels:\n        \
    \    k.append(i)\n    if len(k) == 0:\n        return ''\n    new_word = ''\n\
    \    for i in range(len(k)):\n        if i != len(k) - 1:\n            if k[i]\
    \ == k[i + 1] - 1:\n                if word[k[i]] in 'AEIOU':\n              \
    \      new_word += word[k[i]]\n                elif word[k[i + 1]] in 'AEIOU':\n\
    \                    new_word += word[k[i + 1]]\n            else:\n         \
    \       if word[k[i]] in 'AEIOU':\n                    new_word += word[k[i]]\n\
    \                else:\n                    new_word += word[k[i + 1]]\n    if\
    \ new_word == '':\n        return ''\n    else:\n        return new_word[-1]\n\
    \n", "    vowels = \"aeiou\"\n    vowel_index = None\n    for index, char in enumerate(word[::-1]):\n\
    \        if char in vowels:\n            vowel_index = len(word) - index - 1\n\
    \            break\n    if vowel_index == None:\n        return \"\"\n    for\
    \ index, char in enumerate(word[vowel_index::-1]):\n        if char not in vowels:\n\
    \            return word[vowel_index:vowel_index+index][0]\n    return \"\"\n",
  "    vowels = 'aeiouAEIOU'\n    candidates = []\n    for i in range(len(word) -\
    \ 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n         \
    \   candidates.append(word[i])\n    if len(candidates) == 0:\n        return ''\n\
    \    return min(candidates, key=lambda x: len(word) - word.rindex(x))\n\n", " \
    \   vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_index = len(word) - 1\n    while\
    \ vowel_index >= 0:\n        if word[vowel_index] in vowels:\n            if vowel_index\
    \ > 0 and word[vowel_index - 1] not in vowels:\n                return word[vowel_index]\n\
    \            elif vowel_index < len(word) - 1 and word[vowel_index + 1] not in\
    \ vowels:\n                return word[vowel_index]\n        vowel_index -= 1\n\
    \    return ''\n\n", "    vowels = 'aeiouAEIOU'\n    dic = {}\n    index = len(word)\
    \ - 1\n    for i in word[::-1]:\n        if i in vowels:\n            dic[index]\
    \ = i\n        index -= 1\n    if len(dic) == 0:\n        return ''\n    else:\n\
    \        dic = {i:dic[i] for i in dic if word[i-1] not in vowels and word[i+1]\
    \ not in vowels}\n        return dic[max(dic)]\n\n", "    vowels = 'aeiouAEIOU'\n\
    \    if len(word) <= 2:\n        return ''\n    else:\n        for i in range(len(word)-2,\
    \ -1, -1):\n            if word[i] in vowels and word[i+1] not in vowels:\n  \
    \              return word[i]\n        return ''\n\n", "    pass\n\n", "    vowels\
    \ = \"AEIOUaeiou\"\n    i = len(word) - 1\n    while i > 0:\n        if word[i]\
    \ in vowels:\n            if word[i-1] not in vowels:\n                return\
    \ word[i]\n        i -= 1\n    return \"\"\n\n", "    for x in range(len(word)\
    \ - 1, 0, -1):\n        if word[x] in 'aeiou' and word[x - 1] not in 'aeiou':\n\
    \            return word[x]\n    return ''\n\n", "    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\n\n", "    pass\n\n", "    vowels = 'aeiouAEIOU'\n \
    \   closest_vowel = ''\n    for i in range(len(word) - 1, 0, -1):\n        if\
    \ word[i] in vowels and word[i - 1] not in vowels:\n            closest_vowel\
    \ = word[i]\n            break\n    return closest_vowel\n\n", "    cons, vowels\
    \ = \"bcdfghjklmnpqrstvwxyz\", \"aeiou\"\n    for c in word[::-1]:\n        if\
    \ c in vowels:\n            closest_vowel = c\n        elif c in cons:\n     \
    \       if not closest_vowel:\n                return \"\"\n            return\
    \ closest_vowel\n    return \"\"\n\n", "    pass\n\n", "    vowels = 'aeiouAEIOU'\n\
    \    word = word[::-1]\n    idx = 0\n    while idx < len(word):\n        if word[idx]\
    \ in vowels:\n            return word[idx]\n        idx += 1\n    return ''\n\n",
  "    pass\n\n", "    pass\n\n", "    index_of_vowel_found = 0\n    for i in range(len(word)\
    \ - 1, -1, -1):\n        if word[i] in CONSONANTS:\n            index_of_vowel_found\
    \ = i\n            break\n    if index_of_vowel_found == 0:\n        return ''\n\
    \    else:\n        for index in range(index_of_vowel_found, len(word)):\n   \
    \         if word[index] in VOWELS:\n                return word[index]\n    \
    \    return ''\n\n", "    i = len(word) - 1\n    closest_vowel = ''\n    while\
    \ i > 0:\n        if word[i] in \"aeiou\":\n            if word[i - 1] not in\
    \ \"aeiou\":\n                closest_vowel = word[i]\n                break\n\
    \        i -= 1\n    return closest_vowel\n\n", "    vowels = 'aeiou'\n    for\
    \ i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n        \
    \    if i < len(word) - 1 and word[i + 1] not in vowels:\n                return\
    \ word[i]\n            elif i > 0 and word[i - 1] not in vowels:\n           \
    \     return word[i]\n    return ''\n\n", "    pass\n    \n    ", "    vowel =\
    \ 'aeiou'\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowel\
    \ and word[i-1] not in vowel:\n            return word[i]\n    return ''\n\n",
  "    vowels = \"aeiou\"\n    new = []\n    for i in range(len(word)):\n        if\
    \ word[i] in vowels:\n            new.append(i)\n    if len(new) > 0:\n      \
    \  if new[0] == 0:\n            if len(new) > 1:\n                return word[new[1]]\n\
    \            else:\n                return ''\n        elif new[-1] == len(word)\
    \ - 1:\n            return word[new[-2]]\n        else:\n            return word[new[-1]]\n\
    \    else:\n        return ''\n\n", "    word = word[::-1]\n    vowels = list('aeiou')\n\
    \    closest_vowel = ''\n    if not word[0] in vowels:\n        for i in range(1,\
    \ len(word)):\n            if word[i] in vowels:\n                closest_vowel\
    \ = word[i]\n                if i != len(word) - 1:\n                    if not\
    \ word[i + 1] in vowels:\n                        break\n                else:\n\
    \                    break\n    return closest_vowel\n\n", "    vowels = 'aeiouAEIOU'\n\
    \    last_consonant = -1\n    for i, char in enumerate(word[::-1]):\n        if\
    \ char not in vowels:\n            last_consonant = i\n            break\n   \
    \ if last_consonant == -1:\n        return ''\n    for char in word[::-1][last_consonant+1:]:\n\
    \        if char in vowels:\n            return char\n    return ''\n\n", "  \
    \  closest_vowel = ''\n    distance = len(word)\n    for vowel in VOWELS:\n  \
    \      try:\n            vowel_index = word.rindex(vowel)\n            if distance\
    \ > vowel_index and vowel_index != 0:\n                distance = vowel_index\n\
    \                closest_vowel = vowel\n        except ValueError:\n         \
    \   pass\n    return closest_vowel\n    \n    ", "    idx = -1\n    for i in range(len(word)\
    \ - 1, -1, -1):\n        if word[i] in 'aeiou':\n            idx = i\n       \
    \     break\n    return word[idx] if (idx > 0 and word[idx - 1] not in 'aeiou')\
    \ else ''\n\n", "    ret = ''\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word)\
    \ - 1, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels:\n\
    \            ret = word[i]\n            break\n    return ret\n\n", "    vowels\
    \ = \"aeiouAEIOU\"\n    for index, letter in enumerate(word[::-1]):\n        if\
    \ letter in vowels:\n            if index < len(word) - 1 and word[len(word) -\
    \ index - 2] not in vowels:\n                return letter\n            elif index\
    \ == len(word) - 1:\n                return letter\n        else:\n          \
    \  if index < len(word) - 1 and word[len(word) - index - 2] in vowels:\n     \
    \           return word[len(word) - index - 2]\n    return \"\"\n\n", "    # use\
    \ regex to find the first vowel from the right side\n    match = re.search(r'([^aeiou]+)[aeiou]',\
    \ word[::-1])\n    if match:\n        return match.group(1)[::-1]\n    return\
    \ ''\n", "    vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i in range(len(word)\
    \ - 1, -1, -1):\n        curr = word[i]\n        if curr in vowels:\n        \
    \    prev = word[i - 1]\n            if prev in vowels:\n                continue\n\
    \            else:\n                return curr\n        else:\n            if\
    \ i < len(word) - 1:\n                return word[i + 1]\n    return ''\n\n",
  "    v = \"AEIOUaeiou\"\n    for w in word[::-1]:\n        if w in v:\n        \
    \    return w\n    return \"\"\n\n", "    # TODO: write your code here\n    return\
    \ word\n\n", "    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)\
    \ - 1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels:\n  \
    \          return word[i]\n    return ''\n\n", "    pass\n\n", "    if not word:\n\
    \        return ''\n    vowel = ['a', 'e', 'i', 'o', 'u']\n    word = word[::-1]\n\
    \    final = ''\n    count = 0\n    while count < len(word):\n        if word[count]\
    \ in vowel:\n            final = word[count]\n            count += 1\n       \
    \     if count == len(word):\n                return final\n            while\
    \ word[count] not in vowel:\n                count += 1\n                if count\
    \ == len(word):\n                    return final\n        else:\n           \
    \ count += 1\n    return final\n\n", "    vowels = \"aeiouAEIOU\"\n    if len(word)\
    \ < 3:\n        return \"\"\n    for i in range(1, len(word) - 1):\n        if\
    \ word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n\
    \            return word[i]\n    return \"\"\n\n", "    vowels = 'aeiou'\n   \
    \ vowels_found = []\n    # remove vowels at beginning and ending\n    word = word.lstrip(vowels).rstrip(vowels)\n\
    \    for i in range(1, len(word)):\n        if word[i] in vowels and word[i-1]\
    \ not in vowels:\n            # this vowel is after a consonant\n            if\
    \ i == len(word) - 1:\n                # this vowel is at the end\n          \
    \      vowels_found.append(word[i])\n            elif word[i+1] not in vowels:\n\
    \                # this vowel is before a consonant\n                vowels_found.append(word[i])\n\
    \    if vowels_found:\n        # return the last vowel found, i.e. the closest\
    \ to the end\n        return vowels_found[-1]\n    else:\n        return ''\n",
  "    vowels = 'aeiouAEIOU'\n    result = []\n    for i in range(len(word)):\n  \
    \      if word[i] in vowels:\n            result.append(i)\n    \n    if len(result)\
    \ > 1:\n        for i in range(len(result) - 1):\n            if result[i] - result[i\
    \ + 1] > 0:\n                return word[result[i + 1]]\n        return word[result[0]]\n\
    \    return ''\n\n", "    new_word = word[::-1]\n    result = ''\n    for i in\
    \ range(len(new_word)):\n        if new_word[i] in 'aeiouAEIOU':\n           \
    \ if result == '':\n                result = new_word[i]\n            elif i <=\
    \ result.index('a') or i <= result.index('e') or i <= result.index('i') or i <=\
    \ result.index('o') or i <= result.index('u'):\n                result = new_word[i]\n\
    \    return result\n\n", "    vowels = 'aeiouAEIOU'\n    for i in range(len(word)\
    \ - 1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels:\n  \
    \          return word[i]\n    return ''\n\n", "    word = word[::-1]\n    vowel\
    \ = ''\n    for i in range(1, len(word)):\n        if word[i] in 'aeiouAEIOU':\n\
    \            vowel = word[i]\n            if word[i - 1] not in 'aeiouAEIOU':\n\
    \                return vowel\n    return vowel\n", "    vowels = set(['a', 'e',\
    \ 'i', 'o', 'u'])\n    # find all vowels in the word\n    v = [i for i in vowels\
    \ if i in word]\n    # find all consonants in the word\n    c = [i for i in word\
    \ if i not in vowels]\n    # find the closest vowel\n    if c:\n        pos =\
    \ [(i, word.rfind(i)) for i in c]\n        for i in pos:\n            for j in\
    \ v:\n                if i[1] > word.find(j) > i[0]:\n                    return\
    \ j\n        return ''\n    else:\n        return ''\n    ", "    if not word\
    \ or not word.isalpha():\n        return ''\n    if not re.search(r'[aeiou]',\
    \ word.lower()):\n        return ''\n    last_index = len(word) - 1\n    for i\
    \ in range(last_index, 0, -1):\n        if word[i] in 'aeiou':\n            continue\n\
    \        return word[max(i - 1, 0)]\n    return ''\n\n", "    vowels = 'aeiou'\n\
    \    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i-1]\
    \ not in vowels:\n            return word[i]\n    return ''\n\n@pytest.mark.parametrize('word,\
    \ expected', [\n    ('yogurt', 'u'),\n    ('FULL', 'U'),\n    ('quick', ''),\n\
    \    ('ab', ''),\n])", "    pass\n\n", "    raise NotImplementedError()\n\n",
  "    pass\n\n", "    pass\n\n", "    return \"\"\n", "    pass\n", "    vowels =\
    \ 'aeiouAEIOU'\n    for i in range(len(word) - 1, 0, -1):\n        if word[i]\
    \ in vowels and word[i - 1] not in vowels:\n            return word[i]\n    return\
    \ ''\n\n", "    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n\
    \    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i\
    \ - 1] in consonants:\n            return word[i]\n    return ''\n\n", "    pass\n\
    \n\n", "    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    vowels\
    \ = 'aeiouAEIOU'\n    queue = collections.deque(word)\n    while queue:\n    \
    \    current = queue.pop()\n        if current in vowels:\n            if queue\
    \ and queue[-1] in consonants:\n                return current\n        elif current\
    \ in consonants:\n            if queue and queue[-1] in vowels:\n            \
    \    queue.pop()\n                return queue.pop()\n    return ''\n", "    vowels\
    \ = 'aeiou'\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in\
    \ vowels and word[i - 1] not in vowels:\n            return word[i]\n    return\
    \ ''\n", "    pass\n\n", "    # Getting the reversed word\n    rword = word[::-1]\n\
    \    # Running loop from 0 to len(rword) - 2\n    for index in range(len(rword)\
    \ - 2):\n        # Getting each letter of the rword\n        letter = rword[index]\n\
    \        # Checking if the letter is a consonant\n        if letter not in 'aeiouAEIOU':\n\
    \            # Getting next letter after the consonant\n            next_letter\
    \ = rword[index + 1]\n            # Checking if the next letter is a vowel\n \
    \           if next_letter in 'aeiouAEIOU':\n                # Checking if the\
    \ letter after the vowel is a consonant\n                if rword[index + 2] not\
    \ in 'aeiouAEIOU':\n                    # Reversing the vowel\n              \
    \      return next_letter[::-1]\n    # Returning empty string if no vowel met\
    \ the above condition\n    return ''\n\n", "    word = word[::-1]\n    for i in\
    \ range(len(word)):\n        if word[i] in 'aeiou':\n            if i == 0:\n\
    \                return ''\n            elif word[i-1] not in 'aeiou':\n     \
    \           return word[i]\n    return ''\n\n", "    s = \"\".join(reversed(word))\n\
    \    v = re.compile(r'[aeiou]')\n    for m in v.finditer(s):\n        if m.start()\
    \ - 1 > 0 and s[m.start() - 1] not in 'aeiou':\n            return m.group()\n\
    \        elif m.start() + 1 < len(s) and s[m.start() + 1] not in 'aeiou':\n  \
    \          return m.group()\n    return ''\n\n", "    # Write your code here\n\
    \    pass\n\n", "    # Check edge cases\n    if len(word) < 3:\n        return\
    \ ''\n    # Get the index of the closest vowel\n    for i in range(len(word) -\
    \ 2, 0, -1):\n        if word[i] in \"aeiouAEIOU\":\n            # Check if this\
    \ vowel is between two consonants\n            if word[i-1] not in \"aeiouAEIOU\"\
    \ and word[i+1] not in \"aeiouAEIOU\":\n                return word[i]\n    return\
    \ ''\n\n", "    # START SOLUTION\n    vowel = ['a', 'e', 'i', 'o', 'u']\n    reverse_word\
    \ = word[::-1]\n    for i in range(len(reverse_word)):\n        if reverse_word[i]\
    \ in vowel:\n            for j in range(i):\n                if reverse_word[j]\
    \ not in vowel:\n                    return reverse_word[i]\n    return ''\n \
    \   # END SOLUTION\n\n", "    last_non_vowel = None\n    for c in reversed(word):\n\
    \        if c not in 'aeiouAEIOU':\n            last_non_vowel = c\n        elif\
    \ last_non_vowel is not None:\n            return c\n    return ''\n\n", "   \
    \ pass\n\n", "    vowels = 'aeiou'\n    vowel_pos = {}\n    for i, letter in enumerate(word):\n\
    \        if letter in vowels:\n            vowel_pos[i] = letter\n    if not vowel_pos:\n\
    \        return ''\n    closest_vowel = min(vowel_pos.keys())\n    for i in range(1,\
    \ len(word)):\n        if word[closest_vowel - i] not in vowels:\n           \
    \ return vowel_pos[closest_vowel]\n        if word[closest_vowel + i] not in vowels:\n\
    \            return vowel_pos[closest_vowel]\n\n", "    pass\n\n", "    # your\
    \ code here\n\n\n", "    pass\n\n\n", "    pass\n\n", "    VOWELS = 'aeiou'\n\
    \    for index, letter in enumerate(word[::-1]):\n        if letter in VOWELS:\n\
    \            if word[::-1][index + 1] not in VOWELS:\n                return letter\n\
    \    return ''\n\n", "    for i in range(len(word) - 1, 0, -1):\n        if word[i]\
    \ in \"aeiouAEIOU\" and word[i - 1] not in \"aeiouAEIOU\":\n            return\
    \ word[i]\n    return \"\"\n\n", "    # TODO: Write your code here\n\n", "   \
    \ pass\n\n", "    word = word[::-1]\n    vowels = \"AEIOUaeiou\"\n    consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    closest_vowel = \"\"\n\
    \    for i in range(len(word)):\n        if word[i] in vowels:\n            closest_vowel\
    \ = word[i]\n            break\n    if closest_vowel == \"\":\n        return\
    \ \"\"\n    if i == len(word) - 1:\n        return \"\"\n    if word[i+1] in consonants:\n\
    \        return closest_vowel\n    return \"\"\n\n", "    # input: word is a string\
    \ containing alphabetical characters\n    # output: the closest vowel or '' if\
    \ no vowel was found\n    # \n    pass\n\n", "    vowels = 'aeiou'\n    for i\
    \ in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i - 1]\
    \ not in vowels:\n            return word[i]\n    return ''\n\n", "    # your\
    \ code goes here\n    return \"\"\n\n", "    pass\n</code>\n", "    raise NotImplementedError()\n\
    \n", "    pass\n\n", "    pass\n\n", "    pass\n\n", "    pass\n \n ", "    vowels\
    \ = 'aeiou'\n    if len(word) <= 2:\n        return ''\n    word = word[::-1]\n\
    \    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i\
    \ - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n\
    \    return ''\n\n\n", "    pass\n\n", "    pass\n\n", "    vowels = set(string.ascii_letters[6:])\n\
    \    consonants = set(string.ascii_letters[:6]) | set(string.ascii_letters[12:])\n\
    \    for letter in reversed(word):\n        if letter in vowels:\n           \
    \ return letter\n        elif letter in consonants:\n            break\n    return\
    \ ''\n\n", "    word = word[::-1]\n    vowels = \"aeiouAEIOU\"\n    cons = False\n\
    \    found = ''\n    for c in word:\n        if c in vowels:\n            if cons\
    \ == True:\n                found = c\n                break\n        else:\n\
    \            cons = True\n    return found\n", "    if not word:\n        return\
    \ ''\n    word = word[::-1]\n    idx = -1\n    for ch in word:\n        if ch\
    \ in vowels:\n            idx = word.index(ch)\n            break\n    if idx\
    \ == -1:\n        return ''\n    else:\n        for ch in word[idx+1:]:\n    \
    \        if ch not in vowels:\n                return word[idx]\n    return ''\n\
    \n", "    vowels = 'aeiou'\n    for i in range(len(word) - 1, -1, -1):\n     \
    \   if word[i] in vowels:\n            if i > 0 and word[i - 1] not in vowels:\n\
    \                return word[i]\n            elif i < len(word) - 1 and word[i\
    \ + 1] not in vowels:\n                return word[i]\n    return ''\n\n", " \
    \   vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n\
    \    closest_vowel = ''\n    vowel_position = -1\n    for i in range(len(word)\
    \ - 1, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants:\n  \
    \          closest_vowel = word[i]\n            vowel_position = i\n         \
    \   break\n    return closest_vowel\n\n", "    vowels = 'aeiou'\n    closest_vowel\
    \ = None\n    if len(word) == 0:\n        return ''\n    if len(word) == 1:\n\
    \        return ''\n    for i in range(len(word) - 1, -1, -1):\n        current_letter\
    \ = word[i]\n        if current_letter not in vowels:\n            try:\n    \
    \            if word[i + 1] in vowels:\n                    closest_vowel = word[i\
    \ + 1]\n                    break\n            except IndexError:\n          \
    \      pass\n    return closest_vowel\n\n", "    vowels = ('a', 'e', 'i', 'o',\
    \ 'u')\n    consonents = ('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z')\n    result = []\n    if word[-1]\
    \ in vowels:\n        return ''\n    if word[0] in vowels:\n        word = word[1:]\n\
    \    for i in range(len(word)):\n        if word[i] in vowels:\n            if\
    \ word[i+1] in consonents:\n                result.append(word[i])\n    if result:\n\
    \        return result[-1]\n    else:\n        return ''\n\n", "    return \"\"\
    \n\n", "    # hint 1: use string.ascii_letters\n    # hint 2: use string.ascii_lowercase\
    \ for vowels\n    # hint 3: you may need an additional character to handle the\
    \ case for 'y'\n    # hint 4: you may use `print(f'{ord(letter):08b}')` to find\
    \ the binary representation of a character\n    # hint 5: to convert a string\
    \ of character into a list of characters, use `list('char')`\n    # hint 6: you\
    \ may use `[a, b] = [b, a]` to swap values of a and b\n    return ''\n\n", " \
    \   vowels = 'aeiou'\n    word = word.lower()\n    for c in reversed(word):\n\
    \        if c in vowels:\n            return c\n        elif c in vowels:\n  \
    \          return \"\"\n    return \"\"\n\n", "    VOWELS = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    n = len(word)\n    for i in range(n - 1, -1, -1):\n        if word[i].lower()\
    \ in VOWELS:\n            break\n    else:\n        return ''\n    for j in range(i\
    \ - 1, -1, -1):\n        if word[j].lower() not in VOWELS:\n            break\n\
    \    else:\n        return ''\n    return word[i]\n", "    vowels = 'aeiouAEIOU'\n\
    \    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i\
    \ - 1] not in vowels:\n            return word[i]\n    return ''\n\n", "    vowels\
    \ = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    if len(word) <= 1:\n        return \"\"\n    if word[-1] in vowels:\n  \
    \      return \"\"\n    if word[-2] in vowels:\n        return \"\"\n    if word[-1]\
    \ in consonants and word[-2] in consonants:\n        for letter in word[::-1]:\n\
    \            if letter in vowels:\n                return letter\n\n", "    #\
    \ Write your code here\n    from collections import deque\n    q = deque(word)\n\
    \    result = []\n    while q:\n        letter = q.pop()\n        if letter in\
    \ 'aeiou':\n            result.append(letter)\n        else:\n            if result:\n\
    \                return result[-1]\n            else:\n                return\
    \ ''\n\n", "    vowels = ['a', 'e', 'i', 'o', 'u']\n    word = word.lower()\n\
    \    for letter in word[::-1]:\n        if letter in vowels:\n            return\
    \ letter\n    return ''\n    \n", "    vowels = \"aeiouAEIOU\"\n    index = -1\n\
    \    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i\
    \ - 1] not in vowels:\n            index = i\n            break\n    return word[index]\
    \ if index != -1 else \"\"\n\n", "    if len(word) == 1:\n        return ''\n\
    \    # We can't return '' for the word 'a', since it's not a valid word\n    for\
    \ i in range(len(word) - 1, 0, -1):\n        cur = word[i]\n        pre = word[i\
    \ - 1]\n        if is_vowel(cur) and not is_vowel(pre):\n            return cur\n\
    \    return ''\n\n", "    if len(word) == 1:\n        return ''\n    vowels =\
    \ 'aeiouAEIOU'\n    found = ''\n    for i in range(len(word) - 1, -1, -1):\n \
    \       if word[i] in vowels:\n            if found != '':\n                return\
    \ found\n            found = word[i]\n        else:\n            if found != '':\n\
    \                return ''\n    return ''\n\n", "    vowels = 'aeiouAEIOU'\n \
    \   if len(word) <= 2:\n        return ''\n    vowels_index = [i for i, letter\
    \ in enumerate(word) if letter in vowels]\n    word_len = len(word)\n    if len(vowels_index)\
    \ == 0:\n        return ''\n    for i in vowels_index:\n        if i < word_len-1\
    \ and i > 0:\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n\
    \                return word[i]\n    return ''\n\n", "    vowels = \"AEIOU\"\n\
    \    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i\
    \ - 1] not in vowels:\n            return word[i]\n    return \"\"\n\n", "   \
    \ vowels = ('a', 'e', 'i', 'o', 'u')\n    vowels_indices = []\n    for letter\
    \ in word:\n        if letter in vowels:\n            vowels_indices.append(word.index(letter))\n\
    \    \n    if len(vowels_indices) == 0:\n        return ''\n    elif len(vowels_indices)\
    \ == 1:\n        return word[vowels_indices[0]]\n    else:\n        last_vowel_index\
    \ = len(word) - 1\n        while last_vowel_index >= 0:\n            if word[last_vowel_index]\
    \ in vowels:\n                last_vowel_index -= 1\n            else:\n     \
    \           break\n        for vowel_index in reversed(vowels_indices):\n    \
    \        if vowel_index < last_vowel_index:\n                return word[vowel_index]\n\
    \    return ''\n\n", "    if len(word) <= 2:\n        return ''\n    word = word[::-1]\n\
    \    if word[1] in 'AEIOUaeiou':\n        return word[1]\n    for i in range(2,\
    \ len(word)):\n        if word[i] in 'AEIOUaeiou' and word[i-1] not in 'AEIOUaeiou':\n\
    \            return word[i]\n    return ''\n\n", "    vowels = 'aeiou'\n    is_vowel\
    \ = lambda c: c in vowels\n    closest_vowel = ''\n    last_index = -1\n    for\
    \ i, c in enumerate(word[::-1]):\n        if is_vowel(c):\n            last_index\
    \ = i\n            closest_vowel = c\n        elif last_index != -1:\n       \
    \     if (last_index - i) > 1:\n                break\n            last_index\
    \ = -1\n    return closest_vowel\n\n", "    for i in range(len(word) - 1, 0, -1):\n\
    \        if word[i] in 'aeiou' and word[i-1] not in 'aeiou':\n            return\
    \ word[i]\n    return ''\n\n", "    vowels = 'aeiouAEIOU'\n    vowel_found = False\n\
    \    for i in range(len(word) - 1, 0, -1):\n        if vowel_found and word[i]\
    \ not in vowels:\n            return word[i + 1]\n        elif not vowel_found\
    \ and word[i] in vowels:\n            vowel_found = True\n    return ''\n", " \
    \   def is_vowel(c: str) -> bool:\n        return c in 'aeiouAEIOU'\n\n    for\
    \ i in range(len(word) - 1, 0, -1):\n        if is_vowel(word[i]):\n         \
    \   return word[i]\n        if not is_vowel(word[i]) and not is_vowel(word[i -\
    \ 1]):\n            return ''\n\n    return ''\n\n", "    if len(word) <= 2:\n\
    \        return ''\n    for i in range(1, len(word) - 1):\n        if word[i]\
    \ in 'aeiouAEIOU' and word[i - 1] not in 'aeiouAEIOU' and word[i + 1] not in 'aeiouAEIOU':\n\
    \            return word[i]\n    return ''\n\n", "    index = 0\n    vowels =\
    \ ['a', 'e', 'i', 'o', 'u']\n    vowel_index = -1\n    while index < len(word):\n\
    \        if word[index] in vowels:\n            vowel_index = index\n        index\
    \ += 1\n    if vowel_index == -1:\n        return ''\n    return word[vowel_index]\n",
  "    # check if string is empty\n    if not word:\n        return ''\n    # create\
    \ a list of vowels\n    vowel = 'aeiouAEIOU'\n    # use slice to match the word\
    \ in reverse order\n    # combine list comprehension and enumerate\n    # loop\
    \ through each vowel\n    # a tuple of (index, vowel_found)\n    output = [vowel_found\
    \ for (i, vowel_found) in enumerate(word[::-1]) if vowel_found in vowel]\n   \
    \ # loop through each vowel\n    for i, vowel_found in enumerate(word[::-1]):\n\
    \        # if vowel is found\n        if vowel_found in vowel:\n            #\
    \ if the next vowel is a consonant, return the vowel\n            if word[::-1][i+1]\
    \ not in vowel:\n                return vowel_found\n    # if no vowel is found\n\
    \    return ''\n\n", "    # Add your code here:\n    if not word:\n        return\
    \ ''\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n\
    \    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n \
    \           if i == len(word) - 1 or word[i+1] in consonants:\n              \
    \  if i == 0 or word[i-1] in consonants:\n                    return word[i]\n\
    \    return ''\n\n", "    pass\n\n", "    closest_vowel = ''\n    last_consonant\
    \ = 0\n    for i, letter in enumerate(word):\n        if letter in 'aeiou':\n\
    \            last_consonant = i\n        elif closest_vowel:\n            closest_vowel\
    \ = ''\n    if closest_vowel:\n        return closest_vowel\n    else:\n     \
    \   return ''\n    \n    ", "    vowels = set('aeiouAEIOU')\n    length = len(word)\n\
    \n    previous_char = ''\n    for i in range(length - 1, -1, -1):\n        if\
    \ word[i] in vowels:\n            if previous_char in vowels:\n              \
    \  previous_char = word[i]\n                continue\n            return word[i]\n\
    \        previous_char = word[i]\n    return ''\n\n", "    vowels = ['a', 'e',\
    \ 'i', 'o', 'u']\n    result = ''\n    for i in range(len(word) - 1, 0, -1):\n\
    \        if word[i] in vowels and word[i - 1] not in vowels:\n            result\
    \ = word[i]\n            break\n    return result\n\n", "    pass\n\n", "    #\
    \ Create a list of all vowels from a-z and A-Z\n    vowels = [chr(x) for x in\
    \ range(ord('a'), ord('z') + 1) if chr(x) in 'aeiou']\n    vowels += [chr(x) for\
    \ x in range(ord('A'), ord('Z') + 1) if chr(x) in 'AEIOU']\n    # Create a list\
    \ of all consonants from a-z and A-Z\n    consonants = [chr(x) for x in range(ord('a'),\
    \ ord('z') + 1) if chr(x) not in 'aeiou']\n    consonants += [chr(x) for x in\
    \ range(ord('A'), ord('Z') + 1) if chr(x) not in 'AEIOU']\n    # Create a data\
    \ structure that contains the list of vowels and the list of consonants\n    char_dict\
    \ = {'vowels': vowels, 'consonants': consonants}\n    # Create a new empty list\
    \ that contains the characters that are the closest vowels\n    # from right side\n\
    \    final_list = []\n    # Iterate through the word\n    for i in range(len(word)\
    \ - 1, -1, -1):\n        # If the character is a vowel\n        if word[i] in\
    \ char_dict['vowels']:\n            # Check if the following character is a consonant\n\
    \            if word[i - 1] in char_dict['consonants']:\n                # If\
    \ so, append it to the final list\n                final_list.append(word[i])\n\
    \    # Return the first character of the final list\n    if final_list:\n    \
    \    return final_list[0]\n    else:\n        return ''", "    vowels = 'aeiou'\n\
    \    if len(word) <= 2:\n        return ''\n    if word[0] in vowels or word[-1]\
    \ in vowels:\n        return ''\n    for i in range(len(word) - 2, 0, -1):\n \
    \       if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not\
    \ in vowels:\n            return word[i]\n    return ''\n\n", "    pass\n\n\n",
  "    # Your code here\n    # If no string return, it is probably your code's error.\n\
    \    vowels = \"AEIOUaeiou\"\n    word = word[::-1]\n    ans = \"\"\n    for ch\
    \ in word:\n        if ch in vowels:\n            ans = ch\n            break\n\
    \    return ans\nget_closest_vowel('ABCD')\n", "    ...\n\n", "    # get the last\
    \ index of vowels in the given word\n    reversed_vowels = [i for i, c in enumerate(word[::-1])\
    \ if c in 'aeiouAEIOU']\n    if not reversed_vowels:\n        return ''\n    #\
    \ if there are two vowels standing next to each other\n    if reversed_vowels[0]\
    \ == 1:\n        return word[len(word) - 1]\n    # if the first vowel is followed\
    \ by a consonant\n    if reversed_vowels[0] == 2:\n        return word[len(word)\
    \ - 2]\n    # if there are more than one vowels\n    # and the first vowel is\
    \ followed by consonants\n    return word[len(word) - reversed_vowels[1] - 1]\n",
  "    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for i in range(len(word)\
    \ - 1, -1, -1):\n        if word[i] in vowels:\n            if i == len(word)\
    \ - 1:\n                return ''\n            else:\n                if word[i\
    \ + 1] not in vowels:\n                    result = word[i]\n                \
    \    break\n    return result\n\n", "    vowels = 'aeiouAEIOU'\n    for i in range(len(word)\
    \ - 1, -1, -1):\n        curr = word[i]\n        if curr in vowels:\n        \
    \    if i != len(word) - 1 and word[i + 1] not in vowels:\n                return\
    \ curr\n            elif i != 0 and word[i - 1] not in vowels:\n             \
    \   return curr\n    return ''\n\n", "    l = list(word)\n    l.reverse()\n  \
    \  vowels = ['a', 'e', 'i', 'o', 'u']\n    c = 0\n    for i in l:\n        if\
    \ i in vowels:\n            c += 1\n            if c == 2:\n                return\
    \ i\n        else:\n            c = 0\n    return ''\n    \n    \n    ", "   \
    \ vowels = 'aeiouAEIOU'\n    reverse_word = word[::-1]\n    found_vowel = False\n\
    \    index = 0\n    while not found_vowel and index < len(reverse_word) - 1:\n\
    \        if reverse_word[index] in vowels and reverse_word[index + 1] not in vowels:\n\
    \            found_vowel = True\n        index += 1\n    if found_vowel:\n   \
    \     return reverse_word[index]\n    else:\n        return ''\n\n", "    pass\n",
  "    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    word = word.lower()\n\
    \    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n \
    \           if word[i - 1] in consonants:\n                return word[i]\n  \
    \      elif word[i] in consonants:\n            if word[i - 1] in vowels:\n  \
    \              return word[i - 1]\n    return ''\n\n", "    VOWELS = \"aeiouAEIOU\"\
    \n    for i in range(len(word) - 1, 0, -1):\n        if word[i - 1] not in VOWELS\
    \ and word[i] in VOWELS:\n            return word[i]\n    return \"\"\n\n", " \
    \   n = len(word)\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(n\
    \ - 1, -1, -1):\n        if word[i] in vowels:\n            if i > 0 and word[i\
    \ - 1] not in vowels:\n                return word[i]\n            elif i < n\
    \ - 1 and word[i + 1] not in vowels:\n                return word[i]\n    return\
    \ ''\n\n", "    ...\n\n", "    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n\
    \    vowels = 'aeiouAEIOU'\n    for letter in reversed(word):\n        if letter\
    \ in consonants:\n            for letter2 in reversed(word):\n               \
    \ if letter2 in vowels:\n                    return letter2\n        else:\n \
    \           continue\n    return ''\n\n", "    closest_vowel = ''\n    vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n    for index, letter in enumerate(word):\n   \
    \     if letter in vowels:\n            closest_vowel = letter\n            if\
    \ index > 0 and index < len(word) - 1:\n                if word[index - 1] not\
    \ in vowels and word[index + 1] not in vowels:\n                    return closest_vowel\n\
    \    return closest_vowel\n\n", "    pass\n\n", "    vowels = 'aeiouAEIOU'\n \
    \   left = -1\n    right = -1\n    for i in range(len(word) - 1, -1, -1):\n  \
    \      if word[i] in vowels:\n            right = i\n        elif right != -1:\n\
    \            left = i\n            break\n    if left == -1 or right == -1:\n\
    \        return ''\n    return word[right]\n", "    vowels = 'aeiouAEIOU'\n  \
    \  for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n   \
    \         if i < len(word) - 1 and word[i + 1] not in vowels:\n              \
    \  return word[i]\n            elif i > 0 and word[i - 1] not in vowels:\n   \
    \             return word[i]\n    return ''\n\n", "    pass\n\n", "    pass\n\n",
  "    if is_vowel(word[-1]):\n        return ''\n    vowels = []\n    for index,\
    \ letter in enumerate(word):\n        if is_vowel(letter):\n            vowels.append(index)\n\
    \    vowels = [index for index in vowels if index > 0 and not is_vowel(word[index-1])]\n\
    \    if not vowels:\n        return ''\n    return word[vowels[-1]]\n\n", "  \
    \  pass\n\n", "    return ''\n\n", "    VOWELS = ('a', 'e', 'i', 'o', 'u')\n \
    \   rvowels = (\n        (i, vowel)\n        for i, vowel in enumerate(word[::-1])\n\
    \        if vowel in VOWELS\n    )\n    return next(\n        (vowel for i, vowel\
    \ in rvowels if word[-i-2] not in VOWELS),\n        ''\n    )\n    \n", "    index\
    \ = len(word) - 1\n    while index > 0:\n        if word[index] in VOWELS:\n \
    \           if word[index - 1] not in VOWELS:\n                return word[index]\n\
    \        index -= 1\n    return ''\n\n", "    vowels = ('a', 'e', 'i', 'o', 'u')\n\
    \    #vowels_positions = [i for i, v in enumerate(word) if v in vowels]\n    #consonants_positions\
    \ = [i for i, v in enumerate(word) if v not in vowels]\n    #consonants_positions_filter\
    \ = [(x, y) for x, y in enumerate(consonants_positions) \n    #              \
    \                 if x+1 < len(consonants_positions) and \n    #             \
    \                     consonants_positions[x+1] - consonants_positions[x] > 1]\n\
    \    #closest_vowel = ''\n    #for v_pos in vowels_positions:\n    #    for f_pos\
    \ in consonants_positions_filter:\n    #        if v_pos < f_pos[1] and v_pos\
    \ > f_pos[0]:\n    #            closest_vowel = word[v_pos]\n    #           \
    \ break\n    #    if closest_vowel:\n    #        break\n    #return closest_vowel\n\
    \    closest_vowel = ''\n    last_consonant_pos = 0\n    for i, c in enumerate(word):\n\
    \        if c in vowels:\n            if i - last_consonant_pos > 1:\n       \
    \         closest_vowel = c\n                break\n        else:\n          \
    \  last_consonant_pos = i\n    return closest_vowel\n\n", "    vowels = set('aeiouAEIOU')\n\
    \    word = word[::-1]\n    found = False\n    for char in word:\n        if found:\n\
    \            if char in vowels:\n                return char\n        elif char\
    \ not in vowels:\n            found = True\n    return ''\n", "    if not word\
    \ or len(word) < 3:\n        return ''\n    vowels = 'aeiouAEIOU'\n    i = len(word)\
    \ - 1\n    while i >= 0:\n        if word[i] in vowels:\n            if i == len(word)\
    \ - 1 or i == 0:\n                i -= 1\n                continue\n         \
    \   if word[i-1] not in vowels and word[i+1] not in vowels:\n                return\
    \ word[i]\n        i -= 1\n    return ''\n\n", "    for i in range(len(word) -\
    \ 1, 0, -1):\n        if word[i] in 'aeiou' and word[i - 1] not in 'aeiou':\n\
    \            return word[i]\n    return ''\n\n", "    if not isinstance(word,\
    \ str):\n        raise ValueError('Invalid input - only string accepted')\n  \
    \  if not word:\n        return ''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n \
    \   vowels_up = ['A', 'E', 'I', 'O', 'U']\n    index = 0\n    while index < len(word)\
    \ - 1:\n        if word[index] in vowels or word[index] in vowels_up:\n      \
    \      continue\n        if word[index + 1] in vowels or word[index + 1] in vowels_up:\n\
    \            return word[index + 1]\n        index += 1\n    return ''\n\n", " \
    \   vowels = 'aeiou'\n    word = word.lower()\n    if len(word) < 3:\n       \
    \ return ''\n    for i in range(len(word) - 2, -1, -1):\n        if word[i + 1]\
    \ in vowels and word[i + 2] not in vowels:\n            return word[i + 1]\n \
    \   return ''\n", "    return ''\n\n", "    return \"\"\n\n", "    vowels = \"\
    aeiouAEIOU\"\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in\
    \ vowels and word[i - 1] not in vowels:\n            return word[i]\n    return\
    \ \"\"\n\n", "    if not word:\n        return ''\n    vowels = 'aeiouAEIOU'\n\
    \    word = word[::-1]\n    index = 0\n    for x in word:\n        if x in vowels:\n\
    \            if index == 0:\n                return ''\n            else:\n  \
    \              return word[index-1]\n        index += 1\n    return ''\n", " \
    \   closest_vowel = ''\n    current_vowel_distance = 0\n    temp_distance = 0\n\
    \    for i in range(len(word) - 1, 0, -1):\n        if word[i] in \"AEIOUaeiou\"\
    :\n            if word[i - 1] not in \"AEIOUaeiou\":\n                temp_distance\
    \ = len(word) - i\n                if temp_distance > current_vowel_distance:\n\
    \                    current_vowel_distance = temp_distance\n                \
    \    closest_vowel = word[i]\n    return closest_vowel\n\n", "    # Student code\
    \ goes here\n\n", "    #TODO: remove pass and write your code here. \n    pass\n",
  "    vowels = \"aeiouAEIOU\"\n    right_side = word[::-1]\n    vowel_index = -1\n\
    \    for i in range(1, len(right_side)):\n        if right_side[i] in vowels and\
    \ right_side[i-1] not in vowels:\n            vowel_index = i\n            break\n\
    \    if vowel_index == -1:\n        return \"\"\n    else:\n        return right_side[vowel_index]\n\
    \n", "    vowels = ['a', 'e', 'i', 'o', 'u']\n    if not word:\n        return\
    \ ''\n    i = len(word) - 1\n    while i >= 0:\n        if word[i] in vowels:\n\
    \            if i < len(word) - 1 and word[i + 1] not in vowels:\n           \
    \     return word[i]\n            if i > 0 and word[i - 1] not in vowels:\n  \
    \              return word[i]\n        i -= 1\n    return ''\n", "    vowels =\
    \ 'aeiouAEIOU'\n    last_consonant = ''\n    for i in range(len(word) - 1, -1,\
    \ -1):\n        if word[i] not in vowels:\n            last_consonant = word[i]\n\
    \            break\n    else:\n        return ''\n    closest_vowel = ''\n   \
    \ for j in range(i, -1, -1):\n        if word[j] in vowels:\n            closest_vowel\
    \ = word[j]\n            break\n    else:\n        return ''\n    for k in range(j\
    \ - 1, -1, -1):\n        if word[k] not in vowels:\n            return closest_vowel\n\
    \    return ''\n", "    for i in range(len(word) - 1, 0, -1):\n        cur = word[i]\n\
    \        if cur in 'aeiouAEIOU':\n            if word[i-1] not in 'aeiouAEIOU':\n\
    \                return cur\n        else:\n            if word[i-1] in 'aeiouAEIOU':\n\
    \                return ''\n    return ''\n", "    # BEGIN [write your code here]\n\
    \    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    word = word.lower()\n    word_vowels\
    \ = [el for el in word if el in vowels]\n    closest_vowel = ''\n    if len(word_vowels)\
    \ == 0:\n        return closest_vowel\n    i = 0\n    while i < len(word_vowels)\
    \ - 1:\n        if word.find(word_vowels[i]) < word.find(word_vowels[i + 1]):\n\
    \            closest_vowel = word_vowels[i]\n            i += 1\n        else:\n\
    \            i += 1\n    if closest_vowel == '':\n        closest_vowel = word_vowels[-1]\n\
    \    return closest_vowel\n    # END\n\n", "    vowels = 'aeiouAEIOU'\n    if\
    \ len(word) < 3:\n        return ''\n    word = word[::-1]\n    for i in range(len(word)\
    \ - 2):\n        if (word[i] in vowels) and (word[i+1] not in vowels) and (word[i+2]\
    \ not in vowels):\n            return word[i]\n    return ''\n\n", "    # your\
    \ code here\n    return ''\n\n", "    def is_consonant(ch):\n        return ch\
    \ not in 'aeiouAEIOU'\n\n    for i in range(len(word) - 1, 0, -1):\n        if\
    \ is_consonant(word[i]) and is_consonant(word[i - 1]):\n            for j in range(i,\
    \ len(word)):\n                if word[j] in 'aeiouAEIOU':\n                 \
    \   return word[j]\n            return ''\n    return ''\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
