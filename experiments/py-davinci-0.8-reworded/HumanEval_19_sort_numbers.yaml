name: HumanEval_19_sort_numbers
language: py
prompt: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
  \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
  \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
  \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
  \ one five')\n    'one three five'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
  \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n   \
  \ assert candidate('five zero four seven nine eight') == 'zero four five seven eight\
  \ nine'\n    assert candidate('six five four three two one zero') == 'zero one two\
  \ three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
completions: ["    numbers = [numbers.split()]\n    d = {'zero': 0, 'one': 1, 'two':\
    \ 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine':\
    \ 9}\n    numbers = sorted(numbers, key=lambda numbers: d[numbers])\n    print('\
    \ '.join(numbers))\n\nsort_numbers('three one five')", "    sorted_str = \" \"\
    .join(sorted(numbers.split(\" \"), key=word_to_number))\n    return sorted_str\n\
    \n", "    numbers = numbers.split()\n    numbers = sorted(numbers, key=DIGITS.get)\n\
    \    return ' '.join(numbers)", "    numbers = numbers.split()\n    for i in range(len(numbers)):\n\
    \        for j in range(i, len(numbers)):\n            if letters_to_numbers[numbers[i]]\
    \ > letters_to_numbers[numbers[j]]:\n                numbers[i], numbers[j] =\
    \ numbers[j], numbers[i]\n    return ' '.join(numbers)\n\n", "    digit_to_num\
    \ = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three':\
    \ 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven':\
    \ 7,\n        'eight': 8,\n        'nine': 9\n    }\n    numbers = list(map(lambda\
    \ x: digit_to_num[x], numbers.split()))\n    numbers.sort()\n    return ' '.join(map(lambda\
    \ x: str(x), numbers))\n\n", "    # we can use the digit_map table to translate\
    \ the input string from letters to integers\n    # numbers will be a list of numbers\
    \ in their numeric form\n    numbers = [digit_map[char] for char in numbers.split('\
    \ ')]\n    # sort the numbers\n    numbers.sort()\n    # convert the numbers back\
    \ to the word-numbers\n    num_strings = [word_map[num] for num in numbers]\n\
    \    # join the num_strings together with a space between them\n    return ' '.join(num_strings)\n\
    \n\n", "    numbers = numbers.split()\n    numbers.sort(key=number_to_digit)\n\
    \    return ' '.join(numbers)\n\n", "    words = numbers.split()\n    res = ''\n\
    \    mapper = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,\
    \ 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    for word in sorted(words,\
    \ key=lambda x: mapper[x]):\n        res += ' ' + word\n    return res.strip()\n\
    \n", "    numbers = numbers.split()\n    numbers.sort(key=lambda num: int(DIGITS[num]))\n\
    \    return ' '.join(numbers)\n\n", "    # your code here\n    return ' '.join(sorted(numbers.split(),\
    \ key=lambda word: word_to_number(word)))\n", "    numbers = [convert_numeral_to_number(number)\
    \ for number in numbers.split()]\n    return ' '.join(convert_number_to_numeral(number)\
    \ for number in sorted(numbers))\n", "    return ' '.join(sorted(numbers.split(),\
    \ key=lambda x: numbers_dict[x]))\n\n", "    pass\n", "    words = numbers.split()\n\
    \    nums = list(map(to_number, words))\n    nums.sort()\n    nums = map(str,\
    \ nums)\n    return ' '.join(nums)\n\n", "    d = {'zero':0, 'one':1, 'two':2,\
    \ 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9}\n  \
    \  l = numbers.split()\n    l.sort(key=lambda x: d[x])\n    return ' '.join(l)\n\
    \n", "    numbers = numbers.split()\n    numbers.sort(key=lambda s: int(s))\n\
    \    return \" \".join(numbers)\n", "    pass\n\n", "    return \" \".join(sorted(numbers.split(),\
    \ key=lambda s: _number_map[s]))\n\n", "    word_to_num = {'zero':0, 'one':1,\
    \ 'two':2, 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9}\n\
    \    num_to_word = {0:'zero', 1:'one', 2:'two', 3:'three', 4:'four', 5:'five',\
    \ 6:'six', 7:'seven', 8:'eight', 9:'nine'}\n    num_list = []\n    output = ''\n\
    \    for word in numbers.split():\n        num_list.append(word_to_num[word])\n\
    \    for num in sorted(num_list):\n        output += num_to_word[num] + ' '\n\
    \    return output.strip()\n\n", "    # Split the string into a list of word tokens\n\
    \    word_list = numbers.split()\n    # Map each word to its corrsponding number\n\
    \    number_list = [word_to_number(word) for word in word_list]\n    # Sort the\
    \ list of numbers in ascending order\n    number_list.sort()\n    # Return the\
    \ list of words in the original order\n    return \" \".join([number_to_word(number)\
    \ for number in number_list])\n\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
