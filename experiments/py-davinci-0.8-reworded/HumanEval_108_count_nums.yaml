name: HumanEval_108_count_nums
language: py
prompt: "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    \"\
  \"\"\n    Write a function count_nums which takes an array of integers and returns\n\
  \    the number of elements which has a sum of digits > 0.\n    If a number is negative,\
  \ then its first signed digit will be negative:\n    e.g. -123 has signed digits\
  \ -1, 2, and 3.\n    >>> count_nums([])\n    0\n    >>> count_nums([-1, 11, -11])\n\
  \    1\n    >>> count_nums([1, 1, 2])\n    3\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([]) == 0\n    assert candidate([-1,\
  \ -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1,\
  \ 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n\
  \    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([0,\
  \ 1]) == 1\n    assert candidate([1]) == 1\n\ndef test_check():\n    check(count_nums)\n\
  \ntest_check()\n"
completions: ["    c = 0\n    for i in arr:\n        if sum([int(j) for j in str(abs(i))])\
    \ > 0:\n            c += 1\n    return c", "    c = 0\n    for i in arr:\n   \
    \     if i < 0:\n            i = -i\n        ds = 0\n        while i:\n      \
    \      ds += i % 10\n            i //= 10\n        if ds > 0:\n            c +=\
    \ 1\n    return c\n", "    count = 0\n    for elem in arr:\n        digits = [int(i)\
    \ for i in str(abs(elem))]\n        if sum(digits) > 0:\n            count +=\
    \ 1\n    return count\n", "    pass\n    count = 0\n    for i in arr:\n      \
    \  tot = 0\n        if i < 0:\n            i = i * -1\n        while i > 0:\n\
    \            tot += i % 10\n            i = i // 10\n        if tot > 0:\n   \
    \         count += 1\n    return count\n", "    if not arr:\n        return 0\n\
    \    return count_nums(arr[1:]) + (1 if sum([abs(int(i)) for i in str(arr[0])])\
    \ > 0 else 0)\n", "    return len([i for i in arr if sum([int(j) for j in str(abs(i))])\
    \ > 0])\n", '    return len([x for x in arr if sum([int(y) for y in str(abs(x))])
    > 0])', "    # YOUR CODE HERE\n    count = 0\n    for num in arr:\n        if\
    \ sum(map(int, str(abs(num)))) > 0:\n            count += 1\n    return count\n\
    \    raise NotImplementedError()\n", "    non_zero_sum_nums = []\n    for num\
    \ in arr:\n        digits = [int(d) for d in str(abs(num))]\n        if sum(digits)\
    \ > 0:\n            non_zero_sum_nums.append(num)\n    return len(non_zero_sum_nums)",
  "    return len([el for el in arr if sum(map(int, str(abs(el)))) > 0])\n", "   \
    \ # YOUR CODE HERE\n    count = 0\n    for num in arr:\n        num = abs(num)\n\
    \        sum = 0\n        while num:\n            sum += num % 10\n          \
    \  num //= 10\n        if sum > 0:\n            count += 1\n    return count\n",
  '    return len([e for e in arr if sum([int(d) for d in str(abs(e))]) > 0])', " \
    \   return sum(1 for x in arr if sum(map(abs, list(map(int, str(x))))) > 0)\n",
  "    count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n\
    \        sum_of_digits = 0\n        while num > 0:\n            sum_of_digits\
    \ += num % 10\n            num //= 10\n        if sum_of_digits > 0:\n       \
    \     count += 1\n    return count\n", "    count = 0\n    for n in arr:\n   \
    \     total = 0\n        for num in str(abs(n)):\n            total += int(num)\n\
    \        if total > 0:\n            count += 1\n    return count\n", "    count\
    \ = 0\n    for num in arr:\n        sum_ = 0\n        if num < 0:\n          \
    \  if abs(num) > 10:\n                sum_ += abs(num) % 10\n                num\
    \ //= 10\n            else:\n                sum_ += abs(num)\n        while num\
    \ > 0:\n            sum_ += num % 10\n            num //= 10\n        if sum_\
    \ > 0:\n            count += 1\n    return count\n", "    cnt = 0\n    for num\
    \ in arr:\n        if num < 0:\n            cnt += 1\n            continue\n \
    \       s = 0\n        while num > 0:\n            s += num % 10\n           \
    \ num //= 10\n        if s > 0:\n            cnt += 1\n    return cnt\n", "  \
    \  return 0\n", "    return 0\n\n", "    count = 0\n    for n in arr:\n      \
    \  digits = abs(n) % 10\n        while digits > 0:\n            digits //= 10\n\
    \            count += 1\n    return count\n", "    return sum(sum(map(int, str(i)))\
    \ for i in arr)\n", "    count = 0\n    for num in arr:\n        if sum(map(int,\
    \ str(abs(num)))) > 0:\n            count += 1\n    return count\n", '    return
    len([num for num in arr if sum([int(x) for x in str(abs(num))]) > 0])', "    def\
    \ digit_sum(n: int) -> int:\n        # TODO: Replace this with your solution\n\
    \        pass\n    return sum(1 for n in arr if digit_sum(n) > 0)\n", '    return
    sum(True for n in arr if sum(map(abs, str(n))) > 0)', "    return 0\n", "    def\
    \ sum_digits(n: int) -> int:\n        if n < 0:\n            n = -n\n        total\
    \ = 0\n        while n > 0:\n            total += n % 10\n            n //= 10\n\
    \        return total\n    return sum(sum_digits(n) > 0 for n in arr)", "    return\
    \ sum(1 for n in arr if sum(map(abs, digits(n))) > 0)\n\n", "    counter = 0\n\
    \    for num in arr:\n        if num > 0:\n            digits = list(map(int,\
    \ str(num)))\n        else:\n            digits = list(map(int, str(num)[1:]))\n\
    \        if sum(digits) > 0:\n            counter += 1\n    return counter\n",
  "    count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n\
    \        while num > 0:\n            count += num % 10\n            num //= 10\n\
    \    return count\n", "    nums = 0\n    for num in arr:\n        if sum(map(abs,\
    \ digits(num))) > 0:\n            nums += 1\n    return nums\n", '    return len([i
    for i in arr if sum(list(map(int, str(abs(i))))) > 0])', "    raise NotImplementedError\n",
  "    l = len(arr)\n    if l == 0:\n        return 0\n    c = 0\n    for i in range(l):\n\
    \        s = 0\n        n = abs(arr[i])\n        while n > 0:\n            s +=\
    \ n % 10\n            n //= 10\n        if s > 0:\n            c += 1\n    return\
    \ c\n", "    counter = 0\n    for num in arr:\n        if sum(map(int, str(abs(num))))\
    \ > 0:\n            counter += 1\n    return counter", "    total = 0\n    for\
    \ elem in arr:\n        if elem > 0:\n            nums = list(map(int, str(elem)))\n\
    \            total += sum(nums)\n        else:\n            elem = -elem\n   \
    \         nums = list(map(int, str(elem)))\n            total += sum(nums)\n \
    \   return total\n\n", "    # n = len(arr)\n    # for i in range(n):\n    #  \
    \   curr = arr[i]\n    #     if curr < 0:\n    #         curr = -curr\n    # \
    \    arr[i] = curr\n    # \n    # \n    # return sum(arr)\n    return sum(abs(x)\
    \ for x in arr)\n", '    return 0', "    count = 0\n    for n in arr:\n      \
    \  n = abs(n)\n        while n > 0:\n            count += n % 10\n           \
    \ n //= 10\n    return count\n", "    return 0\n\n", "    count = 0\n    for num\
    \ in arr:\n        if num < 0:\n            num = abs(num)\n        while num\
    \ != 0:\n            num, digit = divmod(num, 10)\n            count += digit\n\
    \    return count\n", "    return sum(1 for n in arr if sum_digits(n) > 0)\n",
  "    raise NotImplementedError\n\n", '    return 0', "    nums = 0\n    for i in\
    \ arr:\n        if i == 0:\n            continue\n        while i != 0:\n    \
    \        nums += i % 10\n            i //= 10\n    return nums\n", "    count\
    \ = 0\n    for num in arr:\n        if sum(map(int, list(str(abs(num))))) > 0:\n\
    \            count += 1\n    return count\n", "    sum_digits = 0\n    for num\
    \ in arr:\n        sum_digits += sum(map(abs, [int(i) for i in str(num)]))\n \
    \   return sum_digits\n\n", "    count = 0\n    for i in arr:\n        if sum(map(int,\
    \ list(str(abs(i))))) > 0:\n            count += 1\n    return count", "    count\
    \ = 0\n    for num in arr:\n        if sum(list(map(int, str(abs(num))))) > 0:\n\
    \            count += 1\n    return count", "    # implement\n    return 0\n",
  "    return sum(sum(map(int, str(num))) > 0 for num in arr)\n", '    return len([number
    for number in arr if 0 < sum(map(int, str(abs(number))))])', "    if not arr:\n\
    \        return 0\n    count = 0\n    for num in arr:\n        # check if the\
    \ sum of digits is positive\n        if sum(int(digit) for digit in str(abs(num)))\
    \ > 0:\n            count += 1\n    return count\n", "    c = 0\n    for i in\
    \ arr:\n        d = 0\n        while (i > 0):\n            d += i % 10\n     \
    \       i = i // 10\n        if d > 0:\n            c += 1\n    return c\n", " \
    \   def sum_digits(x: int) -> int:\n        \"\"\" Returns the sum of the digits\
    \ of x\n        >>> sum_digits(123)\n        6\n        >>> sum_digits(-123)\n\
    \        6\n        \"\"\"\n        total = 0\n        if x < 0:\n           \
    \ x = -x\n        while x > 0:\n            total += x % 10\n            x //=\
    \ 10\n        return total\n    return sum(sum_digits(x) > 0 for x in arr)\n",
  "    return len([1 for x in arr if sum(map(int, str(abs(x))))])\n", "    pass\n",
  "    res = 0\n    for num in arr:\n        if num < 0:\n            signed_digits\
    \ = str(num)[1:]\n        else:\n            signed_digits = str(num)\n      \
    \  if sum(map(int, signed_digits)) > 0:\n            res += 1\n    return res",
  "    res = 0\n    for i in arr:\n        if sum(list(map(int, str(abs(i))))) > 0:\n\
    \            res += 1\n    return res\n", "    # pass\n\n    def digits_sum(n):\n\
    \        sum = 0\n        if n < 0:\n            n = -n\n        while n > 0:\n\
    \            sum += n % 10\n            n //= 10\n        return sum\n\n    count\
    \ = 0\n    for x in arr:\n        if digits_sum(x) > 0:\n            count +=\
    \ 1\n    return count\n\n", "    count = 0\n    for num in arr:\n        num_count\
    \ = 0\n        if num < 0:\n            num_count -= 1\n            num = -num\n\
    \        while num > 0:\n            num_count += num % 10\n            num //=\
    \ 10\n        if num_count > 0:\n            count += 1\n    return count\n",
  "    sum_of_digits = 0\n    cnt = 0\n    for x in arr:\n        sum_of_digits =\
    \ abs(x)\n        while sum_of_digits:\n            sum_of_digits, mod = divmod(sum_of_digits,\
    \ 10)\n            cnt += mod\n    return cnt\n", "    ###\n    ### YOUR CODE\
    \ HERE\n    ###\n    # n = 0\n    # for i in arr:\n    #     a = []\n    #   \
    \  b = []\n    #     n += 1\n    #     if i < 0:\n    #         i = abs(i)\n \
    \   #         for j in str(i):\n    #             a.append(int(j))\n    #    \
    \     a[0] = a[0] * -1\n    #         for j in a:\n    #             b.append(j)\n\
    \    #     else:\n    #         for j in str(i):\n    #             b.append(int(j))\n\
    \    #     if sum(b) > 0:\n    #         continue\n    #     else:\n    #    \
    \     n -= 1\n    # return n\n    n = 0\n    for i in arr:\n        if i < 0:\n\
    \            i = abs(i)\n            s = -1 * int(str(i)[0])\n            for\
    \ j in str(i)[1:]:\n                s += int(j)\n        else:\n            s\
    \ = 0\n            for j in str(i):\n                s += int(j)\n        if s\
    \ > 0:\n            n += 1\n    return n\n", "    raise NotImplementedError\n",
  "    nums = []\n    for i in arr:\n        nums.append(abs(i))\n    sum = 0\n  \
    \  for i in nums:\n        sum += i%10\n        if i >= 10:\n            sum +=\
    \ int(i/10)\n    print(sum)\n    return sum\n\nprint(count_nums([-1, 11, -11]))",
  '    return sum(sum(map(int, str(abs(n)))) > 0 for n in arr)', "    # The number\
    \ of elements with positive sum of digits\n    positive_sum_count = 0\n    for\
    \ num in arr:\n        abs_num = abs(num)\n        digit_sum = 0\n        while\
    \ abs_num > 0:\n            digit_sum += abs_num % 10\n            abs_num //=\
    \ 10\n        if digit_sum > 0:\n            positive_sum_count += 1\n    return\
    \ positive_sum_count\n", "    return sum(1 for x in arr if sum(map(abs, digits(x)))\
    \ > 0)\n", "    return sum(1 for i in arr if sum(map(abs, list(map(int, str(i)))))\
    \ > 0)\n", "    def sum_of_digits(n: int) -> int:\n        if n < 0:\n       \
    \     n = -n\n        if n == 0:\n            return 0\n        return n % 10\
    \ + sum_of_digits(n // 10)\n    return sum(1 for n in arr if sum_of_digits(n)\
    \ > 0)", "    # your code here\n", '    return 0', "    counter = 0\n    for num\
    \ in arr:\n        if num == 0:\n            continue\n        total = 0\n   \
    \     for digit in str(abs(num)):\n            total += int(digit)\n        if\
    \ total != 0:\n            counter += 1\n    return counter\n", "    count = 0\n\
    \    for elem in arr:\n        # Solution 1:\n        if elem > 0:\n         \
    \   sum_of_digits = sum(int(i) for i in str(elem))\n        else:\n          \
    \  sum_of_digits = sum(int(i) for i in str(elem)[1:]) + 1\n        if sum_of_digits\
    \ > 0:\n            count += 1\n        # Solution 2:\n        if sum(int(i) for\
    \ i in str(abs(elem))) > 0:\n            count += 1\n    return count\n", "  \
    \  return sum(sum(abs(d) for d in digits(num)) > 0 for num in arr)\n", "    def\
    \ sum_digits(num: int) -> int:\n        if num == 0:\n            return 0\n \
    \       elif num < 0:\n            return sum_digits(-num)\n        else:\n  \
    \          return (num % 10) + sum_digits(num // 10)\n\n    return sum(sum_digits(num)\
    \ > 0 for num in arr)", "    if not arr:\n        return 0\n    return sum(list(map(lambda\
    \ x: x > 0, arr)))\n", "    nums = 0\n    for i in arr:\n        if i != 0:\n\
    \            s = str(i)\n            if i < 0:\n                s = s[1:]\n  \
    \          if sum(int(i) for i in s) > 0:\n                nums += 1\n    return\
    \ nums\n", "    count = 0\n    for el in arr:\n        if sum(map(int, str(abs(el))))\
    \ > 0:\n            count += 1\n    return count\n", "    count = 0\n    for i\
    \ in arr:\n        num = abs(i)\n        i_sum = 0\n        while num > 0:\n \
    \           i_sum += num % 10\n            num //= 10\n        if i_sum > 0:\n\
    \            count += 1\n    return count\n", "    count = 0\n    for num in arr:\n\
    \        if sum(map(int, str(abs(num)))) > 0:\n            count += 1\n    return\
    \ count", "    def count_digits(n: int) -> int:\n        \"\"\"\n        Returns\
    \ the number of digits in n.\n        \"\"\"\n        return len(str(abs(n)))\n\
    \n    def sum_digits(n: int) -> int:\n        \"\"\"\n        Returns the sum\
    \ of the digits in n.\n        \"\"\"\n        return sum(map(int, str(abs(n))))\n\
    \n    # The number of digits in a number = the sum of the digits in that number\n\
    \    # if the number only has a single digit (0-9).\n    # Thus, we can count\
    \ the number of single-digit numbers by counting the\n    # number of times the\
    \ number of digits equals the sum of the digits.\n    return sum(count_digits(n)\
    \ == sum_digits(n) for n in arr)", "    return sum(1 for num in arr if sum(map(abs,\
    \ digits(num))) > 0)\n\n", "    count = 0\n    for n in arr:\n        if n ==\
    \ 0:\n            continue\n        if sum(map(int, str(abs(n)))) > 0:\n     \
    \       count += 1\n    return count\n", "    count = 0\n    for num in arr:\n\
    \        if num >= 0:\n            digits = [int(x) for x in str(num)]\n     \
    \   else:\n            digits = [int(x) for x in str(num)[1:]]\n        if sum(digits)\
    \ > 0:\n            count += 1\n    return count\n", '    pass', "    ### TODO:\
    \ REPLACE THIS LINE WITH YOUR CODE ###\n    count = 0\n    for num in arr:\n \
    \       if sum(map(int, str(abs(num)))) > 0:\n            count += 1\n    return\
    \ count\n", "    # method 1: use the sign of the first digit\n    # return len([x\
    \ for x in arr if x // abs(x) // 10 ** (len(str(abs(x)))) > 0])\n    # method\
    \ 2: use the count of negative digits\n    return len([x for x in arr if sum(map(lambda\
    \ d: d <= 0, digits(x))) % 2 == 0])\n", '    pass', "    total = 0\n    for el\
    \ in arr:\n        if el < 0:\n            val = str(el)[1:]\n        else:\n\
    \            val = str(el)\n        total += sum(map(int, val))\n    return total\n",
  "    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n\
    \            num = -num\n        while num > 0:\n            sum_digits += num\
    \ % 10\n            num //= 10\n        if sum_digits > 0:\n            count\
    \ += 1\n    return count", '    return sum(sum(map(int, str(num))) > 0 for num
    in arr)', "    if len(arr) == 0:\n        return 0\n    return sum(1 for x in\
    \ arr if sum(int(digit) for digit in str(abs(x))) > 0)\n", "    return sum(1 for\
    \ a in arr if sum(map(int, str(abs(a)))) > 0)\n", '    return len([i for i in
    arr if sum(map(int, str(abs(i))))])', '    return sum(1 for n in arr if sum(map(abs,
    str(n))) > 0)', "    return sum(sum(map(int, str(abs(x)))) > 0 for x in arr)\n\
    \    # return sum(1 for x in arr if sum(map(int, str(abs(x)))) > 0)", "    # Your\
    \ code here\n    sum = 0\n    count = 0\n    for i in arr:\n        sum = 0\n\
    \        for j in str(i):\n            sum += int(j)\n        if sum > 0:\n  \
    \          count += 1\n    return count\n    pass\n\n", "    count = 0\n    for\
    \ i in arr:\n        if i < 0:\n            i = i * -1\n        if sum(list(map(int,\
    \ str(i)))) > 0:\n            count += 1\n    return count\n\nprint(count_nums([-1,\
    \ 11, -11]))", "    count = 0\n    for item in arr:\n        digits = list(map(int,\
    \ str(abs(item))))\n        if sum(digits) > 0:\n            count += 1\n    return\
    \ count", "    return sum(map(lambda n: n != 0, map(lambda n: sum(map(int, str(abs(n)))),\
    \ arr)))\n", '    return sum(1 for num in arr if sum(int(digit) for digit in str(abs(num)))
    > 0)', "    return sum(1 for num in arr if sum(map(int, str(abs(num)))) > 0)\n",
  "    num_nums = 0\n    for i in arr:\n        if i < 0:\n            sum_nums =\
    \ 0\n            for j in str(i):\n                if j == '-':\n            \
    \        sum_nums += 0\n                else:\n                    sum_nums +=\
    \ int(j)\n        else:\n            sum_nums = 0\n            for j in str(i):\n\
    \                sum_nums += int(j)\n        if sum_nums > 0:\n            num_nums\
    \ += 1\n    return num_nums", '    return len([i for i in arr if sum(int(j) for
    j in str(abs(i))) > 0])', "    count = 0\n    for i in arr:\n        if i < 0:\n\
    \            i = i * -1\n        temp = i\n        sum = 0\n        while temp\
    \ > 0:\n            sum += temp % 10\n            temp = temp // 10\n        if\
    \ sum > 0:\n            count += 1\n    return count\n", '    return len([num
    for num in arr if sum(map(int, str(abs(num)))) > 0])', "    if not arr:\n    \
    \    return 0\n    return len([x for x in arr if x != 0 and sum(map(int, str(abs(x))))\
    \ > 0])", "    return sum(1 for n in arr if sum(map(abs, digits(n))) > 0)\n",
  "    # Create a list of numbers with a sum of digits > 0\n    nums = [num for num\
    \ in arr if sum(map(int, list(str(abs(num))))) > 0]\n    return len(nums)", " \
    \   # TODO: Your code here!\n    return 0\n", "    pass\n\n", "    count = 0\n\
    \    for num in arr:\n        if sum(list(map(abs, get_digits(num)))) > 0:\n \
    \           count += 1\n    return count\n", "    # TODO\n    def sum_digits(n):\n\
    \        return sum(int(x) for x in str(n))\n\n    return sum(1 for x in arr if\
    \ sum_digits(x) > 0)\n", "    count = 0\n    for num in arr:\n        sum_digit\
    \ = 0\n        if num < 0:\n            num = abs(num)\n        while num > 0:\n\
    \            sum_digit += num % 10\n            num = num // 10\n        if sum_digit\
    \ > 0:\n            count += 1\n    return count\n", "    count = 0\n    for num\
    \ in arr:\n        if sum(map(int, str(abs(num)))) > 0:\n            count +=\
    \ 1\n    return count\n", "    return 0\n", "    # FIXME\n    pass\n", "    def\
    \ sum_digits(x: int) -> int:\n        total = 0\n        while x != 0:\n     \
    \       x, digit = divmod(x, 10)\n            total += digit\n        return total\n\
    \n    return sum(1 for x in arr if sum_digits(x) > 0)", '    return len([i for
    i in arr if sum([int(x) for x in str(abs(i))]) > 0])', "    count = 0\n    for\
    \ num in arr:\n        if num < 0:\n            num = -num\n        digit_sum\
    \ = 0\n        while num > 0:\n            digit_sum += num % 10\n           \
    \ num //= 10\n        if digit_sum > 0:\n            count += 1\n    return count",
  "    def find_sum(num: int) -> int:\n        sum = 0\n        while num != 0:\n\
    \            sum += num % 10\n            num //= 10\n        return sum\n\n \
    \   count = 0\n    for num in arr:\n        if find_sum(num) > 0:\n          \
    \  count += 1\n    return count", "    arr = [abs(elem) for elem in arr]\n   \
    \ return sum([1 for elem in arr if sum([int(i) for i in str(elem)]) > 0])\n",
  "    ...\n```\n\nWe first use the line\n\n```python\n>>> from typing import List\n\
    ```\n\nto import the Python built-in List type.  This is a type definition that\
    \ we will use to show that the function takes an array of integers.  The `...`\
    \ means that the function has not been implemented.\n\nThe first line with three\
    \ `>` is a doctest.  It shows what to input and what is expected to be output.\
    \  We will use the `pytest` library to run the doctests.  If you run the `pytest`\
    \ command on the `functions.py` file, you should see\n\n```bash\n=============================\
    \ test session starts ==============================\nplatform darwin -- Python\
    \ 3.7.0, pytest-3.7.1, py-1.5.4, pluggy-0.7.1\nrootdir: /Users/student/cs123/starter-code,\
    \ inifile:\ncollected 3 items\n\nfunctions.py FFF                            \
    \                               [100%]\n\n===================================\
    \ FAILURES ===================================\n_________________________________\
    \ count_nums __________________________________\n\n    def count_nums(arr: List[int])\
    \ -> int:\n        \"\"\"\n        Write a function count_nums which takes an\
    \ array of integers and returns\n        the number of elements which has a sum\
    \ of digits > 0.\n        If a number is negative, then its first signed digit\
    \ will be negative:\n        e.g. -123 has signed digits -1, 2, and 3.\n     \
    \   >>> count_nums([])\n        0\n        >>> count_nums([-1, 11, -11])\n   \
    \     1\n        >>> count_nums([1, 1, 2])\n        3\n        \"\"\"\n>     \
    \  ...\nE       NotImplementedError\n\nfunctions.py:37: NotImplementedError\n\
    =========================== 1 failed, 2 passed in 0.02 seconds ===========================\n\
    ```\n\nNow we see that the doctests are running, and we can begin to implement\
    \ the function.\n", "    return len([i for i in arr if sum(map(int, list(str(abs(i)))))\
    \ > 0])\n", "    # TODO: write this function\n    # return 0\n    count = 0\n\
    \    for i in arr:\n        s_i = str(i)\n        digits = s_i.split('-')\n  \
    \      if len(digits) > 1:\n            digits[1] = '-' + digits[1]\n        digits\
    \ = list(map(int, digits))\n        if sum(digits) > 0:\n            count +=\
    \ 1\n    return count\n", "    count = 0\n    for num in arr:\n        if sum(abs(int(i))\
    \ for i in str(num)) > 0:\n            count += 1\n    return count", "    # your\
    \ code here\n    return 0\n", "    res = 0\n    for num in arr:\n        if sum(map(abs,\
    \ to_digits(num))) > 0:\n            res += 1\n    return res\n", "    return\
    \ 0\n", "    count = 0\n    for n in arr:\n        n = abs(n)\n        while n\
    \ > 0:\n            count += n % 10\n            n //= 10\n    return count\n",
  "    pass\n\n", "    pass\n", "    res = 0\n    for i in arr:\n        if i > 0:\n\
    \            res += 1\n        elif i < 0:\n            res += 1 if sum([int(j)\
    \ for j in str(i)[1:]]) else 0\n    return res", "    # have 2 separate counters\
    \ for positive and negative numbers\n    # have a count for the negative signed\
    \ digits\n    # for every number, check whether its sum of digits is > 0\n   \
    \ # divide the number by 10 and add the last digit, until the number is 0\n  \
    \  # then check if the count is > 0\n    # if it is, add 1 to the positive count,\
    \ otherwise add 1 to the negative count\n    # for negative numbers, add the number\
    \ to the negative signed digits\n    # then add the count of negative signed digits\
    \ to the negative count\n    pos_count = 0\n    neg_count = 0\n    neg_sig_digits\
    \ = 0\n    for num in arr:\n        pos_count = pos_count + 1 if sum_digits(num)\
    \ > 0 else pos_count\n        neg_count = neg_count + 1 if sum_digits(num) <=\
    \ 0 else neg_count\n        neg_sig_digits = neg_sig_digits + 1 if num < 0 else\
    \ neg_sig_digits\n    neg_count = neg_count + neg_sig_digits\n    return pos_count\
    \ if pos_count > neg_count else neg_count\n", "    count = 0\n    for num in arr:\n\
    \        if sum(map(int, str(abs(num)))) > 0:\n            count += 1\n    return\
    \ count\n", "    count = 0\n    for n in arr:\n        if n < 0:\n           \
    \ n = -n\n        total = 0\n        while n > 0:\n            total += n % 10\n\
    \            n //= 10\n        if total > 0:\n            count += 1\n    return\
    \ count\n", "    pass\n", "    return len([x for x in arr if sum([int(y) for y\
    \ in str(abs(x))]) > 0])\n", "    count = 0\n    for i in arr:\n        if i <\
    \ 0:\n            i = i * -1\n        if sum(int(i) for i in str(i)) > 0:\n  \
    \          count += 1\n    return count\n", "    count = 0\n    for i in arr:\n\
    \        if i >= 0:\n            sum = 0\n            for j in str(i):\n     \
    \           sum += int(j)\n            if sum > 0:\n                count += 1\n\
    \        else:\n            sum = int(str(i)[0])\n            for j in str(i)[1:]:\n\
    \                sum += int(j)\n            if sum > 0:\n                count\
    \ += 1\n    return count\n", "    # return len([n for n in arr if n > 0])\n  \
    \  pass\n\n", "    count = 0\n    for i in arr:\n        if i < 0:\n         \
    \   sum = 0\n            abs_i = abs(i)\n            while abs_i > 0:\n      \
    \          sum += abs_i % 10\n                abs_i //= 10\n            if sum\
    \ > 0:\n                count += 1\n        else:\n            sum = 0\n     \
    \       while i > 0:\n                sum += i % 10\n                i //= 10\n\
    \            if sum > 0:\n                count += 1\n    return count\n", " \
    \   cnt = 0\n    for num in arr:\n        if num != 0:\n            cnt += sum(map(abs,\
    \ map(int, str(num)))) > 0\n    return cnt\n", '    return len([n for n in arr
    if sum(map(int, list(str(abs(n))))) > 0])', "    count = 0\n    for number in\
    \ arr:\n        sum_of_digits = 0\n        if number < 0:\n            number\
    \ = number * -1\n        while number != 0:\n            sum_of_digits += number\
    \ % 10\n            number = number // 10\n        if sum_of_digits > 0:\n   \
    \         count += 1\n    return count\n", "    pass\n", "    sum_arr = 0\n  \
    \  for i in arr:\n        sum_arr += abs(i)\n    return len(str(sum_arr))\n\n\
    arr = [-1, 11, -11]\nprint(count_nums(arr))", "    raise NotImplementedError()\n",
  "    count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n\
    \        sum_of_digits = 0\n        while num != 0:\n            sum_of_digits\
    \ += num % 10\n            num //= 10\n        if sum_of_digits > 0:\n       \
    \     count += 1\n    return count", "    \"*** YOUR CODE HERE ***\"\n    i =\
    \ 0\n    for num in arr:\n        num_arr = [int(i) for i in str(num)]\n     \
    \   if sum(num_arr) != 0:\n            i += 1\n    return i\n", "    length =\
    \ len(arr)\n    if length == 0:\n        return 0\n    else:\n        count =\
    \ 0\n        for n in arr:\n            if n < 0:\n                n = -n\n  \
    \          while n != 0:\n                count += n % 10\n                n =\
    \ n // 10\n        return count\n\n", "    if not arr:\n        return 0\n   \
    \ return sum(sum(map(int, str(abs(a)))) > 0 for a in arr)\n", "    return sum(1\
    \ for x in arr if sum_digits(x) > 0)\n", "    if not arr:\n        return 0\n\
    \    if arr[0] > 0:\n        return 1 + count_nums(arr[1:])\n    else:\n     \
    \   return count_nums(arr[1:])\n", "    return sum(1 for n in arr if sum(abs(int(c))\
    \ for c in str(n)) > 0)\n", "    count = 0\n    for num in arr:\n        if num\
    \ < 0:\n            num = -num\n        sum_digits = 0\n        while num > 0:\n\
    \            sum_digits += num % 10\n            num //= 10\n        if sum_digits\
    \ > 0:\n            count += 1\n    return count", "    def sum_digits(num: int)\
    \ -> int:\n        if num == 0:\n            return 0\n        else:\n       \
    \     return (num % 10) + sum_digits(num // 10)\n    \n    return sum(sum_digits(n)\
    \ > 0 for n in arr)\n", "    pass\n", "    count = 0\n    for i in arr:\n    \
    \    if i == 0:\n            continue\n        if i < 0:\n            i = str(i)[1:]\n\
    \        num = sum(map(int, str(i)))\n        if num > 0:\n            count +=\
    \ 1\n    return count\n", "    count = 0\n    for num in arr:\n        temp =\
    \ abs(num)\n        temp_sum = 0\n        while temp > 0:\n            temp_sum\
    \ += temp % 10\n            temp //= 10\n        if temp_sum > 0:\n          \
    \  count += 1\n    return count\n", "    # return sum(sum(abs(int(d)) for d in\
    \ str(num)) > 0 for num in arr)\n    return sum(1 for num in arr if sum(abs(int(d))\
    \ for d in str(num)) > 0)\n\n", '    pass', '    raise NotImplementedError()',
  "    pass\n", "    return len([n for n in arr if sum(n // 10**i % 10 for i in range(5))])\n",
  "    count = 0\n    for i in arr:\n        if sum(map(int, list(str(abs(i))))) >\
    \ 0:\n            count += 1\n    return count\n", '    return 0', "    count\
    \ = 0\n    for num in arr:\n        if num < 0:\n            s_num = -num\n  \
    \      else:\n            s_num = num\n        digit_sum = 0\n        while s_num\
    \ != 0:\n            digit_sum += s_num % 10\n            s_num //= 10\n     \
    \   if digit_sum > 0:\n            count += 1\n    return count\n", '    return
    len([x for x in arr if sum(map(int, str(abs(x)))) > 0])', "    pass\n\n", "  \
    \  # Your code goes here\n    count = 0\n    for i in arr:\n        sum = 0\n\
    \        if i < 0:\n            sum = sum + (-i % 10)\n            i = i // 10\n\
    \        while i != 0:\n            sum = sum + (i % 10)\n            i = i //\
    \ 10\n        if sum > 0:\n            count = count + 1\n    return count\n\n",
  "    pass\n", "    return sum(1 for num in arr if signed_digits_sum(num) > 0)\n",
  "    return len([num for num in arr if sum(map(abs, [int(s) for s in str(num)]))\
    \ > 0])\n", "    if not arr:\n        return 0\n    nums = 0\n    for i in arr:\n\
    \        if i == 0:\n            nums += 1\n        elif i < 0:\n            nums\
    \ += 1 if sum(map(int, str(i)[1:])) > 0 else 0\n        else:\n            nums\
    \ += 1 if sum(map(int, str(i))) > 0 else 0\n    return nums\n", "    return 0\n",
  "    return 1\n", "    # Your code here\n\n", "    count = 0\n    for num in arr:\n\
    \        if not num:\n            continue\n        if num < 0:\n            num\
    \ = -num\n        while num:\n            count += num % 10\n            num //=\
    \ 10\n    return count\n", "    return 0\n", "    # note: edge case for single\
    \ digits, e.g. 1, 2, 3, 4, etc.\n    # or, if we're okay with that case not passing,\
    \ then only do the\n    # mod 10 if the absolute value of the number is greater\
    \ than 10\n    return len([n for n in arr if (abs(n) % 10) + (abs(n) // 10) >\
    \ 0])", "    #TODO: implement count_nums\n    return 0\n", "    pass\n", "   \
    \ return sum(1 for n in arr if sum(int(i) for i in str(abs(n))) > 0)\n\nprint(count_nums([1,\
    \ -3, -9, 11, -123]))", "    count = 0\n    for i in arr:\n        if i >= 0:\n\
    \            while i:\n                count += i % 10\n                i //=\
    \ 10\n        else:\n            while i:\n                count += -1 * (i %\
    \ 10)\n                i //= 10\n    return count\n\n", '    pass', "    return\
    \ sum(x > 0 for x in arr)\n", "    count = 0\n    for x in arr:\n        if sum(map(int,\
    \ str(abs(x)))) > 0:\n            count += 1\n    return count\n", "    count\
    \ = 0\n    for num in arr:\n        if sum(map(int, str(abs(num)))) > 0:\n   \
    \         count += 1\n    return count\n", "    count = 0\n    for n in arr:\n\
    \        n = abs(n)\n        while n > 0:\n            count += n % 10\n     \
    \       n //= 10\n    return count\n\n", "    count = 0\n    for num in arr:\n\
    \        digits = [int(d) for d in str(abs(num))]\n        if sum(digits) > 0:\n\
    \            count += 1\n    return count\n", "    return sum(1 for x in arr if\
    \ sum(map(int, str(abs(x)))) > 0)\n", "    return\n", "    pass\n", "    count\
    \ = 0\n    for n in arr:\n        if n < 0:\n            n = -n\n        sum_digits\
    \ = 0\n        while n > 0:\n            sum_digits += n % 10\n            n //=\
    \ 10\n        if sum_digits > 0:\n            count += 1\n    return count\n",
  "    return len([num for num in arr if sum(int(i) for i in str(abs(num))) > 0])\n",
  "    n = 0\n    for num in arr:\n        if sum(int(x) for x in str(abs(num))) >\
    \ 0:\n            n += 1\n    return n\n", "    if len(arr) == 0:\n        return\
    \ 0\n    else:\n        # sum_digits = lambda a: sum(map(int, str(abs(a))))\n\
    \        # return sum(map(lambda a: a > 0, list(map(sum_digits, arr))))\n    \
    \    s = 0\n        for i in arr:\n            if sum(map(int, str(abs(i)))) >\
    \ 0:\n                s += 1\n        return s\n\n", "    return 0\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
