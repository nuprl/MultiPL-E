name: HumanEval_108_count_nums
language: py
prompt: "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    \"\
  \"\"\n    Write a function count_nums which takes an array of integers and returns\n\
  \    the number of elements which has a sum of digits > 0.\n    If a number is negative,\
  \ then its first signed digit will be negative:\n    e.g. -123 has signed digits\
  \ -1, 2, and 3.\n    >>> count_nums([])\n    0\n    >>> count_nums([-1, 11, -11])\n\
  \    1\n    >>> count_nums([1, 1, 2])\n    3\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([]) == 0\n    assert candidate([-1,\
  \ -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1,\
  \ 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n\
  \    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([0,\
  \ 1]) == 1\n    assert candidate([1]) == 1\n\ndef test_check():\n    check(count_nums)\n\
  \ntest_check()\n"
completions: ["    c = 0\n    for i in arr:\n        if sum([int(j) for j in str(abs(i))])\
    \ > 0:\n            c += 1\n    return c", "    c = 0\n    for i in arr:\n   \
    \     if i < 0:\n            i = -i\n        ds = 0\n        while i:\n      \
    \      ds += i % 10\n            i //= 10\n        if ds > 0:\n            c +=\
    \ 1\n    return c\n", "    count = 0\n    for elem in arr:\n        digits = [int(i)\
    \ for i in str(abs(elem))]\n        if sum(digits) > 0:\n            count +=\
    \ 1\n    return count\n", "    pass\n    count = 0\n    for i in arr:\n      \
    \  tot = 0\n        if i < 0:\n            i = i * -1\n        while i > 0:\n\
    \            tot += i % 10\n            i = i // 10\n        if tot > 0:\n   \
    \         count += 1\n    return count\n", "    if not arr:\n        return 0\n\
    \    return count_nums(arr[1:]) + (1 if sum([abs(int(i)) for i in str(arr[0])])\
    \ > 0 else 0)\n", "    return len([i for i in arr if sum([int(j) for j in str(abs(i))])\
    \ > 0])\n", '    return len([x for x in arr if sum([int(y) for y in str(abs(x))])
    > 0])', "    # YOUR CODE HERE\n    count = 0\n    for num in arr:\n        if\
    \ sum(map(int, str(abs(num)))) > 0:\n            count += 1\n    return count\n\
    \    raise NotImplementedError()\n", "    non_zero_sum_nums = []\n    for num\
    \ in arr:\n        digits = [int(d) for d in str(abs(num))]\n        if sum(digits)\
    \ > 0:\n            non_zero_sum_nums.append(num)\n    return len(non_zero_sum_nums)",
  "    return len([el for el in arr if sum(map(int, str(abs(el)))) > 0])\n", "   \
    \ # YOUR CODE HERE\n    count = 0\n    for num in arr:\n        num = abs(num)\n\
    \        sum = 0\n        while num:\n            sum += num % 10\n          \
    \  num //= 10\n        if sum > 0:\n            count += 1\n    return count\n",
  '    return len([e for e in arr if sum([int(d) for d in str(abs(e))]) > 0])', " \
    \   return sum(1 for x in arr if sum(map(abs, list(map(int, str(x))))) > 0)\n",
  "    count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n\
    \        sum_of_digits = 0\n        while num > 0:\n            sum_of_digits\
    \ += num % 10\n            num //= 10\n        if sum_of_digits > 0:\n       \
    \     count += 1\n    return count\n", "    count = 0\n    for n in arr:\n   \
    \     total = 0\n        for num in str(abs(n)):\n            total += int(num)\n\
    \        if total > 0:\n            count += 1\n    return count\n", "    count\
    \ = 0\n    for num in arr:\n        sum_ = 0\n        if num < 0:\n          \
    \  if abs(num) > 10:\n                sum_ += abs(num) % 10\n                num\
    \ //= 10\n            else:\n                sum_ += abs(num)\n        while num\
    \ > 0:\n            sum_ += num % 10\n            num //= 10\n        if sum_\
    \ > 0:\n            count += 1\n    return count\n", "    cnt = 0\n    for num\
    \ in arr:\n        if num < 0:\n            cnt += 1\n            continue\n \
    \       s = 0\n        while num > 0:\n            s += num % 10\n           \
    \ num //= 10\n        if s > 0:\n            cnt += 1\n    return cnt\n", "  \
    \  return 0\n", "    return 0\n\n", "    count = 0\n    for n in arr:\n      \
    \  digits = abs(n) % 10\n        while digits > 0:\n            digits //= 10\n\
    \            count += 1\n    return count\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
