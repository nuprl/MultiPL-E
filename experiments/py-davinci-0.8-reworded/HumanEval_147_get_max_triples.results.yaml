language: py
name: HumanEval_147_get_max_triples
results:
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(sum([[0, 1][(i + j +\
    \ k) % 3 == 0] for k in range(i+1, n)]) for i in range(n) for j in range(i+1,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkuy7m8sn.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpkuy7m8sn.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpkuy7m8sn.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return (n-2) * (n-1) * n // 6\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz2q5ran3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpz2q5ran3.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpz2q5ran3.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    triples = 0\n    for i in range(1,\
    \ n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n\
    \                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n\
    \                    triples += 1\n    return triples\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt5hew2pz.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpt5hew2pz.py\", line 31,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpt5hew2pz.py\", line\
    \ 26, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # We want all three numbers to\
    \ be divisible by 3\n    # 1. we will only count even values\n    # 2. 1 odd value\
    \ that is a multiple of 3\n    # 3. any two even values, whose sum is a multiple\
    \ of 3\n    even_numbers = [i for i in range(n) if i % 2 == 0]\n    odd_numbers\
    \ = [i for i in range(n) if i % 2 != 0]\n    odd_three_multiples = [i for i in\
    \ odd_numbers if i % 3 == 0]\n    even_three_multiples = [i for i in even_numbers\
    \ if i % 3 == 0]\n    # print(even_numbers)\n    # print(odd_numbers)\n    # print(odd_three_multiples)\n\
    \    # print(even_three_multiples)\n    # print(f\"{len(odd_three_multiples)}\
    \ -> odd 3 multiples\")\n    # print(f\"{len(even_three_multiples)} -> even 3\
    \ multiples\")\n    triples = 0\n    # _1_3_3\n    triples += (\n        len(odd_three_multiples)\
    \ * len(even_three_multiples) * len(even_three_multiples)\n    )\n    # print(f\"\
    {triples} -> _1_3_3\")\n    # _1_2_2\n    triples += (\n        len(odd_three_multiples)\
    \ * len(even_numbers) * (len(even_numbers) - 1)\n    )\n    # print(f\"{triples}\
    \ -> _1_2_2\")\n    # _2_2_2\n    triples += (\n        len(even_numbers) * (len(even_numbers)\
    \ - 1) * (len(even_numbers) - 2)\n    )\n    # print(f\"{triples} -> _2_2_2\"\
    )\n    return triples\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphsed7aea.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmphsed7aea.py\", line 55,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmphsed7aea.py\", line\
    \ 49, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    count = 0\n    # brute force approach\n\
    \    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for\
    \ k in range(j+1, n):\n                if (i+1)*(i+1) - (i+1) + 1 + (j+1)*(j+1)\
    \ - (j+1) + 1 + (k+1)*(k+1) - (k+1) + 1 % 3 == 0:\n                    count +=\
    \ 1\n    return count\ndef check(candidate):\n    assert candidate(5) == 1\n \
    \   assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuh2bv1d6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpuh2bv1d6.py\", line 30,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpuh2bv1d6.py\", line\
    \ 24, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # return n if n > 5 else n - 3\
    \ if n == 5 else n - 2 if n == 4 else n - 1 if n == 3 else n\n    return n-1 if\
    \ n<4 else n-2 if n==4 else n-3 if n==5 else n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpalgp1101.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpalgp1101.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpalgp1101.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(n)\
    \ for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkqd71qx3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpkqd71qx3.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpkqd71qx3.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    i = 0\n    j = 1\n    k = 2\n    count = 0\n    while (i < n -\
    \ 2):\n        while (j < n - 1):\n            while (k < n):\n              \
    \  if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n       \
    \         k += 1\n            j += 1\n            k = j + 1\n        i += 1\n\
    \        j = i + 1\n        k = j + 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # 1 \u2264 n \u2264 2000\n    if\
    \ n > 2000:\n        return 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\
    \    # (1 \u2264 a[i] \u2264 2000)\n    a = [a[i] for i in range(len(a)) if a[i]\
    \ <= 2000]\n    # (1 \u2264 i < j < k \u2264 n)\n    triples = [(a[i], a[j], a[k])\n\
    \               for i in range(len(a)) for j in range(i + 1, len(a)) for k in\
    \ range(j + 1, len(a))]\n    # (a[i] + a[j] + a[k]) is a multiple of 3\n    triples\
    \ = [triple for triple in triples if sum(triple) % 3 == 0]\n    return len(triples)\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvjg51y7g.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpvjg51y7g.py\", line 36,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpvjg51y7g.py\", line\
    \ 33, in check\n    assert candidate(100) == 53361\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    c = 0\n    for i in range(n - 2):\n        for j in range(i + 1,\
    \ n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0:\n                    c += 1\n    return c\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n        return 0\n \
    \   arr = [i * i - i + 1 for i in range(1, n + 1)]\n    counter = 0\n    for i\
    \ in range(0, n - 2):\n        for j in range(i + 1, n - 1):\n            for\
    \ k in range(j + 1, n):\n                if (arr[i] + arr[j] + arr[k]) % 3 ==\
    \ 0:\n                    counter += 1\n    return counter\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return n // 3\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq6r1toj4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpq6r1toj4.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpq6r1toj4.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    arr = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    idx = {}\n    for i in range(n):\n        for j in range(i + 1,\
    \ n):\n            for k in range(j + 1, n):\n                if (arr[i] + arr[j]\
    \ + arr[k]) % 3 == 0:\n                    idx[(i, j, k)] = True\n    return len(idx)\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    # count = 0\n    # for i in range(n - 2):\n    #     for j in range(i\
    \ + 1, n - 1):\n    #         for k in range(j + 1, n):\n    #             if\
    \ (a[i] + a[j] + a[k]) % 3 == 0:\n    #                 count += 1\n    # return\
    \ count\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n   \
    \ for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for\
    \ k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n \
    \                   count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8_pf7f37.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    c = 0\n    for i in range(n - 2):\n        for j in range(i + 1,\
    \ n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0:\n                    c += 1\n    return c\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    triples_count = 0\n    for i in\
    \ range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j\
    \ + 1, n):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1)\
    \ % 3 == 0:\n                    triples_count += 1\n    return triples_count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp48ado5zv.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp48ado5zv.py\", line 31,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp48ado5zv.py\", line\
    \ 25, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n        return 0\n \
    \   return n // 3 * (n - 2)\n\n\n@pytest.mark.parametrize('test_input, expected',\
    \ [\n    (1, 0),\n    (2, 0),\n    (3, 1),\n    (10, 6),\n    (23, 17),\n    (10**9,\
    \ 333333333),\n])\ndef check(candidate):\n    assert candidate(5) == 1\n    assert\
    \ candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjmeo691r.py\", line\
    \ 20, in <module>\n    @pytest.mark.parametrize('test_input, expected', [\nNameError:\
    \ name 'pytest' is not defined. Did you mean: 'bytes'?\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n-1) for j in range(i+1, n) for k in range(j+1, n) if (i*i-i+1 + j*j-j+1 + k*k-k+1)\
    \ % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert\
    \ candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv_m_no4m.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpv_m_no4m.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpv_m_no4m.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    count = 0\n    for i in range(n):\n\
    \        for j in range(i+1, n):\n            for k in range(j+1, n):\n      \
    \          if ((i*i-i+1) + (j*j-j+1) + (k*k-k+1)) % 3 == 0:\n                \
    \    count += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvru469g3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpvru469g3.py\", line 31,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpvru469g3.py\", line\
    \ 25, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    triples = 0\n    nums = [i * i\
    \ - i + 1 for i in range(1, n + 1)]\n    for i in range(n - 2):\n        for j\
    \ in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n           \
    \     # print(nums[i], nums[j], nums[k])\n                if (nums[i] + nums[j]\
    \ + nums[k]) % 3 == 0:\n                    triples += 1\n    return triples\n\
    \ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # 1 <= n <= 10^6\n    # 1 <= a[i]\
    \ <= 10^18\n    # Time: O(N)\n    # Space: O(1)\n    N = n\n    if n <= 2:\n \
    \       return 0\n    cnt_sum_mod_3 = [0, 0, 0]\n    i = 1\n    while i <= N:\n\
    \        # 1 <= a[i] <= 10^18\n        m = i * i - i + 1\n        if m <= 0:\n\
    \            return 0\n        cnt_sum_mod_3[m % 3] += 1\n        i += 1\n   \
    \ return (cnt_sum_mod_3[0] * (cnt_sum_mod_3[0] - 1) * (cnt_sum_mod_3[0] - 2) //\
    \ 6\n            + cnt_sum_mod_3[1] * cnt_sum_mod_3[2] * (cnt_sum_mod_3[1] - 1)\
    \ // 2\n            + cnt_sum_mod_3[2] * cnt_sum_mod_3[1] * (cnt_sum_mod_3[2]\
    \ - 1) // 2)\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert\
    \ candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxfv5ocdz.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpxfv5ocdz.py\", line 43,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpxfv5ocdz.py\", line\
    \ 37, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # 1 - Generate list of ints starting\
    \ at 1\n    a = list(range(1, n + 1))\n    triples = []\n    # 2 - Create list\
    \ of squared values and get the cumulative sum of squared values\n    squared_vals\
    \ = [i * i for i in a]\n    cum_sum = sum(squared_vals)\n    # 3 - Subtract each\
    \ index from the cumulative sum\n    cum_sum_vals = [cum_sum - (i * i) for i in\
    \ a]\n    # 4 - Get the count of multiples of 3 from cumulative sum values\n \
    \   multiples_of_3 = len([i for i in cum_sum_vals if i % 3 == 0])\n    return\
    \ multiples_of_3\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n  \
    \  assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1x2p0x09.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp1x2p0x09.py\", line 35,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp1x2p0x09.py\", line\
    \ 29, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return 0\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4121xk7m.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4121xk7m.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp4121xk7m.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    if not n:\n        return 0\n \
    \   triple_count = 0\n    triple_sum = 0\n    triple_list = list()\n    # initialize\
    \ the triple\n    triple_list.append(1)\n    triple_list.append(3)\n    triple_list.append(7)\n\
    \    triple_count += 1\n    triple_sum += 1 + 3 + 7\n    if triple_sum % 3 ==\
    \ 0:\n        triple_count += 1\n    for i in range(4, n+1):\n        item = i\
    \ * i - i + 1\n        triple_list.append(item)\n        for j in range(0, len(triple_list)):\n\
    \            for k in range(j+1, len(triple_list)):\n                triple_sum\
    \ = triple_list[j] + triple_list[k] + item\n                if triple_sum % 3\
    \ == 0:\n                    triple_count += 1\n    return triple_count\n\ndef\
    \ check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp329sh4f8.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp329sh4f8.py\", line 45,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp329sh4f8.py\", line\
    \ 39, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return n * (n - 1) * (n - 2) //\
    \ 6\n\nget_max_triples(5)\n\nimport unittest\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4sfd__me.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4sfd__me.py\", line 28,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp4sfd__me.py\", line\
    \ 22, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    s = 0\n    for i in range(1, n-1):\n\
    \        for j in range(i+1, n):\n            for k in range(j+1, n+1):\n    \
    \            if ((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0:\n\
    \                    s += 1\n    return s\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    max_triples = 0\n    for i in range(len(a)):\n        for j in\
    \ range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0:\n                    max_triples +=\
    \ 1\n    return max_triples\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n - 1) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 +\
    \ j * j - j + 1 + k * j - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplqfdgpui.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmplqfdgpui.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmplqfdgpui.py\", line\
    \ 21, in check\n    assert candidate(10) == 36\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return (n - 1) * (n - 2) // 2\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpad7_qkwp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpad7_qkwp.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpad7_qkwp.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 0\n    a = [(i * i - i + 1) % 3 for i in range(1,\
    \ n + 1)]\n    return sum(a[i] + a[j] + a[k] == 0 for i in range(n) for j in range(i\
    \ + 1, n) for k in range(j + 1, n))\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi9k8zvv_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpi9k8zvv_.py\", line 30,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpi9k8zvv_.py\", line\
    \ 24, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    number_of_triples = 0\n    for i in range(n - 2):\n        for\
    \ j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0:\n                    number_of_triples\
    \ += 1\n    return number_of_triples\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    from math import floor\n    triples\
    \ = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n          \
    \  for k in range(j+1, n):\n                if (i * i - i + 1 + j * j - j + 1\
    \ + k * k - k + 1) % 3 == 0:\n                    triples += 1\n    return triples\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxa808f9g.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpxa808f9g.py\", line 32,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpxa808f9g.py\", line\
    \ 27, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    l = []\n    for i in range(1, n+1):\n\
    \        l.append(i*i - i + 1)\n    count = 0\n    for i in range(len(l)):\n \
    \       for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n\
    \                if (l[i] + l[j] + l[k]) % 3 == 0:\n                    count\
    \ += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8_pf7f37.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # Define a function to check if\
    \ a number is a multiple of 3.\n    def is_multiple_3(a: int) -> bool:\n     \
    \   if a % 3 == 0:\n            return True\n        else:\n            return\
    \ False\n\n    # Now, let's create the array\n    a = [0] * n\n    for i in range(n):\n\
    \        a[i] = i * i - i + 1\n\n    # Now, let's check all triples\n    count\
    \ = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n   \
    \         for k in range(j + 1, n):\n                if is_multiple_3(a[i] + a[j]\
    \ + a[k]):\n                    count += 1\n\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaq850_y0.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpaq850_y0.py\", line 45,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpaq850_y0.py\", line\
    \ 39, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # Base case (no elements)\n   \
    \ if n == 0:\n        return 0\n    # Base case (only one element)\n    if n ==\
    \ 1:\n        return 0\n    # Base case (only two elements)\n    if n == 2:\n\
    \        return 0\n    # Main\n    res = 0\n    for i in range(1, n - 1):\n  \
    \      for j in range(i + 1, n):\n            for k in range(j + 1, n + 1):\n\
    \                if ((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3\
    \ == 0:\n                    res += 1\n    return res\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8_pf7f37.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n        return 0\n \
    \   else:\n        return sum(1 for i in range(1, n - 1) for j in range(i + 1,\
    \ n) if (i * i - i + 1 + j * j - j + 1 + (i + j) * (i + j) - (i + j) + 1) % 3\
    \ == 0)\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5jw3l0at.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp5jw3l0at.py\", line 27,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp5jw3l0at.py\", line\
    \ 21, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # Return the number of triples\n\
    \    return 0\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert\
    \ candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphhc1g17m.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmphhc1g17m.py\", line 26,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmphhc1g17m.py\", line\
    \ 20, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    cnt = 0\n    for i in range(1,\
    \ n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n\
    \                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n    \
    \                cnt += 1\n    return cnt\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7et3ap5c.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp7et3ap5c.py\", line 31,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp7et3ap5c.py\", line\
    \ 26, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    count = 0\n    for i in range(1,\
    \ n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n\
    \                if a[i] + a[j] + a[k] % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp10y8f72a.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp10y8f72a.py\", line 32,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp10y8f72a.py\", line\
    \ 26, in check\n    assert candidate(5) == 1\n  File \"/tmp/tmp10y8f72a.py\",\
    \ line 19, in get_max_triples\n    if a[i] + a[j] + a[k] % 3 == 0:\nNameError:\
    \ name 'a' is not defined\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    c = 0\n    for i in range(n - 2):\n        for j in range(i + 1,\
    \ n - 1):\n            for k in range(j + 1, n):\n                if a[i] + a[j]\
    \ + a[k] % 3 == 0:\n                    c += 1\n    return c\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg4_ixssf.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpg4_ixssf.py\", line 31,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpg4_ixssf.py\", line\
    \ 25, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [0] * n\n    for i in range(1,\
    \ n + 1):\n        a[i - 1] = i * i - i + 1\n    # print(a)\n    count = 0\n \
    \   #for i in range(1, n - 1):\n    #    for j in range(i + 1, n):\n    #    \
    \    for k in range(j + 1, n + 1):\n    #            if (a[i - 1] + a[j - 1] +\
    \ a[k - 1]) % 3 == 0:\n    #                count += 1\n    # return count\n \
    \   if n % 3 == 0:\n        return n // 3 * (n - 1) // 2\n    if n % 3 == 1:\n\
    \        return (n - 1) // 3 * ((n - 1) // 3 + 1) // 2 + n // 3 * (n - 2) // 2\n\
    \    return (n - 2) // 3 * ((n - 2) // 3 + 1) // 2 + n // 3 * (n - 1) // 2\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw2fjxvyt.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpw2fjxvyt.py\", line 39,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpw2fjxvyt.py\", line\
    \ 33, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = range(1, n + 1)\n    a = [i\
    \ * i - i + 1 for i in a]\n    # print(a)\n    count = 0\n    for i in range(n\
    \ - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j +\
    \ 1, n):\n                # print(i, j, k)\n                if (a[i] + a[j] +\
    \ a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = get_ints(n)\n    return count_triples(a)\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcmdvivm2.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpcmdvivm2.py\", line 26,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpcmdvivm2.py\", line\
    \ 20, in check\n    assert candidate(5) == 1\n  File \"/tmp/tmpcmdvivm2.py\",\
    \ line 15, in get_max_triples\n    a = get_ints(n)\nNameError: name 'get_ints'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum([1 for i in range(n)\
    \ for j in range(i + 1, n) for k in range(j + 1, n) if a[i] + a[j] + a[k] % 3\
    \ == 0])\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert\
    \ candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqnivjyva.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqnivjyva.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpqnivjyva.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\n  File \"/tmp/tmpqnivjyva.py\",\
    \ line 15, in get_max_triples\n    return sum([1 for i in range(n) for j in range(i\
    \ + 1, n) for k in range(j + 1, n) if a[i] + a[j] + a[k] % 3 == 0])\n  File \"\
    /tmp/tmpqnivjyva.py\", line 15, in <listcomp>\n    return sum([1 for i in range(n)\
    \ for j in range(i + 1, n) for k in range(j + 1, n) if a[i] + a[j] + a[k] % 3\
    \ == 0])\nNameError: name 'a' is not defined\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n        return 0\n \
    \   a = [i * i - i + 1 for i in range(1, n + 1)]\n    # print(a)\n    if n < 5:\n\
    \        if sum(a) % 3 == 0:\n            return 1\n        else:\n          \
    \  return 0\n    if sum(a) % 3 == 0:\n        return (n - 2) * (n - 3) // 2\n\
    \    for i in range(1, n - 2):\n        for j in range(i + 1, n - 1):\n      \
    \      if (a[i] + a[j]) % 3 == 0:\n                return (n - j - 1) * (n - j\
    \ - 2) // 2\n            for k in range(j + 1, n):\n                if (a[i] +\
    \ a[j] + a[k]) % 3 == 0:\n                    return 1\n    return 0\n\n\ndef\
    \ check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu_2arx79.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpu_2arx79.py\", line 43,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpu_2arx79.py\", line\
    \ 37, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(i % 3 == 0 for i in\
    \ range(1, n))\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert\
    \ candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyja8eitb.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyja8eitb.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyja8eitb.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(len(a) - 2) for j in range(i + 1, len(a)\
    \ - 1)\n               for k in range(j + 1, len(a)) if (a[i] + a[j] + a[k]) %\
    \ 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert\
    \ candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    n = n - 2\n    return n * (n +\
    \ 1) // 2\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiqro84nv.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiqro84nv.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpiqro84nv.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n)\n               if (a[i] + a[j] + a[k]) % 3 == 0)\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    max_triples = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    max_triples += 1\n    return max_triples\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    answer = 0\n    lst = [0] * n\n\
    \    for i in range(1, n+1):\n        lst[i-1] = i*i - i + 1\n    for i in range(n):\n\
    \        for j in range(i+1, n):\n            if (lst[i] + lst[j]) % 3 == 0:\n\
    \                for k in range(j+1, n):\n                    if (lst[i] + lst[j]\
    \ + lst[k]) % 3 == 0:\n                        answer += 1\n    return answer\n\
    \ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjaxyd0dk.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpjaxyd0dk.py\", line 34,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpjaxyd0dk.py\", line\
    \ 28, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    print(a)\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if sum((a[i], a[j], a[k])) % 3 == 0)\n\n\
    \ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '[1, 3, 7, 13, 21]

    [1, 3, 7, 13, 21, 31]

    [1, 3, 7, 13, 21, 31, 43, 57, 73, 91]

    [1, 3, 7, 13, 21, 31, 43, 57, 73, 91, 111, 133, 157, 183, 211, 241, 273, 307,
    343, 381, 421, 463, 507, 553, 601, 651, 703, 757, 813, 871, 931, 993, 1057, 1123,
    1191, 1261, 1333, 1407, 1483, 1561, 1641, 1723, 1807, 1893, 1981, 2071, 2163,
    2257, 2353, 2451, 2551, 2653, 2757, 2863, 2971, 3081, 3193, 3307, 3423, 3541,
    3661, 3783, 3907, 4033, 4161, 4291, 4423, 4557, 4693, 4831, 4971, 5113, 5257,
    5403, 5551, 5701, 5853, 6007, 6163, 6321, 6481, 6643, 6807, 6973, 7141, 7311,
    7483, 7657, 7833, 8011, 8191, 8373, 8557, 8743, 8931, 9121, 9313, 9507, 9703,
    9901]

    '
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return (n * (n - 1) * (n - 2))\
    \ // 6\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkuki1t4f.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpkuki1t4f.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpkuki1t4f.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    triples = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if a[i]\
    \ + a[j] + a[k] % 3 == 0:\n                    triples += 1\n    return triples\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4wqun9pj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp4wqun9pj.py\", line 32,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp4wqun9pj.py\", line\
    \ 26, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return n*(n-1)*(n-2) // 6\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6313p308.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp6313p308.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp6313p308.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # create array a of length n where\
    \ a[i] = i * i - i + 1\n    a = []\n    for i in range(1, n + 1):\n        a.append(i\
    \ * i - i + 1)\n    # count the number of triples\n    count = 0\n    for i in\
    \ range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j\
    \ + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                \
    \    count += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpckeegkvi.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpckeegkvi.py\", line 36,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpckeegkvi.py\", line\
    \ 30, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = []\n    for i in range(1, n\
    \ + 1):\n        a.append(i * i - i + 1)\n    count = 0\n    for i in range(n\
    \ - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j +\
    \ 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                  \
    \  count += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpczvzuyne.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpczvzuyne.py\", line 34,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpczvzuyne.py\", line\
    \ 28, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1o4n_h0l.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp1o4n_h0l.py\", line 24,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp1o4n_h0l.py\", line\
    \ 18, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1o4n_h0l.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp1o4n_h0l.py\", line 24,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp1o4n_h0l.py\", line\
    \ 18, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    arr = []\n    for i in range(1,\
    \ n + 1):\n        arr.append(i * i - i + 1)\n    count = 0\n    for i in range(0,\
    \ n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j\
    \ + 1, n):\n                if arr[i] + arr[j] + arr[k] % 3 == 0:\n          \
    \          count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpugu0yq0a.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpugu0yq0a.py\", line 34,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpugu0yq0a.py\", line\
    \ 28, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if sum((a[i], a[j], a[k])) % 3 == 0)\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    arr = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i\
    \ + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n            \
    \    if arr[i] + arr[j] + arr[k] % 3 == 0:\n                    count += 1\n \
    \   return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n  \
    \  assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0c_pc09a.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0c_pc09a.py\", line 32,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp0c_pc09a.py\", line\
    \ 26, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return (n * (n - 1) * (n - 2))\
    \ // 6\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkuki1t4f.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpkuki1t4f.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpkuki1t4f.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [(i * i - i + 1) % 3 for i\
    \ in range(1, n + 1)]\n    return a.count(0) * (a.count(0) - 1) // 2 + a.count(1)\
    \ * a.count(2)\n\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n  \
    \  assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6z23ob0c.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6z23ob0c.py\", line 27,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp6z23ob0c.py\", line\
    \ 22, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    t = 0\n    for i in range(1, n\
    \ - 1):\n        for j in range(i + 1, n):\n            for k in range(j + 1,\
    \ n + 1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1)\
    \ % 3 == 0:\n                    t += 1\n    return t\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    arr = list(range(1, n + 1))\n \
    \   for i in range(n):\n        arr[i] = arr[i] * arr[i] - arr[i] + 1\n    count\
    \ = 0\n    for i in range(len(arr) - 2):\n        for j in range(i + 1, len(arr)\
    \ - 1):\n            for k in range(j + 1, len(arr)):\n                if (arr[i]\
    \ + arr[j] + arr[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    triples = 0\n    for i in range(n):\n\
    \        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n  \
    \              if (i + 1) * (i + 1) - (i + 1) + 1 + (j + 1) * (j + 1) - (j + 1)\
    \ + 1 + (k + 1) * (k + 1) - (k + 1) + 1 == 0:\n                    triples +=\
    \ 1\n    return triples\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqwmue8vg.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpqwmue8vg.py\", line 31,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpqwmue8vg.py\", line\
    \ 25, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    if n > 10**5:\n        return 0\n\
    \    res = [i*i - i + 1 for i in range(1, n+1)]\n    c = 0\n    for i in range(len(res)):\n\
    \        for j in range(i+1, len(res)):\n            for k in range(j+1, len(res)):\n\
    \                if (res[i] + res[j] + res[k]) % 3 == 0:\n                   \
    \ c += 1\n    return c\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return ((n - 1) * (n - 2) * (n\
    \ - 3)) // 6\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert\
    \ candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqej8unzx.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqej8unzx.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpqej8unzx.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    res = 0\n    sum_3 = 3\n    while\
    \ sum_3 <= n:\n        i = 1\n        while i < sum_3:\n            if (sum_3\
    \ - i) % 2 == 0:\n                res += 1\n            i += 1\n        sum_3\
    \ += 3\n    return res\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfaz7_r4c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpfaz7_r4c.py\", line 34,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpfaz7_r4c.py\", line\
    \ 29, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    if n <= 2:\n        return 0\n\
    \    a = [x * x - x + 1 for x in range(1, n + 1)]\n    res = 0\n    for i in range(n\
    \ - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j +\
    \ 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                  \
    \  res += 1\n    return res\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp38q3nrh9.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp38q3nrh9.py\", line 34,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp38q3nrh9.py\", line\
    \ 28, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] + a[j] + a[k] == 3m, for\
    \ some integer m\n    # a[i] + a[j] == 3m - a[k]\n    # a[i] == 3m - a[k] - a[j]\n\
    \    # a[i] = a[j] + a[k] + a[i]\n    # a[i] % 3 == a[j] % 3 + a[k] % 3 + a[i]\
    \ % 3\n    # a[i] % 3 == (a[j] + a[k] + a[i]) % 3\n    # The values of a[i] %\
    \ 3 must be cyclic, i.e. [0, 1, 2, 0, 1, 2, 0, 1, 2, ...]\n    # Therefore, the\
    \ cyclic sequence must start with 2 because a[i] % 3 is always 0.\n    # The cyclic\
    \ sequence that starts with 2 is [2, 0, 1, 2, 0, 1, 2, 0, 1, ...]\n    # Therefore,\
    \ the sequence of a[i] % 3 must be [0, 1, 2, 0, 1, 2, 0, 1, 2, ...]\n    # Then,\
    \ for a[i] + a[j] + a[k] == 3m, we must have\n    # 3m % 3 == (a[i] + a[j] + a[k])\
    \ % 3 == (a[i] % 3 + a[j] % 3 + a[k] % 3) % 3\n    # => m % 3 == (a[i] % 3 + a[j]\
    \ % 3 + a[k] % 3) % 3\n    # => m % 3 == (0 + 1 + 2) % 3 == 0\n    # => m == 3t,\
    \ for some integer t\n    # => a[i] + a[j] + a[k] == 3 * 3t\n    # => a[i] + a[j]\
    \ + a[k] == 9t\n    # Now, we only need to check whether a[i] + a[j] == 9t - a[k],\
    \ where a[i] < a[j] < a[k]\n    # If\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk48_tksm.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpk48_tksm.py\", line 41,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpk48_tksm.py\", line\
    \ 35, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum([1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0])\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqrbvupda.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpqrbvupda.py\", line 26,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpqrbvupda.py\", line\
    \ 20, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    x = 1\n    for i in range(2, n+1):\n\
    \        x += i * i - i + 1\n    return (x - 1) // 3\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6tqnmsmp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp6tqnmsmp.py\", line 28,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp6tqnmsmp.py\", line\
    \ 22, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    def get_divisors(n):\n        i\
    \ = 1\n        divisors = []\n        while i <= math.sqrt(n):\n            if\
    \ n % i == 0:\n                if n / i == i:\n                    divisors.append(i)\n\
    \                else:\n                    divisors.append(i)\n             \
    \       divisors.append(n//i)\n            i += 1\n        return divisors\n\n\
    \    def is_divisible_by_3(n):\n        if n < 0:\n            n = -n\n      \
    \  if n == 0:\n            return True\n        if n == 1:\n            return\
    \ False\n        odd_count = 0\n        even_count = 0\n        while n:\n   \
    \         if n & 1:\n                odd_count += 1\n            if n & 2:\n \
    \               even_count += 1\n            n = n >> 2\n        return is_divisible_by_3(abs(odd_count\
    \ - even_count))\n\n    def get_sum_divisible_by_3(n):\n        if n < 0:\n  \
    \          n = -n\n        if n == 0:\n            return 0\n        if n == 1:\n\
    \            return 0\n        odd_count = 0\n        even_count = 0\n       \
    \ while n:\n            if n & 1:\n                odd_count += 1\n          \
    \  if n & 2:\n                even_count += 1\n            n = n >> 2\n      \
    \  return 3 - get_sum_divisible_by_3(abs(odd_count - even_count))\n\n    n_range\
    \ = range(n+1)\n    n_list = [i*i - i + 1 for i in n_range]\n    i_range = range(n)\n\
    \    j_range = range(1, n)\n    k_range = range(2, n)\n    triples = [(i, j, k)\
    \ for i in i_range for j in j_range for k in k_range if j > i and k > j]\n   \
    \ possible_triples = [t for t in triples if is_divisible_by_3(n_list[t[0]] + n_list[t[1]]\
    \ + n_list[t[2]]\ndef check(candidate):\n    assert candidate(5) == 1\n    assert\
    \ candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp1tno37n6.py\", line 68\n    possible_triples = [t for\
    \ t in triples if is_divisible_by_3(n_list[t[0]] + n_list[t[1]] + n_list[t[2]]\n\
    \                                                               ^\nSyntaxError:\
    \ '(' was never closed\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    counter = 0\n    for i in range(len(a)):\n        for j in range(i\
    \ + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if\
    \ a[i] + a[j] + a[k] % 3 == 0:\n                    counter += 1\n    return counter\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_8p5m16x.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp_8p5m16x.py\", line 32,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp_8p5m16x.py\", line\
    \ 26, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a: List[int] = [i * i - i + 1 for\
    \ i in range(1, n + 1)]\n    triples: Set[Tuple[int, int, int]] = set()\n    for\
    \ i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for\
    \ k in range(j + 1, len(a)):\n                if a[i] + a[j] + a[k] % 3 == 0:\n\
    \                    triples.add((a[i], a[j], a[k]))\n    return len(triples)\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3qy38c7c.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp3qy38c7c.py\", line 32,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp3qy38c7c.py\", line\
    \ 26, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return 0\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp40vql2hh.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp40vql2hh.py\", line 23,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp40vql2hh.py\", line\
    \ 17, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(i * (i + 1) * (2 * i\
    \ + 1) // 12 for i in range(1, n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo4uexm98.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpo4uexm98.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpo4uexm98.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum([i % 3 for i in range(1,\
    \ n + 1)]) * (n - 2)\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa3to3jxk.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpa3to3jxk.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpa3to3jxk.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    return\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfsyq0mva.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpfsyq0mva.py\", line 24,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpfsyq0mva.py\", line\
    \ 18, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # because all values are positive,\
    \ you can use the pigeonhole principle\n    # to find the maximum triplets.\n\
    \    #\n    # imagine:\n    #   - 5 buckets, each for remainder of 0, 1, 2 when\
    \ divided by 3\n    #   - for each value in array, it will fall into one of the\
    \ three buckets\n    #   - for n elements, we can have 1 bucket with n elements,\
    \ and two\n    #     buckets with n-1 elements (assuming n is divisible by 3)\n\
    \    #   - since we can have n elements in one bucket, we can create \n    # \
    \    n(n-1)/2 = nC2 = (n^2 - n)/2 combinations\n    #\n    # approach:\n    #\
    \   - traverse the entire array once to gather the count of all\n    #     elements\
    \ in each bucket\n    #   - total all the combinations based on the counts in\
    \ the buckets\n\n    # get the number of elements in each bucket\n    buckets\
    \ = [0] * 3\n    for i in range(1, n+1):\n        a = i * i - i + 1\n        r\
    \ = a % 3\n        buckets[r] += 1\n\n    # calculate all the possible combinations\
    \ for the buckets\n    total = 0\n    for i in range(3):\n        if buckets[i]\
    \ > 0:\n            total += (buckets[i] * (buckets[i] - 1)) // 2\n\n    return\
    \ total\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbmmcx0k6.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpbmmcx0k6.py\", line 54,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpbmmcx0k6.py\", line\
    \ 48, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # count = 0\n    # for i in range(1,\
    \ n):\n    #     for j in range(i + 1, n):\n    #         for k in range(j + 1,\
    \ n):\n    #             if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) %\
    \ 3 == 0:\n    #                 count += 1\n    # return count\n    return n\
    \ * (n - 1) * (n - 2) // 6\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6gaqzzbx.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6gaqzzbx.py\", line 32,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp6gaqzzbx.py\", line\
    \ 26, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    res = 0\n    for i in range(n):\n\
    \        for j in range(i+1, n):\n            for k in range(j+1, n):\n      \
    \          if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n          \
    \          res += 1\n    return res\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptayt0w1w.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmptayt0w1w.py\", line 31,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmptayt0w1w.py\", line\
    \ 25, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # write your code in Python 3.6\n\
    \    arr = [elem * elem - elem + 1 for elem in range(1, n + 1)]\n    return sum(1\
    \ for a in arr for b in arr for c in arr if a < b < c and not (a + b + c) % 3)\n\
    \ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8_pf7f37.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return len([(i, j, k) for i in\
    \ range(1, n) for j in range(i+1, n) for k in range(j+1, n) if (i*i-i+1 + j*j-j+1\
    \ + k*k-k+1) % 3 == 0])\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnpqvw166.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpnpqvw166.py\", line 24,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpnpqvw166.py\", line\
    \ 19, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    value_list = [x*x - x + 1 for x\
    \ in range(1, n+1)]\n    return sum([1 for i in range(len(value_list)-2) for j\
    \ in range(i+1, len(value_list)-1) for k in range(j+1, len(value_list)) if (value_list[i]\
    \ + value_list[j] + value_list[k]) % 3 == 0])\n\n\ndef check(candidate):\n   \
    \ assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    if not n:\n        return 0\n \
    \   nums = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i\
    \ in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in\
    \ range(j + 1, n):\n                if (nums[i] + nums[j] + nums[k]) % 3 == 0:\n\
    \                    count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return (n - 1) * (n - 2) // 2\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpad7_qkwp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpad7_qkwp.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpad7_qkwp.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    def find_max_triples(n: int) ->\
    \ int:\n        \"\"\"\n        Returns the number of triples of a where i < j\
    \ < k, \n        and a[i] + a[j] + a[k] is a multiple of 3\n        \"\"\"\n \
    \       def is_divisble_3(n: int) -> bool:\n            \"\"\"\n            Returns\
    \ True if n is divisible by 3\n            \"\"\"\n            divisble_3 = {3,\
    \ 6, 9}\n            return n in divisble_3\n\n        count = 0\n        for\
    \ i in range(1, n-1):\n            for j in range(i+1, n):\n                for\
    \ k in range(j+1, n+1):\n                    if is_divisble_3(i*i-i+1 + j*j-j+1\
    \ + k*k-k+1):\n                        count += 1\n        return count\n\n  \
    \  if n <= 2:\n        return 0\n    return find_max_triples(n)\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps8u_sm7a.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmps8u_sm7a.py\", line 46,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmps8u_sm7a.py\", line\
    \ 40, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return len([\n        (a, b, c)\n\
    \        for a in range(1, n-1)\n        for b in range(a+1, n)\n        for c\
    \ in range(b+1, n+1)\n        if a + b + c % 3 == 0\n    ])\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx1kt21l7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpx1kt21l7.py\", line 31,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpx1kt21l7.py\", line\
    \ 25, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum([a[i] + a[j] + a[k]\
    \ for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n) if (a[i]\
    \ + a[j] + a[k]) % 3 == 0])\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprilt9cft.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmprilt9cft.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmprilt9cft.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\n  File \"/tmp/tmprilt9cft.py\",\
    \ line 15, in get_max_triples\n    return sum([a[i] + a[j] + a[k] for i in range(n)\
    \ for j in range(i + 1, n) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) %\
    \ 3 == 0])\n  File \"/tmp/tmprilt9cft.py\", line 15, in <listcomp>\n    return\
    \ sum([a[i] + a[j] + a[k] for i in range(n) for j in range(i + 1, n) for k in\
    \ range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0])\nNameError: name 'a' is not\
    \ defined\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    total = 0\n    for i in range(n):\n\
    \        for j in range(i+1, n):\n            for k in range(j+1, n):\n      \
    \          if (a[i] + a[j] + a[k]) % 3 == 0:\n                    total += 1\n\
    \    return total\n\ndef check(candidate):\n    assert candidate(5) == 1\n   \
    \ assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpei06m2m1.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpei06m2m1.py\", line 30,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpei06m2m1.py\", line\
    \ 24, in check\n    assert candidate(5) == 1\n  File \"/tmp/tmpei06m2m1.py\",\
    \ line 19, in get_max_triples\n    if (a[i] + a[j] + a[k]) % 3 == 0:\nNameError:\
    \ name 'a' is not defined\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    triples = 0\n    for x in range(1,\
    \ n):\n        for y in range(x+1, n):\n            for z in range(y+1, n):\n\
    \                if (x*x - x + 1 + y*y - y + 1 + z*z - z + 1) % 3 == 0:\n    \
    \                triples += 1\n    return triples\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3z9iatrl.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp3z9iatrl.py\", line 31,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp3z9iatrl.py\", line\
    \ 26, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # This can also be done using a\
    \ math formula.\n    # But in this case, I'm using the brute force way.\n    #\
    \ Also, I have used the range function because it is faster to loop through a\
    \ range than a list.\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return\
    \ sum(\n        1\n        for x in range(n - 2)\n        for y in range(x + 1,\
    \ n - 1)\n        for z in range(y + 1, n)\n        if (a[x] + a[y] + a[z]) %\
    \ 3 == 0\n    )\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n   \
    \ assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    counter = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    counter += 1\n    return counter\n\
    \n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    triples = [(a[i], a[j], a[k]) for i in range(n) for j in range(i\
    \ + 1, n) for k in range(j + 1, n)\n               if sum([a[i], a[j], a[k]])\
    \ % 3 == 0]\n    return len(triples)\n\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    count = 0\n    total = 0\n    for\
    \ i in range(n):\n        total += i * i - i + 1\n        if total % 3 == 0:\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpww36uwmh.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpww36uwmh.py\", line 30,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpww36uwmh.py\", line\
    \ 25, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    answer = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    answer += 1\n    return answer\n\
    \ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    if n <= 2:\n        return 0\n\
    \    else:\n        return int(n*(n-1)*(n-2)/6)\n\ndef check(candidate):\n   \
    \ assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8g1b2aaj.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp8g1b2aaj.py\", line 27,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp8g1b2aaj.py\", line\
    \ 21, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8_pf7f37.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1o4n_h0l.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp1o4n_h0l.py\", line 24,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp1o4n_h0l.py\", line\
    \ 18, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i + 1\n    a =\
    \ [i * i - i + 1 for i in range(1, n + 1)]\n    triples = 0\n    for i in range(len(a)):\n\
    \        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n\
    \                if a[i] + a[j] + a[k] % 3 == 0:\n                    triples\
    \ += 1\n    return triples\ndef check(candidate):\n    assert candidate(5) ==\
    \ 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdc8sh24h.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdc8sh24h.py\", line 31,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpdc8sh24h.py\", line\
    \ 25, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(int((a[i] + a[j] + a[k]) % 3 == 0) for i in range(n)\
    \ for j in range(i + 1, n) for k in range(j + 1, n))\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    comb = combinations(a, 3)\n    # sum(comb, (0, 0, 0)) will sum\
    \ all the tuples in comb\n    # sum(a, b) means a + b\n    return sum(1 for c\
    \ in comb if sum(c) % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm85pqypc.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm85pqypc.py\", line 29,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpm85pqypc.py\", line\
    \ 23, in check\n    assert candidate(5) == 1\n  File \"/tmp/tmpm85pqypc.py\",\
    \ line 16, in get_max_triples\n    comb = combinations(a, 3)\nNameError: name\
    \ 'combinations' is not defined\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    def get_sum(arr):\n        res\
    \ = 0\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n\
    \                for k in range(j + 1, len(arr)):\n                    if (arr[i]\
    \ + arr[j] + arr[k]) % 3 == 0:\n                        res += 1\n        return\
    \ res\n\n    arr = [i * i - i + 1 for i in range(1, n + 1)]\n    return get_sum(arr)\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(a[i] + a[j] + a[k] %\
    \ 3 == 0 for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n))\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqjrt7x1y.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqjrt7x1y.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpqjrt7x1y.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\n  File \"/tmp/tmpqjrt7x1y.py\",\
    \ line 15, in get_max_triples\n    return sum(a[i] + a[j] + a[k] % 3 == 0 for\
    \ i in range(n) for j in range(i + 1, n) for k in range(j + 1, n))\n  File \"\
    /tmp/tmpqjrt7x1y.py\", line 15, in <genexpr>\n    return sum(a[i] + a[j] + a[k]\
    \ % 3 == 0 for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n))\n\
    NameError: name 'a' is not defined\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    res = 0\n    for i in range(1,\
    \ n-1):\n        for j in range(i+1, n):\n            for k in range(j+1, n+1):\n\
    \                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n\
    \                    res += 1\n    return res\n\n\ndef check(candidate):\n   \
    \ assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    nums = [x*x - x + 1 for x in range(1,\
    \ n+1)]\n    count = 0\n    for x in range(n-2):\n        for y in range(x+1,\
    \ n-1):\n            for z in range(y+1, n):\n                if nums[x] + nums[y]\
    \ + nums[z] % 3 == 0:\n                    count += 1\n    return count\n\ndef\
    \ check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt7ff00uc.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpt7ff00uc.py\", line 31,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpt7ff00uc.py\", line\
    \ 25, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # init i, j, k\n    i = 0\n   \
    \ j = 1\n    k = 2\n    triple_num = 0\n    while i < n - 2:\n        while j\
    \ < n - 1:\n            while k < n:\n                if (i*i - i + 1 + j*j -\
    \ j + 1 + k*k - k + 1) % 3 == 0:\n                    triple_num += 1\n      \
    \          k += 1\n            j += 1\n            k = j + 1\n        i += 1\n\
    \        j = i + 1\n        k = j + 1\n    return triple_num\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkm0v0huu.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpkm0v0huu.py\", line 41,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpkm0v0huu.py\", line\
    \ 35, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1o4n_h0l.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp1o4n_h0l.py\", line 24,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp1o4n_h0l.py\", line\
    \ 18, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    def get_max_triples_dp(n: int)\
    \ -> int:\n        \"\"\"\n        dp[i] = number of triples ends with a[i]\n\
    \        update dp[i] by range [0, i-2]\n        \"\"\"\n        dp = [0] * n\n\
    \        for i in range(2, n):\n            for j in range(i-2):\n           \
    \     if (a[i] + a[j]) % 3 == 0:\n                    dp[i] += dp[j]\n       \
    \ return sum(dp)\n\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    return\
    \ get_max_triples_dp(n)\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpep74g8oc.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpep74g8oc.py\", line 38,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpep74g8oc.py\", line\
    \ 32, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8_pf7f37.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    counter = 0\n    for i in range(1,\
    \ n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n\
    \                if ((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3\
    \ == 0:\n                    counter += 1\n    return counter\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpig60kk3v.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpig60kk3v.py\", line 29,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpig60kk3v.py\", line\
    \ 24, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    triples = set()\n    for a in range(1,\
    \ n):\n        for b in range(a+1, n):\n            if ((a**2 - a + 1) + (b**2\
    \ - b + 1)) % 3 == 0:\n                c = int((((a**2 - a + 1) + (b**2 - b +\
    \ 1)) // 3) ** 0.5 + 0.5)\n                if c**2 - c + 1 == ((a**2 - a + 1)\
    \ + (b**2 - b + 1)) // 3:\n                    triples.add((a, b, c))\n    return\
    \ len(triples)\n\n\nprint(get_max_triples(15))\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp48hs87sw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp48hs87sw.py\", line 33,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp48hs87sw.py\", line\
    \ 27, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: '0

    '
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    triples = 0\n    for i in range(1,\
    \ n - 1):\n        for j in range(i + 1, n):\n            for k in range(j + 1,\
    \ n + 1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1)\
    \ % 3 == 0:\n                    triples += 1\n    return triples\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8_pf7f37.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum([(i+1)*(n-i) for i in\
    \ range(n-1)])\n\n@pytest.mark.timeout(0.1)\n@pytest.mark.parametrize('n, expected',\
    \ [\n    (5, 1),\n    (2, 0),\n    (8, 8),\n    (9, 12),\n    (10, 15),\n    (11,\
    \ 20),\n    (1000, 2495000),\n    (200, 24000),\n    (200, 24000),\n    (200,\
    \ 24000),\n    (200, 24000),\n    (200, 24000),\n    (200, 24000),\n    (200,\
    \ 24000),\n    (200, 24000),\n    (200, 24000),\n    (200, 24000),\n    (200,\
    \ 24000),\n    (200, 24000),\n    (200, 24000),\n    (200, 24000),\n    (200,\
    \ 24000),\n    (200, 24000),\n    (200, 24000),\n    (200, 24000),\n    (200,\
    \ 24000),\n    (200, 24000),\n    (200, 24000),\n    (200, 24000),\n    (200,\
    \ 24000),\n    (200, 24000),\n    (200, 24000),\n    (200, 24000),\n    (200,\
    \ 24000),\n    (200, 24000),\n    (200, 24000),\n    (200, 24000),\n    (200,\
    \ 24000),\n    (200, 24000),\n    (200, 24000),\n    (200, 24000),\n    (200,\
    \ 24000),\n    (200, 24000),\n    (200, 24000),\n    (200, 24000),\n    (200,\
    \ 24000),\n    (200, 24000),\n    (200, 24000),\n    (200, 24000),\n    (200,\
    \ 24000),\n    (200, 24000),\n    (200, 24000),\n    (200, 24000),\n    (200,\
    \ 24000),\n    (200, 24000),\n    (200, 24000),\n    (200, 24000),\n    (200,\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpjbs71uhz.py\", line 76\n    (200,\n    ^\nSyntaxError:\
    \ '(' was never closed\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # time-complexity: O(N)\n    #\
    \ space-complexity: O(N)\n    triples_count: int = 0\n    a: List[int] = [i *\
    \ i - i + 1 for i in range(1, n + 1)]\n    for i in range(n - 2):\n        for\
    \ j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n         \
    \       if a[i] + a[j] + a[k] % 3 == 0:\n                    triples_count +=\
    \ 1\n    return triples_count\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8ikx3vdy.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp8ikx3vdy.py\", line 34,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp8ikx3vdy.py\", line\
    \ 28, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # return sum(a[i] + a[j] + a[k]\
    \ % 3 == 0 for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n))\n\
    \    return sum(1 for i in range(n) for j in range(i + 1, n) for k in range(j\
    \ + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef\
    \ check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt4zh0yvf.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpt4zh0yvf.py\", line 26,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpt4zh0yvf.py\", line\
    \ 20, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    arr = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i\
    \ + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n            \
    \    if arr[i] + arr[j] + arr[k] % 3 == 0:\n                    total += 1\n \
    \   return total\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n  \
    \  assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpba2be22h.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpba2be22h.py\", line 32,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpba2be22h.py\", line\
    \ 26, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # Create an integer array a of\
    \ length n\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    # Count the\
    \ number of triples where a[i] + a[j] + a[k] is a multiple of 3\n    return sum(sum(a[j]\
    \ + a[k] for j in range(i + 1, n)) % 3 == 0 for i in range(n) for k in range(i\
    \ + 2, n))\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert\
    \ candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplvb2jwjk.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmplvb2jwjk.py\", line 28,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmplvb2jwjk.py\", line\
    \ 22, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return 0\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4121xk7m.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4121xk7m.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp4121xk7m.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8_pf7f37.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    s = [0 for i in range(n + 1)]\n    for i in range(1, n + 1):\n\
    \        s[i] = s[i - 1] + a[i - 1]\n    triples = 0\n    for i in range(n - 2):\n\
    \        for j in range(i + 1, n - 1):\n            if (s[j] - s[i]) % 3 == 0:\n\
    \                triples += n - j - 1\n    return triples\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkft6a0bl.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpkft6a0bl.py\", line 34,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpkft6a0bl.py\", line\
    \ 28, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    count = 0\n    for i in range(n):\n\
    \        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n  \
    \              if ((i + 1) ** 2 - (i + 1) + 1 + (j + 1) ** 2 - (j + 1) + 1 + (k\
    \ + 1) ** 2 - (k + 1) + 1) % 3 == 0:\n                    count += 1\n    return\
    \ count\n\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert\
    \ candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    triples = []\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    triples.append((a[i], a[j], a[k]))\n\
    \    return len(triples)\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    counter = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if a[i]\
    \ + a[j] + a[k] % 3 == 0:\n                    counter += 1\n    return counter\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxfv_320d.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpxfv_320d.py\", line 32,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpxfv_320d.py\", line\
    \ 26, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return n // 3\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq6r1toj4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpq6r1toj4.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpq6r1toj4.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    N = n * (n + 1) // 2\n    if N\
    \ % 3 == 0:\n        return N // 3\n    return N // 3 + 1\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplo2vwq4j.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmplo2vwq4j.py\", line 28,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmplo2vwq4j.py\", line\
    \ 22, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # your code goes here\n    triples\
    \ = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for\
    \ k in range(j+1, n):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k\
    \ + 1) % 3 == 0:\n                    triples += 1\n    return triples\n\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_u0f5v2.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmph_u0f5v2.py\", line 33,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmph_u0f5v2.py\", line\
    \ 27, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    nums = [i * i - i + 1 for i in\
    \ range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i +\
    \ 1, n - 1) for k in range(j + 1, n)\n               if (nums[i] + nums[j] + nums[k])\
    \ % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert\
    \ candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8_pf7f37.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    max_triples = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    max_triples += 1\n    return max_triples\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [x*x - x + 1 for x in range(1,\
    \ n+1)]\n    return sum([1 for i in range(len(a)) for j in range(i+1, len(a))\
    \ for k in range(j+1, len(a)) if (a[i] + a[j] + a[k]) % 3 == 0])\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8_pf7f37.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(sum(map(lambda x: x\
    \ % 3 == 0, [a[i], a[j], a[k]])) == 3 for i in range(n) for j in range(i+1, n)\
    \ for k in range(j+1, n))\n\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuw81n9e4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpuw81n9e4.py\", line 26,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpuw81n9e4.py\", line\
    \ 20, in check\n    assert candidate(5) == 1\n  File \"/tmp/tmpuw81n9e4.py\",\
    \ line 15, in get_max_triples\n    return sum(sum(map(lambda x: x % 3 == 0, [a[i],\
    \ a[j], a[k]])) == 3 for i in range(n) for j in range(i+1, n) for k in range(j+1,\
    \ n))\n  File \"/tmp/tmpuw81n9e4.py\", line 15, in <genexpr>\n    return sum(sum(map(lambda\
    \ x: x % 3 == 0, [a[i], a[j], a[k]])) == 3 for i in range(n) for j in range(i+1,\
    \ n) for k in range(j+1, n))\nNameError: name 'a' is not defined\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return (n * (n - 1) * (n - 2))\
    \ // 6\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkuki1t4f.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpkuki1t4f.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpkuki1t4f.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8_pf7f37.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    total = 0\n    for a in range(1,\
    \ n):\n        for b in range(a + 1, n):\n            for c in range(b + 1, n):\n\
    \                if (a * a - a + 1 + b * b - b + 1 + c * c - c + 1) % 3 == 0:\n\
    \                    total += 1\n    return total\ndef check(candidate):\n   \
    \ assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1jrtfn7z.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp1jrtfn7z.py\", line 29,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp1jrtfn7z.py\", line\
    \ 24, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # Your code here\n    return\n\n\
    \ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgejb_hpz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpgejb_hpz.py\", line 26,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpgejb_hpz.py\", line\
    \ 20, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    triples = []\n    for i in range(1,\
    \ n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n\
    \                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n    \
    \                triples.append((i, j, k))\n    return len(triples)\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return get_max_triples_(n)\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7lzx3wih.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7lzx3wih.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp7lzx3wih.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\n  File \"/tmp/tmp7lzx3wih.py\",\
    \ line 15, in get_max_triples\n    return get_max_triples_(n)\nNameError: name\
    \ 'get_max_triples_' is not defined. Did you mean: 'get_max_triples'?\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return n // 3\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq6r1toj4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpq6r1toj4.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpq6r1toj4.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return get_max_triples_naive(n)\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsfczifrw.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpsfczifrw.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpsfczifrw.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\n  File \"/tmp/tmpsfczifrw.py\",\
    \ line 15, in get_max_triples\n    return get_max_triples_naive(n)\nNameError:\
    \ name 'get_max_triples_naive' is not defined. Did you mean: 'get_max_triples'?\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    assert isinstance(n, int) and n\
    \ > 0\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    c = 0\n   \
    \ for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for\
    \ k in range(j + 1, n):\n                if a[i] + a[j] + a[k] == 0:\n       \
    \             c += 1\n    return c\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1d9akdem.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp1d9akdem.py\", line 33,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp1d9akdem.py\", line\
    \ 27, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    count = 0\n    for i in range(n\
    \ - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j +\
    \ 1, n):\n                if (i + 1) * (i + 1) - (i + 1) + 1 + (j + 1) * (j +\
    \ 1) - (j + 1) + 1 + (k + 1) * (k + 1) - (k + 1) + 1 % 3 == 0:\n             \
    \       count += 1\n    return count\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2x76aeqq.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp2x76aeqq.py\", line 30,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp2x76aeqq.py\", line\
    \ 24, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return (n - 2) * (n - 1) * n //\
    \ 6\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcev_chwc.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcev_chwc.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpcev_chwc.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1o4n_h0l.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp1o4n_h0l.py\", line 24,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp1o4n_h0l.py\", line\
    \ 18, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    count = 0\n    for i in range(1,\
    \ n-1):\n        for j in range(i+1, n):\n            for k in range(j+1, n+1):\n\
    \                if ((i*i - i + 1) + (j*j - j + 1) + (k*k - k + 1)) % 3 == 0:\n\
    \                    count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # your code here\n    return None\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpupn02unj.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpupn02unj.py\", line 26,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpupn02unj.py\", line\
    \ 20, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    try:\n        if n < 3:\n     \
    \       return 0\n        elif n == 3:\n            return 1\n        else:\n\
    \            count = 0\n            for i in range(n):\n                for j\
    \ in range(i + 1, n):\n                    for k in range(j + 1, n):\n       \
    \                 if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n\
    \                            count += 1\n            return count\n    except\
    \ Exception as e:\n        raise e\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxnzzchlj.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpxnzzchlj.py\", line 37,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpxnzzchlj.py\", line\
    \ 31, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8_pf7f37.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp8_pf7f37.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = []\n    for i in range(1, n\
    \ + 1):\n        a.append(i * i - i + 1)\n    # print(a)\n    triple_num = 0\n\
    \    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n       \
    \     for k in range(j + 1, len(a)):\n                if a[i] + a[j] + a[k] %\
    \ 3 == 0:\n                    triple_num += 1\n    return triple_num\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn_30hh74.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpn_30hh74.py\", line 34,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpn_30hh74.py\", line\
    \ 28, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    cnt = 0\n    for i in range(1,\
    \ n - 1):\n        for j in range(i + 1, n):\n            for k in range(j + 1,\
    \ n + 1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1)\
    \ % 3 == 0:\n                    cnt += 1\n    return cnt\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i\
    \ + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if\
    \ a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\
    \ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv4evt__1.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpv4evt__1.py\", line 31,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpv4evt__1.py\", line\
    \ 25, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return n * (n - 1) * (n - 2) //\
    \ 6\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_n2_l7r3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_n2_l7r3.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp_n2_l7r3.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a: List[int] = [i * i - i + 1 for\
    \ i in range(1, n + 1)]\n    count: int = 0\n    for i in range(n - 2):\n    \
    \    for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\ndef check(candidate):\n    assert candidate(5) == 1\n \
    \   assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    triples = 0\n    for i in range(0, n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    triples += 1\n    return triples\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    res = 0\n    for i in range(n):\n\
    \        for j in range(i+1, n):\n            for k in range(j+1, n):\n      \
    \          if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n          \
    \          res += 1\n    return res\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3xn9qg7j.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3xn9qg7j.py\", line 30,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp3xn9qg7j.py\", line\
    \ 24, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    ans = 0\n    for i in range(1,\
    \ n-1):\n        for j in range(i+1, n):\n            if (i + j) % 3 == 0:\n \
    \               ans += n - j\n                break\n    return ans\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa_ywu6y8.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpa_ywu6y8.py\", line 31,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpa_ywu6y8.py\", line\
    \ 25, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    n_list = list(range(1, n + 1))\n\
    \    n_list = list(map(lambda x: x * x - x + 1, n_list))\n    res = 0\n    for\
    \ i in range(len(n_list)):\n        for j in range(i + 1, len(n_list)):\n    \
    \        for k in range(j + 1, len(n_list)):\n                if (n_list[i] +\
    \ n_list[j] + n_list[k]) % 3 == 0:\n                    res += 1\n    return res\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return int(n * (n - 1) * (n - 2)\
    \ / 6)\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8rl1gxuu.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8rl1gxuu.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp8rl1gxuu.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # 3x + 1 = 3y + 2 = 3z + 3\n  \
    \  # x + y + z = n\n    # sum(1, n) = n(n+1)/2\n    # sum(1, n, 3) = n(n+1)/2\
    \ - 2\n    # sum(1, n, 3) / 3 = (n(n+1)/2 - 2) / 3\n    # sum(1, n, 3) / 3 = (n(n+1)\
    \ - 6) / 6\n    # sum(1, n, 3) / 3 = (n(n+1) - (3k+3)) / 6\n    # sum(1, n, 3)\
    \ / 3 = (n(n+1) - 3k - 3) / 6\n    # sum(1, n, 3) / 3 = n(n+1)/6 - k - 1/2\n \
    \   # sum(1, n, 3) / 3 = (n(n+1) - 3k - 3) / 6\n    # sum(1, n, 3) / 3 = (n(n+1)\
    \ - 3k - 3) / 6\n    # sum(1, n, 3) / 3 = (n(n+1) - 3k - 3) / 6\n    pass\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp11od45rw.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp11od45rw.py\", line 36,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp11od45rw.py\", line\
    \ 30, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # return sum(i * (i + 1) * (i +\
    \ 2) // 6 for i in range(1, n))\n    return sum(i * (i + 1) * (i + 2) for i in\
    \ range(1, n)) // 6\n\ndef check(candidate):\n    assert candidate(5) == 1\n \
    \   assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6i5zi6an.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp6i5zi6an.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp6i5zi6an.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # a = [1, 3, 7, 13, 21]\n    #\
    \ for i in range(n):\n    #     a.append(a[i] + i + 2)\n    # return a\n    return\
    \ n*(n-1)*(n-2)//6\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_rbnngmo.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_rbnngmo.py\", line 29,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp_rbnngmo.py\", line\
    \ 23, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    total = 0\n    for i in range(1,\
    \ n - 1):\n        for j in range(i + 1, n):\n            for k in range(j + 1,\
    \ n + 1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1)\
    \ % 3 == 0:\n                    total += 1\n    return total\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(\n        [\n      \
    \      len(triples)\n            for i in range(1, n - 1)\n            for j in\
    \ range(i + 1, n)\n            for k in range(j + 1, n)\n            if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0\n        ]\n    )\n\n\ndef\
    \ check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi1inpv9w.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpi1inpv9w.py\", line 33,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpi1inpv9w.py\", line\
    \ 27, in check\n    assert candidate(5) == 1\n  File \"/tmp/tmpi1inpv9w.py\",\
    \ line 16, in get_max_triples\n    [\n  File \"/tmp/tmpi1inpv9w.py\", line 17,\
    \ in <listcomp>\n    len(triples)\nNameError: name 'triples' is not defined\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(sorted(range(n))[i +\
    \ 2] - (i + 2) for i in range(n - 2))\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphsfaksq2.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphsfaksq2.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmphsfaksq2.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    if\
    \ n < 3:\n        return 0\n    div3 = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n\
    \    s = 0\n    for i in range(2, n):\n        # print(i, div3[i])\n        s\
    \ += (i-1) * div3[i]\n    return s\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp53kv9ghx.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp53kv9ghx.py\", line 32,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp53kv9ghx.py\", line\
    \ 26, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return (n-1)*(n-2)//6\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfihlvw6b.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpfihlvw6b.py\", line 24,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpfihlvw6b.py\", line\
    \ 18, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    ans = 0\n    for i in range(n - 2):\n        for j in range(i +\
    \ 1, n - 1):\n            for k in range(j + 1, n):\n                if a[i] +\
    \ a[j] + a[k] % 3 == 0:\n                    ans += 1\n    return ans\n\n\ndef\
    \ check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdextd7fe.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpdextd7fe.py\", line 32,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpdextd7fe.py\", line\
    \ 26, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum([((n-i) * (n-i-1))//2\
    \ for i in range(n)])\n        \ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk9vdxhgk.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpk9vdxhgk.py\", line 24,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpk9vdxhgk.py\", line\
    \ 18, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    nums = [i * i - i + 1 for i in\
    \ range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in\
    \ range(i + 1, n - 1):\n            for k in range(j + 1, n):\n              \
    \  if (nums[i] + nums[j] + nums[k]) % 3 == 0:\n                    count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n \
    \   assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return len([(i, j, k) for i in range(n) for j in range(i + 1, n)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0])\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # def is_multiple_3(num: int) ->\
    \ bool:\n    #     if num % 3 == 0:\n    #         return True\n    #     return\
    \ False\n\n    # a = list(map(lambda x: x * x - x + 1, range(1, n + 1)))\n   \
    \ # triples = []\n    # for i in range(n - 2):\n    #     for j in range(i + 1,\
    \ n - 1):\n    #         for k in range(j + 1, n):\n    #             if is_multiple_3(a[i]\
    \ + a[j] + a[k]):\n    #                 triples.append((a[i], a[j], a[k]))\n\
    \    # return len(triples)\n\n    # better solution\n    a = [x * x - x + 1 for\
    \ x in range(1, n + 1)]\n    cnt = 0\n    for i in range(n - 2):\n        for\
    \ j in range(i + 1, n - 1):\n            k = bisect.bisect_left(a, -a[i] - a[j],\
    \ j + 1)\n            cnt += max(0, k - j - 1)\n    return cnt\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4hh24l4z.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp4hh24l4z.py\", line 46,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp4hh24l4z.py\", line\
    \ 40, in check\n    assert candidate(5) == 1\n  File \"/tmp/tmp4hh24l4z.py\",\
    \ line 34, in get_max_triples\n    k = bisect.bisect_left(a, -a[i] - a[j], j +\
    \ 1)\nNameError: name 'bisect' is not defined\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # return len([x for x in range(1,\
    \ n + 1) if (x * x - x + 1) % 3 == 0])\n    return len([x for x in range(1, n\
    \ + 1) if x % 3 == 0])\n\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgw054etz.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpgw054etz.py\", line 27,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpgw054etz.py\", line\
    \ 22, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i + 1\n    # a[j]\
    \ = j * j - j + 1\n    # a[k] = k * k - k + 1\n    # a[i] + a[j] + a[k] = i *\
    \ i - i + 1 + j * j - j + 1 + k * k - k + 1\n    # = i * i + j * j + k * k - i\
    \ - j - k + 3\n    # = i^2 + j^2 + k^2 - i - j - k + 3\n    # = (i - 1)^2 + (j\
    \ - 1)^2 + (k - 1)^2\n    # (i - 1)^2 + (j - 1)^2 + (k - 1)^2  % 3 == 0\n    #\
    \ (i - 1)^2 % 3 == 0 and (j - 1)^2 % 3 == 0 and (k - 1)^2 % 3 == 0\n    # (i -\
    \ 1) % 3 == 0 and (j - 1) % 3 == 0 and (k - 1) % 3 == 0\n    count = 0\n    for\
    \ i in range(1, n - 1):\n        for j in range(i + 1, n):\n            for k\
    \ in range(j + 1, n + 1):\n                if (i - 1) % 3 == 0 and (j - 1) % 3\
    \ == 0 and (k - 1) % 3 == 0:\n                    count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ob74ssa.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp1ob74ssa.py\", line 41,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp1ob74ssa.py\", line\
    \ 35, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    counts = 0\n    for i in range(1,\
    \ n):\n        j = i + 1\n        k = n\n        while j < k:\n            s =\
    \ i*i - i + 1 + j*j - j + 1 + k*k - k + 1\n            if s % 3 == 0:\n      \
    \          counts += 1\n                k -= 1\n            else:\n          \
    \      j += 1\n    return counts\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4d3lbw42.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp4d3lbw42.py\", line 35,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp4d3lbw42.py\", line\
    \ 29, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum([(i * (i - 1) * (i -\
    \ 2)) // 6 for i in range(1, n + 1)])\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaj7mgm88.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpaj7mgm88.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpaj7mgm88.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [1]\n    for i in range(1,\
    \ n):\n        a.append(i * i - i + 1)\n    print(a)\n    i = 0\n    count = 0\n\
    \    while i < n - 2:\n        j = i + 1\n        while j < n - 1:\n         \
    \   k = j + 1\n            while k < n:\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0:\n                    count += 1\n                k += 1\n        \
    \    j += 1\n        i += 1\n    return count\n\n\nprint(get_max_triples(10))\n\
    print(get_max_triples(7))\nprint(get_max_triples(5))\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8f8d972h.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8f8d972h.py\", line 44,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp8f8d972h.py\", line\
    \ 38, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: '[1, 1, 3, 7, 13, 21, 31, 43, 57, 73]

    36

    [1, 1, 3, 7, 13, 21, 31]

    10

    [1, 1, 3, 7, 13]

    4

    [1, 1, 3, 7, 13]

    '
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a: int = 1\n    b: int = 3\n  \
    \  c: int = 7\n    s: int = 0\n    while a <= n:\n        while b <= n:\n    \
    \        while c <= n:\n                if c == n:\n                    break\n\
    \                if (a + b + c) % 3 == 0:\n                    s += 1\n      \
    \          c += 1\n            b += 1\n            c = b + 1\n        a += 1\n\
    \        b = a + 1\n        c = b + 1\n    return s\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa_v596ga.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpa_v596ga.py\", line 42,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpa_v596ga.py\", line\
    \ 37, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return n // 3\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz4q9rve1.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpz4q9rve1.py\", line 24,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpz4q9rve1.py\", line\
    \ 19, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(len(a) - 2) for j in range(i + 1, len(a)\
    \ - 1) for k in range(j + 1, len(a)) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef\
    \ check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # check if given number is an integer\n\
    \    if not isinstance(n, int):\n        raise TypeError(\n            f\"Expected\
    \ an integer, {type(n)} was given\")\n    # check if given number is positive\n\
    \    if n < 1:\n        raise ValueError(\n            f\"Expected a positive\
    \ integer, {n} was given\")\n    # get array of elements\n    arr = [i * i - i\
    \ + 1 for i in range(1, n + 1)]\n    # get all triples in the array\n    triples\
    \ = [\n        (arr[i], arr[j], arr[k])\n        for i in range(len(arr))\n  \
    \      for j in range(i + 1, len(arr))\n        for k in range(j + 1, len(arr))\n\
    \    ]\n    # count triples where sum is multiple of 3\n    return sum(1 for t\
    \ in triples if sum(t) % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum([not ((i+j+k) % 3) for\
    \ i in range(1, n) for j in range(i+1, n) for k in range(j+1, n)])\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkpl6l6sp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpkpl6l6sp.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpkpl6l6sp.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    triples = 0\n    for i in range(len(a)):\n        for j in range(i\
    \ + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0:\n                    triples += 1\n    return\
    \ triples\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert\
    \ candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return n * (n - 1) * (n - 2) //\
    \ 6\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_n2_l7r3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_n2_l7r3.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp_n2_l7r3.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum([(i*i - i + 1) % 3 ==\
    \ 0 for i in range(1, n + 1)])\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8xxaa4he.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8xxaa4he.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp8xxaa4he.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # your code here\n    return None\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpupn02unj.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpupn02unj.py\", line 26,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpupn02unj.py\", line\
    \ 20, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
