language: py
name: HumanEval_71_triangle_area
results:
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        perimeter = (a + b + c) / 2\n\
    \        area = (perimeter * (perimeter - a) * (perimeter - b) * (perimeter -\
    \ c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n\
    \        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    sides\
    \ = sorted([a, b, c])\n    if sides[0] + sides[1] <= sides[2]:\n        return\
    \ -1\n    s = sum(sides) / 2\n    return round(sqrt(s * (s - sides[0]) * (s -\
    \ sides[1]) * (s - sides[2])), 2)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp45f54f2.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpp45f54f2.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpp45f54f2.py\", line\
    \ 22, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpp45f54f2.py\"\
    , line 18, in triangle_area\n    return round(sqrt(s * (s - sides[0]) * (s - sides[1])\
    \ * (s - sides[2])), 2)\nNameError: name 'sqrt' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    # heron's formula\n\
    \    s = (a + b + c) / 2\n    return round(math.sqrt(s * (s - a) * (s - b) * (s\
    \ - c)), 2)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8ieb8c92.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp8ieb8c92.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp8ieb8c92.py\", line\
    \ 22, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp8ieb8c92.py\"\
    , line 18, in triangle_area\n    return round(math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c)), 2)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        return 0.5 * math.sqrt((a +\
    \ b + c) * (a + b - c) * (a + c - b) * (b + c - a))\n    else:\n        return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4ddtw5bq.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp4ddtw5bq.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp4ddtw5bq.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp4ddtw5bq.py\"\
    , line 15, in triangle_area\n    return 0.5 * math.sqrt((a + b + c) * (a + b -\
    \ c) * (a + c - b) * (b + c - a))\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    p =\
    \ (a + b + c) / 2\n    area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    if\
    \ area < 0:\n        return -1\n    return round(area, 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9tv0f4b1.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9tv0f4b1.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp9tv0f4b1.py\", line\
    \ 23, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmp9tv0f4b1.py\"\
    , line 16, in triangle_area\n    if area < 0:\nTypeError: '<' not supported between\
    \ instances of 'complex' and 'int'\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    s =\
    \ (a + b + c) / 2\n    if a + b > c and a + c > b and b + c > a:\n        return\
    \ (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte_c_gl5.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpte_c_gl5.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpte_c_gl5.py\", line\
    \ 24, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ (a + b > c) and (a + c > b) and (b + c > a):\n        return round((a + b +\
    \ c) / 2, 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert\
    \ candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert\
    \ candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert\
    \ candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert\
    \ candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpijtv5bp6.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpijtv5bp6.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpijtv5bp6.py\", line\
    \ 23, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # your\
    \ code here\n    if((a+b)>c and (a+c)>b and (b+c)>a):\n        s=(a+b+c)/2\n \
    \       area=(s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area,2)\n    else:\n\
    \        return -1\n        \n \n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \    if (c>=a+b) or (b>=a+c) or (a>=b+c):\n        return -1\n    else:\n    \
    \    p = (a+b+c)/2\n        return round((p*(p-a)*(p-b)*(p-c))**0.5,2)\n     \
    \   \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n      \
    \  s = math.sqrt(p * (p - a) * (p - b) * (p - c))\n        return round(s, 2)\n\
    \    else:\n        return -1\n\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp50aansp4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp50aansp4.py\", line 35,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp50aansp4.py\", line\
    \ 24, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp50aansp4.py\"\
    , line 16, in triangle_area\n    s = math.sqrt(p * (p - a) * (p - b) * (p - c))\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \    \ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_52oy6b2.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_52oy6b2.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp_52oy6b2.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # if\
    \ a <= 0 or b <= 0 or c <= 0:\n    #     return -1\n    # if a + b <= c or a +\
    \ c <= b or b + c <= a:\n    #     return -1\n    # p = (a + b + c) / 2\n    #\
    \ return (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    return round(((a + b +\
    \ c) * (-a + b + c) * (a - b + c) * (a + b - c)) ** 0.5 / 4, 2) if a > 0 and b\
    \ > 0 and c > 0 and a + b > c and a + c > b and b + c > a else -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    p = (a + b +\
    \ c) / 2\n    return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvj5ti0cy.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpvj5ti0cy.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpvj5ti0cy.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpvj5ti0cy.py\"\
    , line 17, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    p = (a + b +\
    \ c) / 2\n    area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    return round(area,\
    \ 2)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ not is_triangle(a, b, c):\n        return -1\n    p = (a + b + c) / 2\n    return\
    \ round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxdlt86md.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpxdlt86md.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpxdlt86md.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpxdlt86md.py\"\
    , line 14, in triangle_area\n    if not is_triangle(a, b, c):\nNameError: name\
    \ 'is_triangle' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n      \
    \  return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n  \
    \      return -1\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpznrlbp4l.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpznrlbp4l.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpznrlbp4l.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpznrlbp4l.py\"\
    , line 16, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    s =\
    \ (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if\
    \ area > 0:\n        return round(area, 2)\n    else:\n        return -1\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmmhaqs1p.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpmmhaqs1p.py\", line 34,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpmmhaqs1p.py\", line\
    \ 24, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmpmmhaqs1p.py\"\
    , line 16, in triangle_area\n    if area > 0:\nTypeError: '>' not supported between\
    \ instances of 'complex' and 'int'\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ (a + b > c) and (a + c > b) and (b + c > a):\n        p = (a + b + c) / 2\n\
    \        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ sum(sorted([a, b, c])[:-1]) > sorted([a, b, c])[-1]:\n        s = (a + b + c)\
    \ / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n \
    \   else:\n        return -1\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq15_sbv3.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpq15_sbv3.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpq15_sbv3.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpq15_sbv3.py\"\
    , line 16, in triangle_area\n    return round(math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c)), 2)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    p =\
    \ (a + b + c) / 2\n    if a + b > c and a + c > b and b + c > a:\n        area\
    \ = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n\
    \    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n      \
    \  return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n  \
    \      return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu3l3xbz7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu3l3xbz7.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpu3l3xbz7.py\", line\
    \ 22, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpu3l3xbz7.py\"\
    , line 16, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # TODO:\
    \ implement this function\n    pass\n \n \ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg7n430ke.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpg7n430ke.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg7n430ke.py\", line\
    \ 19, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ not (a < b + c and b < a + c and c < a + b):\n        return -1\n    p = (a\
    \ + b + c) / 2\n    return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcqv7domt.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpcqv7domt.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpcqv7domt.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpcqv7domt.py\"\
    , line 17, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ (a + b > c) and (a + c > b) and (b + c > a):\n        S = (a + b + c) / 2\n\
    \        area = (S * (S - a) * (S - b) * (S - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n      \
    \  area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    return\
    \ round(a + b + c - max(a, b, c) - min(a, b, c), 2) if a + b > c else -1\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpviv5i2oz.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpviv5i2oz.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpviv5i2oz.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # YOUR\
    \ CODE HERE\n    if a + b > c and a + c > b and b + c > a:\n        return round(0.5\
    \ * a * b, 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert\
    \ candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert\
    \ candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert\
    \ candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert\
    \ candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpym39edvi.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpym39edvi.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpym39edvi.py\", line\
    \ 24, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    x =\
    \ (a + b + c) / 2\n    if x > a and x > b and x > c:\n        return (x * (x -\
    \ a) * (x - b) * (x - c)) ** 0.5\n    else:\n        return -1\ntriangle_area(3,\
    \ 4, 5)\n\ntriangle_area(1, 2, 10)\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprkyjdqbm.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmprkyjdqbm.py\", line 35,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmprkyjdqbm.py\", line\
    \ 26, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a+b > c and a+c > b and b+c > a:\n        s = (a+b+c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n\
    \        return round(area, 2)\n    else:\n        return -1\n\n\n@pytest.mark.parametrize(\n\
    \    \"a, b, c, expected\", [\n        (3, 4, 5, 6.0),\n        (1, 2, 10, -1),\n\
    \        (1, 2, 3, -1),\n        (3, 4, 6, -1),\n        (0, 0, 0, -1),\n    \
    \    (1, 2, 1, -1),\n        (9, 9, 18, 81.64),\n        (10, 12, 15, 54.0),\n\
    \        (1, 2, 2, 0.0),\n        (0, 0, 1, -1),\n        (5, 5, 5, 10.83),\n\
    \        (3, 3, 3, 4.71),\n        (20, 14, 14, 98.69),\n        (3, 4, 5, 6.0),\n\
    \        (1, 2, 10, -1),\n        (7, 8, 9, 26.83),\n        (10, 12, 15, 54.0),\n\
    \        (1, 2, 2, 0.0),\n        (0, 0, 1, -1),\n        (5, 5, 5, 10.83),\n\
    \        (3, 3, 3, 4.71),\n        (20, 14, 14, 98.69),\n        (20, 14, 14,\
    \ 98.69),\n        (5, 6, 7, 14.7),\n        (3, 4, 6, -1),\n        (0, 0, 0,\
    \ -1),\n        (1, 2, 1, -1),\n        (9, 9, 18, 81.64),\n        (1, 2, 10,\
    \ -1),\n        (1, 2, 3, -1),\n        (20, 14, 14, 98.69),\n        (10, 12,\
    \ 15, 54.0),\n        (7, 8,\ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8,\
    \ 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2,\
    \ 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6,\
    \ 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2,\
    \ 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpk_wdf6h_.py\", line 56\n    (7, 8,\n    ^\nSyntaxError:\
    \ '(' was never closed\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        return round(math.sqrt((a +\
    \ b + c) * (a + b - c) * (a + c - b) * (b + c - a)) / 4, 2)\n    else:\n     \
    \   return -1\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n \
    \   assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeir2hvme.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpeir2hvme.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpeir2hvme.py\", line\
    \ 19, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpeir2hvme.py\"\
    , line 15, in triangle_area\n    return round(math.sqrt((a + b + c) * (a + b -\
    \ c) * (a + c - b) * (b + c - a)) / 4, 2)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # sides\
    \ are too small to form a triangle\n    if a <= 0 or b <= 0 or c <= 0:\n     \
    \   return -1\n    # Any two sides must be equal to or larger than the third side\n\
    \    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    # Only\
    \ need to use the Heron's formula if the two conditions above were met\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n      \
    \  return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjed4lbom.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpjed4lbom.py\", line 38,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpjed4lbom.py\", line\
    \ 27, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpjed4lbom.py\"\
    , line 23, in triangle_area\n    return round(math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c)), 2)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    p = (a + b +\
    \ c) / 2\n    area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    return round(area,\
    \ 2)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    sides\
    \ = sorted([a, b, c])\n    if sides[0] + sides[1] > sides[2]:\n        s = sum(sides)\
    \ / 2\n        area = (s * (s - sides[0]) * (s - sides[1]) * (s - sides[2])) **\
    \ 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # Write\
    \ your code here\n    if(a<=0 or b<=0 or c<=0):\n        return -1\n    if(a+b>c\
    \ and a+c>b and b+c>a):\n        s=(a+b+c)/2\n        area=math.sqrt(s*(s-a)*(s-b)*(s-c))\n\
    \        return round(area,2)\n    else:\n        return -1\n    pass\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7n384zj.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpw7n384zj.py\", line 37,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpw7n384zj.py\", line\
    \ 26, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpw7n384zj.py\"\
    , line 19, in triangle_area\n    area=math.sqrt(s*(s-a)*(s-b)*(s-c))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # Check\
    \ triangle inequality\n    if a + b > c and a + c > b and b + c > a:\n       \
    \ # Calculate area\n        s = (a + b + c) / 2\n        area = (s * (s - a) *\
    \ (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n      \
    \  return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    #TODO:\
    \ Find the area of the triangle and round to 2 decimal points.\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjm90iffj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpjm90iffj.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpjm90iffj.py\", line\
    \ 19, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n      \
    \  return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n  \
    \      return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu0gy_5b9.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu0gy_5b9.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpu0gy_5b9.py\", line\
    \ 22, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpu0gy_5b9.py\"\
    , line 16, in triangle_area\n    return round(math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c)), 2)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # TODO:\
    \ Implement triangle_area function as described above\n    pass\n    if (a + b\
    \ > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n       \
    \ area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # Write\
    \ your code here\n    if a + b > c and a + c > b and b + c > a:\n        p = (a\
    \ + b + c) / 2\n        A = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n       \
    \ return round(A, 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    s =\
    \ (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return\
    \ round(area, 2) if area > 0 else -1\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkoysqqnd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpkoysqqnd.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpkoysqqnd.py\", line\
    \ 20, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmpkoysqqnd.py\"\
    , line 16, in triangle_area\n    return round(area, 2) if area > 0 else -1\nTypeError:\
    \ '>' not supported between instances of 'complex' and 'int'\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    s =\
    \ (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return\
    \ round(area, 2) if area > 0 else -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe_1nmgms.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpe_1nmgms.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpe_1nmgms.py\", line\
    \ 21, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmpe_1nmgms.py\"\
    , line 16, in triangle_area\n    return round(area, 2) if area > 0 else -1\nTypeError:\
    \ '>' not supported between instances of 'complex' and 'int'\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n      \
    \  area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    p =\
    \ (a + b + c) / 2\n    if a + b > c and a + c > b and b + c > a:\n        return\
    \ round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp77nfnqz8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp77nfnqz8.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp77nfnqz8.py\", line\
    \ 22, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp77nfnqz8.py\"\
    , line 16, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # TODO:\
    \ your code here\n    pass\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwtlhuk1u.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwtlhuk1u.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpwtlhuk1u.py\", line\
    \ 19, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ c < a + b and a < b + c and b < a + c:\n        p = (a + b + c) / 2\n      \
    \  area = sqrt(p * (p - a) * (p - b) * (p - c))\n        return round(area, 2)\n\
    \    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7d5utfon.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp7d5utfon.py\", line 34,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp7d5utfon.py\", line\
    \ 23, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp7d5utfon.py\"\
    , line 16, in triangle_area\n    area = sqrt(p * (p - a) * (p - b) * (p - c))\n\
    NameError: name 'sqrt' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # ===============\
    \ TODO: Your code here ===============\n    if (a + b > c) and (a + c > b) and\
    \ (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s\
    \ - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return\
    \ -1\n    # ===================================================\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    s =\
    \ (a + b + c) / 2\n    if a + b > c and a + c > b and b + c > a:\n        return\
    \ round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphbt1kpv4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmphbt1kpv4.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmphbt1kpv4.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmphbt1kpv4.py\"\
    , line 16, in triangle_area\n    return round(sqrt(s * (s - a) * (s - b) * (s\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # check\
    \ for a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n     \
    \   return -1\n    # calculate area of triangle\n    s = (a + b + c) / 2\n   \
    \ area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpunc6ui29.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpunc6ui29.py\", line 34,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpunc6ui29.py\", line\
    \ 23, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpunc6ui29.py\"\
    , line 19, in triangle_area\n    area = math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c))\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd_jnvoyi.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpd_jnvoyi.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpd_jnvoyi.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    sides\
    \ = [a, b, c]\n    sides.sort()\n    if sides[0] + sides[1] > sides[2]:\n    \
    \    p = 0.5 * sum(sides)\n        return round(math.sqrt(p * (p - sides[0]) *\
    \ (p - sides[1]) * (p - sides[2])), 2)\n    else:\n        return -1\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8cq9fq_w.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp8cq9fq_w.py\", line 35,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp8cq9fq_w.py\", line\
    \ 24, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp8cq9fq_w.py\"\
    , line 18, in triangle_area\n    return round(math.sqrt(p * (p - sides[0]) * (p\
    \ - sides[1]) * (p - sides[2])), 2)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n      \
    \  area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n \n \n \ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert\
    \ candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert\
    \ candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert\
    \ candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert\
    \ candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    sides\
    \ = [a, b, c]\n    sides.sort()\n    a, b, c = sides\n    if a + b <= c:\n   \
    \     return -1\n    s = sum(sides) / 2\n    return round(sqrt(s * (s - a) * (s\
    \ - b) * (s - c)), 2)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5)\
    \ == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3)\
    \ == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3)\
    \ == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10)\
    \ == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfovms2im.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpfovms2im.py\", line 35,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpfovms2im.py\", line\
    \ 24, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpfovms2im.py\"\
    , line 20, in triangle_area\n    return round(sqrt(s * (s - a) * (s - b) * (s\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    s =\
    \ (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if\
    \ area > 0:\n        return round(area, 2)\n    else:\n        return -1\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmmhaqs1p.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpmmhaqs1p.py\", line 34,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpmmhaqs1p.py\", line\
    \ 24, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmpmmhaqs1p.py\"\
    , line 16, in triangle_area\n    if area > 0:\nTypeError: '>' not supported between\
    \ instances of 'complex' and 'int'\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    return\
    \ round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2) if (a + b > c and b + c\
    \ > a and a + c > b) else -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpafp48lvf.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpafp48lvf.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpafp48lvf.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpafp48lvf.py\"\
    , line 14, in triangle_area\n    return round(math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c)), 2) if (a + b > c and b + c > a and a + c > b) else -1\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # for\
    \ a, b, c in zip(*arr):\n    #     x = sum(arr) - a - b - c\n    #     if a +\
    \ b > x and a + c > b and b + c > a:\n    #         return round(math.sqrt(x *\
    \ (x - a) * (x - b) * (x - c)), 2)\n    # return -1\n    a, b, c = sorted([a,\
    \ b, c])\n    return round(math.sqrt(a * (a - b) * (a - c) * (a - c)), 2) if a\
    \ + b > c else -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxa_jw3ru.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxa_jw3ru.py\", line 35,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpxa_jw3ru.py\", line\
    \ 24, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpxa_jw3ru.py\"\
    , line 20, in triangle_area\n    return round(math.sqrt(a * (a - b) * (a - c)\
    \ * (a - c)), 2) if a + b > c else -1\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # TODO:\
    \ Fill in code below this comment and above the \"return\" statement.\n    p =\
    \ (a + b + c) / 2\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n    \
    \    return -1\n    return math.sqrt(p * (p - a) * (p - b) * (p - c))\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpka1f9oiy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpka1f9oiy.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpka1f9oiy.py\", line\
    \ 22, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpka1f9oiy.py\"\
    , line 18, in triangle_area\n    return math.sqrt(p * (p - a) * (p - b) * (p -\
    \ c))\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # intialize\
    \ default return value\n    area = -1\n\n    # TODO: use a if statment to determine\
    \ if the sides will make a valid\n    # triangle.\n    if(a+b>c and a+c>b and\
    \ b+c>a):\n      # when a valid triangle, this is the formula to calculate the\
    \ area:\n      area = (b * a * sin(c)) / 2\n\n    # TODO: return area rounded\
    \ to 2 decimal points\n    return round(area, 2)\n\ndef check(candidate):\n  \
    \  assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n  \
    \  assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpun15e4oq.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpun15e4oq.py\", line 38,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpun15e4oq.py\", line\
    \ 27, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpun15e4oq.py\"\
    , line 21, in triangle_area\n    area = (b * a * sin(c)) / 2\nNameError: name\
    \ 'sin' is not defined. Did you mean: 'bin'?\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n\
    \        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n\
    \        return -1\n\n\n@pytest.mark.skip\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5bomp4u.py\", line\
    \ 21, in <module>\n    @pytest.mark.skip\nNameError: name 'pytest' is not defined.\
    \ Did you mean: 'bytes'?\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a < b + c and b < a + c and c < a + b:\n        s = (a + b + c) / 2\n      \
    \  a = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(a, 2)\n\
    \    else:\n        return -1\n    \n    # return -1 if not ((a + b > c) and (a\
    \ + c > b) and (b + c > a)) else \\\n    #     round(((a + b + c) / 2) * (1 -\
    \ (a + b + c) / 2 + a) * (1 - (a + b + c) / 2 + b) * (1 - (a + b + c) / 2 + c),\
    \ 2)\n    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n  \
    \  assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n \
    \   assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n \
    \   assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # Write\
    \ your code here\n    s = 0.5 * (a + b + c)\n    area = math.sqrt(s * (s - a)\
    \ * (s - b) * (s - c))\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n\
    \        return -1\n    else:\n        return round(area, 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbmgqhs4m.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpbmgqhs4m.py\", line 35,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpbmgqhs4m.py\", line\
    \ 24, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpbmgqhs4m.py\"\
    , line 16, in triangle_area\n    area = math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c))\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    return\
    \ -1 if (a + b < c) or (a + c < b) or (b + c < a) else round(sqrt((a + b + c)\
    \ * (a + b - c) * (a - b + c) * (-a + b + c)) / 4, 2)\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp85uzuyk2.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp85uzuyk2.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp85uzuyk2.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp85uzuyk2.py\"\
    , line 14, in triangle_area\n    return -1 if (a + b < c) or (a + c < b) or (b\
    \ + c < a) else round(sqrt((a + b + c) * (a + b - c) * (a - b + c) * (-a + b +\
    \ c)) / 4, 2)\nNameError: name 'sqrt' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    p =\
    \ (a + b + c) / 2\n    if a + b > c and a + c > b and b + c > a:\n        return\
    \ round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n        return\
    \ -1\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7xkjspue.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp7xkjspue.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp7xkjspue.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp7xkjspue.py\"\
    , line 16, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n\
    \        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return float(round(area,\
    \ 2))\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    a,\
    \ b, c = sorted([a, b, c])\n    if a + b <= c:\n        return -1\n    p = (a\
    \ + b + c) / 2\n    return (p * (p - a) * (p - b) * (p - c)) ** 0.5\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp88oeiteq.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp88oeiteq.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp88oeiteq.py\", line\
    \ 24, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # Get\
    \ the perimeter of the triangle\n    p = (a + b + c) / 2\n    # Get the area using\
    \ Hero's formula\n    # If a, b, c can form a triangle, then the below condition\
    \ should hold true\n    # and the sqrt() function should not return any error\n\
    \    # If the condition fails, the sqrt() function should raise a ValueError\n\
    \    # and hence we return -1 from the function\n    try:\n        area = (p *\
    \ (p - a) * (p - b) * (p - c)) ** 0.5\n    except ValueError:\n        return\
    \ -1\n    else:\n        return round(area, 2)\n\n\ndef check(candidate):\n  \
    \  assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n  \
    \  assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwvha_n5a.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpwvha_n5a.py\", line 41,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpwvha_n5a.py\", line\
    \ 31, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmpwvha_n5a.py\"\
    , line 26, in triangle_area\n    return round(area, 2)\nTypeError: type complex\
    \ doesn't define __round__ method\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ is_triangle(a, b, c):\n        p = (a + b + c) / 2\n        area = math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c))\n        return round(area, 2)\n    else:\n \
    \       return -1\n\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5)\
    \ == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3)\
    \ == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3)\
    \ == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10)\
    \ == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv7554idi.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpv7554idi.py\", line 35,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpv7554idi.py\", line\
    \ 24, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpv7554idi.py\"\
    , line 14, in triangle_area\n    if is_triangle(a, b, c):\nNameError: name 'is_triangle'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # TODO:\
    \ Implement this function\n\n    pass\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmx564s47.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpmx564s47.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpmx564s47.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n      \
    \  area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    sorted_sides\
    \ = sorted([a, b, c])\n    if sorted_sides[0] + sorted_sides[1] > sorted_sides[2]:\n\
    \        return (sorted_sides[0] + sorted_sides[1] + sorted_sides[2])/2\n    else:\n\
    \        return -1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4uoynn5.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmpw4uoynn5.py\", line 55,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpw4uoynn5.py\", line\
    \ 46, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd_jnvoyi.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpd_jnvoyi.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpd_jnvoyi.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n      \
    \  return round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n       \
    \ return -1\n    \ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6uaiv_w.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpy6uaiv_w.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpy6uaiv_w.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpy6uaiv_w.py\"\
    , line 16, in triangle_area\n    return round(sqrt(s * (s - a) * (s - b) * (s\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # your\
    \ code here\n    if a+b>c and a+c>b and b+c>a:\n        return round(((a+b+c)/2)*(((a+b+c)/2)-a)*(((a+b+c)/2)-b)*(((a+b+c)/2)-c),2)**0.5\n\
    \    else:\n        return -1\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert\
    \ candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert\
    \ candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert\
    \ candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert\
    \ candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa5bofpgh.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpa5bofpgh.py\", line 34,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpa5bofpgh.py\", line\
    \ 25, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ (a + b) > c and (a + c) > b and (b + c) > a:\n        p = (a + b + c) / 2\n\
    \        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd_jnvoyi.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpd_jnvoyi.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpd_jnvoyi.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n      \
    \  return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2dy1jr43.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2dy1jr43.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp2dy1jr43.py\", line\
    \ 24, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ not is_triangle(a, b, c):\n        return -1\n\n    p = (a + b + c) / 2\n  \
    \  return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7edpyw7z.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp7edpyw7z.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp7edpyw7z.py\", line\
    \ 22, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp7edpyw7z.py\"\
    , line 14, in triangle_area\n    if not is_triangle(a, b, c):\nNameError: name\
    \ 'is_triangle' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a+b>c and a+c>b and b+c>a:\n        p = (a+b+c)/2\n        area = (p*(p-a)*(p-b)*(p-c))**0.5\n\
    \        return round(area,2)\n    else:\n        return -1\ntriangle_area(5,5,5)\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a < b + c and b < a + c and c < a + b:\n        s = (a + b + c) / 2\n      \
    \  return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n  \
    \      return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4__nn0b_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4__nn0b_.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp4__nn0b_.py\", line\
    \ 22, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp4__nn0b_.py\"\
    , line 16, in triangle_area\n    return round(math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c)), 2)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        return round(0.5 * math.sqrt((a\
    \ + b + c) * (a + b - c) * (a + c - b) * (b + c - a)), 2)\n    else:\n       \
    \ return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplkru3dpw.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmplkru3dpw.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmplkru3dpw.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmplkru3dpw.py\"\
    , line 15, in triangle_area\n    return round(0.5 * math.sqrt((a + b + c) * (a\
    \ + b - c) * (a + c - b) * (b + c - a)), 2)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    return round(sqrt((a\
    \ + b + c) * (a + b - c) * (a - b + c) * (-a + b + c)) / 4, 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptnnq1zfw.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmptnnq1zfw.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmptnnq1zfw.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmptnnq1zfw.py\"\
    , line 16, in triangle_area\n    return round(sqrt((a + b + c) * (a + b - c) *\
    \ (a - b + c) * (-a + b + c)) / 4, 2)\nNameError: name 'sqrt' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    ...\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppzm4jc66.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmppzm4jc66.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmppzm4jc66.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n      \
    \  return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n  \
    \      return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu0gy_5b9.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu0gy_5b9.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpu0gy_5b9.py\", line\
    \ 22, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpu0gy_5b9.py\"\
    , line 16, in triangle_area\n    return round(math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c)), 2)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n      \
    \  area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    s =\
    \ (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if\
    \ area > 0:\n        return round(area, 2)\n    else:\n        return -1\n\n\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo313c1g1.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpo313c1g1.py\", line 35,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpo313c1g1.py\", line\
    \ 25, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmpo313c1g1.py\"\
    , line 16, in triangle_area\n    if area > 0:\nTypeError: '>' not supported between\
    \ instances of 'complex' and 'int'\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # if\
    \ a+b > c and a+c > b and b+c > a:\n    #     p = (a+b+c)/2\n    #     area =\
    \ (p*(p-a)*(p-b)*(p-c))**0.5\n    #     return round(area, 2)\n    # else:\n \
    \   #     return -1\n    if not is_triangle(a, b, c):\n        return -1\n   \
    \ p = (a+b+c)/2\n    area = (p*(p-a)*(p-b)*(p-c))**0.5\n    return round(area,\
    \ 2)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_u210pbb.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp_u210pbb.py\", line 39,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp_u210pbb.py\", line\
    \ 28, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp_u210pbb.py\"\
    , line 20, in triangle_area\n    if not is_triangle(a, b, c):\nNameError: name\
    \ 'is_triangle' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n      \
    \  return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n  \
    \      return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu0gy_5b9.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu0gy_5b9.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpu0gy_5b9.py\", line\
    \ 22, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpu0gy_5b9.py\"\
    , line 16, in triangle_area\n    return round(math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c)), 2)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ (a+b>c) and (a+c>b) and (b+c>a):\n        p = 0.5*(a+b+c)\n        area = (p*(p-a)*(p-b)*(p-c))**0.5\n\
    \        return round(area, 2)\n    else:\n        return -1\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    p = (a + b +\
    \ c) / 2\n    return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvj5ti0cy.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpvj5ti0cy.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpvj5ti0cy.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpvj5ti0cy.py\"\
    , line 17, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a <= 0 or b <= 0 or c <= 0:\n        return -1\n    if a + b <= c or a + c <=\
    \ b or b + c <= a:\n        return -1\n    return round(math.sqrt((a + b + c)\
    \ * (-a + b + c) * (a - b + c) * (a + b - c)) / 4, 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphwq2bafa.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmphwq2bafa.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmphwq2bafa.py\", line\
    \ 22, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmphwq2bafa.py\"\
    , line 18, in triangle_area\n    return round(math.sqrt((a + b + c) * (-a + b\
    \ + c) * (a - b + c) * (a + b - c)) / 4, 2)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    p =\
    \ (a + b + c) / 2\n    if (p - a) * (p - b) * (p - c) <= 0:\n        return -1\n\
    \    return sqrt(p * (p - a) * (p - b) * (p - c))\n    \n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx2xldkk7.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpx2xldkk7.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpx2xldkk7.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpx2xldkk7.py\"\
    , line 17, in triangle_area\n    return sqrt(p * (p - a) * (p - b) * (p - c))\n\
    NameError: name 'sqrt' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # Task\
    \ 1.2\n    pass\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_rrdtzui.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_rrdtzui.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp_rrdtzui.py\", line\
    \ 19, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # YOUR\
    \ CODE HERE\n    return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp92zk2yio.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp92zk2yio.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp92zk2yio.py\", line\
    \ 19, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    def\
    \ valid_triangle(a, b, c):\n        \"\"\"\n        Return True if a, b, c form\
    \ a valid triangle.\n        Three sides make a valid triangle when the sum of\
    \ any two sides is greater \n        than the third side.\n        \"\"\"\n  \
    \      return ((a + b) > c) and ((a + c) > b) and ((b + c) > a)\n\n    if valid_triangle(a,\
    \ b, c):\n        #\n        # Implement Heron's formula for area of a triangle\n\
    \        # where:\n        # s = (a + b + c) / 2\n        # area = sqrt(s(s -\
    \ a)(s - b)(s - c))\n        #\n        s = (a + b + c) / 2\n        area = (s\
    \ * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    sides\
    \ = [a, b, c]\n    sides.sort()\n    if (sides[0] + sides[1]) > sides[2]:\n  \
    \      s = sum(sides)/2\n        return round(sqrt(s*(s-sides[0])*(s-sides[1])*(s-sides[2])),\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpszj28co9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpszj28co9.py\", line 35,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpszj28co9.py\", line\
    \ 24, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpszj28co9.py\"\
    , line 18, in triangle_area\n    return round(sqrt(s*(s-sides[0])*(s-sides[1])*(s-sides[2])),\
    \ 2)\nNameError: name 'sqrt' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    s =\
    \ (a + b + c) / 2\n    return round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\
    \ if a + b > c and b + c > a and a + c > b else -1\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjyn2ogwv.py\", line\
    \ 255, in <module>\n    test_check()\n  File \"/tmp/tmpjyn2ogwv.py\", line 253,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpjyn2ogwv.py\", line\
    \ 242, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpjyn2ogwv.py\"\
    , line 15, in triangle_area\n    return round(sqrt(s * (s - a) * (s - b) * (s\
    \ - c)), 2) if a + b > c and b + c > a and a + c > b else -1\nNameError: name\
    \ 'sqrt' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # check\
    \ if valid\n    if (a + b) > c and (a + c) > b and (b + c) > a:\n        s = (a\
    \ + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    \
    \    return round(area, 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    return\
    \ -1\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn8iunqyw.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpn8iunqyw.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpn8iunqyw.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # Your\
    \ code here\n    pass\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5)\
    \ == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3)\
    \ == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3)\
    \ == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10)\
    \ == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgoo12b53.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpgoo12b53.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpgoo12b53.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ (a + b > c) and (a + c > b) and (b + c > a):\n        p = (a + b + c) / 2\n\
    \        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n      \
    \  return (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    else:\n        return\
    \ -1\n\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_5kua24p.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp_5kua24p.py\", line 34,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp_5kua24p.py\", line\
    \ 25, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n    \
    \    p = (a + b + c) / 2\n        area = math.sqrt(p * (p - a) * (p - b) * (p\
    \ - c))\n        return round(area, 2)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert\
    \ candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert\
    \ candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert\
    \ candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert\
    \ candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nc5uynr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp9nc5uynr.py\", line 34,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp9nc5uynr.py\", line\
    \ 23, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp9nc5uynr.py\"\
    , line 18, in triangle_area\n    area = math.sqrt(p * (p - a) * (p - b) * (p -\
    \ c))\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # you\
    \ can check if 3 sides can make a triangle using\n    # the rule: the sum of any\
    \ two sides must be greater than the third side\n    if a + b > c and a + c >\
    \ b and b + c > a:\n        p = (a + b + c) / 2\n        return round(math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c)), 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_7n5aw7z.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_7n5aw7z.py\", line 35,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp_7n5aw7z.py\", line\
    \ 24, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp_7n5aw7z.py\"\
    , line 18, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n      \
    \  A = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(A, 2)\n\
    \    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n\
    \        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4_zdd2_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw4_zdd2_.py\", line 34,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpw4_zdd2_.py\", line\
    \ 23, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpw4_zdd2_.py\"\
    , line 16, in triangle_area\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n\
    NameError: name 'sqrt' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # ensure\
    \ no side is greater than the sum of the other two\n    if a > b + c or b > a\
    \ + c or c > a + b:\n        return -1\n    # Heron's formula to calculate area\n\
    \    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\
    \    return round(area, 2)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnsxgnnhy.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpnsxgnnhy.py\", line 35,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpnsxgnnhy.py\", line\
    \ 24, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpnsxgnnhy.py\"\
    , line 19, in triangle_area\n    area = math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c))\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # TODO:\
    \ Please write your code here\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqiy4qoiq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqiy4qoiq.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpqiy4qoiq.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # Your\
    \ code here:\n    \n    # If a, b and c are not int, return -1\n    if type(a)\
    \ != int or type(b) != int or type(c) != int:\n        return -1\n    \n    #\
    \ If any of a, b and c is negative, return -1\n    if a < 0 or b < 0 or c < 0:\n\
    \        return -1\n    \n    # If the sum of any two sides is smaller than the\
    \ third side, return -1\n    if a + b < c or a + c < b or b + c < a:\n       \
    \ return -1\n    \n    # Otherwise, return the area\n    perimeter = (a + b +\
    \ c) / 2\n    area = math.sqrt(perimeter * (perimeter - a) * (perimeter - b) *\
    \ (perimeter - c))\n    return round(area, 2)\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8,\
    \ 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2,\
    \ 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6,\
    \ 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2,\
    \ 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwxstoqdu.py\", line\
    \ 69, in <module>\n    test_check()\n  File \"/tmp/tmpwxstoqdu.py\", line 67,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpwxstoqdu.py\", line\
    \ 56, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpwxstoqdu.py\"\
    , line 30, in triangle_area\n    area = math.sqrt(perimeter * (perimeter - a)\
    \ * (perimeter - b) * (perimeter - c))\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    s =\
    \ (a + b + c) / 2.0\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n   \
    \ if area <= 0:\n        return -1\n    return round(area, 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm296sd6c.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpm296sd6c.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpm296sd6c.py\", line\
    \ 23, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmpm296sd6c.py\"\
    , line 16, in triangle_area\n    if area <= 0:\nTypeError: '<=' not supported\
    \ between instances of 'complex' and 'int'\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    s =\
    \ (a + b + c) / 2.0\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n   \
    \ if area <= 0:\n        return -1\n    return round(area, 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm296sd6c.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpm296sd6c.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpm296sd6c.py\", line\
    \ 23, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmpm296sd6c.py\"\
    , line 16, in triangle_area\n    if area <= 0:\nTypeError: '<=' not supported\
    \ between instances of 'complex' and 'int'\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        area = (a + b + c) / 2\n   \
    \     return (area * (area - a) * (area - b) * (area - c)) ** 0.5\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqezxti33.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpqezxti33.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpqezxti33.py\", line\
    \ 23, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpexh02soe.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpexh02soe.py\", line 27,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpexh02soe.py\", line\
    \ 16, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a < b + c and b < a + c and c < a + b:\n        p = (a + b + c) / 2\n      \
    \  s = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(s, 2)\n\
    \    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n      \
    \  s = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return float(\"{:.2f}\"\
    .format(s))\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert\
    \ candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert\
    \ candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert\
    \ candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert\
    \ candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    return\
    \ -1\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn8iunqyw.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpn8iunqyw.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpn8iunqyw.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n      \
    \  area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    return\
    \ -1\n    \ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfuhgky66.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfuhgky66.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpfuhgky66.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a+b>c and a+c>b and b+c>a:\n        s = (a+b+c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n\
    \        return round(area,2)\n    else:\n        return -1\n\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # check\
    \ if the three sides can form a valid triangle\n    if is_valid_triangle(a, b,\
    \ c):\n        # Heron's formula for the area of a triangle\n        # Source:\
    \ https://en.wikipedia.org/wiki/Heron%27s_formula\n        p = (a + b + c) / 2\n\
    \        area = math.sqrt(p * (p - a) * (p - b) * (p - c))\n        return round(area,\
    \ 2)\n    return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5)\
    \ == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3)\
    \ == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3)\
    \ == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10)\
    \ == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7o_3kad.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpk7o_3kad.py\", line 36,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpk7o_3kad.py\", line\
    \ 25, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpk7o_3kad.py\"\
    , line 15, in triangle_area\n    if is_valid_triangle(a, b, c):\nNameError: name\
    \ 'is_valid_triangle' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # TODO:\
    \ Implement this\n    x = [a, b, c]\n    x.sort()\n    if x[0] + x[1] > x[2]:\n\
    \        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c))\
    \ ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    a,\
    \ b, c = sorted([a, b, c])\n    return -1 if a + b <= c else (a + b + c) / 2\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuzy2zybp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpuzy2zybp.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpuzy2zybp.py\", line\
    \ 21, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n      \
    \  area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return float(\"{0:.2f}\"\
    .format(area))\n    else:\n        return -1\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert\
    \ candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert\
    \ candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert\
    \ candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert\
    \ candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # your\
    \ code here\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b\
    \ + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return\
    \ round(area, 2)\n    else:\n        return -1\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert\
    \ candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert\
    \ candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert\
    \ candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert\
    \ candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    #YOUR\
    \ CODE HERE\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n\
    \    if (a + b > c) and (a + c > b) and (b + c > a):\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    sides\
    \ = [a, b, c]\n    sides.sort()\n    if sides[0] + sides[1] > sides[2]:\n    \
    \    s = sum(sides) / 2\n        return round(sqrt(s * (s - sides[0]) * (s - sides[1])\
    \ * (s - sides[2])), 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc4whjmja.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpc4whjmja.py\", line 35,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpc4whjmja.py\", line\
    \ 24, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpc4whjmja.py\"\
    , line 18, in triangle_area\n    return round(sqrt(s * (s - sides[0]) * (s - sides[1])\
    \ * (s - sides[2])), 2)\nNameError: name 'sqrt' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    p =\
    \ (a + b + c) / 2\n    if p > a and p > b and p > c:\n        return round(sqrt(p\
    \ * (p - a) * (p - b) * (p - c)), 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnsb8p6rt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpnsb8p6rt.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpnsb8p6rt.py\", line\
    \ 22, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpnsb8p6rt.py\"\
    , line 16, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # Triangle\
    \ inequality (https://en.wikipedia.org/wiki/Triangle_inequality):\n    # 'The\
    \ sum of the lengths of any two sides of a triangle is greater than or equal to\
    \ \n    # the length of the third side'\n    # If a <= b + c, then we can form\
    \ a triangle with sides a, b, c.\n    # If a > b + c, then we cannot form a triangle\
    \ with sides a, b, c.\n    if (a <= b + c) and (b <= a + c) and (c <= a + b):\n\
    \        # Compute the semi-perimeter of the triangle.\n        s = (a + b + c)\
    \ / 2\n        # Compute the area using Heron's formula.\n        area = (s *\
    \ (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n\
    \        return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk3o5oyej.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpk3o5oyej.py\", line 41,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpk3o5oyej.py\", line\
    \ 34, in check\n    assert candidate(1, 2, 3) == -1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    p = (a + b +\
    \ c) / 2\n    return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnps9bpa3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpnps9bpa3.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpnps9bpa3.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpnps9bpa3.py\"\
    , line 17, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # Write\
    \ your code here\n    p = (a + b + c) / 2\n    area = (p * (p - a) * (p - b) *\
    \ (p - c)) ** 0.5\n    if area > 0:\n        return round(area, 2)\n    else:\n\
    \        return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1p5au9ld.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp1p5au9ld.py\", line 35,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp1p5au9ld.py\", line\
    \ 25, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmp1p5au9ld.py\"\
    , line 17, in triangle_area\n    if area > 0:\nTypeError: '>' not supported between\
    \ instances of 'complex' and 'int'\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ not(a+b>c and a+c>b and b+c>a):\n        return -1\n    p = (a+b+c)/2\n    area\
    \ = (p*(p-a)*(p-b)*(p-c))**0.5\n    return round(area, 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # YOUR\
    \ CODE HERE\n    if (a+b) < c or (a+c) < b or (b+c) < a:\n        return -1\n\
    \    s = (a+b+c)/2\n    area = (s*(s-a)*(s-b)*(s-c))**0.5\n    return round(area,\
    \ 2)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmmqqu9nb.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpmmqqu9nb.py\", line 34,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpmmqqu9nb.py\", line\
    \ 27, in check\n    assert candidate(1, 2, 3) == -1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ (a + b > c) and (a + c > b) and (b + c > a):\n        # Using Heron's formula\
    \ to find area of triangle\n        s = (a + b + c) / 2\n        area = (s * (s\
    \ - a) * (s - b) * (s - c)) ** 0.5\n        return area\n    else:\n        return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl8rtrvnn.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpl8rtrvnn.py\", line 35,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpl8rtrvnn.py\", line\
    \ 26, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n      \
    \  area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps8242c50.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmps8242c50.py\", line 34,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmps8242c50.py\", line\
    \ 23, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmps8242c50.py\"\
    , line 16, in triangle_area\n    area = math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c))\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    s =\
    \ (a + b + c) / 2\n    if s - a <= 0 or s - b <= 0 or s - c <= 0:\n        return\
    \ -1\n    return round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcl_2bdca.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpcl_2bdca.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpcl_2bdca.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpcl_2bdca.py\"\
    , line 17, in triangle_area\n    return round(sqrt(s * (s - a) * (s - b) * (s\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    semi_perimeter\
    \ = (a + b + c) / 2\n    if a + b <= c or a + c <= b or b + c <= a:\n        return\
    \ -1\n    else:\n        return (semi_perimeter * (semi_perimeter - a) * (semi_perimeter\
    \ - b) * (semi_perimeter - c)) ** 0.5\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkg_pbnat.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpkg_pbnat.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpkg_pbnat.py\", line\
    \ 24, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # YOUR\
    \ CODE HERE\n    side = [a, b, c]\n    side.sort()\n    if side[0] + side[1] >\
    \ side[2]:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b)\
    \ * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return\
    \ -1\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # Calculate\
    \ the semi-perimeter\n    s = (a + b + c) / 2\n    # Calculate the area using\
    \ Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    if area > 0:\n\
    \        return round(area, 2)\n    else:\n        return -1\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo5eqtlrg.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpo5eqtlrg.py\", line 35,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpo5eqtlrg.py\", line\
    \ 25, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmpo5eqtlrg.py\"\
    , line 18, in triangle_area\n    if area > 0:\nTypeError: '>' not supported between\
    \ instances of 'complex' and 'int'\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ (a+b > c) and (a+c > b) and (b+c > a):\n        return round((((a+b+c)/2)*(((a+b+c)/2)-a)*(((a+b+c)/2)-b)*(((a+b+c)/2)-c))**(1/2),\
    \ 2)\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n      \
    \  return round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n       \
    \ return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_d4rfloa.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp_d4rfloa.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp_d4rfloa.py\", line\
    \ 22, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp_d4rfloa.py\"\
    , line 16, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ not is_triangle(a, b, c):\n        return -1\n    s = 0.5 * (a + b + c)\n  \
    \  return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc12proeo.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpc12proeo.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpc12proeo.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpc12proeo.py\"\
    , line 14, in triangle_area\n    if not is_triangle(a, b, c):\nNameError: name\
    \ 'is_triangle' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    p =\
    \ (a + b + c) / 2\n    area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    if\
    \ p - a <= 0 or p - b <= 0 or p - c <= 0:\n        return -1\n    return round(area,\
    \ 2)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ not a or not b or not c:\n        return -1\n    return round(sqrt(((a + b +\
    \ c) / 2) * (((a + b + c) / 2) - a) * (((a + b + c) / 2) - b) * (((a + b + c)\
    \ / 2) - c)), 2)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvpql_n3f.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpvpql_n3f.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpvpql_n3f.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpvpql_n3f.py\"\
    , line 16, in triangle_area\n    return round(sqrt(((a + b + c) / 2) * (((a +\
    \ b + c) / 2) - a) * (((a + b + c) / 2) - b) * (((a + b + c) / 2) - c)), 2)\n\
    NameError: name 'sqrt' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    max_side\
    \ = max(a, b, c)\n    min_side = min(a, b, c)\n    mid_side = (a + b + c) - max_side\
    \ - min_side\n    if min_side + mid_side > max_side:\n        return round(0.5\
    \ * min_side * mid_side, 2)\n    else:\n        return -1\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpur90exay.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpur90exay.py\", line 34,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpur90exay.py\", line\
    \ 25, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b +\
    \ c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area,\
    \ 2)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    assert\
    \ a > 0, 'side a length must be greater than 0'\n    assert b > 0, 'side b length\
    \ must be greater than 0'\n    assert c > 0, 'side c length must be greater than\
    \ 0'\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n\
    \        return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8snb0sns.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp8snb0sns.py\", line 36,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp8snb0sns.py\", line\
    \ 25, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp8snb0sns.py\"\
    , line 19, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n      \
    \  area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ (a + b > c) and (a + c > b) and (b + c > a):\n        p = (a + b + c) / 2\n\
    \        area = sqrt(p * (p - a) * (p - b) * (p - c))\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfvnj79v8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpfvnj79v8.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpfvnj79v8.py\", line\
    \ 22, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpfvnj79v8.py\"\
    , line 16, in triangle_area\n    area = sqrt(p * (p - a) * (p - b) * (p - c))\n\
    NameError: name 'sqrt' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n      \
    \  return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n  \
    \      return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu3l3xbz7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu3l3xbz7.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpu3l3xbz7.py\", line\
    \ 22, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpu3l3xbz7.py\"\
    , line 16, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ not is_triangle(a, b, c):\n        return -1\n    p = sum((a, b, c)) / 2\n \
    \   area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    return round(area, 2)\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfxvo1o_s.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpfxvo1o_s.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpfxvo1o_s.py\", line\
    \ 22, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpfxvo1o_s.py\"\
    , line 14, in triangle_area\n    if not is_triangle(a, b, c):\nNameError: name\
    \ 'is_triangle' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # Write\
    \ your code here\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm5ecwu6_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm5ecwu6_.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpm5ecwu6_.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    return\
    \ round(math.sqrt(s(a, b, c) * (s(a, b, c) - a) * (s(a, b, c) - b) * (s(a, b,\
    \ c) - c)), 2) if s(a, b, c) > max(a, b, c) else -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0tdtickr.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0tdtickr.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp0tdtickr.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp0tdtickr.py\"\
    , line 14, in triangle_area\n    return round(math.sqrt(s(a, b, c) * (s(a, b,\
    \ c) - a) * (s(a, b, c) - b) * (s(a, b, c) - c)), 2) if s(a, b, c) > max(a, b,\
    \ c) else -1\nNameError: name 's' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    #if\
    \ a+b > c and a+c > b and b+c > a:\n    #    p = (a+b+c)/2\n    #    return (p*(p-a)*(p-b)*(p-c))**0.5\n\
    \    #else:\n    #    return -1\n    if (a+b > c and a+c > b and b+c > a):\n \
    \       area = ((a+b+c)*(a+b-c)*(a+c-b)*(b+c-a))**0.5 / 4\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    a,\
    \ b, c = sorted([a, b, c])\n    if a + b > c:\n        s = 0.5 * (a + b + c)\n\
    \        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmtv0245l.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpmtv0245l.py\", line 35,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpmtv0245l.py\", line\
    \ 24, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpmtv0245l.py\"\
    , line 17, in triangle_area\n    area = math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c))\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ (a < b + c) and (b < a + c) and (c < a + b):\n        p = (a + b + c) / 2\n\
    \        return round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n \
    \       return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygskubx0.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpygskubx0.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpygskubx0.py\", line\
    \ 22, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpygskubx0.py\"\
    , line 16, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a <= 0 or b <= 0 or c <= 0:\n        return -1\n    if a + b <= c or a + c <=\
    \ b or b + c <= a:\n        return -1\n    p = (a + b + c) / 2\n    return sqrt(p\
    \ * (p - a) * (p - b) * (p - c))\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfbip81oo.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpfbip81oo.py\", line 34,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpfbip81oo.py\", line\
    \ 23, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpfbip81oo.py\"\
    , line 19, in triangle_area\n    return sqrt(p * (p - a) * (p - b) * (p - c))\n\
    NameError: name 'sqrt' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    a,\
    \ b, c = sorted([a, b, c])\n    if a + b <= c:\n        return -1\n    p = (a\
    \ + b + c) / 2\n    return math.sqrt(p * (p - a) * (p - b) * (p - c))\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl09xu7jf.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpl09xu7jf.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpl09xu7jf.py\", line\
    \ 22, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpl09xu7jf.py\"\
    , line 18, in triangle_area\n    return math.sqrt(p * (p - a) * (p - b) * (p -\
    \ c))\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ (a+b) > c and (a+c) > b and (b+c) > a:\n        p = (a+b+c)/2\n        area\
    \ = (p*(p-a)*(p-b)*(p-c))**0.5\n        return round(area, 2)\n    else:\n   \
    \     return -1\ntriangle_area(1, 2, 10)\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert\
    \ candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert\
    \ candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert\
    \ candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert\
    \ candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \    \n    \ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n   \
    \ assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n  \
    \  assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n  \
    \  assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq3r0jlj8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpq3r0jlj8.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpq3r0jlj8.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \ \n \ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiaobx6x_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpiaobx6x_.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpiaobx6x_.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    sides\
    \ = sorted([a, b, c])\n    if sides[0] + sides[1] > sides[2]:\n        p = sum(sides)\
    \ / 2\n        area = sqrt(p * (p - sides[0]) * (p - sides[1]) * (p - sides[2]))\n\
    \        return round(area, 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptbcw4yk4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptbcw4yk4.py\", line 35,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmptbcw4yk4.py\", line\
    \ 24, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmptbcw4yk4.py\"\
    , line 17, in triangle_area\n    area = sqrt(p * (p - sides[0]) * (p - sides[1])\
    \ * (p - sides[2]))\nNameError: name 'sqrt' is not defined\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    p =\
    \ (a + b + c) / 2\n    a = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    if a\
    \ == 0:\n        return -1\n    return round(a, 2)\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ###########################################################################\n\
    \    ######################### END OF YOUR CODE ################################\n\
    \    ###########################################################################\n\
    \n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq0u5hfpg.py\", line\
    \ 71, in <module>\n    test_check()\n  File \"/tmp/tmpq0u5hfpg.py\", line 69,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpq0u5hfpg.py\", line\
    \ 59, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmpq0u5hfpg.py\"\
    , line 18, in triangle_area\n    return round(a, 2)\nTypeError: type complex doesn't\
    \ define __round__ method\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ not (a + b > c and a + c > b and b + c > a):\n        return -1\n    p = (a\
    \ + b + c) / 2\n    return (p * (p - a) * (p - b) * (p - c)) ** 0.5\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbwfzmjpw.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbwfzmjpw.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpbwfzmjpw.py\", line\
    \ 23, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # write\
    \ your code here\n    if a + b > c and a + c > b and b + c > a:\n        p = (a\
    \ + b + c) / 2\n        s = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n       \
    \ return round(s, 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n      \
    \  area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd_jnvoyi.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpd_jnvoyi.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpd_jnvoyi.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    s =\
    \ (a + b + c) / 2\n    if s <= a or s <= b or s <= c:\n        return -1\n   \
    \ else:\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n\
    \n\n@click.command()\n@click.option(\"--a\", default=1, help=\"Length of the first\
    \ side of the triangle\")\n@click.option(\"--b\", default=1, help=\"Length of\
    \ the second side of the triangle\")\n@click.option(\"--c\", default=1, help=\"\
    Length of the third side of the triangle\")\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert\
    \ candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert\
    \ candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert\
    \ candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert\
    \ candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2chrxys6.py\", line\
    \ 21, in <module>\n    @click.command()\nNameError: name 'click' is not defined.\
    \ Did you mean: 'slice'?\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    s =\
    \ sum([a, b, c]) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n  \
    \  return round(area, 2) if area > 0 else -1\n\n\n\ndef check(candidate):\n  \
    \  assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n  \
    \  assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplh8zko9v.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmplh8zko9v.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmplh8zko9v.py\", line\
    \ 22, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmplh8zko9v.py\"\
    , line 16, in triangle_area\n    return round(area, 2) if area > 0 else -1\nTypeError:\
    \ '>' not supported between instances of 'complex' and 'int'\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg5l2fbm2.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpg5l2fbm2.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd_jnvoyi.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpd_jnvoyi.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpd_jnvoyi.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ (a + b) > c and (a + c) > b and (b + c) > a:\n        s = (a + b + c) / 2\n\
    \        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # write\
    \ your code here\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptuu9ng48.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptuu9ng48.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmptuu9ng48.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ (a + b > c) and (a + c > b) and (b + c > a):\n        p = (a + b + c) / 2\n\
    \        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n        \n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert\
    \ candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert\
    \ candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert\
    \ candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert\
    \ candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
- exit_code: 0
  program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n      \
    \  area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823405
