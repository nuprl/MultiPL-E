language: py
name: HumanEval_77_iscube
results:
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  return abs(a)**(1/3) == int(abs(a)**(1/3))\n\n\ndef check(candidate):\n   \
    \ assert candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr3q0iv9p.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpr3q0iv9p.py\", line 36,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpr3q0iv9p.py\", line 29, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7popi2x5.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp7popi2x5.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7popi2x5.py\", line 24, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return is_power(a, 3)\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdz6rphan.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpdz6rphan.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpdz6rphan.py\", line 24, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmpdz6rphan.py\", line\
    \ 20, in iscube\n    return is_power(a, 3)\nNameError: name 'is_power' is not\
    \ defined\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a in [x**3 for x in range(abs(a)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo_44t3bo.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpo_44t3bo.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpo_44t3bo.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a > 0:\n        return (a**(1/3)).is_integer()\n\
    \    elif a == 0:\n        return True\n    else:\n        return ((-a)**(1/3)).is_integer()\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyb39qzsj.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpyb39qzsj.py\", line 38,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpyb39qzsj.py\", line 31, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # your code here\n    import math\n\
    \    a = abs(a)\n    if a == 0:\n        return True\n    for i in range(1,int(math.sqrt(a))+1):\n\
    \        if i**3 == a:\n            return True\n    return False\n    # your\
    \ code here\n    pass\n    \n    \ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  elif a < 0:\n        a = -a\n    i = 0\n    while i ** 3 < a:\n        i +=\
    \ 1\n    return i ** 3 == a\n\n\n\n@pytest.mark.timeout(1.0)\n@given(a=st.integers())\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4e151ler.py\", line\
    \ 31, in <module>\n    @pytest.mark.timeout(1.0)\nNameError: name 'pytest' is\
    \ not defined. Did you mean: 'bytes'?\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 1 or int(abs(a) ** (1 /\
    \ 3.0)) ** 3 == abs(a)\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3edm_hul.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3edm_hul.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp3edm_hul.py\", line 26, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and a ** (1 / 3) % 1 ==\
    \ 0\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm0amu9mt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpm0amu9mt.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpm0amu9mt.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return (a == 0) or ((a < 0) == ((a **\
    \ (1/3)) % 1 == 0))\n\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxge1112_.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxge1112_.py\", line 35,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpxge1112_.py\", line 25, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and abs(a)**(1/3) % 1\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpax4zusat.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpax4zusat.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpax4zusat.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a < 0 or a == 0 or int(a ** (1\
    \ / 3)) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7y0jumc9.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp7y0jumc9.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7y0jumc9.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # YOUR CODE HERE\n    return type(a**(1/3))\
    \ is int\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1uz1c1mf.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp1uz1c1mf.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1uz1c1mf.py\", line 23, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    #Use the cuberoot function in the math\
    \ module,\n    #and check if the cuberoot of a is an integer.\n    import math\n\
    \    root = math.cbrt(a)\n    if root%1 == 0:\n        return True\n    else:\n\
    \        return False\n\nprint(iscube(1))\nprint(iscube(2))\nprint(iscube(-1))\n\
    print(iscube(64))\nprint(iscube(0))\nprint(iscube(180))\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbfcw7ood.py\", line\
    \ 29, in <module>\n    print(iscube(1))\n  File \"/tmp/tmpbfcw7ood.py\", line\
    \ 23, in iscube\n    root = math.cbrt(a)\nAttributeError: module 'math' has no\
    \ attribute 'cbrt'\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a in cubelist(a)\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2rerale5.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2rerale5.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp2rerale5.py\", line 23, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmp2rerale5.py\", line\
    \ 20, in iscube\n    return a in cubelist(a)\nNameError: name 'cubelist' is not\
    \ defined\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # ...\n    return a == 0 or (a > 0 and\
    \ (abs(a) ** (1/3)) % 1 == 0)\n    \n    \ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfx77fntk.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpfx77fntk.py\", line 35,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpfx77fntk.py\", line 27, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return (a < 0) or (round(a ** (1 / 3))\
    \ ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n   \
    \ assert candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    pass\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6p3f1ny8.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6p3f1ny8.py\", line 32,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp6p3f1ny8.py\", line 22, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == pow(int(pow(a, 1/3)), 3)\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcvzgzn85.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpcvzgzn85.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpcvzgzn85.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpcvzgzn85.py\", line\
    \ 20, in iscube\n    return a == pow(int(pow(a, 1/3)), 3)\nTypeError: int() argument\
    \ must be a string, a bytes-like object or a real number, not 'complex'\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    for i in range(abs(a)+1):\n        if\
    \ i**3 == abs(a):\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and abs(a) ** (1 / 3)\
    \ % 1 == 0\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8rxz80fn.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp8rxz80fn.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp8rxz80fn.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 1 or (a < 0 and a % 2 ==\
    \ 0) or a**(1/3) % 1 == 0\n\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw5wzdqx0.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpw5wzdqx0.py\", line 35,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpw5wzdqx0.py\", line 27, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpw5wzdqx0.py\", line\
    \ 20, in iscube\n    return a == 1 or (a < 0 and a % 2 == 0) or a**(1/3) % 1 ==\
    \ 0\nTypeError: unsupported operand type(s) for %: 'complex' and 'int'\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a in cubes(a)\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa2qf88qj.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpa2qf88qj.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpa2qf88qj.py\", line 24, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmpa2qf88qj.py\", line\
    \ 20, in iscube\n    return a in cubes(a)\nNameError: name 'cubes' is not defined\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  else:\n        return a < 0 and round(abs(a) ** (1 / 3)) ** 3 == abs(a) or\
    \ a > 0 and round(a ** (1 / 3)) ** 3 == a\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # your code here\n    return a >= 0\
    \ and ((a == 0) or (int(a ** (1/3)) ** 3 == a))\n\n\ndef check(candidate):\n \
    \   assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzdzrkfn8.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpzdzrkfn8.py\", line 35,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzdzrkfn8.py\", line 27, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and (a ** (1/3)).is_integer()\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk88u7b0l.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpk88u7b0l.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpk88u7b0l.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    b = abs(a)\n    return b == 0 or b ==\
    \ round(b ** (1/3)) ** 3\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or abs(a) == abs(a) **\
    \ (1/3)\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx6gyk4o7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpx6gyk4o7.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpx6gyk4o7.py\", line 26, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    pass\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6p3f1ny8.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6p3f1ny8.py\", line 32,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp6p3f1ny8.py\", line 22, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # YOUR CODE HERE\n    cnt = 0\n    if\
    \ a == 0:\n        return True\n    elif a < 0:\n        a = -a\n    for i in\
    \ range(0, a + 1):\n        if i ** 3 == a:\n            cnt += 1\n    if cnt\
    \ == 1:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    #YOUR CODE HERE\n    if a >= 0:\n  \
    \      return a == 0 or int(a**(1/3))**3 == a\n    else:\n        return int(a**(1/3))**3\
    \ == a\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwh1_j15s.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpwh1_j15s.py\", line 37,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpwh1_j15s.py\", line 29, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpwh1_j15s.py\", line\
    \ 24, in iscube\n    return int(a**(1/3))**3 == a\nTypeError: int() argument must\
    \ be a string, a bytes-like object or a real number, not 'complex'\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  elif a < 0:\n        a = -a\n    while a % 3 == 0:\n        a = a // 3\n  \
    \  return a == 1\n\ndef check(candidate):\n    assert candidate(1) == True\n \
    \   assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwy7xfm11.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpwy7xfm11.py\", line 39,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpwy7xfm11.py\", line 32, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7popi2x5.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp7popi2x5.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7popi2x5.py\", line 24, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    i = 0\n    while i**3 < abs(a):\n  \
    \      i += 1\n    return i**3 == abs(a)\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # \u0412\u0430\u0448 \u043A\u043E\u0434\
    \ \u0437\u0434\u0435\u0441\u044C\n    return a >= 0 and int(a ** (1/3)) ** 3 ==\
    \ a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjom1o7s1.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpjom1o7s1.py\", line 35,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpjom1o7s1.py\", line 27, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a in (i ** 3 for i in range(abs(a)\
    \ + 1))\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ismzg94.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3ismzg94.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp3ismzg94.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    b = int(a ** (1/3))\n    if b ** 3 ==\
    \ a:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprwi1dx_y.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmprwi1dx_y.py\", line 38,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmprwi1dx_y.py\", line 30, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmprwi1dx_y.py\", line\
    \ 20, in iscube\n    b = int(a ** (1/3))\nTypeError: int() argument must be a\
    \ string, a bytes-like object or a real number, not 'complex'\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if (a < 0):\n        a = abs(a)\n  \
    \  if (a == 0):\n        return True\n    else:\n        return (a ** (1 / 3))\
    \ % 1 == 0\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiywvines.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpiywvines.py\", line 38,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpiywvines.py\", line 31, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    i = 1\n    while i**3 <= a:\n        if i**3\
    \ == a:\n            return True\n        i += 1\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 1 or a == -1 or int(a **\
    \ (1 / 3)) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpayd7opl8.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpayd7opl8.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpayd7opl8.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a > 0:\n        a_root = a ** (1\
    \ / 3)\n        return a_root == int(a_root)\n    else:\n        return True\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwd9jrh0m.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpwd9jrh0m.py\", line 38,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpwd9jrh0m.py\", line 31, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  else:\n        for i in range(abs(a)+1):\n            if i**3 == abs(a):\n\
    \                return True\n    return False\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    while\
    \ a != 0:\n        if a % 9 == 0:\n            return True\n        a = a // 9\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkojrmgdw.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpkojrmgdw.py\", line 40,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpkojrmgdw.py\", line 31, in\
    \ check\n    assert candidate(2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and (a ** (1 / 3)).is_integer()\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1toteeoa.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp1toteeoa.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1toteeoa.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return (abs(a) ** (1 / 3)) % 1 == 0\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp92qdlva.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpp92qdlva.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpp92qdlva.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a in (0, 1, 8, 27, 64, 125, 216,\
    \ 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859, 8000,\
    \ 9261)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1xzh1o0q.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp1xzh1o0q.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1xzh1o0q.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a in [i ** 3 for i in range(1,\
    \ abs(a) + 1)]\n\n\ndef check(candidate):\n    assert candidate(1) == True\n \
    \   assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr200j848.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpr200j848.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpr200j848.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a > 0 and a == round(a ** (1\
    \ / 3)) ** 3\n\n\ndef check(candidate):\n    assert candidate(1) == True\n   \
    \ assert candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiky68wsm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpiky68wsm.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpiky68wsm.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a > 0 and int(a ** (1 / 3)) **\
    \ 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkemg2qm3.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpkemg2qm3.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpkemg2qm3.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and round(a ** (1 / 3))\
    \ ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9e78ojt_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp9e78ojt_.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9e78ojt_.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a > 0 and round(a ** (1/3)) **\
    \ 3 == a or a == 0\ndef check(candidate):\n    assert candidate(1) == True\n \
    \   assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg7ikqpat.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpg7ikqpat.py\", line 32,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpg7ikqpat.py\", line 24, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or abs(a) == math.pow(abs(int(math.pow(abs(a),\
    \ 1/3))), 3)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n   \
    \ assert candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp699l4fh5.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp699l4fh5.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp699l4fh5.py\", line 24, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmp699l4fh5.py\", line\
    \ 20, in iscube\n    return a == 0 or abs(a) == math.pow(abs(int(math.pow(abs(a),\
    \ 1/3))), 3)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return (a >= 0 and int(a ** (1 / 3))\
    \ ** 3 == a) or (a < 0 and int(-a ** (1 / 3)) ** 3 == -a)\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnw2ktkh5.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpnw2ktkh5.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpnw2ktkh5.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpnw2ktkh5.py\", line\
    \ 20, in iscube\n    return (a >= 0 and int(a ** (1 / 3)) ** 3 == a) or (a < 0\
    \ and int(-a ** (1 / 3)) ** 3 == -a)\nTypeError: int() argument must be a string,\
    \ a bytes-like object or a real number, not 'complex'\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # return a != 0 and int(round(a ** (1\
    \ / 3.0))) ** 3 == a\n    return a != 0 and a in [i ** 3 for i in range(1, a +\
    \ 1)]\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_hdjig0q.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_hdjig0q.py\", line 35,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp_hdjig0q.py\", line 27, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4nb_v1pe.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4nb_v1pe.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp4nb_v1pe.py\", line 23, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    assert isinstance(a, int)\n    return\
    \ abs(a) ** (1 / 3) % 1 == 0\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7cr9pv3d.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp7cr9pv3d.py\", line 35,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7cr9pv3d.py\", line 28, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  elif a < 0:\n        a = -a\n    i = 0\n    while i * i * i < a:\n        i\
    \ += 1\n    return i * i * i == a\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # Process\n    if a < 0:\n        a\
    \ = -a\n    return a == 0 or (round(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # while a > 0:\n    #     if a == 1:\n\
    \    #         return True\n    #     elif a == 0:\n    #         return True\n\
    \    #     elif a % 3 == 0:\n    #         a /= 3\n    #     else:\n    #    \
    \     return False\n    return (a == 0) or (a == 1) or (abs(a) % 3 == 0 and iscube(abs(a)\
    \ / 3))\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyi074m9z.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpyi074m9z.py\", line 42,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpyi074m9z.py\", line 34, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    try:\n        return int(a ** (1 / 3))\
    \ ** 3 == a\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk98ibyay.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpk98ibyay.py\", line 37,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpk98ibyay.py\", line 29, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpk98ibyay.py\", line\
    \ 21, in iscube\n    return int(a ** (1 / 3)) ** 3 == a\nTypeError: int() argument\
    \ must be a string, a bytes-like object or a real number, not 'complex'\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a > 0:\n        return (a ** 0.5)\
    \ % 1 == 0\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqw5t07d.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpdqw5t07d.py\", line 37,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpdqw5t07d.py\", line 29, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  else:\n        return a > 0 and ((a**(1/3)).is_integer())\n \n \n \n \ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfg1zm9s9.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpfg1zm9s9.py\", line 39,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpfg1zm9s9.py\", line 31, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    a = abs(a)\n    b = 0\n    while b**3\
    \ < a:\n        b += 1\n    return b**3 == a\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7popi2x5.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp7popi2x5.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7popi2x5.py\", line 24, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return int(round(a ** (1 / 3))) ** 3\
    \ == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3sbdd_ea.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3sbdd_ea.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp3sbdd_ea.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp3sbdd_ea.py\", line\
    \ 20, in iscube\n    return int(round(a ** (1 / 3))) ** 3 == a\nTypeError: type\
    \ complex doesn't define __round__ method\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return (a < 0 and a % 2 == 0) or a ==\
    \ 0 or a == 1\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppw1n7npu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppw1n7npu.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmppw1n7npu.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a in cube_set\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu_er90qn.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpu_er90qn.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpu_er90qn.py\", line 24, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmpu_er90qn.py\", line\
    \ 20, in iscube\n    return a in cube_set\nNameError: name 'cube_set' is not defined\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and a == 0 or round(a\
    \ ** (1/3)) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbjujpqh3.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpbjujpqh3.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpbjujpqh3.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpbjujpqh3.py\", line\
    \ 20, in iscube\n    return a >= 0 and a == 0 or round(a ** (1/3)) ** 3 == a\n\
    TypeError: type complex doesn't define __round__ method\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return (a**(1/3)).is_integer()\n\n\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_uqvb_60.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_uqvb_60.py\", line 35,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp_uqvb_60.py\", line 27, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp_uqvb_60.py\", line\
    \ 20, in iscube\n    return (a**(1/3)).is_integer()\nAttributeError: 'complex'\
    \ object has no attribute 'is_integer'\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    for i in range(1, a + 1):\n        if i * i\
    \ * i == a:\n            return True\n    return False\n    \ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    x = a ** (1/3)\n    if int(x) ** 3 ==\
    \ a:\n        return True\n    else:\n        return False\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9qq0nzli.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp9qq0nzli.py\", line 36,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9qq0nzli.py\", line 28, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp9qq0nzli.py\", line\
    \ 21, in iscube\n    if int(x) ** 3 == a:\nTypeError: int() argument must be a\
    \ string, a bytes-like object or a real number, not 'complex'\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return True if a in [x**3 for x in range(1,\
    \ abs(a) + 1)] else False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpimoi2bb3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpimoi2bb3.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpimoi2bb3.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4nb_v1pe.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4nb_v1pe.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp4nb_v1pe.py\", line 23, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == a ** (1 / 3)\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp49oyyw0q.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp49oyyw0q.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp49oyyw0q.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == a ** (1 / 3)\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiiegw3jf.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpiiegw3jf.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpiiegw3jf.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4nb_v1pe.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4nb_v1pe.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp4nb_v1pe.py\", line 23, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a > 0:\n        if a ** (1 / 3) == round(a ** (1 / 3)):\n            return\
    \ True\n        else:\n            return False\n    if a < 0:\n        if abs(a)\
    \ ** (1 / 3) == round(abs(a) ** (1 / 3)):\n            return True\n        else:\n\
    \            return False\n\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1r0rj4vr.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp1r0rj4vr.py\", line 46,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1r0rj4vr.py\", line 39, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or round(a ** (1 / 3))\
    \ ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd50gpcsu.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpd50gpcsu.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpd50gpcsu.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpd50gpcsu.py\", line\
    \ 20, in iscube\n    return a == 0 or round(a ** (1 / 3)) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a != 0 and a != 2 and a != 3\
    \ and a != 5 and a != 6 and a != 7 and a != 10 and a != 11 and a != 12 and a !=\
    \ 13 and a != 14 and a != 15 and a != 17 and a != 18 and a != 19 and a != 20 and\
    \ a != 21 and a != 22 and a != 23 and a != 24 and a != 25 and a != 26 and a !=\
    \ 27 and a != 28 and a != 29 and a != 30 and a != 31 and a != 32 and a != 33 and\
    \ a != 34 and a != 35 and a != 36 and a != 37 and a != 38 and a != 39 and a !=\
    \ 40 and a != 41 and a != 42 and a != 43 and a != 44 and a != 45 and a != 46 and\
    \ a != 47 and a != 48 and a != 49 and a != 50 and a != 51 and a != 52 and a !=\
    \ 53 and a != 54 and a != 55 and a != 56 and a != 57 and a != 58 and a != 59 and\
    \ a != 60 and a != 61 and a != 62 and a != 63 and a != 65 and a != 66 and a !=\
    \ 67 and a != 68 and a != 69 and a != 70 and a != 71 and a != 72 and a != 73 and\
    \ a != 74 and a != 75 and a != 76 and a != 77 and a != 78 and a != 79 and a !=\
    \ 80 and a != 81 and a != 82 and a != 83 and a != 84 and a != 85 and a != 86 and\
    \ a != 87 and a != 88 and a != 89 and a != 90 and a != 91 and a != 92 and a !=\
    \ 93 and a != 94 and a != 95 and a != 96 and a != 97 and a != 98 and a != 99 and\
    \ a != 100 and a != 101 and a != 102 and a != 103 and a != 104 and a != 105 and\
    \ a != 106 and a != 107 and a != 108 and a != 109 and a != 110 and a != 111 and\
    \ a != 112 and a != 113 and a != 114 and a != 115 and a != 116 and a != 117 and\
    \ a != 118 and a != 119 and a != 120 and a != 121 and a != 122 and a != 123 and\
    \ a != 124 and a != 125 and a != 126 and a != 127 and a != 128 and a != 129 and\
    \ a != 130 and a != 131 and a != 132 and a\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz4_z03b7.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpz4_z03b7.py\", line 32,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpz4_z03b7.py\", line 24, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a >= 0:\n        if a**(1/3) == a//(a**(1/3)):\n\
    \            return True\n        else:\n            return False\n    else:\n\
    \        if a**(1/3) == a//(a**(1/3)):\n            return True\n        else:\n\
    \            return False\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn85msdq3.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpn85msdq3.py\", line 43,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpn85msdq3.py\", line 35, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpn85msdq3.py\", line\
    \ 26, in iscube\n    if a**(1/3) == a//(a**(1/3)):\nTypeError: unsupported operand\
    \ type(s) for //: 'int' and 'complex'\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a in [0, 1, -1, 8, 27, 64, 125,\
    \ 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859,\
    \ 8000, 9261]\n\nimport doctest\ndoctest.testmod()\ndef check(candidate):\n  \
    \  assert candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and round(a ** (1 / 3))\
    \ ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9e78ojt_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp9e78ojt_.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9e78ojt_.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a >= 0:\n        if a ** (1 / 3)\
    \ % 1 == 0:\n            return True\n        else:\n            return False\n\
    \    else:\n        if abs(a) ** (1 / 3) % 1 == 0:\n            return True\n\
    \        else:\n            return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo5vl132n.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpo5vl132n.py\", line 43,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpo5vl132n.py\", line 36, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    a = abs(a)\n    res = []\n    for i\
    \ in range(int(a ** (1 / 3)) + 1):\n        res.append(i ** 3)\n    return a in\
    \ res\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdiq77t1b.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpdiq77t1b.py\", line 38,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpdiq77t1b.py\", line 31, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return bool(round(abs(a) ** (1/3)) **\
    \ 3 == abs(a))\n\ndef check(candidate):\n    assert candidate(1) == True\n   \
    \ assert candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    for i in range(abs(a) + 1):\n      \
    \  if i**3 == abs(a):\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    for i\
    \ in range(0, a):\n        if i ** 3 == a:\n            return True\n    return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphh_sdemh.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmphh_sdemh.py\", line 39,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmphh_sdemh.py\", line 29, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # a == 0\n    # a == 1\n    # a == -1\n\
    \    # b**3 = a\n    for i in range(2, abs(a) + 1):\n        if i**3 == a:\n \
    \           return True\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5aanbwcv.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp5aanbwcv.py\", line 41,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp5aanbwcv.py\", line 31, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a >= 0:\n        return int(a **\
    \ (1/3)) ** 3 == a\n    else:\n        return int(a ** (1/3)) ** 3 == a\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqspdu6n2.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpqspdu6n2.py\", line 36,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpqspdu6n2.py\", line 28, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpqspdu6n2.py\", line\
    \ 23, in iscube\n    return int(a ** (1/3)) ** 3 == a\nTypeError: int() argument\
    \ must be a string, a bytes-like object or a real number, not 'complex'\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a < 0:\n        a = -a\n    return sqrt(a) == int(sqrt(a))\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg6ozn80v.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpg6ozn80v.py\", line 38,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpg6ozn80v.py\", line 28, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmpg6ozn80v.py\", line\
    \ 24, in iscube\n    return sqrt(a) == int(sqrt(a))\nNameError: name 'sqrt' is\
    \ not defined\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    a = abs(a)\n    return int(a ** (1 /\
    \ 3)) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9hb7pb4k.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp9hb7pb4k.py\", line 35,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9hb7pb4k.py\", line 28, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # return False or True\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvo8g5wv3.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpvo8g5wv3.py\", line 35,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpvo8g5wv3.py\", line 25, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a > 0 and pow(round(pow(a, 1\
    \ / 3)), 3) == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe36o7na7.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpe36o7na7.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpe36o7na7.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    num = int(math.pow(a, 1/3))\n    return\
    \ a == num**3\n    \n@interact\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ev87995.py\", line\
    \ 23, in <module>\n    @interact\nNameError: name 'interact' is not defined\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a < 0 or is_power(a, 3)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv3bh9hac.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpv3bh9hac.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpv3bh9hac.py\", line 24, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmpv3bh9hac.py\", line\
    \ 20, in iscube\n    return a < 0 or is_power(a, 3)\nNameError: name 'is_power'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # if a < 0:\n    #     a = -a\n    #\
    \ if a == 0:\n    #     return True\n    # if a == 1:\n    #     return True\n\
    \    # i = 2\n    # while True:\n    #     if i**3 == a:\n    #         return\
    \ True\n    #     if i**3 > a:\n    #         return False\n    #     i += 1\n\
    \    # return False\n    return a in range(0, 1000) and (a ** (1/3)).is_integer()\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjf2y6ne0.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpjf2y6ne0.py\", line 48,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpjf2y6ne0.py\", line 40, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # Your code here\n    if a < 0:\n  \
    \      return a == -abs(a)**(1/3)\n    return a == a**(1/3)\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8bz7dq8n.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp8bz7dq8n.py\", line 37,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp8bz7dq8n.py\", line 30, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # YOUR CODE HERE\n    return a == 0\
    \ or (a < 0 and round(a ** (1/3)) ** 3 == a) or (a > 0 and round(a ** (1/3)) **\
    \ 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6934r_7f.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp6934r_7f.py\", line 35,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp6934r_7f.py\", line 27, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp6934r_7f.py\", line\
    \ 21, in iscube\n    return a == 0 or (a < 0 and round(a ** (1/3)) ** 3 == a)\
    \ or (a > 0 and round(a ** (1/3)) ** 3 == a)\nTypeError: type complex doesn't\
    \ define __round__ method\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a in (x ** 3 for x in range(abs(a)\
    \ + 1))\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp45soemvj.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp45soemvj.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp45soemvj.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a >= 0:\n        if a == 0:\n   \
    \         return True\n        for i in range(a+1):\n            if i ** 3 ==\
    \ a:\n                return True\n    else:\n        for i in range(abs(a)+1):\n\
    \            if i ** 3 == abs(a):\n                return True\n    return False\n\
    \    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return math.pow(a, 1/3) == int(math.pow(a,\
    \ 1/3))\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkor61k96.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpkor61k96.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpkor61k96.py\", line 24, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmpkor61k96.py\", line\
    \ 20, in iscube\n    return math.pow(a, 1/3) == int(math.pow(a, 1/3))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  elif a > 0:\n        return round(a ** (1/3)) ** 3 == a\n    else:\n      \
    \  return round(a ** (1/3)) ** 3 == -a\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe8gbc42p.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpe8gbc42p.py\", line 38,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpe8gbc42p.py\", line 30, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpe8gbc42p.py\", line\
    \ 25, in iscube\n    return round(a ** (1/3)) ** 3 == -a\nTypeError: type complex\
    \ doesn't define __round__ method\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a in (k**3 for k in range(1,\
    \ abs(a) + 1))\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpei23ibag.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpei23ibag.py\", line 32,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpei23ibag.py\", line 24, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return (a ** (1 / 3)) == int(a ** (1\
    \ / 3))\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbsw9vc9t.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpbsw9vc9t.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpbsw9vc9t.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpbsw9vc9t.py\", line\
    \ 20, in iscube\n    return (a ** (1 / 3)) == int(a ** (1 / 3))\nTypeError: int()\
    \ argument must be a string, a bytes-like object or a real number, not 'complex'\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a ** (1/3) % 1 == 0\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpslxqctar.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpslxqctar.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpslxqctar.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpslxqctar.py\", line\
    \ 20, in iscube\n    return a ** (1/3) % 1 == 0\nTypeError: unsupported operand\
    \ type(s) for %: 'complex' and 'int'\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    for i\
    \ in range(0, a + 1):\n        if i * i * i == a:\n            return True\n \
    \   return False\n\ndef check(candidate):\n    assert candidate(1) == True\n \
    \   assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # YOUR CODE HERE\n    return a == 0\
    \ or int(abs(a) ** (1. / 3)) ** 3 == abs(a)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi9dfyuyx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpi9dfyuyx.py\", line 35,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpi9dfyuyx.py\", line 28, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # return math.sqrt(a).is_integer()\n\
    \    return a == pow(int(pow(a, 1/3) + 0.5), 3)\n\ndef check(candidate):\n   \
    \ assert candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppz3n6_8h.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppz3n6_8h.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmppz3n6_8h.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmppz3n6_8h.py\", line\
    \ 21, in iscube\n    return a == pow(int(pow(a, 1/3) + 0.5), 3)\nTypeError: int()\
    \ argument must be a string, a bytes-like object or a real number, not 'complex'\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a > 0:\n        return math.sqrt(a).is_integer()\n\
    \    elif a == 0:\n        return True\n    else:\n        return math.sqrt(-a).is_integer()\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmec44pe6.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpmec44pe6.py\", line 37,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpmec44pe6.py\", line 27, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmpmec44pe6.py\", line\
    \ 21, in iscube\n    return math.sqrt(a).is_integer()\nNameError: name 'math'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ (abs(a) ** (1 / 3)).is_integer()) or (a > 0 and (a ** (1 / 3)).is_integer())\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo2u9gaj.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpoo2u9gaj.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpoo2u9gaj.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return isroot(a, 3)\n\n@typecheck\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmparis53jv.py\", line\
    \ 22, in <module>\n    @typecheck\nNameError: name 'typecheck' is not defined\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return (a**(1/3)).is_integer()\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8jk38d8l.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp8jk38d8l.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp8jk38d8l.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp8jk38d8l.py\", line\
    \ 20, in iscube\n    return (a**(1/3)).is_integer()\nAttributeError: 'complex'\
    \ object has no attribute 'is_integer'\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return True\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu_7euqtw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu_7euqtw.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpu_7euqtw.py\", line 24, in\
    \ check\n    assert candidate(2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a > 0:\n        return a**(1/3) %\
    \ 1 == 0\n    else:\n        return a == 0\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaea11scm.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaea11scm.py\", line 36,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpaea11scm.py\", line 28, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  elif a < 0:\n        return iscube(-a)\n    else:\n        return isint(a **\
    \ (1 / 3))\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf1anvgzw.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpf1anvgzw.py\", line 39,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpf1anvgzw.py\", line 29, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmpf1anvgzw.py\", line\
    \ 25, in iscube\n    return isint(a ** (1 / 3))\nNameError: name 'isint' is not\
    \ defined. Did you mean: 'print'?\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and abs(a) ** (1 / 3)\
    \ == int(abs(a) ** (1 / 3))\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7q56fj56.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp7q56fj56.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7q56fj56.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a > 0 and a == round(a ** (1\
    \ / 3)) ** 3 or a == 0\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph39nnzrd.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmph39nnzrd.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmph39nnzrd.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    while\
    \ a % 3 == 0:\n        a //= 3\n    return a == 1\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1rihu8hz.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp1rihu8hz.py\", line 38,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1rihu8hz.py\", line 31, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == (math.pow(math.ceil(math.pow(a,\
    \ 1/3)), 3))\n\n\ndef check(candidate):\n    assert candidate(1) == True\n   \
    \ assert candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp87h0muk6.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp87h0muk6.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp87h0muk6.py\", line 24, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmp87h0muk6.py\", line\
    \ 20, in iscube\n    return a == (math.pow(math.ceil(math.pow(a, 1/3)), 3))\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    i = a\n    if a < 0:\n        i = -a\n\
    \    while True:\n        if i ** 3 == a:\n            return True\n        if\
    \ i == 0:\n            return False\n        i -= 1\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpse4_hlsu.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpse4_hlsu.py\", line 42,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpse4_hlsu.py\", line 34, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a > 0 and a**(1/3) % 1 == 0\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgv18aua8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpgv18aua8.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpgv18aua8.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return isint(math.pow(a, 1/3))\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxh6f21cn.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpxh6f21cn.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpxh6f21cn.py\", line 23, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmpxh6f21cn.py\", line\
    \ 20, in iscube\n    return isint(math.pow(a, 1/3))\nNameError: name 'isint' is\
    \ not defined. Did you mean: 'print'?\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # Write your code here\n    try:\n \
    \       return (abs(a)**(1/3)).is_integer()\n    except ZeroDivisionError:\n \
    \       return True\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvax5_u_6.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpvax5_u_6.py\", line 37,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpvax5_u_6.py\", line 30, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    import math\n    # Calculate the cube\
    \ root of the number\n    cbrt = round(math.pow(a, (1/3)))\n    # Multiply the\
    \ cube root 3 times\n    cube = cbrt * cbrt * cbrt\n    # Is the original number\
    \ the same as the cube?\n    if a == cube:\n        return True\n    else:\n \
    \       return False\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7bx5jpb5.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp7bx5jpb5.py\", line 43,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7bx5jpb5.py\", line 35, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp7bx5jpb5.py\", line\
    \ 22, in iscube\n    cbrt = round(math.pow(a, (1/3)))\nValueError: math domain\
    \ error\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return (a == 0) or (a % 8 == 1) and\
    \ (int(a ** (1/3)) ** 3 == a)\n\nprint(iscube(64))\ndef check(candidate):\n  \
    \  assert candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjfwu0g4_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpjfwu0g4_.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpjfwu0g4_.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: 'False

    '
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return pow(a, 1/3) % 1 == 0\n\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe8m_t9b.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpqe8m_t9b.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpqe8m_t9b.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpqe8m_t9b.py\", line\
    \ 20, in iscube\n    return pow(a, 1/3) % 1 == 0\nTypeError: unsupported operand\
    \ type(s) for %: 'complex' and 'int'\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    l, r = 0, a + 1\n    while l + 1 < r:\n    \
    \    mid = (l + r) // 2\n        if mid ** 3 > a:\n            r = mid\n     \
    \   else:\n            l = mid\n    return l ** 3 == a\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    num = abs(a)\n    i = 0\n    while i**3\
    \ < num:\n        i += 1\n    return i**3 == num\n    \n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return abs(a)**(1/3)%1 == 0\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4f99kcn2.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4f99kcn2.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp4f99kcn2.py\", line 26, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # your code here\n    return a>=0 and\
    \ a**(1/3)%1==0\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgk0u3pnj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpgk0u3pnj.py\", line 35,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpgk0u3pnj.py\", line 27, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    while\
    \ a % 3 == 0:\n        a //= 3\n    return a == 1\ndef check(candidate):\n   \
    \ assert candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcj24xlzc.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpcj24xlzc.py\", line 36,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpcj24xlzc.py\", line 29, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a >= 0:\n        temp = 0\n     \
    \   while temp ** 3 < a:\n            temp += 1\n        return temp ** 3 == a\n\
    \    else:\n        temp = 0\n        while temp ** 3 > a:\n            temp -=\
    \ 1\n        return temp ** 3 == a\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return (abs(a) ** (1 / 3)) % 1 == 0\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp92qdlva.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpp92qdlva.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpp92qdlva.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  elif a < 0:\n        return False\n    else:\n        from math import sqrt\n\
    \        cub_root = sqrt(a)\n        return int(cub_root) == cub_root\n\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphwciy9p2.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmphwciy9p2.py\", line 41,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmphwciy9p2.py\", line 33, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    ans = False\n    if a % 2 == 0:\n  \
    \      ans = True\n    else:\n        ans = False\n    return ans\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxf7f7aj_.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpxf7f7aj_.py\", line 38,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpxf7f7aj_.py\", line 28, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    pass\n    # your code here\n    import\
    \ math\n    temp = a\n    if temp <= 0:\n        temp = -temp\n    root = round(math.pow(temp,1/3))\n\
    \    return root*root*root == temp\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return int(abs(a) ** (1 / 3)) ** 3 ==\
    \ abs(a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfxhq0_ho.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpfxhq0_ho.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpfxhq0_ho.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a <= 0:\n        return True\n  \
    \  else:\n        return math.sqrt(a).is_integer()\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppnvkc3ew.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmppnvkc3ew.py\", line 37,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmppnvkc3ew.py\", line 27, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmppnvkc3ew.py\", line\
    \ 23, in iscube\n    return math.sqrt(a).is_integer()\nNameError: name 'math'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    i = 0\n    while i**3 < abs(a):\n  \
    \      i += 1\n    return i**3 == abs(a)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphwemlp31.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmphwemlp31.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmphwemlp31.py\", line 23, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or ((a > 0) and (round(a\
    \ ** (1 / 3)) ** 3 == a))\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphepy6zqa.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmphepy6zqa.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmphepy6zqa.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a > 0 and a == int(round(a **\
    \ (1. / 3)))\n\n\ndef check(candidate):\n    assert candidate(1) == True\n   \
    \ assert candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphxae8_vg.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmphxae8_vg.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmphxae8_vg.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    c = 0\n    while c*c*c < abs(a):\n \
    \       c += 1\n    return c*c*c == abs(a)\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return ispow(a, 3)\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp8_ommtl.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpp8_ommtl.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpp8_ommtl.py\", line 24, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmpp8_ommtl.py\", line\
    \ 20, in iscube\n    return ispow(a, 3)\nNameError: name 'ispow' is not defined\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    return\
    \ round(a ** (1/3)) ** 3 == a\n \n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a in [i ** 3 for i in range(int(a\
    \ ** (1 / 3)) + 1)]\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4znqy4ow.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp4znqy4ow.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp4znqy4ow.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp4znqy4ow.py\", line\
    \ 20, in iscube\n    return a in [i ** 3 for i in range(int(a ** (1 / 3)) + 1)]\n\
    TypeError: int() argument must be a string, a bytes-like object or a real number,\
    \ not 'complex'\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and abs(a) ** (1/3) %\
    \ 1 == 0\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2g0dg32i.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2g0dg32i.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp2g0dg32i.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and int(a ** (1 / 3))\
    \ ** 3 == a\n\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphvmnlced.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmphvmnlced.py\", line 35,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmphvmnlced.py\", line 27, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and int(a ** (1 / 3))\
    \ ** 3 == a\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpll3_sa1s.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpll3_sa1s.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpll3_sa1s.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  elif a < 0:\n        a = abs(a)\n    from math import sqrt\n    for i in range(0,\
    \ abs(a) + 1):\n        if i ** 3 == a:\n            return True\n    return False\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  elif a < 0:\n        a = -a\n    if int(a ** (1/3)) ** 3 == a:\n        return\
    \ True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_93p_dzj.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp_93p_dzj.py\", line 40,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp_93p_dzj.py\", line 33, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(a ** (1/3)) ** 3 == a)\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl4praome.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpl4praome.py\", line 32,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpl4praome.py\", line 24, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or round(a ** (1 / 3),\
    \ 10).is_integer()\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5b6313o7.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp5b6313o7.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp5b6313o7.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp5b6313o7.py\", line\
    \ 20, in iscube\n    return a == 0 or round(a ** (1 / 3), 10).is_integer()\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a in range(0, a**(1/3) + 1) **\
    \ 3\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb8trngf9.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb8trngf9.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpb8trngf9.py\", line 23, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmpb8trngf9.py\", line\
    \ 20, in iscube\n    return a in range(0, a**(1/3) + 1) ** 3\nTypeError: 'float'\
    \ object cannot be interpreted as an integer\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7popi2x5.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp7popi2x5.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7popi2x5.py\", line 24, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    for i in range(1, a+1):\n        if\
    \ a == i**3:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmowy4cjs.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpmowy4cjs.py\", line 36,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpmowy4cjs.py\", line 28, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a in [i ** 3 for i in range(a\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdibxuiim.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpdibxuiim.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpdibxuiim.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  elif a < 0:\n        a = -a\n    return math.sqrt(a).is_integer()\n\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmputswdj0f.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmputswdj0f.py\", line 38,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmputswdj0f.py\", line 28, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmputswdj0f.py\", line\
    \ 24, in iscube\n    return math.sqrt(a).is_integer()\nNameError: name 'math'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1 / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvwfvw9wr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpvwfvw9wr.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpvwfvw9wr.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # your code here\n    pass\n\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4c31g_5h.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp4c31g_5h.py\", line 35,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp4c31g_5h.py\", line 25, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4nb_v1pe.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4nb_v1pe.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp4nb_v1pe.py\", line 23, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and pow(int(pow(a, 1/3)\
    \ + 0.5), 3) == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvb9nmku.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppvb9nmku.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmppvb9nmku.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return math.sqrt(abs(a)).is_integer()\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp69r0x8f1.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp69r0x8f1.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp69r0x8f1.py\", line 23, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmp69r0x8f1.py\", line\
    \ 20, in iscube\n    return math.sqrt(abs(a)).is_integer()\nNameError: name 'math'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7popi2x5.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp7popi2x5.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7popi2x5.py\", line 24, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or abs(a)**(1/3) % 1 ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpux7f1rie.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpux7f1rie.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpux7f1rie.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    x = a**(1/3)\n    if x == int(x):\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpicqkwf69.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpicqkwf69.py\", line 37,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpicqkwf69.py\", line 29, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpicqkwf69.py\", line\
    \ 21, in iscube\n    if x == int(x):\nTypeError: int() argument must be a string,\
    \ a bytes-like object or a real number, not 'complex'\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    i = 1\n    while True:\n        if i\
    \ ** 3 == a:\n            return True\n        elif i ** 3 > a:\n            return\
    \ False\n        i += 1\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv_z2v2az.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpv_z2v2az.py\", line 40,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpv_z2v2az.py\", line 32, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a > 0:\n        i = 1\n        while\
    \ i ** 3 <= a:\n            if i ** 3 == a:\n                return True\n   \
    \         i += 1\n        return False\n    elif a == 0:\n        return True\n\
    \    else:\n        return iscube(-a)\n    pass\n\n\ndef check(candidate):\n \
    \   assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return int(round(a ** (1. / 3))) **\
    \ 3 == a\n\n\nprint(iscube(0))\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1_pse800.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp1_pse800.py\", line 35,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1_pse800.py\", line 27, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp1_pse800.py\", line\
    \ 20, in iscube\n    return int(round(a ** (1. / 3))) ** 3 == a\nTypeError: type\
    \ complex doesn't define __round__ method\n"
  stdout: 'True

    '
  timestamp: 1659823324
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a<0:\n        a = -a\n    if a==0:\n\
    \        return True\n    res = 0\n    while res**3<a:\n        res+=1\n    return\
    \ res**3==a\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  for i in range(1, int(abs(a) ** (1 / 3)) + 1):\n        if i ** 3 == abs(a):\n\
    \            return True\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo5ph7dsm.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpo5ph7dsm.py\", line 39,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpo5ph7dsm.py\", line 32, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a % 2 == 0:\n        if (a//2) % 2 == 0:\n            return iscube(a//8)\n\
    \        else:\n            return False\n    if a % 2 == 1:\n        if (a-1)\
    \ % 3 == 0:\n            return iscube((a-1)//3)\n        else:\n            return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzmtmqmau.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpzmtmqmau.py\", line 45,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzmtmqmau.py\", line 37, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  else:\n        if a < 0:\n            a = -a\n        n = 1\n        while\
    \ n * n * n < a:\n            n += 1\n        return n * n * n == a\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823324
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # your code goes here\n    a = abs(a)\n\
    \    if a == 0:\n        return True\n    n = 1\n    while n**3 < a:\n       \
    \ n += 1\n    return n**3 == a\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    i = 0\n    if a >= 0:\n        i = 1\n\
    \    else:\n        i = -1\n    while True:\n        c = i ** 3\n        if c\
    \ == a:\n            return True\n        elif c > a:\n            return False\n\
    \        i += 1\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp53_yli9.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpp53_yli9.py\", line 45,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpp53_yli9.py\", line 41, in\
    \ check\n    assert candidate(0) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return math.sqrt(a).is_integer()\n\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp53cynl0r.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp53cynl0r.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp53cynl0r.py\", line 24, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmp53cynl0r.py\", line\
    \ 20, in iscube\n    return math.sqrt(a).is_integer()\nNameError: name 'math'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  elif a > 0:\n        return a ** (1 / 3) % 1 == 0\n    else:\n        return\
    \ a ** (1 / 3) % 1 == 0\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplhac0m88.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmplhac0m88.py\", line 37,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmplhac0m88.py\", line 29, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmplhac0m88.py\", line\
    \ 25, in iscube\n    return a ** (1 / 3) % 1 == 0\nTypeError: unsupported operand\
    \ type(s) for %: 'complex' and 'int'\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    n = a\n    if n < 0:\n        n = -n\n\
    \    while n % 3 == 0:\n        n = n / 3\n    return n == 1\n    \n    \n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf_h4rhsn.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpf_h4rhsn.py\", line 40,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpf_h4rhsn.py\", line 33, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return abs(a)**(1/3) % 1 == 0\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkqgcz65m.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpkqgcz65m.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpkqgcz65m.py\", line 26, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    a = abs(a)\n    if a == 0:\n       \
    \ return True\n    if a == 1:\n        return True\n    p = 1\n    while a > p\
    \ ** 3:\n        p += 1\n    return p ** 3 == a\n\n\ndef check(candidate):\n \
    \   assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return int(round(a ** (1. / 3))) **\
    \ 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8jpdmk9x.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp8jpdmk9x.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp8jpdmk9x.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp8jpdmk9x.py\", line\
    \ 20, in iscube\n    return int(round(a ** (1. / 3))) ** 3 == a\nTypeError: type\
    \ complex doesn't define __round__ method\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # max(x) returns the maximum element\
    \ of x.\n    # min(x) returns the minimum element of x.\n    # x.count(y) returns\
    \ the number of occurrences of y in x.\n    for i in range(max(a, -a), min(a,\
    \ -a), -1):\n        if i**3 == a:\n            return True\n    return False\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8vnmoinf.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp8vnmoinf.py\", line 39,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp8vnmoinf.py\", line 31, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == pow(int(pow(a,\
    \ 0.5)), 3)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpykstq6si.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpykstq6si.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpykstq6si.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpykstq6si.py\", line\
    \ 20, in iscube\n    return a == 0 or a == pow(int(pow(a, 0.5)), 3)\nTypeError:\
    \ int() argument must be a string, a bytes-like object or a real number, not 'complex'\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    for i\
    \ in range(a+1):\n        if i**3 == a:\n            return True\n    return False\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a**(1/3) % 1 == 0 if a > 0 else\
    \ True\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwxjunxx_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpwxjunxx_.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpwxjunxx_.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpypbm74sn.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpypbm74sn.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpypbm74sn.py\", line 24, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    i = 0\n    while i**3 < abs(a):\n  \
    \      i += 1\n    return i**3 == abs(a)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and pow(a, 1 / 3) % 1\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm889z83u.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpm889z83u.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpm889z83u.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  elif a < 0:\n        a = abs(a)\n    for i in range(1, a + 1):\n        if\
    \ i ** 3 == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = abs(a)\n    return\
    \ math.sqrt(a).is_integer()\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgw8zas70.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpgw8zas70.py\", line 36,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpgw8zas70.py\", line 26, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmpgw8zas70.py\", line\
    \ 22, in iscube\n    return math.sqrt(a).is_integer()\nNameError: name 'math'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    n = 1\n    while n*n*n < abs(a):\n \
    \       n += 1\n    return n*n*n == abs(a)\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwa3_pkti.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpwa3_pkti.py\", line 36,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpwa3_pkti.py\", line 32, in\
    \ check\n    assert candidate(0) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and a ** 0.5 % 1 == 0\n\
    \    # you may use math.sqrt, but you don't have to\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoyngo_yy.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpoyngo_yy.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpoyngo_yy.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # Since the input is always valid, we\
    \ can conclude the output\n    # is either True or False.\n    if a < 0:\n   \
    \     return True\n    elif a == 0:\n        return True\n    elif a == 1:\n \
    \       return True\n    elif a**(1/3) % 1 == 0:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv9inj9qp.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpv9inj9qp.py\", line 45,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpv9inj9qp.py\", line 38, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a==0 or int(a**(1/3))**3==a\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwh2633je.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpwh2633je.py\", line 32,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpwh2633je.py\", line 24, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpwh2633je.py\", line\
    \ 20, in iscube\n    return a==0 or int(a**(1/3))**3==a\nTypeError: int() argument\
    \ must be a string, a bytes-like object or a real number, not 'complex'\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  elif a < 0:\n        a = -a\n    i = 1\n    while i**3 < a:\n        i += 1\n\
    \    return i**3 == a\n    \n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    # your code here\n    return a >= 0\
    \ and a**(1/3) == int(a**(1/3))\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdw85u4id.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpdw85u4id.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpdw85u4id.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or pow(a, 0.5)\
    \ % 1 == 0\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcv_kzour.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpcv_kzour.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpcv_kzour.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpcv_kzour.py\", line\
    \ 20, in iscube\n    return a == 0 or a == 1 or pow(a, 0.5) % 1 == 0\nTypeError:\
    \ unsupported operand type(s) for %: 'complex' and 'int'\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a < 0:\n        a = -a\n    x = 1\n    while a > 0:\n        a -= x ** 3\n\
    \        x += 1\n    return a == 0\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0pigu9bb.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp0pigu9bb.py\", line 42,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp0pigu9bb.py\", line 35, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return abs(a)**(1/3) % 1 == 0\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2cubo8u2.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp2cubo8u2.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp2cubo8u2.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823324
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a < 0:\n        a = -a\n    if a == 1:\n        return True\n    if a ==\
    \ 8:\n        return True\n    i = 2\n    while i*i*i <= a:\n        if i*i*i\
    \ == a:\n            return True\n        i += 1\n    return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823324
