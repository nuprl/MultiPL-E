language: py
name: HumanEval_114_minSubArraySum
results:
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # O(n)\n    for i in range(1, len(nums)):\n        nums[i] = min(nums[i],\
    \ nums[i] + nums[i - 1])\n    return min(nums)\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = nums[0]\n    current_sum = nums[0]\n    for n in nums[1:]:\n \
    \       current_sum = min(current_sum + n, n)\n        min_sum = min(min_sum,\
    \ current_sum)\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if not nums:\n        return 0\n    minimum = float('inf')\n    current\
    \ = 0\n    for num in nums:\n        current += num\n        minimum = min(minimum,\
    \ current)\n        current = max(current, 0)\n    return minimum\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyv2j8i5m.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpyv2j8i5m.py\", line 37,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpyv2j8i5m.py\", line\
    \ 23, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return\
    \ nums[0]\n    if len(nums) == 2:\n        return min(nums[0], nums[1])\n    min_so_far\
    \ = nums[0]\n    min_ending_here = nums[0]\n    for i in range(1, len(nums)):\n\
    \        min_ending_here = min(nums[i], min_ending_here + nums[i])\n        min_so_far\
    \ = min(min_so_far, min_ending_here)\n    return min_so_far\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    curr_sum = nums[0]\n    min_sum = nums[0]\n    for n in nums[1:]:\n    \
    \    curr_sum = min(n, curr_sum + n)\n        min_sum = min(min_sum, curr_sum)\n\
    \    return min_sum\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    s = 0\n    min_sum = 10000000000000000000000000000000\n    for i in range(len(nums)):\n\
    \        s += nums[i]\n        if min_sum > s:\n            min_sum = s\n    \
    \    if s > 0:\n            s = 0\n    return min_sum\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    minSum = None\n    for i in range(len(nums)):\n        currSum = 0\n   \
    \     for j in range(i, len(nums)):\n            currSum += nums[j]\n        \
    \    if minSum is None or currSum < minSum:\n                minSum = currSum\n\
    \    return minSum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_val = float('inf')\n    curr_val = 0\n    for num in nums:\n       \
    \ curr_val += num\n        min_val = min(min_val, curr_val)\n        curr_val\
    \ = max(curr_val, 0)\n    return min_val\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdx7sh7wz.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpdx7sh7wz.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpdx7sh7wz.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = nums[0]\n    current_sum = 0\n    for n in nums:\n        current_sum\
    \ += n\n        if current_sum < min_sum:\n            min_sum = current_sum\n\
    \        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # O(n) time\n    # O(1) space\n    _min = float('inf')\n    _sum = 0\n \
    \   for i in range(len(nums)):\n        _sum += nums[i]\n        _min = min(_min,\
    \ _sum)\n        if _sum > 0:\n            _sum = 0\n    return _min\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return\
    \ nums[0]\n    min_sum = float('inf')\n    for start in range(len(nums)):\n  \
    \      for end in range(start, len(nums)):\n            sub_array_sum = sum(nums[start:end+1])\n\
    \            if sub_array_sum < min_sum:\n                min_sum = sub_array_sum\n\
    \    return min_sum\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    pass\n\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4])\
    \ == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2,\
    \ -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdq7iwi93.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdq7iwi93.py\", line 31,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpdq7iwi93.py\", line\
    \ 17, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n       \
    \ curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplk9n2occ.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmplk9n2occ.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmplk9n2occ.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # approach:\n    # initialize a temp = 0\n    # loop through array\n   \
    \ #   if temp + current num < 0, reset temp = 0\n    #   else add num to temp\n\
    \    #   keep track of lowest sum\n    # return lowest sum\n    temp = 0\n   \
    \ minimum = float('inf')\n    for num in nums:\n        if temp + num < 0:\n \
    \           temp = 0\n        else:\n            temp += num\n        minimum\
    \ = min(minimum, temp)\n    return minimum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmzmmmgo7.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpmzmmmgo7.py\", line 45,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpmzmmmgo7.py\", line\
    \ 31, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_so_far = float('inf')\n    curr_min = 0\n    for i in range(len(nums)):\n\
    \        curr_min = min(curr_min + nums[i], nums[i])\n        min_so_far = min(min_so_far,\
    \ curr_min)\n    return min_so_far\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    for i in range(1, len(nums)):\n        nums[i] = min(nums[i], nums[i] +\
    \ nums[i - 1])\n    return min(nums)\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = min(nums)\n    total = 0\n    for i in range(len(nums)):\n   \
    \     for j in range(i, len(nums)):\n            total += nums[j]\n          \
    \  if total < min_sum:\n                min_sum = total\n    return min_sum\n\n\
    def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpis4b_tx6.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpis4b_tx6.py\", line 37,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpis4b_tx6.py\", line\
    \ 24, in check\n    assert candidate([-1, -2, -3]) == -6\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    global_min = nums[0]\n    local_min = 0\n    for num in nums:\n        local_min\
    \ = min(local_min + num, num)\n        global_min = min(global_min, local_min)\n\
    \    return global_min\n\ndef check(candidate):\n    assert candidate([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # get the minimum number in nums\n    if len(nums) == 1:\n        return\
    \ nums[0]\n    min_num = min(nums)\n    # if all numbers are negative\n    if\
    \ min_num < 0:\n        return min_num\n    for i in range(len(nums)):\n     \
    \   for j in range(i, len(nums)):\n            min_num = min(min_num, sum(nums[i:j\
    \ + 1]))\n    return min_num\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyl9o67e4.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpyl9o67e4.py\", line 40,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpyl9o67e4.py\", line\
    \ 27, in check\n    assert candidate([-1, -2, -3]) == -6\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    n = len(nums)\n    if n == 0:\n        return 0\n    dp = [0] * n\n    dp[0]\
    \ = nums[0]\n    for i in range(1, n):\n        dp[i] = min(dp[i - 1] + nums[i],\
    \ nums[i])\n    return min(dp)\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = 0\n    curr_sum = 0\n    for num in nums:\n        curr_sum +=\
    \ num\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n    return\
    \ min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3,\
    \ 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmponmgxtox.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmponmgxtox.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmponmgxtox.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = nums[0]\n    curr_sum = nums[0]\n    for i in range(1, len(nums)):\n\
    \        if curr_sum > 0:\n            curr_sum = nums[i]\n        else:\n   \
    \         curr_sum += nums[i]\n        min_sum = min(min_sum, curr_sum)\n    return\
    \ min_sum\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3,\
    \ 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # Check edge cases\n    if not nums:\n        return 0\n    elif len(nums)\
    \ == 1:\n        return nums[0]\n    # Initialize min sum to be the first two\
    \ elements in nums\n    sum_ = sum(nums[:2])\n    # Initialize min sum to be the\
    \ sum of the first two numbers\n    min_sum = sum_\n    # Iterate over the rest\
    \ of the numbers\n    for n in nums[2:]:\n        # If the sum is greater than\
    \ the min sum and the number, reassign the sum to\n        # be the number. This\
    \ indicates that the current subarray is not the\n        # minimum subarray sum\
    \ and we must start a new subarray with n.\n        if sum_ > min_sum and sum_\
    \ > n:\n            sum_ = n\n        # Otherwise, add the number to the subarray\
    \ sum\n        else:\n            sum_ += n\n        # Update the min sum if the\
    \ current sum is less than the min sum\n        if sum_ < min_sum:\n         \
    \   min_sum = sum_\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps71kkisv.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmps71kkisv.py\", line 52,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmps71kkisv.py\", line\
    \ 40, in check\n    assert candidate([-1, -2, -3, 2, -10]) == -14\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    n = len(nums)\n    current_sum = nums[0]\n    min_sum = nums[0]\n    for\
    \ i in range(1, n):\n        current_sum = min(nums[i], current_sum + nums[i])\n\
    \        min_sum = min(current_sum, min_sum)\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n       \
    \ curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplk9n2occ.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmplk9n2occ.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmplk9n2occ.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n       \
    \ curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplk9n2occ.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmplk9n2occ.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmplk9n2occ.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = sum(nums)\n    curr_sum = 0\n    for i in range(len(nums)):\n\
    \        curr_sum += nums[i]\n        if curr_sum < min_sum:\n            min_sum\
    \ = curr_sum\n        if curr_sum > 0:\n            curr_sum = 0\n    return min_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = nums[0]\n    curr_sum = nums[0]\n    for i in range(1, len(nums)):\n\
    \        curr_sum = min(nums[i], curr_sum + nums[i])\n        min_sum = min(min_sum,\
    \ curr_sum)\n    return min_sum\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = 0\n    n = len(nums)\n    if n == 0:\n        return min_sum\n\
    \    curr_sum = 0\n    for i in range(n):\n        curr_sum += nums[i]\n     \
    \   if i == 0:\n            min_sum = curr_sum\n        else:\n            min_sum\
    \ = min(min_sum, curr_sum)\n        if curr_sum > 0:\n            curr_sum = 0\n\
    \    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    curr_min = float('inf')\n    sub_sum = 0\n    for num in nums:\n       \
    \ sub_sum += num\n        curr_min = min(curr_min, sub_sum)\n        if sub_sum\
    \ > 0:\n            sub_sum = 0\n    return curr_min\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    _min = sum(nums)\n    _sum = 0\n    for i in range(len(nums)):\n       \
    \ _sum += nums[i]\n        if _sum < _min:\n            _min = _sum\n        if\
    \ _sum > 0:\n            _sum = 0\n    return _min\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    minimum_sum = 0\n    for num in nums:\n        minimum_sum += num\n    for\
    \ i in range(len(nums)):\n        for j in range(i, len(nums)):\n            sub_array_sum\
    \ = 0\n            for k in range(i, j + 1):\n                sub_array_sum +=\
    \ nums[k]\n            if sub_array_sum < minimum_sum:\n                minimum_sum\
    \ = sub_array_sum\n    return minimum_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if len(nums) == 0:\n        return 0\n    current_sum = 0\n    min_sum =\
    \ nums[0]\n    for num in nums:\n        current_sum += num\n        if current_sum\
    \ < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n\
    \            current_sum = 0\n    return min_sum\n\ndef check(candidate):\n  \
    \  assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3])\
    \ == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    length = len(nums)\n    if length == 0:\n        return 0\n    elif length\
    \ == 1:\n        return nums[0]\n    else:\n        # pre-compute sum\n      \
    \  sum = 0\n        for i in range(length):\n            sum += nums[i]\n    \
    \        nums[i] = sum\n        min_sum = sum\n        for i in range(length):\n\
    \            if i > 0:\n                sum -= nums[i - 1]\n            for j\
    \ in range(i, length):\n                if nums[j] - nums[i] + nums[i] < min_sum:\n\
    \                    min_sum = nums[j] - nums[i] + nums[i]\n                if\
    \ min_sum == 0:\n                    return 0\n        return min_sum\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu61kjypx.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpu61kjypx.py\", line 49,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpu61kjypx.py\", line\
    \ 35, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n       \
    \ curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplk9n2occ.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmplk9n2occ.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmplk9n2occ.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_so_far = float('inf')\n    current_min = 0\n    for n in nums:\n   \
    \     current_min = min(current_min + n, n)\n        min_so_far = min(min_so_far,\
    \ current_min)\n    return min_so_far\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    mn = float('inf')\n    cum_sum = 0\n    for i in range(len(nums)):\n   \
    \     cum_sum += nums[i]\n        mn = min(mn, cum_sum)\n        if cum_sum >\
    \ 0:\n            cum_sum = 0\n    return mn\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if not nums:\n        return 0\n    start, end, current_sum, min_sum = 0,\
    \ 0, 0, nums[0]\n    while end < len(nums):\n        current_sum += nums[end]\n\
    \        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n  \
    \          current_sum = 0\n            start = end + 1\n        end += 1\n  \
    \  return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # current minimum sum\n    curr_min = nums[0]\n    # current sum\n    curr_sum\
    \ = nums[0]\n    # iterate over nums\n    for i in range(1, len(nums)):\n    \
    \    # current sum\n        curr_sum = min(nums[i], curr_sum + nums[i])\n    \
    \    # current minimum sum\n        curr_min = min(curr_min, curr_sum)\n    return\
    \ curr_min\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4])\
    \ == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2,\
    \ -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # [2, 3, 4, 1, 2, 4]\n    # 1 + 3 + 4 = 8, 2 = 10, 3 = 13\n    # [1, 2,\
    \ 4]\n\n    # [1, 2, 4]\n    # 1 + 2 = 3, 2 + 4 = 6\n    # [1, 2]\n\n    # [1,\
    \ 2]\n    # 1 + 2 = 3\n    # [1]\n\n    # [1]\n    # 1\n\n    # [1, 1, 1, 1, -2,\
    \ -3]\n    # 1 + 1 + 1 + 1 = 4, 2 = 6, 2 = 8, 2 = 10, 2 = 12\n    # [1, 1, 1,\
    \ 1]\n\n    # [1, 1, 1, 1]\n    # 1 + 1 + 1 = 3, 2 + 1 = 4, 3 + 1 = 4\n    # [1,\
    \ 1, 1]\n\n    # [1, 1, 1]\n    # 1 + 1 = 2, 2 + 1 = 3\n    # [1, 1]\n\n    #\
    \ [1, 1]\n    # 1 + 1 = 2\n    # [1]\n\n    # [1]\n    # 1\n\n    min_sum = float('inf')\n\
    \    curr_sum = 0\n    i = 0\n    j = 0\n    while j < len(nums):\n        curr_sum\
    \ += nums[j]\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n\
    \        if nums[i] <= curr_sum:\n            curr_sum -= nums[i]\n          \
    \  i += 1\n        j += 1\n    return min_sum\n\n\ndef check(candidate):\n   \
    \ assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3])\
    \ == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcxwbqepb.py\", line\
    \ 79, in <module>\n    test_check()\n  File \"/tmp/tmpcxwbqepb.py\", line 77,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpcxwbqepb.py\", line\
    \ 64, in check\n    assert candidate([-1, -2, -3]) == -6\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    current = nums[0]\n    minimum = nums[0]\n    for x in nums[1:]:\n     \
    \   current = min(x, current + x)\n        minimum = min(current, minimum)\n \
    \   return minimum\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2,\
    \ 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    res = nums[0]\n    for i in range(1, len(nums)):\n        nums[i] = min(nums[i],\
    \ nums[i] + nums[i - 1])\n        res = min(res, nums[i])\n    return res\n\n\
    def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = 0\n    if len(nums) == 0:\n        return min_sum\n    min_sum\
    \ = nums[0]\n    for i in range(len(nums)):\n        curr_sum = 0\n        for\
    \ j in range(i, len(nums)):\n            curr_sum += nums[j]\n            if curr_sum\
    \ < min_sum:\n                min_sum = curr_sum\n    return min_sum\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    for i in range(1, len(nums)):\n        nums[i] = min(nums[i - 1] + nums[i],\
    \ nums[i])\n    return min(nums)\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = sys.maxsize\n    curr_sum = 0\n    curr_min = 0\n    for n in\
    \ nums:\n        curr_sum += n\n        min_sum = min(min_sum, curr_sum - curr_min)\n\
    \        curr_min = min(curr_min, curr_sum)\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjas_ykzt.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpjas_ykzt.py\", line 37,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpjas_ykzt.py\", line\
    \ 23, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n  File \"/tmp/tmpjas_ykzt.py\"\
    , line 13, in minSubArraySum\n    min_sum = sys.maxsize\nNameError: name 'sys'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = None\n    for i in range(len(nums)):\n        for j in range(i,\
    \ len(nums)):\n            s = sum(nums[i:j+1])\n            if min_sum is None\
    \ or s < min_sum:\n                min_sum = s\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if not nums:\n        return 0\n    min_sum = nums[0]\n    curr_sum = 0\n\
    \    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum,\
    \ curr_sum)\n        if curr_sum > 0:\n            curr_sum = 0\n    return min_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # Dynamic programming:\n    # For any array nums, dp[i] will be the minimum\
    \ subarray sum\n    # from any subarray of nums from [0:i]\n    # The minimum\
    \ subarray sum from nums[0:i+1] is the min of:\n    #   1. dp[i], i.e. the minimum\
    \ subarray sum from any subarray of nums[0:i]\n    #   2. nums[i], the minimum\
    \ subarray sum for a subarray of just nums[i]\n    #   3. nums[i] + dp[i-1], i.e.\
    \ the minimum subarray sum from any subarray\n    #      of nums[0:i-1] plus nums[i]\n\
    \    dp = [0]*len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n\
    \        dp[i] = min(nums[i], nums[i] + dp[i-1], dp[i-1])\n    return min(dp)\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk3w6_h1n.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpk3w6_h1n.py\", line 42,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpk3w6_h1n.py\", line\
    \ 30, in check\n    assert candidate([-1, -2, -3, 2, -10]) == -14\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    total = 0\n    m = float('inf')\n    for i in range(len(nums)):\n      \
    \  total += nums[i]\n        m = min(m, total)\n        if total > 0:\n      \
    \      total = 0\n    return m\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    curr = 0\n    minimum = float('inf')\n    for i in range(len(nums)):\n \
    \       curr += nums[i]\n        minimum = min(minimum, curr)\n        if curr\
    \ > 0:\n            curr = 0\n    return minimum\n\ndef check(candidate):\n  \
    \  assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3])\
    \ == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return\
    \ nums[0]\n    curr_sum = nums[0]\n    min_sum = nums[0]\n    for i in range(1,\
    \ len(nums)):\n        curr_sum = min(nums[i], curr_sum + nums[i])\n        min_sum\
    \ = min(min_sum, curr_sum)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # Best possible sum is the sum of all positive integers in the list\n  \
    \  if min(nums) >= 0:\n        return min(nums)\n    # Best possible sum is the\
    \ sum of all negative integers in the list\n    if max(nums) <= 0:\n        return\
    \ sum(nums)\n    best = 0\n    temp = 0\n    for num in nums:\n        temp +=\
    \ num\n        if temp < best:\n            best = temp\n        if temp > 0:\n\
    \            temp = 0\n    return best\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    right = left = 0\n    current_sum = nums[0]\n    min_sum = current_sum\n\
    \    for idx, num in enumerate(nums[1:], 1):\n        current_sum += num\n   \
    \     if current_sum > min_sum:\n            min_sum = current_sum\n         \
    \   left = right\n            right = idx\n        if current_sum < 0:\n     \
    \       current_sum = 0\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe9p3fema.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpe9p3fema.py\", line 41,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpe9p3fema.py\", line\
    \ 27, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    current_sum = 0\n    for n in nums:\n      \
    \  current_sum += n\n        min_sum = min(min_sum, current_sum)\n        current_sum\
    \ = max(current_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpefpq38qc.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpefpq38qc.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpefpq38qc.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_so_far = float('inf')\n    cumulative_sum = 0\n    for num in nums:\n\
    \        cumulative_sum += num\n        min_so_far = min(min_so_far, cumulative_sum)\n\
    \        cumulative_sum = max(cumulative_sum, 0)\n    return min_so_far\n\ndef\
    \ check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt_ug4h98.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpt_ug4h98.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpt_ug4h98.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    pass\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4])\
    \ == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2,\
    \ -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv3a2gknh.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpv3a2gknh.py\", line 30,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpv3a2gknh.py\", line\
    \ 16, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # Approach: use dynamic programming and keep track of the minimum sum\n\
    \    # for the current sum and update it whenever we find a smaller sum\n    min_sum\
    \ = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum +=\
    \ num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum,\
    \ 0)\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1xu73pem.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp1xu73pem.py\", line 38,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp1xu73pem.py\", line\
    \ 24, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if len(nums) == 0:\n        return None\n    if len(nums) == 1:\n      \
    \  return nums[0]\n    min_sum = nums[0]\n    for i in range(len(nums)):\n   \
    \     curr_sum = 0\n        for j in range(i, len(nums)):\n            curr_sum\
    \ += nums[j]\n            if curr_sum < min_sum:\n                min_sum = curr_sum\n\
    \    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    sum_ = 0\n    min_sum = float('inf')\n    for num in nums:\n        sum_\
    \ += num\n        min_sum = min(min_sum, sum_)\n        if sum_ > 0:\n       \
    \     sum_ = 0\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = nums[0]\n    summ = nums[0]\n    for i in range(1, len(nums)):\n\
    \        if summ > 0:\n            summ = nums[i]\n        else:\n           \
    \ summ += nums[i]\n        min_sum = min(min_sum, summ)\n    return min_sum\n\n\
    def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    curr_min = float('inf')\n    curr_sum = 0\n    for num in nums:\n      \
    \  curr_sum += num\n        curr_min = min(curr_min, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return curr_min\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3xf5xgps.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp3xf5xgps.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp3xf5xgps.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = nums[0]\n    curr_sum = 0\n    for num in nums:\n        curr_sum\
    \ += num\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n   \
    \     if curr_sum > 0:\n            curr_sum = 0\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if len(nums) == 0:\n        return 0\n    min_so_far = nums[0]\n    curr_min\
    \ = nums[0]\n    for i in range(1, len(nums)):\n        curr_min = min(nums[i],\
    \ curr_min + nums[i])\n        min_so_far = min(min_so_far, curr_min)\n    return\
    \ min_so_far\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4])\
    \ == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2,\
    \ -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return\
    \ nums[0]\n    for i in range(1, len(nums)):\n        nums[i] = min(nums[i], nums[i]\
    \ + nums[i - 1])\n    return min(nums)\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if not nums:\n        return 0\n    min_sum = nums[0]\n    prev_min = min_sum\n\
    \    for num in nums[1:]:\n        prev_min = min(prev_min + num, num)\n     \
    \   min_sum = min(min_sum, prev_min)\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # Attempt 1: Brute force method\n    # Time O(n^2), Space O(1)\n    # minSum\
    \ = float('inf')\n    # for i in range(len(nums)):\n    #     currSum = 0\n  \
    \  #     for j in range(i, len(nums)):\n    #         currSum += nums[j]\n   \
    \ #         minSum = min(minSum, currSum)\n    # return minSum\n\n    # Attempt\
    \ 2: Store cumulative sum and find min sub-array\n    # Time O(n), Space O(n)\n\
    \    # sumArr = [0] * len(nums)\n    # sumArr[0] = nums[0]\n    # for i in range(1,\
    \ len(nums)):\n    #     sumArr[i] = sumArr[i - 1] + nums[i]\n    # minSum = sumArr[0]\n\
    \    # for i in range(1, len(nums)):\n    #     minSum = min(minSum, sumArr[i]\
    \ - sumArr[i - 1])\n    # return minSum\n\n    # Attempt 3: One pass. Track minimum\
    \ sum and sum of sub-array.\n    # Time O(n), Space O(1)\n    # minSum = float('inf')\n\
    \    # currSum = 0\n    # for i in range(len(nums)):\n    #     currSum += nums[i]\n\
    \    #     minSum = min(minSum, currSum)\n    #     currSum = min(currSum, 0)\n\
    \    # return minSum\n\ndef check(candidate):\n    assert candidate([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpao1m3_05.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpao1m3_05.py\", line 59,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpao1m3_05.py\", line\
    \ 45, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    curr_sum = 0\n    min_sum = nums[0]\n\n    for n in nums:\n        curr_sum\
    \ += n\n        min_sum = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum,\
    \ 0)\n\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5t9avugk.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp5t9avugk.py\", line 38,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp5t9avugk.py\", line\
    \ 24, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    n = len(nums)\n    dp = [None] * n\n    dp[0] = nums[0]\n    for i in range(1,\
    \ n):\n        dp[i] = min(dp[i-1] + nums[i], nums[i])\n    return min(dp)\n\n\
    def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = nums[0]\n    curr_sum = nums[0]\n    for num in nums[1:]:\n  \
    \      curr_sum = min(curr_sum + num, num)\n        min_sum = min(min_sum, curr_sum)\n\
    \    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if not nums:\n        return 0\n    # The idea is to keep a current_sum\
    \ and a max_sum.\n    # If current_sum becomes negative then we reset it to zero.\n\
    \    # We then add the current number to current_sum\n    # If current_sum is\
    \ greater than max_sum then we set max_sum to current_sum.\n    current_sum =\
    \ 0\n    min_sum = float('inf')\n    for num in nums:\n        current_sum +=\
    \ num\n        if current_sum < min_sum:\n            min_sum = current_sum\n\
    \        if current_sum < 0:\n            current_sum = 0\n    return min_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplr2081gn.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmplr2081gn.py\", line 44,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmplr2081gn.py\", line\
    \ 30, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    minimum_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n\
    \        current_sum += num\n        minimum_sum = min(minimum_sum, current_sum)\n\
    \        current_sum = max(current_sum, 0)\n    return minimum_sum\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpltfv2h5j.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpltfv2h5j.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpltfv2h5j.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    current_sum = nums[0]\n    min_sum = nums[0]\n    for num in nums[1:]:\n\
    \        current_sum = min(current_sum + num, num)\n        min_sum = min(current_sum,\
    \ min_sum)\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    n = len(nums)\n    min_curr = min_so_far = nums[0]\n    for i in range(1,\
    \ n):\n        min_curr = min(nums[i], min_curr + nums[i])\n        min_so_far\
    \ = min(min_so_far, min_curr)\n    return min_so_far\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    current_sum = 0\n    for i in range(len(nums)):\n\
    \        current_sum += nums[i]\n        min_sum = min(min_sum, current_sum)\n\
    \        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sub_sum = float('inf')\n    current_sub_sum = 0\n    for num in nums:\n\
    \        current_sub_sum += num\n        min_sub_sum = min(min_sub_sum, current_sub_sum)\n\
    \        current_sub_sum = max(current_sub_sum, 0)\n    return min_sub_sum\n\n\
    def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0mmunzql.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp0mmunzql.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp0mmunzql.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for i in range(len(nums)):\n\
    \        curr_sum += nums[i]\n        min_sum = min(min_sum, curr_sum)\n     \
    \   if curr_sum > 0:\n            curr_sum = 0\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # Intuition: if the sum of a window is larger than 0,\n    #    then there\
    \ must be a smaller subarray behind it.\n    #\n    # Algorithm: take in a number\
    \ and add it to the current sum.\n    #     If the current sum is less than the\
    \ smallest total,\n    #     update the smallest total. If the current sum is\
    \ larger\n    #     than zero, reset the current sum to 0.\n    min_sum = float('inf')\n\
    \    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        min_sum\
    \ = min(min_sum, curr_sum)\n        if curr_sum > 0:\n            curr_sum = 0\n\
    \    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = nums[0]\n    for i in range(len(nums)):\n        curr_sum = 0\n\
    \        for j in range(i, len(nums)):\n            curr_sum += nums[j]\n    \
    \        min_sum = min(min_sum, curr_sum)\n    return min_sum\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # Prefix sums\n    prefix_sums = [0] * (len(nums) + 1)\n    # Compute the\
    \ prefix sums\n    for i in range(1, len(prefix_sums)):\n        prefix_sums[i]\
    \ = prefix_sums[i - 1] + nums[i - 1]\n    # Variable to hold our minimum sum\n\
    \    min_sum = float('inf')\n    # Iterate through the prefix sums\n    for i\
    \ in range(len(prefix_sums)):\n        for j in range(i + 1, len(prefix_sums)):\n\
    \            # Get the difference between the prefix sums\n            min_sum\
    \ = min(min_sum, prefix_sums[j] - prefix_sums[i])\n    return min_sum\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if not nums:\n        return None\n    elif len(nums) == 1:\n        return\
    \ nums[0]\n    min_sum = float('inf')\n    left = 0\n    running_sum = 0\n   \
    \ for right in range(len(nums)):\n        running_sum += nums[right]\n       \
    \ while running_sum >= 0:\n            min_sum = min(min_sum, running_sum)\n \
    \           running_sum -= nums[left]\n            left += 1\n    return min_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplm0t2yqh.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmplm0t2yqh.py\", line 43,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmplm0t2yqh.py\", line\
    \ 29, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n  File \"/tmp/tmplm0t2yqh.py\"\
    , line 24, in minSubArraySum\n    running_sum -= nums[left]\nIndexError: list\
    \ index out of range\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = nums[0]\n    curr_sum = nums[0]\n    for i in range(1, len(nums)):\n\
    \        curr_sum = min(nums[i], curr_sum + nums[i])\n        min_sum = min(min_sum,\
    \ curr_sum)\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if not nums:\n        return 0\n    min_sum = float('inf')\n    curr_sum\
    \ = 0\n    for i in range(len(nums)):\n        curr_sum += nums[i]\n        min_sum\
    \ = min(min_sum, curr_sum)\n        if curr_sum > 0:\n            curr_sum = 0\n\
    \    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if nums is None or len(nums) == 0:\n        return 0\n    # Initialize a\
    \ minimum sum\n    _min = nums[0]\n    # This algorithm assumes that there's a\
    \ sub-array with a positive sum, so we\n    # set _sum as a negative number.\n\
    \    _sum = -nums[0]\n    for num in nums[1:]:\n        # If _sum + num is less\
    \ than zero, then start over again with a new _sum\n        if _sum + num < 0:\n\
    \            _sum = 0\n        else:\n            _sum += num\n        _min =\
    \ min(_min, _sum)\n    return _min\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_s0wyuwr.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp_s0wyuwr.py\", line 44,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp_s0wyuwr.py\", line\
    \ 31, in check\n    assert candidate([-1, -2, -3]) == -6\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    sum = 0\n    for num in nums:\n        sum +=\
    \ num\n        min_sum = min(min_sum, sum)\n        sum = max(sum, 0)\n    return\
    \ min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3,\
    \ 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8qhtssj4.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp8qhtssj4.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp8qhtssj4.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = nums[0]\n    current_sum = nums[0]\n    for num in nums[1:]:\n\
    \        current_sum = min(current_sum + num, num)\n        min_sum = min(min_sum,\
    \ current_sum)\n    return min_sum\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    for i in range(1, len(nums)):\n        nums[i] = min(nums[i], nums[i] +\
    \ nums[i - 1])\n    return min(nums)\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    res = float('inf')\n    cur = 0\n    for i in range(len(nums)):\n      \
    \  cur += nums[i]\n        res = min(res, cur)\n        if cur > 0:\n        \
    \    cur = 0\n    return res\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = sum(nums)\n    curr_sum = 0\n    for num in nums:\n        curr_sum\
    \ += num\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n   \
    \     if curr_sum > 0:\n            curr_sum = 0\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    cur_sum = sum_min = nums[0]\n    for i in range(1, len(nums)):\n       \
    \ cur_sum = min(nums[i], cur_sum + nums[i])\n        sum_min = min(sum_min, cur_sum)\n\
    \    return sum_min\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = nums[0]\n    current_sum = 0\n    for num in nums:\n        current_sum\
    \ += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n\
    \        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = sum(nums)\n    current_sum = 0\n    for i in range(len(nums)):\n\
    \        current_sum += nums[i]\n        if current_sum < min_sum:\n         \
    \   min_sum = current_sum\n        if current_sum > 0:\n            current_sum\
    \ = 0\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # Kadane's algorithm.\n    max_sum = nums[0]\n    running_sum = 0\n    for\
    \ n in nums:\n        running_sum += n\n        max_sum = max(max_sum, running_sum)\n\
    \        running_sum = max(running_sum, 0)\n    return max_sum\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpytbfzc03.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpytbfzc03.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpytbfzc03.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    running_sum = 0\n    min_sum = float('inf')\n    for n in nums:\n      \
    \  running_sum += n\n        min_sum = min(min_sum, running_sum)\n        if running_sum\
    \ > 0:\n            running_sum = 0\n    return min_sum\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    prev_sum = 0\n    for num in nums:\n       \
    \ prev_sum = min(prev_sum + num, num)\n        min_sum = min(min_sum, prev_sum)\n\
    \    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    n = len(nums)\n    if n == 0:\n        return 0\n    if n == 1:\n      \
    \  return nums[0]\n    min_sum = nums[0]\n    for i in range(n):\n        temp_sum\
    \ = 0\n        for j in range(i, n):\n            temp_sum += nums[j]\n      \
    \      if temp_sum < min_sum:\n                min_sum = temp_sum\n    return\
    \ min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3,\
    \ 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    minsum = float('inf')\n    cursum = 0\n    for num in nums:\n        cursum\
    \ += num\n        minsum = min(minsum, cursum)\n        cursum = max(cursum, 0)\n\
    \    return minsum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphwgngrer.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmphwgngrer.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmphwgngrer.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    total = float('inf')\n    current = 0\n    # Two pointers, j increases,\
    \ i shrinks\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n\
    \            current += nums[j]\n            total = min(total, current)\n   \
    \     current = 0\n    return total\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    for i in range(1, len(nums)):\n        nums[i] = min(nums[i], nums[i-1]\
    \ + nums[i])\n    return min(nums)\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n       \
    \ curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplk9n2occ.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmplk9n2occ.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmplk9n2occ.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    sub_sum = 0\n    for n in nums:\n        sub_sum\
    \ += n\n        min_sum = min(min_sum, sub_sum)\n        sub_sum = max(sub_sum,\
    \ 0)\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvn7n60qy.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpvn7n60qy.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpvn7n60qy.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    length = len(nums)\n    cur_sum = nums[0]\n    min_sum = cur_sum\n    for\
    \ i in range(1, length):\n        cur_sum = min(nums[i], cur_sum + nums[i])\n\
    \        min_sum = min(min_sum, cur_sum)\n    return min_sum\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_so_far = min_end_here = nums[0]\n    for n in nums[1:]:\n        min_end_here\
    \ = min(n, min_end_here + n)\n        min_so_far = min(min_so_far, min_end_here)\n\
    \    return min_so_far\n\ndef check(candidate):\n    assert candidate([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = sum(nums)\n    curr_sum = 0\n    if len(nums) == 1:\n        return\
    \ nums[0]\n    for num in nums:\n        curr_sum += num\n        if curr_sum\
    \ < min_sum:\n            min_sum = curr_sum\n        if curr_sum > 0:\n     \
    \       curr_sum = 0\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    start, end, min_sum = 0, 0, nums[0]\n    curr_sum = 0\n    while end < len(nums):\n\
    \        curr_sum += nums[end]\n        end += 1\n        while curr_sum < 0:\n\
    \            curr_sum -= nums[start]\n            start += 1\n        min_sum\
    \ = min(min_sum, curr_sum)\n    return min_sum\n\n\ndef check(candidate):\n  \
    \  assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3])\
    \ == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptikfncnf.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmptikfncnf.py\", line 40,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmptikfncnf.py\", line\
    \ 26, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    size = len(nums)\n    if size == 0:\n        return 0\n    # initialize\
    \ the subarray sum and the minimum sum to the first element\n    subarray_sum\
    \ = min_sum = nums[0]\n    # loop through the array and keep track of the running\
    \ minimum of the subarray sum\n    for i in range(1, size):\n        subarray_sum\
    \ = min(nums[i], subarray_sum + nums[i])\n        min_sum = min(min_sum, subarray_sum)\n\
    \    return min_sum\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    for i in range(1, len(nums)):\n        nums[i] = min(nums[i - 1] + nums[i],\
    \ nums[i])\n    return min(nums)\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    sum, min_sum = 0, nums[0]\n    for num in nums:\n        sum += num\n  \
    \      min_sum = min(min_sum, sum)\n        sum = max(sum, 0)\n    return min_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpajiggap0.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpajiggap0.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpajiggap0.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in\
    \ range(i, len(nums)):\n            min_sum = min(min_sum, sum(nums[i:j+1]))\n\
    \    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    res = nums[0]\n    curr_sum = 0\n    for num in nums:\n        curr_sum\
    \ += num\n        res = min(res, curr_sum)\n        curr_sum = max(curr_sum, 0)\n\
    \    return res\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2,\
    \ 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm7_t6w14.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpm7_t6w14.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpm7_t6w14.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n       \
    \ curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplk9n2occ.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmplk9n2occ.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmplk9n2occ.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    for i in range(1, len(nums)):\n        nums[i] = min(nums[i - 1] + nums[i],\
    \ nums[i])\n    return min(nums)\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    n = len(nums)\n    dp = [0] * n\n    dp[0] = nums[0]\n    for i in range(1,\
    \ n):\n        dp[i] = max(dp[i-1] + nums[i], nums[i])\n    return min(dp)\n\n\
    def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4yhgfqhm.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp4yhgfqhm.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp4yhgfqhm.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = nums[0]\n    current_sum = nums[0]\n    for num in nums[1:]:\n\
    \        current_sum = min(current_sum + num, num)\n        min_sum = min(min_sum,\
    \ current_sum)\n    return min_sum\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # Create a variable to keep track of the minimum sum\n    min_sum = float('inf')\n\
    \    # Initialize a variable to track the current sum\n    curr_sum = 0\n    #\
    \ Loop through the entire array\n    for n in nums:\n        # Keep adding the\
    \ sum to the current sum\n        curr_sum += n\n        # If the current sum\
    \ is less than the minimum sum, update the minimum sum\n        min_sum = min(min_sum,\
    \ curr_sum)\n        # If the current sum is negative, reset it to 0\n       \
    \ if curr_sum < 0:\n            curr_sum = 0\n    # Return the minimum sum\n \
    \   return min_sum\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2,\
    \ 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9o3b9oh2.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp9o3b9oh2.py\", line 43,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp9o3b9oh2.py\", line\
    \ 29, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if not nums:\n        return 0\n    min_sum = float('inf')\n    for i in\
    \ range(len(nums)):\n        curr_sum = 0\n        for j in range(i, len(nums)):\n\
    \            curr_sum += nums[j]\n            min_sum = min(min_sum, curr_sum)\n\
    \    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    for i in range(1, len(nums)):\n        nums[i] = min(nums[i], nums[i] +\
    \ nums[i - 1])\n    return min(nums)\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if not nums:\n        return 0\n    sum = 0\n    min_sum = nums[0]\n   \
    \ for num in nums:\n        sum += num\n        if sum < min_sum:\n          \
    \  min_sum = sum\n        if sum > 0:\n            sum = 0\n    return min_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    cur_min = min(nums)\n    cur_sum = 0\n    for i in range(len(nums)):\n \
    \       cur_sum += nums[i]\n        if cur_sum < cur_min:\n            cur_min\
    \ = cur_sum\n        if cur_sum > 0:\n            cur_sum = 0\n    return cur_min\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    cur_min, min_so_far = float('inf'), float('inf')\n    for i in range(len(nums)):\n\
    \        cur_min = min(cur_min, nums[i])\n        min_so_far = min(min_so_far,\
    \ cur_min)\n    return min_so_far\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxwmlgnom.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpxwmlgnom.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpxwmlgnom.py\", line\
    \ 21, in check\n    assert candidate([-1, -2, -3]) == -6\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    for i in range(1, len(nums)):\n        nums[i] = min(nums[i - 1] + nums[i],\
    \ nums[i])\n    return min(nums)\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if min(nums) >= 0:\n        return min(nums)\n    min_sum = sum(nums)\n\
    \    current_sum = 0\n    for i in range(len(nums)):\n        current_sum += nums[i]\n\
    \        if current_sum < min_sum:\n            min_sum = current_sum\n      \
    \  if current_sum > 0:\n            current_sum = 0\n    return min_sum\n\ndef\
    \ check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    dp = [0] * len(nums)\n    for i in range(len(nums)):\n        dp[i] = min(dp[i-1]\
    \ + nums[i], nums[i])\n    return min(dp)\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return\
    \ nums[0]\n    mini = nums[0]\n    for i in range(len(nums)):\n        for j in\
    \ range(i, len(nums)):\n            if nums[i:j+1] == []:\n                continue\n\
    \            if sum(nums[i:j+1]) < mini:\n                mini = sum(nums[i:j+1])\n\
    \    return mini\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2,\
    \ 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    current_sum = nums[0]\n    lowest_sum = current_sum\n    for num in nums[1:]:\n\
    \        current_sum = max(num, current_sum + num)\n        lowest_sum = min(lowest_sum,\
    \ current_sum)\n    return lowest_sum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpot00q963.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpot00q963.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpot00q963.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    total = min_so_far = min_total = nums[0]\n    for n in nums[1:]:\n     \
    \   min_so_far = min(n, min_so_far + n)\n        min_total = min(min_total, min_so_far)\n\
    \    return min_total\n\ndef check(candidate):\n    assert candidate([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    sum = 0\n    for i in range(len(nums)):\n  \
    \      sum += nums[i]\n        min_sum = min(min_sum, sum)\n        if sum > 0:\n\
    \            sum = 0\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n       \
    \ curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplk9n2occ.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmplk9n2occ.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmplk9n2occ.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    for i in range(1, len(nums)):\n        nums[i] = min(nums[i - 1] + nums[i],\
    \ nums[i])\n    return min(nums)\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return\
    \ nums[0]\n    min_so_far = nums[0]\n    min_ending_here = nums[0]\n    for i\
    \ in range(1, len(nums)):\n        min_ending_here = min(nums[i], min_ending_here\
    \ + nums[i])\n        min_so_far = min(min_so_far, min_ending_here)\n    return\
    \ min_so_far\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4])\
    \ == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2,\
    \ -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    dp = [float('inf')] * len(nums)\n    for i in range(len(nums)):\n      \
    \  if i == 0:\n            dp[i] = nums[i]\n        else:\n            dp[i] =\
    \ min(dp[i-1], 0) + nums[i]\n    return min(dp)\n\ndef check(candidate):\n   \
    \ assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3])\
    \ == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    best = curr = float('inf')\n    for n in nums:\n        curr = min(curr\
    \ + n, n)\n        best = min(best, curr)\n    return best\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if not nums:\n        return 0\n    res = float('inf')\n    cum_sum = 0\n\
    \    for i in range(len(nums)):\n        cum_sum += nums[i]\n        res = min(res,\
    \ cum_sum)\n        if cum_sum > 0:\n            cum_sum = 0\n    return res\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    total = res = 0\n    for num in nums:\n        total += num\n        res\
    \ = min(res, total)\n    return res\n\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8q9ewya4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp8q9ewya4.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp8q9ewya4.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # Two pointers\n    left = 0\n    min_sum = float('inf')\n    total = 0\n\
    \    for right in range(len(nums)):\n        total += nums[right]\n        while\
    \ total >= 0:\n            min_sum = min(min_sum, total)\n            total -=\
    \ nums[left]\n            left += 1\n    return min_sum\n\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nan9f_s.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp9nan9f_s.py\", line 41,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp9nan9f_s.py\", line\
    \ 27, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n  File \"/tmp/tmp9nan9f_s.py\"\
    , line 21, in minSubArraySum\n    total -= nums[left]\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if not nums:\n        return 0\n    sub = nums[0]\n    result = nums[0]\n\
    \    for i in range(1, len(nums)):\n        sub = min(nums[i], sub + nums[i])\n\
    \        result = min(result, sub)\n    return result\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    best = float('inf')\n    total = 0\n    for i in range(len(nums)):\n   \
    \     if nums[i] < best:\n            best = nums[i]\n        total += nums[i]\n\
    \        if total < best:\n            best = total\n        if total > 0:\n \
    \           total = 0\n    return best\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = nums[0]\n    sum = nums[0]\n    for i in range(1, len(nums)):\n\
    \        sum = max(nums[i], sum + nums[i])\n        min_sum = min(min_sum, sum)\n\
    \    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvnn_w1__.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpvnn_w1__.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpvnn_w1__.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = 0\n    min_sub_array = []\n    for i in range(len(nums)):\n  \
    \      for j in range(i + 1, len(nums) + 1):\n            sub_array = nums[i:j]\n\
    \            sum_sub_array = sum(sub_array)\n            if len(min_sub_array)\
    \ == 0 or sum_sub_array < min_sum:\n                min_sum = sum_sub_array\n\
    \                min_sub_array = sub_array\n    return min_sum\n\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    curr_sum = 0\n    min_sum = math.inf\n    for n in nums:\n        curr_sum\
    \ += n\n        min_sum = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum,\
    \ 0)\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjv42ixoc.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjv42ixoc.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpjv42ixoc.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n  File \"/tmp/tmpjv42ixoc.py\"\
    , line 14, in minSubArraySum\n    min_sum = math.inf\nNameError: name 'math' is\
    \ not defined\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # Test for None\n    if nums is None:\n        return None\n    # Test for\
    \ empty\n    if len(nums) == 0:\n        return None\n    # Test for single element\n\
    \    if len(nums) == 1:\n        return nums[0]\n    # Test for single element\n\
    \    if len(nums) == 2:\n        return min(nums[0], nums[1])\n    # Initialize\
    \ min\n    min_sum = nums[0]\n    # Initialize temporary sum\n    temp_sum = 0\n\
    \    # Iterate through nums\n    for x in nums:\n        # Add num to temp sum\n\
    \        temp_sum += x\n        # If temp sum is less than min sum, then reset\
    \ min sum\n        if temp_sum < min_sum:\n            min_sum = temp_sum\n  \
    \      # If temp sum is less than 0, reset to 0\n        if temp_sum < 0:\n  \
    \          temp_sum = 0\n    return min_sum\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp37irmpv4.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmp37irmpv4.py\", line 55,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp37irmpv4.py\", line\
    \ 41, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if len(nums) == 0:\n        return 0\n    cur_sum = nums[0]\n    min_sum\
    \ = nums[0]\n    for i in range(1, len(nums)):\n        cur_sum = min(nums[i],\
    \ cur_sum + nums[i])\n        min_sum = min(min_sum, cur_sum)\n    return min_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_so_far = float('inf')\n    max_ending_here = 0\n    for num in nums:\n\
    \        max_ending_here = max(max_ending_here + num, num)\n        min_so_far\
    \ = min(min_so_far, max_ending_here)\n    return min_so_far\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1y0lrwpu.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp1y0lrwpu.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp1y0lrwpu.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    current_min = float('inf')\n    current_sum = 0\n    for num in nums:\n\
    \        current_sum += num\n        current_min = min(current_min, current_sum)\n\
    \        current_sum = max(current_sum, 0)\n    return current_min\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbryligob.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpbryligob.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpbryligob.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = nums[0]\n    curr_sum = 0\n    for n in nums:\n        curr_sum\
    \ += n\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n     \
    \   if curr_sum > 0:\n            curr_sum = 0\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    cur_sum = 0\n    min_sum = nums[0]\n    for num in nums:\n        cur_sum\
    \ += num\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n     \
    \   if cur_sum > 0:\n            cur_sum = 0\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = nums[0]\n    current_sum = nums[0]\n    n = len(nums)\n    for\
    \ i in range(1, n):\n        current_sum = max(nums[i], current_sum + nums[i])\n\
    \        min_sum = min(min_sum, current_sum)\n    return min_sum\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptpjiyr9t.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptpjiyr9t.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmptpjiyr9t.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_so_far = nums[0]\n    curr_min = nums[0]\n    for n in nums[1:]:\n \
    \       curr_min = min(n, curr_min + n)\n        min_so_far = min(min_so_far,\
    \ curr_min)\n    return min_so_far\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if not nums:\n        return 0\n    min_sum = nums[0]\n    sum_ = 0\n  \
    \  for n in nums:\n        sum_ += n\n        min_sum = min(min_sum, sum_)\n \
    \       if sum_ < 0:\n            sum_ = 0\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplwnj12p4.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmplwnj12p4.py\", line 39,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmplwnj12p4.py\", line\
    \ 25, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    total = 0\n    res = float('inf')\n    left = 0\n    for right in range(len(nums)):\n\
    \        total += nums[right]\n        while total >= 0:\n            res = min(res,\
    \ total)\n            total -= nums[left]\n            left += 1\n    return res\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmzdachoi.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpmzdachoi.py\", line 39,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpmzdachoi.py\", line\
    \ 25, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n  File \"/tmp/tmpmzdachoi.py\"\
    , line 20, in minSubArraySum\n    total -= nums[left]\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    acc = 0\n    curr_min = float('inf')\n    for n in nums:\n        acc +=\
    \ n\n        curr_min = min(curr_min, acc)\n        if acc < 0:\n            acc\
    \ = 0\n    return curr_min\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgs5xd5v3.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpgs5xd5v3.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpgs5xd5v3.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    total = running_sum = nums[0]\n    for i in range(1, len(nums)):\n     \
    \   if running_sum > 0:\n            running_sum = 0\n        running_sum += nums[i]\n\
    \        total = min(total, running_sum)\n    return total\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    n = len(nums)\n    min_sum = float('inf')\n    for start in range(n):\n\
    \        for end in range(start, n):\n            sub_sum = sum(nums[start:end+1])\n\
    \            min_sum = min(min_sum, sub_sum)\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if sum(nums) == min(nums):\n        return min(nums)\n    minSum = float('inf')\n\
    \    currSum = 0\n    for i in range(len(nums)):\n        currSum += nums[i]\n\
    \        if currSum < minSum:\n            minSum = currSum\n        if currSum\
    \ > 0:\n            currSum = 0\n    return minSum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if len(nums) == 0:\n        return 0\n    min_sum = float('inf')\n    curr_sum\
    \ = 0\n    for i in range(len(nums)):\n        curr_sum += nums[i]\n        min_sum\
    \ = min(min_sum, curr_sum)\n        if curr_sum > 0:\n            curr_sum = 0\n\
    \    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    r = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n\
    \            s = sum(nums[i:j+1])\n            if i == 0 and j == 0:\n       \
    \         r = s\n            else:\n                r = min(r, s)\n    return\
    \ r\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n\
    \    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2,\
    \ -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for i in range(len(nums)):\n\
    \        curr_sum += nums[i]\n        min_sum = min(min_sum, curr_sum)\n     \
    \   if curr_sum > 0:\n            curr_sum = 0\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if not nums:\n        return 0\n    else:\n        sub_sum = float('inf')\n\
    \        for i in range(len(nums)):\n            for j in range(i, len(nums)):\n\
    \                sub_sum = min(sub_sum, sum(nums[i:j+1]))\n        return sub_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if not nums:\n        return 0\n    cur_sum = 0\n    min_sum = float('inf')\n\
    \    for num in nums:\n        cur_sum += num\n        min_sum = min(min_sum,\
    \ cur_sum)\n        if cur_sum > 0:\n            cur_sum = 0\n    return min_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    minSum = nums[0]\n    for i in range(len(nums)):\n        subSum = 0\n \
    \       for j in range(i, len(nums)):\n            subSum += nums[j]\n       \
    \     if subSum < minSum:\n                minSum = subSum\n    return minSum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # Assign variables\n    current_sum = 0\n    minimum_sum = nums[0]\n   \
    \ # For each element\n    for i in range(len(nums)):\n        # Add element to\
    \ current sum\n        current_sum += nums[i]\n        # If current sum is less\
    \ than minimum sum, set minimum sum to current sum\n        if current_sum < minimum_sum:\n\
    \            minimum_sum = current_sum\n        # If current sum is less than\
    \ 0, assign current sum to 0\n        if current_sum < 0:\n            current_sum\
    \ = 0\n    return minimum_sum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2sq5r46r.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp2sq5r46r.py\", line 43,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp2sq5r46r.py\", line\
    \ 29, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    total = minimum = 0\n    for num in nums:\n        total += num\n      \
    \  minimum = min(minimum, total)\n    return minimum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ol7t3bd.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp9ol7t3bd.py\", line 34,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp9ol7t3bd.py\", line\
    \ 20, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    res = 1 << 31\n    n = len(nums)\n    for l in range(n):\n        for r\
    \ in range(l, n):\n            ans = sum(nums[l:r+1])\n            res = min(res,\
    \ ans)\n    return res\n\ndef check(candidate):\n    assert candidate([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = nums[0]\n    max_sum = min_sum\n    current_sum = 0\n    for num\
    \ in nums:\n        current_sum += num\n        if current_sum < min_sum:\n  \
    \          min_sum = current_sum\n        if current_sum > max_sum:\n        \
    \    max_sum = current_sum\n    return min_sum if min_sum < 0 else max_sum\n\n\
    def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwqrcp4cw.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpwqrcp4cw.py\", line 39,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpwqrcp4cw.py\", line\
    \ 25, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    current_sum = 0\n    for n in nums:\n      \
    \  current_sum += n\n        min_sum = min(min_sum, current_sum)\n        current_sum\
    \ = max(current_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpefpq38qc.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpefpq38qc.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpefpq38qc.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    sub_array_sum = 0\n    min_sub_array_sum = float('inf')\n    for num in\
    \ nums:\n        sub_array_sum += num\n        min_sub_array_sum = min(min_sub_array_sum,\
    \ sub_array_sum)\n        sub_array_sum = max(sub_array_sum, 0)\n    return min_sub_array_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqwh2wmxj.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpqwh2wmxj.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpqwh2wmxj.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # Kadane's algorithm\n    # We use the fact that the min sum must be less\
    \ than 0\n    # Since the min subarray is non-empty, the min subarray sum must\
    \ be less than 0\n    # Why? If the sum of the subarray is 0, that implies that\
    \ every element in the\n    # subarray sum to 0, which will violate the property\
    \ that the min subarray must be\n    # non-empty.\n    min_sum = 0\n    curr_sum\
    \ = 0\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum,\
    \ curr_sum)\n        curr_sum = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprs4gu7rt.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmprs4gu7rt.py\", line 42,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmprs4gu7rt.py\", line\
    \ 28, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    minSum = sum(nums)\n    currSum = 0\n    for num in nums:\n        currSum\
    \ += num\n        if currSum < minSum:\n            minSum = currSum\n       \
    \ if currSum > 0:\n            currSum = 0\n    return minSum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_so_far = float('inf')\n    curr_min = 0\n    for num in nums:\n    \
    \    curr_min = min(curr_min + num, num)\n        min_so_far = min(min_so_far,\
    \ curr_min)\n    return min_so_far\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    curr_min = nums[0]\n    sum_so_far = 0\n    for num in nums:\n        sum_so_far\
    \ += num\n        curr_min = min(curr_min, sum_so_far)\n        if sum_so_far\
    \ > 0:\n            sum_so_far = 0\n    return curr_min\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    cumm = running_min = float('inf')\n    for i in nums:\n        cumm = min(cumm\
    \ + i, i)\n        running_min = min(running_min, cumm)\n    return running_min\n\
    def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    cur_sum = float('inf')\n    min_sum = float('inf')\n    for i in range(len(nums)):\n\
    \        cur_sum = min(nums[i], cur_sum + nums[i])\n        min_sum = min(min_sum,\
    \ cur_sum)\n    return min_sum\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # The idea of Kadane's Algorithm is to start from the beginning of the\n\
    \    # array and update the current sum by adding the current element to it.\n\
    \    # If the current sum becomes less than zero, then we restart the current\n\
    \    # sum at the next element.\n\n    # If the current sum becomes less than\
    \ zero, then we restart the current\n    # sum at the next element.\n    current_sum\
    \ = nums[0]\n    min_sum = nums[0]\n\n    for num in nums[1:]:\n        current_sum\
    \ = max(current_sum + num, num)\n        min_sum = min(min_sum, current_sum)\n\
    \n    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps_0okzop.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmps_0okzop.py\", line 44,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmps_0okzop.py\", line\
    \ 30, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    minSum = float('inf')\n    currSum = 0\n    for num in nums:\n        currSum\
    \ += num\n        minSum = min(minSum, currSum)\n        currSum = max(currSum,\
    \ 0)\n    return minSum\n\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqx30y0tt.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpqx30y0tt.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpqx30y0tt.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in\
    \ range(i, len(nums)):\n            curr_sum = sum(nums[i:j+1])\n            if\
    \ curr_sum < min_sum:\n                min_sum = curr_sum\n    return min_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    res = float('inf')\n    curr_sum = 0\n    for n in nums:\n        curr_sum\
    \ += n\n        res = min(res, curr_sum)\n        curr_sum = max(curr_sum, 0)\n\
    \    return res\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4])\
    \ == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2,\
    \ -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe9e3vuwh.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpe9e3vuwh.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpe9e3vuwh.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # Base case: empty list\n    if len(nums) == 0:\n        return 0\n    #\
    \ Set min_sum to be the first element of the list\n    min_sum = nums[0]\n   \
    \ # Set current_sum to be equal to the first element of the list\n    current_sum\
    \ = nums[0]\n    # Loop over the list elements, starting at index 1\n    for i\
    \ in range(1, len(nums)):\n        # Get the current element of the list\n   \
    \     current_element = nums[i]\n        # Set current_sum to be equal to the\
    \ min between (current_sum + current_element)\n        # and the current_element\n\
    \        current_sum = min(current_sum + current_element, current_element)\n \
    \       # If current_sum is less than min_sum, then update min_sum to be equal\
    \ to\n        # current_sum\n        if current_sum < min_sum:\n            min_sum\
    \ = current_sum\n    # Return min_sum\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # if len(nums) == 1:\n    #     return nums[0]\n    # min_sum = nums[0]\n\
    \    # for i in range(len(nums)):\n    #     sub_array_sum = 0\n    #     for\
    \ j in range(i, len(nums)):\n    #         sub_array_sum += nums[j]\n    #   \
    \      if sub_array_sum < min_sum:\n    #             min_sum = sub_array_sum\n\
    \    # return min_sum\n    #\n    # if len(nums) == 1:\n    #     return nums[0]\n\
    \    # min_sum = nums[0]\n    # for i in range(len(nums)):\n    #     curr_sum\
    \ = 0\n    #     for j in range(i, len(nums)):\n    #         curr_sum += nums[j]\n\
    \    #         if curr_sum < min_sum:\n    #             min_sum = curr_sum\n\
    \    # return min_sum\n\n    start, end, min_sum = 0, 0, float('inf')\n    total\
    \ = 0\n    while end < len(nums):\n        total += nums[end]\n        while total\
    \ >= 0:\n            min_sum = min(min_sum, total)\n            total -= nums[start]\n\
    \            start += 1\n        end += 1\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnbip8r2_.py\", line\
    \ 63, in <module>\n    test_check()\n  File \"/tmp/tmpnbip8r2_.py\", line 61,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpnbip8r2_.py\", line\
    \ 47, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n  File \"/tmp/tmpnbip8r2_.py\"\
    , line 41, in minSubArraySum\n    total -= nums[start]\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # Manual\n    # TODO: use a queue\n    #\n    # current_min = nums[0]\n\
    \    # for i in range(len(nums)):\n    #     current_sum = 0\n    #     for j\
    \ in range(i, len(nums)):\n    #         current_sum += nums[j]\n    #       \
    \  if current_sum < current_min:\n    #             current_min = current_sum\n\
    \    # return current_min\n\n    # Alternative\n    # Kadane's algorithm\n   \
    \ # TODO: look into Kadane's algorithm to understand it more\n    max_ending_here\
    \ = min_so_far = nums[0]\n    for x in nums[1:]:\n        max_ending_here = min(x,\
    \ max_ending_here + x)\n        min_so_far = min(min_so_far, max_ending_here)\n\
    \    return min_so_far\n\n\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    n = len(nums)\n    dp = [0] * n\n    min_so_far = 0\n    min_sum = sum(nums)\n\
    \    for i in range(n):\n        dp[i] = max(dp[i-1] + nums[i], nums[i])\n   \
    \     min_so_far = min(min_so_far, dp[i])\n        min_sum = min(min_sum, min_so_far)\n\
    \    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl2ok3o30.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpl2ok3o30.py\", line 38,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpl2ok3o30.py\", line\
    \ 24, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if len(nums) == 0:\n        return None\n    if len(nums) == 1:\n      \
    \  return nums[0]\n    min_val = 0\n    min_sum = float('inf')\n    curr_sum =\
    \ 0\n    for i in range(len(nums)):\n        curr_sum += nums[i]\n        if curr_sum\
    \ < min_sum:\n            min_sum = curr_sum\n            min_val = i\n      \
    \  if curr_sum > 0:\n            curr_sum = 0\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    curr_sum = 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n\
    \        curr_sum += nums[i]\n        min_sum = min(min_sum, curr_sum)\n     \
    \   if curr_sum > 0:\n            curr_sum = 0\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    return _minSubArraySum(nums, 0, len(nums) - 1)\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp33o9vdky.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp33o9vdky.py\", line 30,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp33o9vdky.py\", line\
    \ 16, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n  File \"/tmp/tmp33o9vdky.py\"\
    , line 13, in minSubArraySum\n    return _minSubArraySum(nums, 0, len(nums) -\
    \ 1)\nNameError: name '_minSubArraySum' is not defined. Did you mean: 'minSubArraySum'?\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if not nums:\n        return 0\n    curr_sum = nums[0]\n    min_sum = curr_sum\n\
    \    for i in range(1, len(nums)):\n        curr_sum = max(nums[i], curr_sum +\
    \ nums[i])\n        min_sum = min(min_sum, curr_sum)\n    return min_sum\n\ndef\
    \ check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ez2ztwt.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp9ez2ztwt.py\", line 37,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp9ez2ztwt.py\", line\
    \ 23, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    sub_sum, mn = 0, nums[0]\n    for n in nums:\n        sub_sum += n\n   \
    \     mn = min(mn, sub_sum)\n        if sub_sum > 0:\n            sub_sum = 0\n\
    \    return mn\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2,\
    \ 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    length = len(nums)\n    min_sum = nums[0]\n    curr_sum = 0\n    for i in\
    \ range(length):\n        curr_sum += nums[i]\n        if curr_sum < min_sum:\n\
    \            min_sum = curr_sum\n        if curr_sum > 0:\n            curr_sum\
    \ = 0\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n       \
    \ curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvecwhofz.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpvecwhofz.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpvecwhofz.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # Start at the first element and keep going until you reach a negative number\n\
    \    # Then move to the next element and keep going until you reach a negative\
    \ number\n    # Keep continuing this pattern until you reach the end of the array\n\
    \    # If you do not reach a negative number, the min sum will be 0\n    i = 0\n\
    \    res = float('inf')\n    while i < len(nums):\n        j = i\n        curr_sum\
    \ = 0\n        while j < len(nums) and curr_sum >= 0:\n            curr_sum +=\
    \ nums[j]\n            res = min(res, curr_sum)\n            j += 1\n        i\
    \ += 1\n    return res\n\n\ndef check(candidate):\n    assert candidate([2, 3,\
    \ 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuuw5952p.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpuuw5952p.py\", line 45,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpuuw5952p.py\", line\
    \ 32, in check\n    assert candidate([-1, -2, -3]) == -6\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    cur_sum = 0\n    ans = float('inf')\n    for num in nums:\n        cur_sum\
    \ += num\n        ans = min(ans, cur_sum)\n        cur_sum = max(cur_sum, 0)\n\
    \    return ans\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2,\
    \ 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4mafd_7o.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp4mafd_7o.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp4mafd_7o.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = 0\n    curr_sum = 0\n    for num in nums:\n        curr_sum +=\
    \ num\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n    return\
    \ min_sum\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3,\
    \ 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr4rk27n6.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpr4rk27n6.py\", line 35,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpr4rk27n6.py\", line\
    \ 21, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    local_min = nums[0]\n    min_sofar = nums[0]\n    for i in range(1, len(nums)):\n\
    \        local_min = min(nums[i], local_min + nums[i])\n        min_sofar = min(local_min,\
    \ min_sofar)\n    return min_sofar\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    current_sum = 0\n    minimal_sum = float('inf')\n    for num in nums:\n\
    \        current_sum += num\n        minimal_sum = min(minimal_sum, current_sum)\n\
    \        if current_sum > 0:\n            current_sum = 0\n    return minimal_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    sum = 0\n    left = 0\n    for right in range(len(nums)):\n\
    \        sum += nums[right]\n        if sum <= min_sum:\n            min_sum =\
    \ sum\n        while sum > min_sum:\n            sum -= nums[left]\n         \
    \   left += 1\n    return min_sum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3w64dudk.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp3w64dudk.py\", line 40,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp3w64dudk.py\", line\
    \ 28, in check\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n  File \"/tmp/tmp3w64dudk.py\"\
    , line 21, in minSubArraySum\n    sum -= nums[left]\nIndexError: list index out\
    \ of range\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # minimum subarray sum\n    min_sub_sum = float('inf')\n    # smallest sum\
    \ to get the minimum subarray sum\n    sum_so_far = 0\n    for num in nums:\n\
    \        sum_so_far += num\n        if sum_so_far < min_sub_sum:\n           \
    \ min_sub_sum = sum_so_far\n        if sum_so_far > 0:\n            sum_so_far\
    \ = 0\n    return min_sub_sum\n\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if nums == []:\n        return 0\n    minSoFar = nums[0]\n    minTemp =\
    \ nums[0]\n    for i in range(1, len(nums)):\n        minTemp = min(nums[i], minTemp\
    \ + nums[i])\n        minSoFar = min(minSoFar, minTemp)\n    return minSoFar\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n    \
    \    current_sum += num\n        min_sum = min(min_sum, current_sum)\n       \
    \ current_sum = max(current_sum, 0)\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwxui5mxg.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpwxui5mxg.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpwxui5mxg.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if not nums:\n        return 0\n    current_sum = total_sum = nums[0]\n\
    \    for num in nums[1:]:\n        current_sum = min(current_sum + num, num)\n\
    \        total_sum = min(total_sum, current_sum)\n    return total_sum\n\ndef\
    \ check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    left, right = 0, 0\n    min_sum = sys.maxsize\n    sub_sum = 0\n    while\
    \ right < len(nums):\n        sub_sum += nums[right]\n        while sub_sum <\
    \ 0:\n            min_sum = min(min_sum, sub_sum)\n            sub_sum -= nums[left]\n\
    \            left += 1\n        right += 1\n    return min_sum\n\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzuya6fgp.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpzuya6fgp.py\", line 41,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpzuya6fgp.py\", line\
    \ 27, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n  File \"/tmp/tmpzuya6fgp.py\"\
    , line 14, in minSubArraySum\n    min_sum = sys.maxsize\nNameError: name 'sys'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    current_min = nums[0]\n    current_sum = 0\n    for num in nums:\n     \
    \   current_sum += num\n        if current_sum < current_min:\n            current_min\
    \ = current_sum\n        if current_sum > 0:\n            current_sum = 0\n  \
    \  return current_min\n\ndef check(candidate):\n    assert candidate([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if not nums:\n        return 0\n    min_sum = nums[0]\n    current_sum =\
    \ 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum,\
    \ current_sum)\n        if current_sum > 0:\n            current_sum = 0\n   \
    \ return min_sum\ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2,\
    \ 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    res = nums[0]\n    current_sum = nums[0]\n    for i in range(1, len(nums)):\n\
    \        current_sum = min(nums[i], current_sum + nums[i])\n        res = min(res,\
    \ current_sum)\n    return res\ndef check(candidate):\n    assert candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1,\
    \ -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n\
    \    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2,\
    \ -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n\
    \    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100,\
    \ -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert\
    \ candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n\
    \    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
