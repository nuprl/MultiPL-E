language: py
name: HumanEval_7_filter_by_substring
results:
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    res = []\n    for s in strings:\n\
    \        if substring in s:\n            res.append(s)\n    return res\n\nstrings\
    \ = ['abc', 'bacd', 'cde', 'array']\nsubstring = 'a'\nprint(filter_by_substring(strings,\
    \ substring))\n\nstrings = ['ABC', 'bacd', 'CDE', 'Array']\nsubstring = 'a'\n\
    print(filter_by_substring(strings, substring))\n\nstrings = ['abc', 'bacd', 'cde',\
    \ 'array']\nsubstring = 'A'\nprint(filter_by_substring(strings, substring))\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')\
    \ == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet',\
    \ 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n  \
    \  check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '[''abc'', ''bacd'', ''array'']

    [''bacd'', ''Array'']

    []

    '
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) == 0:\n        return\
    \ []\n    filtered_list = []\n    for string in strings:\n        if substring\
    \ in string:\n            filtered_list.append(string)\n    return filtered_list\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')\
    \ == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet',\
    \ 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n  \
    \  check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [\n        s for s in strings\n\
    \        if substring in s\n    ]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n \ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\nprint(filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'a'))\ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '[''abc'', ''bacd'', ''array'']

    '
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [word for word in strings\
    \ if substring in word]\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    new_list = []\n    for string in\
    \ strings:\n        if substring in string:\n            new_list.append(string)\n\
    \    return new_list\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    new_strings = []\n    for string\
    \ in strings:\n        if substring in string:\n            new_strings.append(string)\n\
    \    return new_strings\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    strings = [ string for string in\
    \ strings if substring in string ]\n    return strings\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [word for word in strings\
    \ if substring in word]\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    results = []\n    for string in\
    \ strings:\n        if substring in string:\n            results.append(string)\n\
    \    return results\ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    l = list()\n    for s in strings:\n\
    \        if substring in s:\n            l.append(s)\n    return l\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    new_list = []\n    for i in strings:\n\
    \        if substring in i:\n            new_list.append(i)\n    return new_list\n\
    \n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [i for i in strings if substring\
    \ in i]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [i for i in strings if substring\
    \ in i]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    # we can implement this using stdlib\
    \ functions\n    return list(filter(lambda string: substring in string, strings))\n\
    \n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\nprint(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')\
    \ == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet',\
    \ 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n  \
    \  check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '[''abc'', ''bacd'', ''array'']

    '
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string\
    \ in strings:\n        if substring in string:\n            filtered_strings.append(string)\n\
    \    return filtered_strings\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    # TODO finish this function!\n \
    \   pass\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n  \
    \  assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1engitkl.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp1engitkl.py\", line 20,\
    \ in test_check\n    check(filter_by_substring)\n  File \"/tmp/tmp1engitkl.py\"\
    , line 14, in check\n    assert candidate([], 'john') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [str for str in strings if\
    \ substring in str]\ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    strings_with_substring = []\n  \
    \  for string in strings:\n        if substring in string:\n            strings_with_substring.append(string)\n\
    \    return strings_with_substring\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [word for word in strings\
    \ if substring in word]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    lst = []\n    for i in strings:\n\
    \        if substring in i:\n            lst.append(i)\n    return lst\n\ndef\
    \ check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')\
    \ == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet',\
    \ 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n  \
    \  check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_list = []\n    for string\
    \ in strings:\n        if substring in string:\n            filtered_list.append(string)\n\
    \    return filtered_list\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [st for st in strings if\
    \ substring in st]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    assert type(strings) == list\n \
    \   assert type(substring) == str\n    assert all([type(s) == str for s in strings])\n\
    \    return [s for s in strings if substring in s]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    res = []\n    for str in strings:\n\
    \        if substring in str:\n            res.append(str)\n    return res\n\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')\
    \ == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet',\
    \ 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n  \
    \  check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    if not strings:\n        return\
    \ []\n    output = []\n    for item in strings:\n        if substring in item:\n\
    \            output.append(item)\n    return output\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for s\
    \ in strings:\n        if substring in s:\n            filtered_strings.append(s)\n\
    \    return filtered_strings\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    res = []\n    for string in strings:\n\
    \        if substring in string:\n            res.append(string)\n    return res\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')\
    \ == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet',\
    \ 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n  \
    \  check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    list_with_substring = []\n    for\
    \ string in strings:\n        if substring in string:\n            list_with_substring.append(string)\n\
    \    return list_with_substring\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string\
    \ in strings:\n        if substring in string:\n            filtered_strings.append(string)\n\
    \    return filtered_strings\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [str for str in strings if\
    \ substring in str]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    strings_filtered = []\n    for string\
    \ in strings:\n        if substring in string:\n            strings_filtered.append(string)\n\
    \    return strings_filtered\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for s\
    \ in strings:\n        if substring in s:\n            filtered_strings.append(s)\n\
    \    return filtered_strings\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string\
    \ in strings:\n        if substring in string:\n            filtered_strings.append(string)\n\
    \    return filtered_strings\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    output = []\n    for string in strings:\n\
    \        if substring in string:\n            output.append(string)\n    return\
    \ output\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n  \
    \  assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) == 0:\n        return\
    \ []\n    else:\n        return list(filter(lambda string: substring in string,\
    \ strings))\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n\
    \    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [st for st in strings if\
    \ substring in st]\ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    res = []\n    for string in strings:\n\
    \        if substring in string:\n            res.append(string)\n    return res\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')\
    \ == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet',\
    \ 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n  \
    \  check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_list = []\n    for string\
    \ in strings:\n        if substring in string:\n            filtered_list.append(string)\n\
    \    return filtered_list\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [st for st in strings if\
    \ substring in st]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    res = []\n    for s in strings:\n\
    \        if substring in s:\n            res.append(s)\n    return res\n\ndef\
    \ check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')\
    \ == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet',\
    \ 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n  \
    \  check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    res = [s for s in strings if substring\
    \ in s]\n    return res\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    substring_len = len(substring)\n\
    \    filtered_strings = []\n    for string in strings:\n        if substring ==\
    \ string[:substring_len]:\n            filtered_strings.append(string)\n    return\
    \ filtered_strings\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu4zuskkq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpu4zuskkq.py\", line 24,\
    \ in test_check\n    check(filter_by_substring)\n  File \"/tmp/tmpu4zuskkq.py\"\
    , line 20, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n"
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    new_strings = []\n    for s in strings:\n\
    \        if substring in s:\n            new_strings.append(s)\n    return new_strings\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')\
    \ == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet',\
    \ 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n  \
    \  check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [i for i in strings if substring\
    \ in i]\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [ s for s in strings if substring\
    \ in s ]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n  \
    \  assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [str for str in strings if\
    \ substring in str]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [str for str in strings if\
    \ substring in str]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    output = [word for word in strings\
    \ if substring in word]\n    return output\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    ans = []\n    for s in strings:\n\
    \        if substring in s:\n            ans.append(s)\n    return ans\n\ndef\
    \ check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')\
    \ == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet',\
    \ 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n  \
    \  check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [str for str in strings if\
    \ substring in str]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    # Create an empty list\n    filtered_strings\
    \ = []\n    # For each string in the input\n    for string in strings:\n     \
    \   # Check if substring is in the string\n        if substring in string:\n \
    \           # Append the string to filtered list\n            filtered_strings.append(string)\n\
    \    # Return the list\n    return filtered_strings\n\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [value for value in strings\
    \ if substring in value]\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [a for a in strings if substring\
    \ in a]\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [st for st in strings if\
    \ substring in st]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [ string for string in strings\
    \ if substring in string ]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [str for str in strings if\
    \ substring in str]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    new_list = []\n    for string in\
    \ strings:\n        if substring in string:\n            new_list.append(string)\n\
    \    return new_list\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    if substring == '':\n        return\
    \ strings\n    res = []\n    for string in strings:\n        if substring in string:\n\
    \            res.append(string)\n    return res\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [elem for elem in strings\
    \ if substring in elem]\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    output = []\n    for string in strings:\n\
    \        if substring in string:\n            output.append(string)\n    return\
    \ output\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n  \
    \  assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string\
    \ in strings:\n        if substring in string:\n            filtered_strings.append(string)\n\
    \    return filtered_strings\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [word for word in strings\
    \ if substring in word]\n\nstrings = ['abc', 'bacd', 'cde', 'array']\nprint(filter_by_substring(strings,\
    \ 'a'))\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '[''abc'', ''bacd'', ''array'']

    '
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for s\
    \ in strings:\n        if substring in s:\n            filtered_strings.append(s)\n\
    \    return filtered_strings\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n \n    \ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    output = []\n    for string in strings:\n\
    \        if substring in string:\n            output.append(string)\n    return\
    \ output\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n  \
    \  assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    output = []\n    for value in strings:\n\
    \        if substring in value:\n            output.append(value)\n    return\
    \ output\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n  \
    \  assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    strings = filter(lambda x: substring\
    \ in x, strings)\n    return list(strings)\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    if not strings:\n        return\
    \ []\n    return [string for string in strings if substring in string]\n\ndef\
    \ check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')\
    \ == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet',\
    \ 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n  \
    \  check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoiam0626.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpoiam0626.py\", line 19,\
    \ in test_check\n    check(filter_by_substring)\n  File \"/tmp/tmpoiam0626.py\"\
    , line 13, in check\n    assert candidate([], 'john') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659823379
