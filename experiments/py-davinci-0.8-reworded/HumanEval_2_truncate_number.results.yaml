language: py
name: HumanEval_2_truncate_number
results:
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return math.modf(number)[0]\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzl6jq7ix.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpzl6jq7ix.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpzl6jq7ix.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpzl6jq7ix.py\"\
    , line 10, in truncate_number\n    return math.modf(number)[0]\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return (number - int(number))\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    number = round(number, 2)\n    return number - math.floor(number)\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb1r02by1.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpb1r02by1.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpb1r02by1.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpb1r02by1.py\"\
    , line 11, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n    \ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return round(number - int(number), 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpst5khayv.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpst5khayv.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpst5khayv.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpst5khayv.py\"\
    , line 10, in truncate_number\n    return number - floor(number)\nNameError: name\
    \ 'floor' is not defined. Did you mean: 'float'?\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv1s_6vj0.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpv1s_6vj0.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpv1s_6vj0.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpv1s_6vj0.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = floor(number)\n    decimal_part = number\
    \ - integer_part\n    return decimal_part\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2c6p90_.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmph2c6p90_.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmph2c6p90_.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmph2c6p90_.py\"\
    , line 10, in truncate_number\n    integer_part = floor(number)\nNameError: name\
    \ 'floor' is not defined. Did you mean: 'float'?\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv1s_6vj0.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpv1s_6vj0.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpv1s_6vj0.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpv1s_6vj0.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    str_num = str(number)\n    int_part, decimal_part =\
    \ str_num.split('.')\n    decimal_part = '0.' + decimal_part\n    return float(decimal_part)\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n    \n    \ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer, decimal = math.modf(number)\n    return decimal\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvmzfq3vs.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpvmzfq3vs.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpvmzfq3vs.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpvmzfq3vs.py\"\
    , line 10, in truncate_number\n    integer, decimal = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    new_number = round(number - int(number), 2)\n    return\
    \ new_number\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n  \
    \  assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv1s_6vj0.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpv1s_6vj0.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpv1s_6vj0.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpv1s_6vj0.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # we need to use int here because otherwise floating\
    \ point math is weird\n    integer_part = int(number)\n    return number - integer_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpst5khayv.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpst5khayv.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpst5khayv.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpst5khayv.py\"\
    , line 10, in truncate_number\n    return number - floor(number)\nNameError: name\
    \ 'floor' is not defined. Did you mean: 'float'?\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n    \n    \ndef\
    \ check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7f32o4pv.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp7f32o4pv.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp7f32o4pv.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp7f32o4pv.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    number = abs(number)\n    return number - int(number)\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # return number - math.floor(number)\n    return number\
    \ % 1\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert\
    \ candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    number = str(number)\n    if '.' in number:\n      \
    \  idx = number.index('.')\n        number = number[idx + 1:]\n        number\
    \ = float('0.' + number)\n    else:\n        number = 0\n    return number\n\n\
    \ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # TODO: Complete the body of the function.\n    # You\
    \ can look at the test to see the expected behaviour.\n    decimal, integer =\
    \ math.modf(number)\n    return decimal\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl93yvqlr.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpl93yvqlr.py\", line 23,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpl93yvqlr.py\", line\
    \ 18, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpl93yvqlr.py\"\
    , line 12, in truncate_number\n    decimal, integer = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    return number - integer_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    _, decimals = math.modf(number)\n    return decimals\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkc_n0vig.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpkc_n0vig.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpkc_n0vig.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpkc_n0vig.py\"\
    , line 10, in truncate_number\n    _, decimals = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    number = math.modf(number)[0]\n    return number\n\n\
    def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgh5zqoga.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpgh5zqoga.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpgh5zqoga.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpgh5zqoga.py\"\
    , line 10, in truncate_number\n    number = math.modf(number)[0]\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    pass  # TODO: implement me!\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkuwhyma.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpkkuwhyma.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpkkuwhyma.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    truncated = int(number)\n    return number - truncated\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # return <complete this line>\n    # FIXME: Complete\
    \ this function\n    pass\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk_u7omk1.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpk_u7omk1.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpk_u7omk1.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must\
    \ be >= 0\")\n    return number - int(number)\n\n\ndef check(candidate):\n   \
    \ assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv1s_6vj0.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpv1s_6vj0.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpv1s_6vj0.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpv1s_6vj0.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number\
    \ - integer_part\n    return decimal_part\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return round(number - floor(number), 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph6hz4yk_.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmph6hz4yk_.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmph6hz4yk_.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmph6hz4yk_.py\"\
    , line 10, in truncate_number\n    return round(number - floor(number), 1)\nNameError:\
    \ name 'floor' is not defined. Did you mean: 'float'?\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    return number - integer_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = math.floor(number)\n    dec_part = number\
    \ - int_part\n    return dec_part\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8ejidwjx.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp8ejidwjx.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp8ejidwjx.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp8ejidwjx.py\"\
    , line 10, in truncate_number\n    int_part = math.floor(number)\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    return number - int_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # TODO: Code this function.\n    return\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_1qr6b55.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp_1qr6b55.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp_1qr6b55.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # you code here\n    x = str(number)\n    return float(x[x.find('.'):])\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    number = math.floor(number)\n    return number\n\n\n\
    def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4baz4mkd.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp4baz4mkd.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp4baz4mkd.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp4baz4mkd.py\"\
    , line 10, in truncate_number\n    number = math.floor(number)\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    return number - int_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # you code here\n    number_decimal = number - int(number)\n\
    \    return number_decimal\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return (number % 1)\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # YOUR CODE HERE\n    return number - int(number)\n\n\
    \ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv1s_6vj0.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpv1s_6vj0.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpv1s_6vj0.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpv1s_6vj0.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv1s_6vj0.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpv1s_6vj0.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpv1s_6vj0.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpv1s_6vj0.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    assert number >= 0.0, \"number must be positive\"\n\
    \    return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n@task\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1rm1fxx8.py\", line\
    \ 12, in <module>\n    @task\nNameError: name 'task' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = math.floor(number)\n    decimal_part\
    \ = number - integer_part\n    return decimal_part\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ehwewoo.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp7ehwewoo.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp7ehwewoo.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp7ehwewoo.py\"\
    , line 10, in truncate_number\n    integer_part = math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number > 0:\n        int_part = int(number)\n   \
    \     return number - int_part\n    else:\n        return 0\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer, decimals = math.modf(number)\n    return decimals\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3f99yzzr.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp3f99yzzr.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp3f99yzzr.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp3f99yzzr.py\"\
    , line 10, in truncate_number\n    integer, decimals = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return abs(number - int(number))\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # remove the integer part using the float modulo operation\n\
    \    decimal_part = float(number) % 1\n\n    return decimal_part\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    import math\n    return number - math.floor(number)\n\
    \ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # [Question 2]\n\n    return number - int(number)\n\n\
    \ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    dec_part = number - int_part\n\
    \    return dec_part\n\n\ndef check(candidate):\n    assert candidate(3.5) ==\
    \ 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # maybe some test fails when you run the file.\n   \
    \ # maybe some test passes when you run the file.\n    # maybe some test passes\
    \ when you run the file and a different one when\n    # you import the file.\n\
    \n    # try to understand why and fix the bug\n    return number - int(number)\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # return number - math.floor(number)\n    return number\
    \ % 1\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert\
    \ candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    if number < 0:\n       \
    \ raise ValueError(\"Given number must be positive\")\n    return number - int_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpst5khayv.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpst5khayv.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpst5khayv.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpst5khayv.py\"\
    , line 10, in truncate_number\n    return number - floor(number)\nNameError: name\
    \ 'floor' is not defined. Did you mean: 'float'?\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # doctest format\n    return number - math.floor(number)\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxptx1cog.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpxptx1cog.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpxptx1cog.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpxptx1cog.py\"\
    , line 11, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return math.modf(number)[0]\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgq371ecf.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpgq371ecf.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpgq371ecf.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpgq371ecf.py\"\
    , line 10, in truncate_number\n    return math.modf(number)[0]\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_number = int(number)\n    decimal_part = number\
    \ - int_number\n    return decimal_part\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return math.fmod(number, 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvnkqrgkq.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpvnkqrgkq.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpvnkqrgkq.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpvnkqrgkq.py\"\
    , line 10, in truncate_number\n    return math.fmod(number, 1)\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    #TODO: write the body of the function and remove the\
    \ pass statement below\n    pass\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ozf_0nt.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp0ozf_0nt.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp0ozf_0nt.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    import math\n    return number - math.floor(number)\n\
    \n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv1s_6vj0.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpv1s_6vj0.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpv1s_6vj0.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpv1s_6vj0.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # Complete the body of the function\n    # Hint: You\
    \ can use the modulo operator (%)\n    return number % 1\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    return number - integer_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    return number - integer_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpst5khayv.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpst5khayv.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpst5khayv.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpst5khayv.py\"\
    , line 10, in truncate_number\n    return number - floor(number)\nNameError: name\
    \ 'floor' is not defined. Did you mean: 'float'?\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must\
    \ be positive\")\n    integer_part = int(number)\n    return number - integer_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    decimal_part = number - int(number)\n    return decimal_part\n\
    \ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return round(number - int(number), 1)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2nach38k.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp2nach38k.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp2nach38k.py\", line\
    \ 14, in check\n    assert candidate(1.25) == 0.25\nAssertionError\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"The number\
    \ is not positive\")\n    integer_part = int(number)\n    decimal_part = number\
    \ - integer_part\n    return decimal_part\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    a = int(number)\n    return number - a\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return (number - int(number))\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    truncated = math.floor(number)\n    return number -\
    \ truncated\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n   \
    \ assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg7ojilnh.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpg7ojilnh.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpg7ojilnh.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpg7ojilnh.py\"\
    , line 10, in truncate_number\n    truncated = math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\nprint(truncate_number(4.5))\n\
    \ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '0.5

    '
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    return number - integer_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv1s_6vj0.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpv1s_6vj0.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpv1s_6vj0.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpv1s_6vj0.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    left_part, decimals = str(number).split('.')\n    return\
    \ float('0.' + decimals)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    return number - integer_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
