language: py
name: HumanEval_15_string_sequence
results:
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    # assign\
    \ first part of string\n    s = str(0)\n    # loop through 1 to n and add string\
    \ to s\n    for i in range(1, n + 1):\n        s += ' ' + str(i)\n    return s\n\
    \n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3)\
    \ == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n\
    \    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    string_result\
    \ = ''\n    for i in range(n + 1):\n        string_result += str(i) + ' '\n  \
    \  return string_result.strip()\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ == 0:\n        return '0'\n    else:\n        return string_sequence(n - 1)\
    \ + ' ' + str(n)\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n\
    \    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4\
    \ 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ == 0:\n        return '0'\n    else:\n        return string_sequence(n - 1)\
    \ + ' ' + str(n)\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n\
    \    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4\
    \ 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    i = 0\n\
    \    string = \"\"\n    while i <= n:\n        string += str(i) + \" \"\n    \
    \    i += 1\n    return string[:-1]\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    #Assume\
    \ n is positive\n    return ' '.join(str(i) for i in range(n+1))\n\ndef check(candidate):\n\
    \    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert\
    \ candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    numbers\
    \ = []\n    for i in range(n + 1):\n        numbers.append(str(i))\n    return\
    \ ' '.join(numbers)\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n\
    \    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4\
    \ 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(num) for num in range(n + 1))\n\nprint(string_sequence(5))\n\
    def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3)\
    \ == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n\
    \    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '0 1 2 3 4 5

    '
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ == 0:\n        return \"0\"\n    else:\n        return string_sequence(n - 1)\
    \ + \" \" + str(n)\n\ndef check(candidate):\n    assert candidate(0) == '0'\n\
    \    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4\
    \ 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    numbers\
    \ = []\n    for num in range(n + 1):\n        numbers.append(str(num))\n    return\
    \ ' '.join(numbers)\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n\
    \    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4\
    \ 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    i = 0\n\
    \    string = \"\"\n    while i <= n:\n        string += str(i) + \" \"\n    \
    \    i += 1\n    return string[:-1]\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(i) for i in range(n + 1))\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ < 0:\n        n = abs(n)\n    return ' '.join(map(str, range(n + 1)))\n\n\n\
    def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3)\
    \ == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n\
    \    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ == 0:\n        return '0'\n    else:\n        return string_sequence(n - 1)\
    \ + ' ' + str(n)\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n\
    \    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4\
    \ 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: -1
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(map(str, range(n + 1)))\n\n\n@given(st.integers(min_value=0, max_value=100))\n\
    def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3)\
    \ == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n\
    \    check(string_sequence)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr8y32b5m.py\", line\
    \ 11, in <module>\n    @given(st.integers(min_value=0, max_value=100))\nNameError:\
    \ name 'given' is not defined\n"
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    # Calling\
    \ the function with an empty string will return the empty string\n    if n ==\
    \ 0:\n        return str(n)\n    # This is the recursive case. The range of numbers\
    \ will be one less than the input,\n    # and concatenated with a space and the\
    \ input\n    else:\n        return string_sequence(n - 1) + \" \" + str(n)\n\n\
    \ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3)\
    \ == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n\
    \    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ == 0:\n        return \"0\"\n    else:\n        nums = string_sequence(n - 1)\n\
    \        nums += \" \" + str(n)\n        return nums\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert\
    \ candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ < 0:\n        raise ValueError(\"n must be a positive integer\")\n    result\
    \ = ' '.join(map(str, range(n + 1)))\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert\
    \ candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(num) for num in range(n + 1))\n\n\ndef check(candidate):\n  \
    \  assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert\
    \ candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(x) for x in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    string_numbers\
    \ = \"\"\n    for number in range(n + 1):\n        string_numbers += str(number)\
    \ + \" \"\n    return string_numbers[:-1]\n        \n\ndef check(candidate):\n\
    \    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert\
    \ candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\nprint(string_sequence(5))\ndef check(candidate):\n\
    \    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert\
    \ candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '0 1 2 3 4 5

    '
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ == 0:\n        return '0'\n    else:\n        return string_sequence(n - 1)\
    \ + ' ' + str(n)\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n\
    \    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4\
    \ 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    # return\
    \ ' '.join(str(i) for i in range(n + 1))\n    return ' '.join(map(str, range(n\
    \ + 1)))\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert\
    \ candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9\
    \ 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    sequence\
    \ = ''\n    for i in range(n + 1):\n        sequence += str(i) + ' '\n    return\
    \ sequence.strip()\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n\
    \    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4\
    \ 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    s = ''\n\
    \    for i in range(n + 1):\n        s += str(i) + ' '\n    return s[:-1]\n\n\n\
    def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3)\
    \ == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n\
    \    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    i = 0\n\
    \    result = ''\n    while i <= n:\n        result += str(i) + ' '\n        i\
    \ += 1\n    return result.strip()\n\nprint(string_sequence(5))\nprint(string_sequence(0))\n\
    \ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3)\
    \ == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n\
    \    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '0 1 2 3 4 5

    0

    '
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    assert\
    \ n >= 0\n    if n == 0:\n        return '0'\n    else:\n        return ' '.join(str(i)\
    \ for i in range(n + 1))\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1\
    \ 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(x) for x in range(n + 1))\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return_string\
    \ = ''\n    for i in range(n + 1):\n        return_string += str(i) + ' '\n  \
    \  return return_string.strip()\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    i = 0\n\
    \    string = \"\"\n    while i <= n:\n        string += str(i) + \" \"\n    \
    \    i += 1\n    return string.strip()\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(map(str, range(n + 1)))\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    #   \
    \    if n < 0:\n    #            return ''\n    #       else:\n    #         \
    \   return string_sequence(n - 1) + ' ' + str(n)\n    #  else:\n    #       if\
    \ n < 0:\n    #           return ''\n    #       else:\n    #           return\
    \ str(n) + ' ' + string_sequence(n - 1)\n    if n < 0:\n        return ''\n  \
    \  elif n == 0:\n        return str(n)\n    else:\n        return string_sequence(n\
    \ - 1) + ' ' + str(n)\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n\
    \    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4\
    \ 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(map(str,range(n+1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ == 0:\n        return '0'\n    else:\n        return string_sequence(n - 1)\
    \ + ' ' + str(n)\n\ndef check(candidate):\n    assert candidate(0) == '0'\n  \
    \  assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5\
    \ 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    # Make\
    \ the string containing the numbers from 0 to n, joined together by spaces.\n\
    \    # Hint: You can use ' '.join(list_or_tuple_of_strings_here) to join a list\
    \ or tuple of strings.\n    # Hint: Do this first with a list comprehension, then\
    \ use join.\n    return ' '.join([str(i) for i in range(n+1)])\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert\
    \ candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    sequence\
    \ = []\n    for num in range(n + 1):\n        sequence.append(str(num))\n    return\
    \ ' '.join(sequence)\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n\
    \    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4\
    \ 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    i = 0\n\
    \    sequence = \"\"\n    while i <= n:\n        sequence += str(i) + \" \"\n\
    \        i += 1\n    return sequence[:-1]\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ == 0:\n        return '0'\n    else:\n        return string_sequence(n - 1)\
    \ + ' ' + str(n)\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n\
    \    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4\
    \ 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: -1
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    # The\
    \ range is reversed to start from 0 and go upto n inclusive.\n    return ' '.join(map(str,\
    \ range(n, -1, -1)))\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n\
    \    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4\
    \ 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp09419dx5.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp09419dx5.py\", line 18,\
    \ in test_check\n    check(string_sequence)\n  File \"/tmp/tmp09419dx5.py\", line\
    \ 14, in check\n    assert candidate(3) == '0 1 2 3'\nAssertionError\n"
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(x) for x in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(x) for x in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ < 0:\n        return None\n    else:\n        # if n == 0:\n        #     return\
    \ '0'\n        # else:\n        #     return string_sequence(n-1) + ' ' + str(n)\n\
    \        return ' '.join([str(i) for i in range(n+1)])\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert\
    \ candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ < 0:\n        return ''\n    elif n == 0:\n        return '0'\n    else:\n \
    \       return string_sequence(n - 1) + ' ' + str(n)\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert\
    \ candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: -1
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    output\
    \ = ''\n    for i in range(n + 1):\n        output += str(i) + ' '\n    return\
    \ output\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert\
    \ candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9\
    \ 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppk_y7xr1.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmppk_y7xr1.py\", line 20,\
    \ in test_check\n    check(string_sequence)\n  File \"/tmp/tmppk_y7xr1.py\", line\
    \ 15, in check\n    assert candidate(0) == '0'\nAssertionError\n"
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    nums\
    \ = []\n    for i in range(n + 1):\n        nums.append(str(i))\n    return '\
    \ '.join(nums)\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n  \
    \  assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5\
    \ 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(x) for x in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: -1
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ <= 0:\n        return '0'\n    else:\n        return string_sequence(n - 1)\
    \ + ' ' + str(n)\n\n\n@typecheck\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqi5p00xw.py\", line\
    \ 14, in <module>\n    @typecheck\nNameError: name 'typecheck' is not defined\n"
  stdout: ''
  timestamp: 1659823322
- exit_code: -1
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3)\
    \ == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n\
    \    check(string_sequence)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwaw9zdh2.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmpwaw9zdh2.py\", line 17,\
    \ in test_check\n    check(string_sequence)\n  File \"/tmp/tmpwaw9zdh2.py\", line\
    \ 12, in check\n    assert candidate(0) == '0'\nAssertionError\n"
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ == 0:\n        return '0'\n    else:\n        return string_sequence(n - 1)\
    \ + ' ' + str(n)\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n\
    \    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4\
    \ 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(x) for x in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(list(map(str, range(n + 1))))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    # initialize\
    \ an empty list\n    strings = []\n    # loop from 0 upto n and append it to the\
    \ list\n    for i in range(n + 1):\n        strings.append(str(i))\n    # concatenate\
    \ the list items with space in between and return the value\n    return ' '.join(strings)\n\
    \ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3)\
    \ == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n\
    \    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    string\
    \ = ''\n    for i in range(n + 1):\n        string += str(i) + ' '\n    return\
    \ string[:-1]\n    pass\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1\
    \ 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    string\
    \ = ''\n    for i in range(n + 1):\n        string += str(i) + ' '\n    return\
    \ string[:-1]\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n   \
    \ assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6\
    \ 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(num) for num in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(map(str, range(n + 1)))\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(x) for x in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(x) for x in range(n + 1))\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(map(str, range(n + 1)))\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(n) for n in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    ret =\
    \ []\n    for i in range(n + 1):\n        ret.append(str(i))\n    return ' '.join(ret)\n\
    \n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3)\
    \ == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n\
    \    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ == 0:\n        return '0'\n    elif n == 1:\n        return '0 1'\n    else:\n\
    \        return str(string_sequence(n-1)) + ' ' + str(n)\n\nprint(string_sequence(5))\n\
    \ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3)\
    \ == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n\
    \    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '0 1 2 3 4 5

    '
  timestamp: 1659823322
- exit_code: -1
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3)\
    \ == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n\
    \    check(string_sequence)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplb6vb37l.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmplb6vb37l.py\", line 16,\
    \ in test_check\n    check(string_sequence)\n  File \"/tmp/tmplb6vb37l.py\", line\
    \ 11, in check\n    assert candidate(0) == '0'\nAssertionError\n"
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(x) for x in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(x) for x in range(n + 1))\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(map(str, list(range(n + 1))))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(x) for x in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(num) for num in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(num) for num in range(n + 1))\n\n\ndef check(candidate):\n  \
    \  assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert\
    \ candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    num_list\
    \ = []\n    for i in range(n + 1):\n        num_list.append(str(i))\n    return\
    \ ' '.join(num_list)\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n\
    \    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4\
    \ 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ == 0:\n        return '0'\n    elif n == 1:\n        return '0 1'\n    else:\n\
    \        return string_sequence(n-1) + ' ' + str(n)\n\ndef check(candidate):\n\
    \    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert\
    \ candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(x) for x in range(n + 1))\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ < 0:\n        raise ValueError()\n    return \" \".join(str(i) for i in range(n\
    \ + 1))\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert\
    \ candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9\
    \ 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ < 0:\n        raise ValueError('n must be >= 0')\n    else:\n        if n ==\
    \ 0:\n            return '0'\n        else:\n            return ' '.join(map(str,\
    \ range(n + 1)))\n\ndef check(candidate):\n    assert candidate(0) == '0'\n  \
    \  assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5\
    \ 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n    # return ' '.join(map(str, range(n\
    \ + 1)))  # alternative\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1\
    \ 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ == 0:\n        return '0'\n    else:\n        return string_sequence(n - 1)\
    \ + ' ' + str(n)\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n\
    \    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4\
    \ 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(list(map(str, range(n + 1))))\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ < 0:\n        return None\n    if n == 0:\n        return '0'\n    if n == 1:\n\
    \        return '0 1'\n    previous = string_sequence(n - 1)\n    return previous\
    \ + ' ' + str(n)\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n\
    \    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4\
    \ 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: -1
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    x = \"\
    \"\n    for num in range(n + 1):\n        x += str(num) + \" \"\n    return x\n\
    \n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3)\
    \ == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n\
    \    check(string_sequence)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxp_xi8fr.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpxp_xi8fr.py\", line 20,\
    \ in test_check\n    check(string_sequence)\n  File \"/tmp/tmpxp_xi8fr.py\", line\
    \ 15, in check\n    assert candidate(0) == '0'\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    output\
    \ = ''\n    for i in range(n + 1):\n        output += str(i) + ' '\n    return\
    \ output.strip()\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n\
    \    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4\
    \ 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    nums\
    \ = []\n    for i in range(n + 1):\n        nums.append(str(i))\n    return '\
    \ '.join(nums)\n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert\
    \ candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9\
    \ 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ == 0:\n        return '0'\n    else:\n        return ' '.join(str(i) for i in\
    \ range(n + 1))\n\ndef check(candidate):\n    assert candidate(0) == '0'\n   \
    \ assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6\
    \ 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: -1
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ == 0:\n        return \"0\"\n    else:\n        return string_sequence(n - 1)\
    \ + \" \" + str(n)\n\n\n@given(n=integers(min_value=0))\n@example(n=0)\n@example(n=1)\n\
    @example(n=2)\n@example(n=3)\n@example(n=4)\n@example(n=5)\ndef check(candidate):\n\
    \    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert\
    \ candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyyb05t4q.py\", line\
    \ 14, in <module>\n    @given(n=integers(min_value=0))\nNameError: name 'given'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(x) for x in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: -1
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    # I think\
    \ i need to call my recursive function to create this output\n    x = string_sequence_recursive(n)\n\
    \    return (x)\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n \
    \   assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5\
    \ 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpco6u03ay.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpco6u03ay.py\", line 19,\
    \ in test_check\n    check(string_sequence)\n  File \"/tmp/tmpco6u03ay.py\", line\
    \ 14, in check\n    assert candidate(0) == '0'\n  File \"/tmp/tmpco6u03ay.py\"\
    , line 9, in string_sequence\n    x = string_sequence_recursive(n)\nNameError:\
    \ name 'string_sequence_recursive' is not defined\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(x) for x in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    # return\
    \ \" \".join([str(i) for i in range(n+1)])\n    return \" \".join(map(str, range(n+1)))\n\
    \n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3)\
    \ == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n\
    \    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(number) for number in range(n + 1))\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert\
    \ candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ == 0:\n        return \"0\"\n    else:\n        return string_sequence(n - 1)\
    \ + \" \" + str(n)\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n\
    \    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4\
    \ 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(i) for i in range(n + 1))\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(x) for x in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    num_string\
    \ = \"\"\n    for i in range(n + 1):\n        num_string += str(i) + \" \"\n \
    \   return num_string.strip()\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(x) for x in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: -1
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    string\
    \ = ''\n    for i in range(n+1):\n        string += str(i) + ' '\n    return string\n\
    \ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3)\
    \ == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n\
    \    check(string_sequence)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptj16ndzk.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmptj16ndzk.py\", line 19,\
    \ in test_check\n    check(string_sequence)\n  File \"/tmp/tmptj16ndzk.py\", line\
    \ 14, in check\n    assert candidate(0) == '0'\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(i) for i in range(n + 1))\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    new_string\
    \ = \"\"\n    for x in range(n + 1):\n        new_string += str(x) + \" \"\n \
    \   return new_string.strip()\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\nprint(string_sequence(5))\ndef check(candidate):\n\
    \    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert\
    \ candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '0 1 2 3 4 5

    '
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    nums\
    \ = []\n    for i in range(n + 1):\n        nums.append(str(i))\n    return '\
    \ '.join(nums)\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n  \
    \  assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5\
    \ 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    # TODO:\
    \ add code here\n    if n == 0:\n        return '0'\n    else:\n        return\
    \ string_sequence(n-1) + ' ' + str(n)\n    # TODO: add code here\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert\
    \ candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    s = \"\
    \"\n    for i in range(n + 1):\n        s += str(i) + \" \"\n    return s[:-1]\n\
    \n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3)\
    \ == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n\
    \    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(map(str, list(range(n + 1))))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(x) for x in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    res =\
    \ \"\"\n    for num in range(n + 1):\n        res += str(num) + \" \"\n    return\
    \ res.strip()\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n   \
    \ assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6\
    \ 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: -1
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    # Hint:\
    \ You can concatenate an empty string '' with a number n to\n    # get the equivalent\
    \ of a string containing n.\n    # For example:\n    # >>> '' + 1\n    # '1'\n\
    \    # >>> '' + 5\n    # '5'\n    # >>> '' + 0\n    # '0'\n    result = \"\"\n\
    \    for i in range(n + 1):\n        result += str(i) + \" \"\n    return result\n\
    \n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3)\
    \ == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n\
    \    check(string_sequence)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7gopzs03.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp7gopzs03.py\", line 29,\
    \ in test_check\n    check(string_sequence)\n  File \"/tmp/tmp7gopzs03.py\", line\
    \ 24, in check\n    assert candidate(0) == '0'\nAssertionError\n"
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    string_sequence\
    \ = ''\n    for i in range(n + 1):\n        string_sequence += str(i) + ' '\n\
    \    return string_sequence[:-1]\n        \n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    # YOUR\
    \ CODE HERE\n    return \" \".join([str(x) for x in range(n+1)])\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert\
    \ candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(x) for x in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ == 0:\n        return \"0\"\n    else:\n        return string_sequence(n - 1)\
    \ + \" \" + str(n)\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n\
    \    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4\
    \ 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ < 0:\n        raise ValueError(\"Invalid input value: {}\".format(n))\n    return\
    \ \" \".join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    # return\
    \ \" \".join([str(i) for i in range(n+1)])\n    return \" \".join(map(str, range(n+1)))\n\
    \ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3)\
    \ == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n\
    \    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(str(i) for i in range(n + 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n\
    \ == 0:\n        return \"0\"\n    else:\n        return string_sequence(n - 1)\
    \ + \" \" + str(n)\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n\
    \    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4\
    \ 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ ' '.join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(str(x) for x in range(n + 1))\n\ndef check(candidate):\n    assert\
    \ candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10)\
    \ == '0 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    numbers\
    \ = []\n    for i in range(n + 1):\n        numbers.append(str(i))\n    return\
    \ ' '.join(numbers)\n\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n\
    \    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4\
    \ 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823323
- exit_code: 0
  program: "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return\
    \ \" \".join(map(str, range(n + 1)))\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0\
    \ 1 2 3 4 5 6 7 8 9 10'\n\ndef test_check():\n    check(string_sequence)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823322
