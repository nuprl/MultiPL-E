language: py
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    assert isinstance(string, str)\n    s = set()\n    for\
    \ l in string:\n        s.add(l.lower())\n    return len(s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(list(string.lower())))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\nprint(count_distinct_characters('Jerry'))\n\
    \nprint(doctest.testmod())\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq4rhr27s.py\", line\
    \ 12, in <module>\n    print(doctest.testmod())\nNameError: name 'doctest' is\
    \ not defined\n"
  stdout: '4

    '
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    unique_char_set = set()\n    for c in string:\n      \
    \  unique_char_set.add(c.lower())\n    return len(unique_char_set)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    letters = {}\n    for letter in string:\n        letter\
    \ = letter.lower()\n        if letter not in letters:\n            letters[letter]\
    \ = 1\n    return len(letters)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = string.lower()\n    seen = set()\n    for c in\
    \ string:\n        seen.add(c)\n    return len(seen)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(list(string.lower())))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    count = 0\n    for i in string:\n        if i not in string[:count]:\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf3o7y3gi.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpf3o7y3gi.py\", line 23,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpf3o7y3gi.py\"\
    , line 18, in check\n    assert candidate('abcdecadeCADE') == 5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    i = 0\n    for j in range(len(string)):\n        if string[i]\
    \ != string[j]:\n            i += 1\n            string[i] = string[j]\n    return\
    \ i + 1\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert\
    \ candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert\
    \ candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') ==\
    \ 5\n\ndef test_check():\n    check(count_distinct_characters)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps5cbrt__.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmps5cbrt__.py\", line 24,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmps5cbrt__.py\"\
    , line 17, in check\n    assert candidate('') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_characters = set()\n    for character in string:\n\
    \        distinct_characters.add(character.lower())\n    return len(distinct_characters)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # TODO implement count_distinct_characters\n    return\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcson0577.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpcson0577.py\", line 20,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpcson0577.py\"\
    , line 14, in check\n    assert candidate('abcde') == 5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = string.lower()\n    return len(set(string))\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # return len(set(string.lower()))\n    count = 0\n   \
    \ chars = set()\n    for char in string:\n        lowercase_char = char.lower()\n\
    \        if lowercase_char not in chars:\n            chars.add(lowercase_char)\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_characters = set()\n    for character in string:\n\
    \        distinct_characters.add(character.lower())\n    return len(distinct_characters)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # lowercase characters that have been found so far\n \
    \   lowercase_seen = set()\n    # uppercase characters that have been found so\
    \ far\n    uppercase_seen = set()\n    distinct_characters = 0\n    for char in\
    \ string:\n        if char.islower():\n            if char not in lowercase_seen:\n\
    \                distinct_characters += 1\n                lowercase_seen.add(char)\n\
    \        elif char.isupper():\n            if char not in uppercase_seen:\n  \
    \              distinct_characters += 1\n                uppercase_seen.add(char)\n\
    \    return distinct_characters\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzrmd6jkb.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpzrmd6jkb.py\", line 33,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpzrmd6jkb.py\"\
    , line 28, in check\n    assert candidate('abcdecadeCADE') == 5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    new_list = []\n    for c in string:\n        if c.lower()\
    \ not in new_list:\n            new_list.append(c.lower())\n    return len(new_list)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ncount_distinct_characters('Jerry')\n\
    \ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # your code here\n    a = list(string)\n    cnt = 0\n\
    \    for item in a:\n        if a.count(item) == 1:\n            cnt += 1\n  \
    \  return cnt\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert\
    \ candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert\
    \ candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') ==\
    \ 5\n\ndef test_check():\n    check(count_distinct_characters)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp51lwh9yt.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp51lwh9yt.py\", line 24,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmp51lwh9yt.py\"\
    , line 20, in check\n    assert candidate('aaaaAAAAaaaa') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # TODO: Your code goes here\n    count = len(set(string.lower()))\n\
    \    return count\n\nprint(count_distinct_characters('Jerry'))\nprint(count_distinct_characters('xyzXYZ'))\n\
    def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '4

    3

    '
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    s = set()\n    for i in string:\n        s.add(i.lower())\n\
    \    return len(s)\n\n\ndef check(candidate):\n    assert candidate('') == 0\n\
    \    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') ==\
    \ 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY\
    \ JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    seen = set()\n    for c in string:\n        seen.add(c.lower())\n\
    \    return len(seen)\n\n\ndef check(candidate):\n    assert candidate('') ==\
    \ 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl0xiec8l.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpl0xiec8l.py\", line 19,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpl0xiec8l.py\"\
    , line 12, in check\n    assert candidate('') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823386
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # TODO finish this!\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjtaicbx6.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpjtaicbx6.py\", line 18,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpjtaicbx6.py\"\
    , line 11, in check\n    assert candidate('') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = string.lower()\n    return len(set(string))\n\
    \    # return len({x.lower() for x in string})\n\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # TODO: implement this function\n    s = string.lower()\n\
    \    count = 0\n    for i in range(len(s)):\n        if s[i] not in s[:i]:\n \
    \           count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # write your code here\n    lower_letters = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    upper_letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    letter_dict = {}\n    for\
    \ i in string:\n        if i in lower_letters:\n            letter_dict[i] = 1\n\
    \        elif i in upper_letters:\n            letter_dict[i.lower()] = 1\n  \
    \  return len(letter_dict)\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3_kkhgnm.py\", line\
    \ 226, in <module>\n    test_check()\n  File \"/tmp/tmp3_kkhgnm.py\", line 224,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmp3_kkhgnm.py\"\
    , line 221, in check\n    assert candidate('Jerry jERRY JeRRRY') == 5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(list(string.lower())))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    unique_characters = set()\n    for character in string:\n\
    \        unique_characters.add(character.lower())\n    return len(unique_characters)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    chars = set()\n    for char in string:\n        if char.lower()\
    \ not in chars:\n            chars.add(char.lower())\n    return len(chars)\n\n\
    def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    counter = 0\n    unique_char = []\n    for char in string:\n\
    \        if char.lower() not in unique_char:\n            unique_char.append(char.lower())\n\
    \            counter += 1\n    return counter\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    s = string.lower()\n    return len(set(s))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    lower_string = string.lower()\n    return len(set(lower_string))\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    chars_seen = set()\n    for char in string:\n        chars_seen.add(char.lower())\n\
    \    return len(chars_seen)\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # return len(set(string.lower()))\n    return len(set(c.lower()\
    \ for c in string))\n\n\ndef check(candidate):\n    assert candidate('') == 0\n\
    \    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') ==\
    \ 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY\
    \ JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    if len(string) < 2:\n        return len(string)\n    else:\n\
    \        return len(set(string.lower()))\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # TODO: you code goes here\n    # return len(set(string.lower()))\n\
    \    return len(set(string))\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8bws5g7g.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp8bws5g7g.py\", line 21,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmp8bws5g7g.py\"\
    , line 16, in check\n    assert candidate('abcdecadeCADE') == 5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return sum(1 for c in set(string.lower()) if c.isalpha())\n\
    \ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9_ov40pl.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp9_ov40pl.py\", line 18,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmp9_ov40pl.py\"\
    , line 15, in check\n    assert candidate('Jerry jERRY JeRRRY') == 5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    s = set()\n    for char in string:\n        s.add(char.lower())\n\
    \    return len(s)\n\ndef check(candidate):\n    assert candidate('') == 0\n \
    \   assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') == 5\n\
    \    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY\
    \ JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # Please complete your implementation here\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdwzi8jje.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpdwzi8jje.py\", line 19,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpdwzi8jje.py\"\
    , line 12, in check\n    assert candidate('') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    char_set = set()\n    for char in string:\n        char_set.add(char.lower())\n\
    \    return len(char_set)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    counter = 0\n    string = string.lower()\n    length =\
    \ len(string)\n    for i in range(length):\n        if string[i] not in string[i+1:]:\n\
    \            counter += 1\n    return counter\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_characters = 0\n    char_set = set()\n    for\
    \ char in string:\n        char_set.add(char.lower())\n    return len(char_set)\n\
    \ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    dist_set = set()\n    for char in string:\n        dist_set.add(char.lower())\n\
    \    return len(dist_set)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(list(string.lower())))\n\nprint(count_distinct_characters('xyzXYZ'))\n\
    print(count_distinct_characters('Jerry'))\n\nimport doctest\ndoctest.testmod()\n\
    def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '3

    4

    '
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_characters = set()\n    for character in string:\n\
    \        distinct_characters.add(character.lower())\n    return len(distinct_characters)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl0xiec8l.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpl0xiec8l.py\", line 19,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpl0xiec8l.py\"\
    , line 12, in check\n    assert candidate('') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    chars_set = set()\n    for char in string:\n        chars_set.add(char.lower())\n\
    \    return len(chars_set)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    lower_set = set()\n    upper_set = set()\n    for letter\
    \ in string:\n        if letter.islower():\n            lower_set.add(letter)\n\
    \        else:\n            upper_set.add(letter)\n    return len(lower_set) +\
    \ len(upper_set)\n\ndef check(candidate):\n    assert candidate('') == 0\n   \
    \ assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') == 5\n\
    \    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY\
    \ JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqyxmm19c.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqyxmm19c.py\", line 25,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpqyxmm19c.py\"\
    , line 20, in check\n    assert candidate('abcdecadeCADE') == 5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # return len(set(string.lower()))\n    s = set()\n   \
    \ for i in string:\n        s.add(i.lower())\n    return len(s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl0xiec8l.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpl0xiec8l.py\", line 19,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpl0xiec8l.py\"\
    , line 12, in check\n    assert candidate('') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    characters = set()\n    for c in string:\n        characters.add(c.lower())\n\
    \    return len(characters)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # Your code here\n    return len(set(string.lower()))\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_characters = set()\n    for char in string:\n\
    \        distinct_characters.add(char.lower())\n    return len(distinct_characters)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return 0\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvy6mm8o3.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpvy6mm8o3.py\", line 19,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpvy6mm8o3.py\"\
    , line 13, in check\n    assert candidate('abcde') == 5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_characters = set()\n    for character in string:\n\
    \        distinct_characters.add(character.lower())\n    return len(distinct_characters)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    char_list = list(string)\n    distinct_char_list = []\n\
    \    for char in char_list:\n        if char.lower() not in distinct_char_list:\n\
    \            distinct_char_list.append(char.lower())\n    return len(distinct_char_list)\n\
    \ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # create a set from the list of all characters in the\
    \ string\n    return len(set(list(string)))\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppeniisib.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmppeniisib.py\", line 20,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmppeniisib.py\"\
    , line 15, in check\n    assert candidate('abcdecadeCADE') == 5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # turn string into list of lowercase letters\n    lowercase_string\
    \ = [c.lower() for c in string]\n    return len(set(lowercase_string))\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    s = string.lower()\n    return len(set(s))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    if string is None:\n        return 0\n    s = string.lower()\n\
    \    return len(set(s))\n\n\n@pytest.mark.parametrize('string,expected', [\n \
    \   (None, 0),\n    ('xyzXYZ', 3),\n    ('Jerry', 4),\n])\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprsjj6a95.py\", line\
    \ 14, in <module>\n    @pytest.mark.parametrize('string,expected', [\nNameError:\
    \ name 'pytest' is not defined. Did you mean: 'bytes'?\n"
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_characters = set()\n    for char in string:\n\
    \        distinct_characters.add(char.lower())\n    return len(distinct_characters)\n\
    \ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    #return len(set(string.lower()))\n    lowercase_string\
    \ = string.lower()\n    distinct_characters = set()\n    for char in lowercase_string:\n\
    \        distinct_characters.add(char)\n    return len(distinct_characters)\n\n\
    def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # TODO: Implement it\n    assert type(string) == str\n\
    \    return len(set(string.lower()))\n    \n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_characters = set()\n    for character in string:\n\
    \        distinct_characters.add(character.lower())\n    return len(distinct_characters)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # TODO: how could you do it in a single line?\n\n    #\
    \ Option 1: use a for loop\n    # distinct_chars = []\n    # for char in string:\n\
    \    #     if char.lower() not in distinct_chars:\n    #         distinct_chars.append(char.lower())\n\
    \    # return len(distinct_chars)\n\n    # Option 2: use a list comprehension\n\
    \    # return len([char.lower() for char in string if char.lower() not in distinct_chars])\n\
    \n    # Option 3: use a set comprehension\n    return len({char.lower() for char\
    \ in string})\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert\
    \ candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert\
    \ candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') ==\
    \ 5\n\ndef test_check():\n    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    seen = set()\n    for char in string:\n        seen.add(char.lower())\n\
    \    return len(seen)\n\ndef check(candidate):\n    assert candidate('') == 0\n\
    \    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') ==\
    \ 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY\
    \ JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    character_counts = {}\n    # TODO\n    return 0\n\n\n\
    @add_metaclass(ABCMeta)\ndef check(candidate):\n    assert candidate('') == 0\n\
    \    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') ==\
    \ 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY\
    \ JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpetcjcb_c.py\", line\
    \ 13, in <module>\n    @add_metaclass(ABCMeta)\nNameError: name 'add_metaclass'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823387
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl0xiec8l.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpl0xiec8l.py\", line 19,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpl0xiec8l.py\"\
    , line 12, in check\n    assert candidate('') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    lst = set(string.lower())\n    return len(lst)\n\n\nprint(count_distinct_characters('xyzXYZ'))\n\
    print(count_distinct_characters('Jerry'))\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '3

    4

    '
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    char_dict = {}\n    for i in string:\n        if i.lower()\
    \ not in char_dict:\n            char_dict[i.lower()] = 1\n    return len(char_dict)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # TODO: Implement me\n    return len(set(string.lower()))\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert\
    \ candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert\
    \ candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') ==\
    \ 5\n\ndef test_check():\n    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\nassert count_distinct_characters('xyzXYZ')\
    \ == 3\nassert count_distinct_characters('Jerry') == 4\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # NOTE: Python strings are immutable, so you cannot change\
    \ the characters in the string directly.\n    # The best way to go about it is\
    \ to use the built-in set() function to keep track of the distinct characters.\n\
    \    # You can convert a string to a set of characters by passing the string to\
    \ the constructor of set.\n    # For example, set('abc') will create a set containing\
    \ 'a', 'b', and 'c'.\n    # You can apply the lower() function to a string to\
    \ convert it to lowercase.\n    # For example, lower('AbC') will return 'abc'.\n\
    \    # Finally, you can find the length of a set using the len() function.\n\n\
    \    # return <your code here>\n    unique_letters = set(string.lower())\n   \
    \ return len(unique_letters)\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # YOUR CODE HERE\n    return len(set(string.lower()))\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = string.lower()\n    count = 0\n    for char in\
    \ string:\n        if string.count(char) > 0:\n            count += 1\n      \
    \      string = string.replace(char, \"\")\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    counted_chars = set()\n    for char in string:\n     \
    \   counted_chars.add(char.lower())\n    return len(counted_chars)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_characters = set()\n    for letter in string:\n\
    \        distinct_characters.add(letter.lower())\n    return len(distinct_characters)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    unique_char_list = []\n    for each_character in string:\n\
    \        if each_character.lower() not in unique_char_list:\n            unique_char_list.append(each_character.lower())\n\
    \    return len(unique_char_list)\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # Using a set, which is hashable by definition, ensures\
    \ characters are distinct\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    unique_characters = set()\n    for character in string:\n\
    \        unique_characters.add(character.lower())\n    return len(unique_characters)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    s = set()\n    for c in string:\n        s.add(c.lower())\n\
    \    return len(s)\n\n\ndef check(candidate):\n    assert candidate('') == 0\n\
    \    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') ==\
    \ 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY\
    \ JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    if string == \"\":\n        return 0\n    # count = 0\n\
    \    # for i in range(len(string)):\n    #     if string[i] not in string[i+1:]:\n\
    \    #         count += 1\n    # return count\n    return len(set(string.lower()))\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    lowercase_string = string.lower()\n    distinct_characters\
    \ = set(lowercase_string)\n    return len(distinct_characters)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    seen = set()\n    for ch in string:\n        seen.add(ch.lower())\n\
    \    return len(seen)\n\n\ndef check(candidate):\n    assert candidate('') ==\
    \ 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # YOUR CODE HERE\n    # raise NotImplementedError()\n\
    \    S = set()\n    for x in string:\n        S.add(x.lower())\n    return len(S)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = list(string)\n    for i in range(len(string)):\n\
    \        string[i] = string[i].lower()\n    string = ''.join(string)\n    return\
    \ len(set(string))\n\n\ndef check(candidate):\n    assert candidate('') == 0\n\
    \    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') ==\
    \ 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY\
    \ JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # from collections import Counter\n    # return len(Counter(string))\n\
    \n    # return len(set(string))\n\n    char_count = 0\n    for char in string:\n\
    \        lower_char = char.lower()\n        if lower_char not in string[:char_count]:\n\
    \            char_count += 1\n    return char_count\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplvx_x2fw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmplvx_x2fw.py\", line 29,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmplvx_x2fw.py\"\
    , line 26, in check\n    assert candidate('Jerry jERRY JeRRRY') == 5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # use set to keep track of the distinct characters\n \
    \   character_set = set()\n    for character in string:\n        # ignore case\n\
    \        character_set.add(character.lower())\n    return len(character_set)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    characters = []\n    for character in string:\n      \
    \  if character.lower() not in characters:\n            characters.append(character.lower())\n\
    \    return len(characters)\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = set(string.lower())\n    return len(string)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = set(string.lower())\n    return len(string)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    characters = {}\n    for letter in string:\n        if\
    \ letter.lower() not in characters:\n            characters[letter.lower()] =\
    \ letter.lower()\n    return len(characters)\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    #return len(set(string.lower()))\n    s = set()\n    for\
    \ i in string:\n        s.add(i.lower())\n    return len(s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.upper()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    if string == \"\":\n        return 0\n    elif string[0].lower()\
    \ not in string[1:].lower():\n        return 1 + count_distinct_characters(string[1:])\n\
    \    else:\n        return count_distinct_characters(string[1:])\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\ncount_distinct_characters('xyzXYZ')\n\
    \ncount_distinct_characters('Jerry')\n\ncount_distinct_characters('abcABCabc')\n\
    \ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = string.lower()\n    return len(set(string))\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = string.upper()\n    distinct_characters = set()\n\
    \    for c in string:\n        distinct_characters.add(c)\n    return len(distinct_characters)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    temp = set()\n    for char in string:\n        temp.add(char.lower())\n\
    \    return len(temp)\n\n\ndef check(candidate):\n    assert candidate('') ==\
    \ 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # raise NotImplementedError\n\n    # Need to convert to\
    \ lowercase string to count the distinct characters\n    s = string.lower()\n\
    \    distinct_characters = 0\n    # iterate through the string, if we haven't\
    \ seen the character yet, we count it as distinct.\n    for i in s:\n        if\
    \ i not in s[:distinct_characters]:\n            distinct_characters += 1\n  \
    \  return distinct_characters\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprj_693ed.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmprj_693ed.py\", line 28,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmprj_693ed.py\"\
    , line 25, in check\n    assert candidate('Jerry jERRY JeRRRY') == 5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823387
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl0xiec8l.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpl0xiec8l.py\", line 19,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpl0xiec8l.py\"\
    , line 12, in check\n    assert candidate('') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    s = set()\n    for char in string:\n        s.add(char.lower())\n\
    \    return len(s)\n\n\ndef check(candidate):\n    assert candidate('') == 0\n\
    \    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') ==\
    \ 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY\
    \ JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # your code here\n    s = set()\n    for c in string:\n\
    \        s.add(c.lower())\n    return len(s)\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # 1. Create a copy of the string and convert it to lowercase\n\
    \    # 2. Add each character from the copy to a set\n    # 3. Return the size\
    \ of the set\n    lowercase_string = string.lower()\n    distinct_characters =\
    \ set()\n    for character in lowercase_string:\n        distinct_characters.add(character)\n\
    \    return len(distinct_characters)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    seen = set()\n    for c in string:\n        seen.add(c.lower())\n\
    \    return len(seen)\n\n\ndef check(candidate):\n    assert candidate('') ==\
    \ 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp89hnotrk.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp89hnotrk.py\", line 18,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmp89hnotrk.py\"\
    , line 11, in check\n    assert candidate('') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # print(string.lower())\n    distinct_characters = set(string.lower())\n\
    \    # print(len(distinct_characters))\n    return len(distinct_characters)\n\n\
    \ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    str_lower = string.lower()\n    return len(set(str_lower))\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # hint: #3\n    distinct_chars = {}\n    for char in string:\n\
    \        if char.lower() not in distinct_chars:\n            distinct_chars[char.lower()]\
    \ = 1\n    return len(distinct_chars)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # Counts distinct character using a set\n    return len(set(string.lower()))\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # TODO: implement this function\n    i = 0\n    s = set()\n\
    \    for c in string:\n        s.add(c.lower())\n    return len(s)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    set_string = set(string)\n    return len(set_string)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj4_8djqv.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpj4_8djqv.py\", line 20,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpj4_8djqv.py\"\
    , line 15, in check\n    assert candidate('abcdecadeCADE') == 5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    char_set = set()\n    for char in string:\n        char_set.add(char.lower())\n\
    \    return len(char_set)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = string.lower()\n    chars = set()\n    for char\
    \ in string:\n        chars.add(char)\n    return len(chars)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # TODO: your code goes here\n    return len(set(string.lower()))\n\
    \ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_chars = set()\n    for c in string:\n       \
    \ distinct_chars.add(c.lower())\n    return len(distinct_chars)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_set = set()\n    for ch in string:\n        distinct_set.add(ch.lower())\n\
    \    return len(distinct_set)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\n@precondition(lambda\
    \ string: isinstance(string, str))\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpselr6paf.py\", line\
    \ 11, in <module>\n    @precondition(lambda string: isinstance(string, str))\n\
    NameError: name 'precondition' is not defined\n"
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_characters = []\n    for char in string:\n  \
    \      if char.lower() not in distinct_characters:\n            distinct_characters.append(char.lower())\n\
    \    return len(distinct_characters)\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = string.lower()\n    return len(set(string))\n\
    \ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # return len(set(string.upper()))\n    return len(set(string.lower()))\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # TODO: Write code here\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2xj0vof5.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp2xj0vof5.py\", line 20,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmp2xj0vof5.py\"\
    , line 13, in check\n    assert candidate('') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # return len(set(string.lower()))\n    dist_chars = []\n\
    \    for char in string:\n        if char.lower() not in dist_chars:\n       \
    \     dist_chars.append(char.lower())\n    return len(dist_chars)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    _characters = set()\n    for char in string:\n       \
    \ if char.isalpha():\n            _characters.add(char.lower())\n    return len(_characters)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqmzru_0.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpuqmzru_0.py\", line 23,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpuqmzru_0.py\"\
    , line 20, in check\n    assert candidate('Jerry jERRY JeRRRY') == 5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823387
- exit_code: -1
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = string.lower()\n    count = 0\n    for char in\
    \ string:\n        if string.count(char) == 1:\n            count += 1\n    return\
    \ count\n    \ndef check(candidate):\n    assert candidate('') == 0\n    assert\
    \ candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert\
    \ candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') ==\
    \ 5\n\ndef test_check():\n    check(count_distinct_characters)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwxjmh129.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpwxjmh129.py\", line 23,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpwxjmh129.py\"\
    , line 18, in check\n    assert candidate('abcdecadeCADE') == 5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    char_dict = {}\n    lower_string = string.lower()\n  \
    \  for char in lower_string:\n        if char not in char_dict:\n            char_dict[char]\
    \ = 1\n    return len(char_dict)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # your code here\n    return len(set(string.lower()))\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_characters = set()\n    for c in string:\n  \
    \      distinct_characters.add(c.lower())\n    return len(distinct_characters)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_characters = set()\n    for char in string:\n\
    \        distinct_characters.add(char.lower())\n    return len(distinct_characters)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823387
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
- exit_code: 0
  program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823386
