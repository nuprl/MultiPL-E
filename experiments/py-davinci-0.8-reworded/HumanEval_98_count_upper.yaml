name: HumanEval_98_count_upper
language: py
prompt: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
  \ the number of uppercase vowels in even indices.\n    \n    For example:\n    >>>\
  \ count_upper('aBCdEf')\n    1\n    >>> count_upper('abcdefg')\n    0\n    >>> count_upper('dBBE')\n\
  \    0\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
  \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
  \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
  \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
completions: ["    return 0\n", "    vowel_set = set('AEIOU')\n    count = 0\n   \
    \ for i in range(0, len(s), 2):\n        if s[i] in vowel_set:\n            count\
    \ += 1\n    return count\n\n\"\"\"\nD.1 Recursion\nGiven a positive integer n,\
    \ write a recursive function that returns the sum of the squares of the \npositive\
    \ odd integers smaller than n. Assume n is greater than or equal to 3.\n\"\"\"",
  "    return 0\n", "    count = 0\n    for i in range(0, len(s), 2):\n        if\
    \ s[i] in ('A', 'E', 'I', 'O', 'U'):\n            count += 1\n    return count\n\
    \n", "    total = 0\n    for i in range(0, len(s), 2):\n        if s[i] in ['A',\
    \ 'E', 'I', 'O', 'U']:\n            total += 1\n    return total\n", "    pass\n",
  "    # Hint: look at the documentation for the string module\n    # https://docs.python.org/3/library/string.html\n\
    \    # vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n  \
    \      if s[i] in string.ascii_uppercase:\n            count += 1\n    return\
    \ count\n\n", "    pass\n\n", "    return sum(1 for i in range(len(s)) if i %\
    \ 2 == 0 and s[i] in 'AEIOU')\n", "    cnt = 0\n    for i in range(len(s)):\n\
    \        if s[i].isupper() and i % 2 == 0:\n            cnt += 1\n    return cnt",
  "    assert isinstance(s, str)\n    # BEGIN SOLUTION\n    cnt = 0\n    for i in\
    \ range(len(s)):\n        if i % 2 == 0 and s[i] in ('A', 'E', 'I', 'O', 'U'):\n\
    \            cnt += 1\n    return cnt\n    # END SOLUTION\n ", "    # - your code\
    \ here -\n    out = 0\n    vowels = 'aeiouAEIOU'\n    for i in range(len(s)):\n\
    \        if i % 2 == 0 and s[i] in vowels:\n            out += 1\n    return out\n",
  "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and\
    \ s[i].isupper():\n            count += 1\n    return count\n\n", "    # Hint:\
    \ you can use a boolean flag (which is a variable that we toggle on and off in\
    \ a loop)\n    # to check if the current index is even. Recall that you can get\
    \ the current index of a loop\n    # using:\n    # for idx, val in enumerate(lst):\n\
    \    #     print(idx, val)\n    #\n    # You can also use idx % 2 == 0 to check\
    \ if an index is even.\n    return 0\n", "    return len([ch for idx, ch in enumerate(s)\
    \ if ch in 'AEIOU' and idx % 2 == 0])\n \n ", "    num_upper = 0\n    for i in\
    \ range(len(s)):\n        if i % 2 == 0 and s[i] in 'AEIOU':\n            num_upper\
    \ += 1\n    return num_upper\n    \n    ", "    count = 0\n    for char in s:\n\
    \        if char in VOWELS and s.index(char) % 2 == 0:\n            count += 1\n\
    \    return count\n", "    num_uppers = 0\n    for i in range(len(s)):\n     \
    \   if i % 2 == 0 and s[i] in \"AEIOU\":\n            num_uppers += 1\n    return\
    \ num_uppers\n", "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper()\
    \ and s[i] in 'AEIOU' and i % 2 == 0:\n            count += 1\n    return count\n",
  "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in VOWELS\
    \ and s[i].isupper():\n            count += 1\n    return count\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
