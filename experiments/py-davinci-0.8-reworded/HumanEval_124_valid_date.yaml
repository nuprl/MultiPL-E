name: HumanEval_124_valid_date
language: py
prompt: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
  \ which validates a given date string and\n    returns True if the date is valid\
  \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
  \    1. The date string is not empty.\n    2. The number of days is not less than\
  \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is\
  \ not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of\
  \ days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
  \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
  \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
  \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
  \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
  \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
  \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
  \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
  \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
  \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
  \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
  \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
  \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n    check(valid_date)\n\
  \ntest_check()\n"
completions: ["    if '-' not in date:\n        return False\n    else:\n        date_list\
    \ = date.split('-')\n        days = int(date_list[1])\n        months = int(date_list[0])\n\
    \        year = int(date_list[2])\n        if days > 31 or days < 1:\n       \
    \     return False\n        elif months > 12 or months < 1:\n            return\
    \ False\n        elif days == 31 and months == 2:\n            return False\n\
    \        elif days == 31 and months in [4, 6, 9, 11]:\n            return False\n\
    \        elif days == 30 and months == 2:\n            return False\n        else:\n\
    \            return True\n\n", "    if len(date) == 0:\n        return False\n\
    \    month, day, year = date.split('-')\n    if len(month) == 0 or len(day) ==\
    \ 0 or len(year) == 0:\n        return False\n    if int(month) < 1 or int(month)\
    \ > 12:\n        return False\n    if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(day) < 1 or int(day) > 31:\n            return False\n    elif\
    \ int(month) in [4, 6, 9, 11]:\n        if int(day) < 1 or int(day) > 30:\n  \
    \          return False\n    elif int(month) == 2:\n        if int(day) < 1 or\
    \ int(day) > 29:\n            return False\n    if len(year) != 4:\n        return\
    \ False\n    return True\n\n", "    if re.match('^[0-9]{2}-[0-9]{2}-[0-9]{4}$',\
    \ date):\n        day, month, year = map(int, date.split('-'))\n        if month\
    \ > 12 or month < 1:\n            return False\n        if day < 1:\n        \
    \    return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n\
    \            return False\n        if month in [4, 6, 9, 11] and day > 30:\n \
    \           return False\n        if month == 2 and day > 29:\n            return\
    \ False\n        return True\n    return False", "    date_format = r'(0[1-9]|1[0-2])-([0-2][0-9]|3[0-1])-([0-9]{4})'\n\
    \    days = {\n        1: 31,\n        2: 29,\n        3: 31,\n        4: 30,\n\
    \        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n\
    \        10: 31,\n        11: 30,\n        12: 31\n    }\n    if re.match(date_format,\
    \ date):\n        month, day, year = re.split(r'[-/]', date)\n        month =\
    \ int(month)\n        day = int(day)\n        year = int(year)\n        if day\
    \ <= days[month]:\n            return True\n    return False\n\n", "    if not\
    \ (re.match('^[0-9]{2}-[0-9]{2}-[0-9]{4}$', date)):\n        return False\n  \
    \  day, month, year = map(int, date.split('-'))\n    return day_within_month(day,\
    \ month)\n\n", "    if not date:\n        return False\n    days_per_month = [31,\
    \ 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    date_list = [int(d) for d in\
    \ date.split('-')]\n    if len(date_list) != 3:\n        return False\n    if\
    \ date_list[0] < 1 or date_list[0] > 12:\n        return False\n    if date_list[1]\
    \ < 1 or date_list[1] > days_per_month[date_list[0] - 1]:\n        return False\n\
    \    if len(str(date_list[2])) != 4:\n        return False\n    return True",
  "    dates = date.split('-')\n    # print(dates)\n    if len(dates) != 3:\n    \
    \    return False\n    month, day, year = dates\n    # print(month, day, year)\n\
    \    if len(month) != 2 or len(day) != 2 or len(year) != 4:\n        return False\n\
    \    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return\
    \ False\n    try:\n        if int(month) not in range(1, 13):\n            return\
    \ False\n        if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n            if int(day)\
    \ not in range(1, 32):\n                return False\n        elif int(month)\
    \ in [4, 6, 9, 11]:\n            if int(day) not in range(1, 31):\n          \
    \      return False\n        elif int(month) == 2:\n            if int(day) not\
    \ in range(1, 30):\n                return False\n    except ValueError:\n   \
    \     return False\n    return True\n\n", "    mons = {1: 31, 3: 31, 5: 31, 7:\
    \ 31, 8: 31, 10: 31, 12: 31,\n            4: 30, 6: 30, 9: 30, 11: 30, 2: 29}\n\
    \    try:\n        month, day, year = date.split('-')\n        month, day, year\
    \ = int(month), int(day), int(year)\n        if 1 <= month <= 12 and 1 <= day\
    \ <= mons[month] and len(str(year)) == 4:\n            return True\n        else:\n\
    \            return False\n    except:\n        return False\n\n", "    if not\
    \ date or len(date) != 10:\n        return False\n    if date[2] != '-' or date[5]\
    \ != '-':\n        return False\n    month, day, year = date.split('-')\n    if\
    \ not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return\
    \ False\n    month, day, year = int(month), int(day), int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10,\
    \ 12):\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n", "    return True if re.match(r'([0-1]\\d|2[0-9]|3[0-1])\\\
    -(0[1-9]|1[0-2])\\-(2[0-9]{3})', date) else False\n\n", "    if '-' not in date:\n\
    \        return False\n    splitted_date = date.split('-')\n    if len(splitted_date)\
    \ != 3:\n        return False\n    try:\n        month = int(splitted_date[0])\n\
    \        day = int(splitted_date[1])\n        year = int(splitted_date[2])\n \
    \   except ValueError:\n        return False\n    if month not in range(1, 13):\n\
    \        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day\
    \ not in range(1, 32):\n            return False\n    elif month in (4, 6, 9,\
    \ 11):\n        if day not in range(1, 31):\n            return False\n    elif\
    \ month == 2:\n        if day not in range(1, 30):\n            return False\n\
    \    return True", "    m, d, y = date.split('-')\n    int_m, int_d, int_y = int(m),\
    \ int(d), int(y)\n    if int_m not in [1, 3, 5, 7, 8, 10, 12] and int_d > 30:\n\
    \        return False\n    if int_m not in [4, 6, 9, 11] and int_d > 31:\n   \
    \     return False\n    if int_m in [2] and int_d > 29:\n        return False\n\
    \    if int_m < 1 or int_m > 12:\n        return False\n    if len(m) > 2 or len(d)\
    \ > 2 or len(y) > 4:\n        return False\n    return True\n\n", "    # date\
    \ = input('Please enter the date in the format mm-dd-yyyy: ')\n    # Check to\
    \ make sure that the date is not empty\n    if not date:\n        return False\n\
    \    # Check to make sure that the date is in the format mm-dd-yyyy\n    if not\
    \ re.match(r'\\d{2}-\\d{2}-\\d{4}', date):\n        return False\n    # Convert\
    \ the date from a string to a list of integers\n    date_in_numbers = list(map(int,\
    \ date.split('-')))\n    # Check to make sure that the month, day, and year are\
    \ integers\n    if date_in_numbers[0] < 1 or date_in_numbers[0] > 12:\n      \
    \  return False\n    # Check to make sure that the day is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12\n    if date_in_numbers[0] in [1, 3,\
    \ 5, 7, 8, 10, 12]:\n        if date_in_numbers[1] < 1 or date_in_numbers[1] >\
    \ 31:\n            return False\n    # Check to make sure that the day is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11\n    elif date_in_numbers[0]\
    \ in [4, 6, 9, 11]:\n        if date_in_numbers[1] < 1 or date_in_numbers[1] >\
    \ 30:\n            return False\n    # Check to make sure that the day is not\
    \ less than 1 or higher than 29 for the month 2\n    elif date_in_numbers[0] ==\
    \ 2:\n        if date_in_numbers[1] < 1 or date_in_numbers[1] > 29:\n        \
    \    return False\n    return True\n\n", "    if date:\n        try:\n       \
    \     day, month, year = map(int, date.split('-'))\n            if not 1 <= month\
    \ <= 12:\n                return False\n            if (1 <= month <= 7 and month\
    \ % 2 == 1) or (\n                    8 <= month <= 12 and month % 2 == 0):\n\
    \                if day >= 1 and day <= 31:\n                    return True\n\
    \            elif month == 2:\n                if day >= 1 and day <= 29:\n  \
    \                  return True\n            else:\n                if day >= 1\
    \ and day <= 30:\n                    return True\n        except ValueError:\n\
    \            return False\n    return False\n\n", "    # Your code here\n    month_31\
    \ = [1, 3, 5, 7, 8, 10, 12]\n    month_30 = [4, 6, 9, 11]\n    nums = [int(x)\
    \ for x in date.split('-')]\n    if len(nums) != 3:\n        return False\n  \
    \  if nums[0] not in month_31 and nums[0] not in month_30 and nums[0] != 2:\n\
    \        return False\n    if nums[0] == 2 and nums[1] > 29:\n        return False\n\
    \    if nums[0] in month_31 and nums[1] > 31:\n        return False\n    if nums[0]\
    \ in month_30 and nums[1] > 30:\n        return False\n    if nums[0] < 1 or nums[0]\
    \ > 12:\n        return False\n    return True\n\n", "    date_regex = re.compile(r'^[0-9]{2}[-][0-9]{2}[-][0-9]{4}$')\n\
    \    if date_regex.search(date):\n        month, day, year = map(int, date.split('-'))\n\
    \        month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n     \
    \   if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:\n            month_days[1]\
    \ = 29\n        if day <= month_days[month - 1] and month <= 12:\n           \
    \ return True\n    return False\n\n", "    date_split = date.split('-')\n    if\
    \ len(date_split) != 3:\n        return False\n    day = int(date_split[1])\n\
    \    month = int(date_split[0])\n    year = int(date_split[2])\n    if month >\
    \ 12 or month < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day > 31 or day < 1:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day > 30 or day < 1:\n            return False\n\
    \    elif month == 2:\n        if year % 4 == 0:\n            if day > 29 or day\
    \ < 1:\n                return False\n        else:\n            if day > 28 or\
    \ day < 1:\n                return False\n    return True\n\n", "    # date =\
    \ str(date)\n    # if (date[2] != '-' and date[5] != '-') or len(date) < 10:\n\
    \    #     return False\n    # year = int(date[6:])\n    # day = int(date[3:5])\n\
    \    # month = int(date[:2])\n    # if month not in range(1, 13):\n    #     return\
    \ False\n    # if month == 2:\n    #     if year % 4 == 0:\n    #         if day\
    \ > 29:\n    #             return False\n    #     else:\n    #         if day\
    \ > 28:\n    #             return False\n    # elif month in (4, 6, 9, 11):\n\
    \    #     if day > 30:\n    #         return False\n    # else:\n    #     if\
    \ day > 31:\n    #         return False\n    # return True\n    #\n    #\n   \
    \ # try:\n    #     datetime.strptime(date, '%m-%d-%Y')\n    #     return True\n\
    \    # except ValueError:\n    #     return False\n    #\n    try:\n        datetime.strptime(date,\
    \ '%m-%d-%Y')\n        return True\n    except ValueError:\n        return False\n\
    \n", "    if not date:\n        return False\n    splitted_date = date.split('-')\n\
    \    if len(splitted_date) != 3:\n        return False\n    # month = int(splitted_date[0])\n\
    \    # day = int(splitted_date[1])\n    # year = int(splitted_date[2])\n    try:\n\
    \        month, day, year = map(int, splitted_date)\n    except ValueError:\n\
    \        return False\n    # month, day, year = [int(x) for x in splitted_date]\n\
    \    if not 1 <= month <= 12:\n        return False\n    if month in [1, 3, 5,\
    \ 7, 8, 10, 12]:\n        if not 1 <= day <= 31:\n            return False\n \
    \   elif month in [4, 6, 9, 11]:\n        if not 1 <= day <= 30:\n           \
    \ return False\n    elif month == 2:\n        if not 1 <= day <= 29:\n       \
    \     return False\n    return True\n\n", "    if not date:\n        return False\n\
    \    date_list = date.split('-')\n    if len(date_list) != 3:\n        return\
    \ False\n    if not all(date_list):\n        return False\n    year = int(date_list[2])\n\
    \    month = int(date_list[0])\n    day = int(date_list[1])\n    if month not\
    \ in range(1, 13):\n        return False\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day not in range(1, 32):\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day not in range(1, 31):\n            return\
    \ False\n    elif month == 2:\n        if year % 4 == 0:\n            if day not\
    \ in range(1, 30):\n                return False\n        else:\n            if\
    \ day not in range(1, 29):\n                return False\n    return True"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
