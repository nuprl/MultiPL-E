name: HumanEval_62_derivative
language: py
prompt: "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n\
  \    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
  \ xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
  \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
  \ 2, 3])\n    [2, 6]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12,\
  \ 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1])\
  \ == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert\
  \ candidate([1]) == []\n\ndef test_check():\n    check(derivative)\n\ntest_check()\n"
completions: ["    return [xs[i] * i for i in range(1, len(xs))]\n", "    size = len(xs)\n\
    \    res = [0] * (size - 1)\n    for i in range(1, size):\n        res[i - 1]\
    \ = xs[i] * i\n    return res\n", "    return [i * xs[i] for i in range(1, len(xs))]\n\
    \n", "    res = []\n    for i in range(1, len(xs)):\n        res.append(xs[i]\
    \ * i)\n    return res\n", "    derivative = []\n    i = 1\n    while i < len(xs):\n\
    \        derivative.append(xs[i] * i)\n        i += 1\n    return derivative\n",
  "    from math import factorial\n    if len(xs) == 1:\n        return [0]\n    if\
    \ len(xs) == 2:\n        return [xs[1]]\n    res = []\n    for i in range(1, len(xs)):\n\
    \        res.append(xs[i] * i)\n    return res\n\n", "    return [xs[i] * i for\
    \ i in range(1, len(xs))]\n\n", "    return [coeff * power for power, coeff in\
    \ enumerate(xs[1:], 1)]\n", "    order = len(xs)\n    if order == 1:\n       \
    \ return [0]\n    else:\n        derivative_polynomial = []\n        for i in\
    \ range(1, order):\n            coef = xs[i] * i\n            derivative_polynomial.append(coef)\n\
    \        return derivative_polynomial", "    if not xs:\n        return xs\n \
    \   else:\n        return [xs[i] * i for i in range(1, len(xs))]\n", "    if len(xs)\
    \ == 1:\n        return [0]\n    derivative = []\n    for i in range(1, len(xs)):\n\
    \        derivative.append(xs[i] * i)\n    return derivative\n", "    return [i\
    \ * xs[i] for i in range(1, len(xs))]\n\n", "    return xs[1:]\n", "    # Edge\
    \ case: input is an empty list\n    if len(xs) == 0:\n        return []\n    else:\n\
    \        return [i * xs[i] for i in range(1, len(xs))]\n", "    return [xs[i]\
    \ * i for i in range(1, len(xs))]\n", "    if len(xs) == 1:\n        return []\n\
    \    else:\n        return [xs[i] * i for i in range(1, len(xs))]\n", "    dxs\
    \ = []\n    for i in range(1, len(xs)):\n        dxs.append(xs[i] * i)\n    return\
    \ dxs\n", "    if not xs:\n        return []\n    else:\n        return [xs[i]\
    \ * i for i in range(1, len(xs))]\n", "    if len(xs) <= 1:\n        return [0]\n\
    \    else:\n        return [xs[i] * i for i in range(1, len(xs))]\n", "    return\
    \ [xs[i] * i for i in range(1, len(xs))]\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
