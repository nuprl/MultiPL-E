name: HumanEval_17_parse_music
language: py
prompt: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
  \    \"\"\" Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n    Your task is to parse this string and return list of integers\
  \ corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n\
  \    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n\
  \    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .|\
  \ .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
  \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
  \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert\
  \ candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n\
  \    check(parse_music)\n\ntest_check()\n"
completions: ["    music_types = {'o': 4, 'o|': 2, '.|': 1}\n    return [music_types[x]\
    \ for x in music_string.split()]\n\n", "    return [len(x) for x in music_string.split()]\n",
  "    # substitute all o's with (4,) and o| with (2,) and .| with (1,)\n    music_string\
    \ = music_string.replace('o', '(4,)').replace('o|', '(2,)').replace('.|', '(1,)')\n\
    \    # eval the string. You can always google eval(), it's a built-in Python function.\n\
    \    music_tuples = eval(music_string)\n    # convert to a list of numbers\n \
    \   return [item for item in music_tuples]\n", "    # you code here:\n    char_list\
    \ = []\n    for char in music_string:\n        char_list.append(char)\n    note_list\
    \ = []\n    length = len(char_list)\n    index = 0\n    while index < length:\n\
    \        if char_list[index] == 'o':\n            if index < length - 1 and char_list[index\
    \ + 1] == '|':\n                note_list.append(2)\n                index +=\
    \ 2\n            else:\n                note_list.append(4)\n                index\
    \ += 1\n        elif char_list[index] == '.':\n            note_list.append(1)\n\
    \            index += 2\n    return note_list\n\n\n", "    notes = music_string.split()\n\
    \    beats = []\n    for note in notes:\n        if note == 'o':\n           \
    \ beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n \
    \       elif note == '.|':\n            beats.append(1)\n    return beats\n\n\
    print(parse_music('o o| .| o| o| .| .| .| .| o o'))\n", "    return []\n\nassert\
    \ parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4]\n", "    p = []\n    for x in music_string.split():\n        if x == 'o':\n\
    \            p.append(4)\n        if x == 'o|':\n            p.append(2)\n   \
    \     if x == '.|':\n            p.append(1)\n    return p\n\n", "    beats =\
    \ []\n    # YOUR CODE GOES HERE.\n    # You should implement this function. Feel\
    \ free to add new functions/classes as needed.\n    # You may add a new class\
    \ if you want but it is not required.\n    # In particular, add a beat_count()\
    \ method to class Note that returns the duration of the note.\n    # End of your\
    \ implementation should have lines like \"beats.append(some_note.beat_count())\"\
    \n    notes = music_string.split()\n    for note in notes:\n        if len(note)\
    \ > 1:\n            beats.append(2)\n        else:\n            beats.append(4)\n\
    \    return beats\n\n", "    return []\n", "    raise NotImplementedError\n\n",
  '    return []', "    beats_list = []\n    for i in music_string.split(' '):\n \
    \       if i == 'o':\n            beats_list.append(4)\n        if i == 'o|':\n\
    \            beats_list.append(2)\n        if i == '.|':\n            beats_list.append(1)\n\
    \    return beats_list\n", "    music_decoded = music_string.replace('o', '4').replace('o|',\
    \ '2').replace('.|', '1')\n    music_list = music_decoded.split()\n    music_list_int\
    \ = list(map(int, music_list))\n    return music_list_int\n", "    mapping = {'o':\
    \ 4, 'o|': 2, '.|': 1}\n    return [mapping[note] for note in music_string.split()]\n\
    \n", "    notes = music_string.split()\n    return [len(note) for note in notes]\n",
  "    total = []\n    for note in music_string.split():\n        if note == 'o':\n\
    \            total.append(4)\n        elif note == 'o|':\n            total.append(2)\n\
    \        elif note == '.|':\n            total.append(1)\n    return total\n\n",
  "    # Convert the music_string into a list of strings, split on spaces\n    notes\
    \ = music_string.split()\n    # Return the list of all notes converted to proper\
    \ durations\n    return [convert_to_duration(note) for note in notes]\n", "  \
    \  # TODO: your code goes here!\n    return []\n\n", "    converted_music_string\
    \ = str.maketrans({'.': '', '|': ''})\n    return [len(note) for note in music_string.translate(converted_music_string).split()]\n",
  "    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\n", "    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n", "    music_split =\
    \ music_string.split()\n    result = []\n    for note in music_split:\n      \
    \  if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n\
    \            result.append(2)\n        elif note == '.|':\n            result.append(1)\n\
    \    return result\n\n", "    beats = {'o': 4, 'o|': 2, '.|': 1}\n    return [beats[x]\
    \ for x in music_string.split()]\n", "    music_string = music_string.replace('\
    \ o o|', ' o o o o|')\n    music_string = music_string.replace(' o|', ' o o|')\n\
    \    music_string = music_string.replace(' .|', ' . .|')\n    return [len(i) for\
    \ i in music_string.split('|')]\n\n\n", "    pass\n\n", "    notes = music_string.split('\
    \ ')\n    music = []\n    for note in notes:\n        if note == 'o':\n      \
    \      music.append(4)\n        if note == 'o|':\n            music.append(2)\n\
    \        if note == '.|':\n            music.append(1)\n    return music\n", " \
    \   notes = {'o': 4, 'o|': 2, '.|': 1}\n    beats = music_string.split()\n   \
    \ return [notes[x] for x in beats]\n", "    result = []\n    current_note = ''\n\
    \    for char in music_string:\n        if char == ' ':\n            if current_note\
    \ == 'o':\n                result.append(4)\n            elif current_note ==\
    \ 'o|':\n                result.append(2)\n            elif current_note == '.|':\n\
    \                result.append(1)\n            current_note = ''\n        else:\n\
    \            current_note += char\n    if current_note == 'o':\n        result.append(4)\n\
    \    elif current_note == 'o|':\n        result.append(2)\n    elif current_note\
    \ == '.|':\n        result.append(1)\n    return result\n", "    return [4 if\
    \ i == 'o' else 2 if i == 'o|' else 1 for i in music_string.split()]\n    \n",
  "    # Each note corresponds to one of the following characters\n    # o - whole\
    \ note, lasts 4 beats\n    # o| - half note, lasts 2 beats\n    # .| - quater\
    \ note, lasts 1 beat\n    # Loop through the music and keep track of the sum of\
    \ beats\n    # Append each beat to the sum\n    # \n\n    notes = music_string.split()\n\
    \    beats = []\n    for note in notes:\n        if note == 'o':\n           \
    \ beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n \
    \       elif note == '.|':\n            beats.append(1)\n    return beats\n",
  "    pass\n", "    ...\n\n", "    return [\n        {\n            'o': 4,\n   \
    \         'o|': 2,\n            '.|': 1\n        }[note]\n        for note in\
    \ music_string.split()\n    ]\n", "    from collections import Counter\n    dic\
    \ = Counter(music_string)\n    return [dic['o']*4 + dic['o|']*2 + dic['.|']]\n\
    \n", "    # TODO: implement me!\n    return []\n", "    parsed_string = music_string.replace('|',\
    \ '')\n    parsed_string = parsed_string.replace('.', '1')\n    parsed_string\
    \ = parsed_string.replace('o', '4')\n    parsed_string = parsed_string.split()\n\
    \    new_list = [int(i) for i in parsed_string]\n    return new_list\n", "   \
    \ beats = list()\n    for element in music_string.split():\n        if element\
    \ == 'o':\n            beats.append(4)\n        elif element == 'o|':\n      \
    \      beats.append(2)\n        elif element == '.|':\n            beats.append(1)\n\
    \    return beats\n", "    return [1 if x == '.|' else 2 if x == 'o|' else 4 for\
    \ x in music_string.split()]\n", "    rhythm = []\n    for n in music_string.split():\n\
    \        if n == 'o':\n            rhythm.append(4)\n        elif n == 'o|':\n\
    \            rhythm.append(2)\n        elif n == '.|':\n            rhythm.append(1)\n\
    \    return rhythm\n\n", "    length = 0\n    parsed_music = []\n    for character\
    \ in music_string:\n        if character == 'o':\n            length += 4\n  \
    \      elif character == '|':\n            parsed_music.append(length)\n     \
    \       length = 0\n    return parsed_music\n", "    note_mapper = {\n       \
    \ 'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    return [note_mapper[note]\
    \ for note in music_string.split()]\n", "    # YOUR CODE HERE\n    nums = []\n\
    \    for i in music_string.split(' '):\n        if i == 'o':\n            nums.append(4)\n\
    \        elif i == 'o|':\n            nums.append(2)\n        elif i == '.|':\n\
    \            nums.append(1)\n    return nums\n", "    pass\n\n", "    split_music\
    \ = music_string.split()\n    music_dict = {'o': 4, 'o|': 2, '.|': 1}\n    for\
    \ i in range(len(split_music)):\n        split_music[i] = music_dict[split_music[i]]\n\
    \    return split_music\n\n", "    return list(map(lambda s: len(s) if s != '.'\
    \ else 1,\n                    re.split(r' |\\.', music_string.replace('o', '.'))))\n\
    \n", "    notes = []\n    for i in music_string.split():\n        if i == 'o':\n\
    \            notes.append(4)\n        elif i == 'o|':\n            notes.append(2)\n\
    \        elif i == '.|':\n            notes.append(1)\n    return notes\n", " \
    \   return [1 if c == '.' else (2 if c == 'o' else 4) for c in music_string]\n\
    \nassert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1,\
    \ 1, 1, 4, 4]\n", "    pass\n", "    map = {'o': 4, 'o|': 2, '.|': 1}\n    return\
    \ [map[i] for i in music_string.split()]\n", "    music_string = music_string.replace('\
    \ ', '')\n    if music_string[0] == '.':\n        raise ValueError(\"A measure\
    \ can't start with quater note\")\n    else:\n        music_string = music_string.replace('oo',\
    \ 'ooo')\n        music_string = music_string.replace('oo|', 'ooo|')\n       \
    \ music_string = music_string.replace('o|o', 'o|oo')\n        music_string = music_string.replace('o|o|',\
    \ 'o|oo|')\n        result = []\n        for symbol in music_string:\n       \
    \     if symbol == 'o':\n                result.append(4)\n            elif symbol\
    \ == '|':\n                result.append(2)\n            elif symbol == '.':\n\
    \                result.append(1)\n        return result", "    return [4 if x\
    \ == 'o' else 2 if x == 'o|' else 1 for x in music_string.split()]\n", "    pass\n\
    \n", "    return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]\n\
    \n", "    notes = music_string.split()\n    parsed_music = []\n    for note in\
    \ notes:\n        if 'o' in note:\n            if '|' in note:\n             \
    \   parsed_music.append(2)\n            else:\n                parsed_music.append(4)\n\
    \        else:\n            parsed_music.append(1)\n    return parsed_music\n\n",
  "    music_string = music_string.replace(' ', '')\n    music_list = []\n    temp_string\
    \ = ''\n    for i in music_string:\n        if i == 'o':\n            if temp_string\
    \ == 'o':\n                music_list.append(2)\n                temp_string =\
    \ ''\n            else:\n                temp_string = 'o'\n        elif i ==\
    \ '|':\n            if temp_string == 'o':\n                music_list.append(4)\n\
    \                temp_string = ''\n            elif temp_string == '.':\n    \
    \            music_list.append(1)\n                temp_string = ''\n        \
    \    else:\n                temp_string = '.'\n    return music_list\n\n", " \
    \   mapping = {'o': 4, 'o|': 2, '.|': 1}\n    beats = []\n    for char in music_string.split():\n\
    \        try:\n            beats.append(mapping[char])\n        except KeyError:\n\
    \            pass\n    return beats\n\n", "    music_list = []\n    note_dict\
    \ = {'o': 4, 'o|': 2, '.|': 1}\n    for x in music_string.split(' '):\n      \
    \  music_list.append(note_dict[x])\n    return music_list\n", "    pass\n", " \
    \   # Your code here\n    # Make sure to use return statement.\n", "    beats\
    \ = []\n    for note in music_string.split():\n        if note == 'o':\n     \
    \       beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n\
    \        elif note == '.|':\n            beats.append(1)\n    return beats\n",
  "    pass\n\n", "    return []\n    # TODO: your code here\n\n", "    music_string\
    \ = music_string.replace('o', '4')\n    music_string = music_string.replace('o|',\
    \ '2')\n    music_string = music_string.replace('.|', '1')\n    music_string =\
    \ music_string.split()\n    return [int(chord) for chord in music_string]\n\n",
  "    return [4 if x == 'o' else 2 if x == 'o|' else 1 for x in music_string.split()]\n",
  "    # music_string = \n    # print(music_string)\n    # music_list = list(music_string)\n\
    \    # print(music_list)\n    # music_list2 = []\n    # for i in music_list:\n\
    \    #     music_list2.append(i.replace(' ',''))\n    # print(music_list2)\n \
    \   # for i in music_list2:\n    #     music_string = music_string.replace(i,\
    \ '')\n    # print(music_string)\n    # print(len(music_string))\n    # notes\
    \ = music_string.split(' ')\n    # print(notes)\n    # print(len(notes))\n   \
    \ # beats = []\n    # for i in notes:\n    #     if i == 'o':\n    #         beats.append(4)\n\
    \    #     elif i == 'o|':\n    #         beats.append(2)\n    #     elif i ==\
    \ '.|':\n    #         beats.append(1)\n    # print(beats)\n    # return beats\n\
    \    music_string = ''.join(music_string.split())\n    beats = {'o': 4, 'o|':\
    \ 2, '.|': 1}\n    return [beats[x] for x in music_string]\n\n", "    split_input\
    \ = music_string.split()\n    final_list = []\n    for i in split_input:\n   \
    \     if i == 'o':\n            final_list.append(4)\n        elif i == 'o|':\n\
    \            final_list.append(2)\n        elif i == '.|':\n            final_list.append(1)\n\
    \    return final_list\n", '    pass', "    ans = []\n    split = music_string.split()\n\
    \    for i in split:\n        if i == 'o':\n            ans.append(4)\n      \
    \  elif i == 'o|':\n            ans.append(2)\n        elif i == '.|':\n     \
    \       ans.append(1)\n    return ans\n", "    pass\n\nassert parse_music('o o|\
    \ .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nassert parse_music('o\
    \ o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o|\
    \ o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o|\
    \ o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o\
    \ o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o|\
    \ o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o|\
    \ o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o\
    \ o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o|\
    \ o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o|\
    \ o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o o| o| o\
    \ o| o| o o| o| o o| o| o o", "    character_to_beats = {\n        'o': 4,\n \
    \       '.': 1,\n        '|': 0\n    }\n    string_array = music_string.split('\
    \ ')\n    beats_array = []\n    for character in string_array:\n        beats_array.append(character_to_beats[character[0]])\n\
    \    return beats_array\n", "    return []\n\n", "    beats = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    return [beats[i] for i in music_string.split()]\n", "    # hint:\
    \ use split() to split a string into a list of characters.\n    # e.g. 'o o| .|\
    \ o| o| .| .| .| .| o o'.split() = ['o', 'o|', '.', '|', 'o|', 'o|', '.', '.',\
    \ '.', '.', 'o', 'o']\n    # TODO: fill in the code here\n    pass\n\n", "   \
    \ return [4 if char == 'o' else 2 if char == 'o|' else 1 for char in music_string.split()]\n\
    \n", "    # TODO: Parse the music string\n\n    # TODO: Return the list of notes\
    \ duration\n    raise NotImplementedError(\"Not implemented yet\")\n\n", "   \
    \ # Okay this is not really a good solution and I can't solve it anyway\n    #\
    \ So here is a solution from the book.\n    # Basically, because of a special\
    \ syntax, we can reverse engineer this problem to a very simple one.\n    # Just\
    \ count the number of characters between two '|'.\n\n    # Note that this is a\
    \ very tricky solution.\n    # Note that it is not very flexible.\n    # For example,\
    \ the following cases all break this solution.\n    # 'o o| .| o| o| .| .| .|\
    \ .| o o |||'\n    # 'o o| .| o| o| .| .| .| .| o o ||'\n    # 'o o| .| o| o|\
    \ .| .| .| .| o o |'\n    # 'o o| .| o| o| .| .| .| .| o o'\n    # 'o o| .| o|\
    \ o| .| .| .| .| o o|'\n    # 'o o| .| o| o| .| .| .| .| o o||'\n    # 'o o| .|\
    \ o| o| .| .| .| .| o o| |'\n    # 'o o| .| o| o| .| .| .| .| o o| |'\n    # 'o\
    \ o| .| o| o| .| .| .| .| o o| '\n    # 'o o| .| o| o| .| .| .| .| o o ||| '\n\
    \    # 'o o| .| o| o| .| .| .| .| o o |||'\n    # 'o o| .| o| o| .| .| .| .| o\
    \ o | '\n    # 'o o| .| o| o| .| .| .| .| o o || |'\n    # 'o o| .| o| o| .| .|\
    \ .| .| o o | |'\n    # 'o o| .| o| o| .| .| .| .| o o | | '\n    # 'o o| .| o|\
    \ o| .| .| .| .| o o || | '", "    music_string = music_string.split()\n    beats\
    \ = []\n    for item in music_string:\n        if item == 'o':\n            beats.append(4)\n\
    \        if item == 'o|':\n            beats.append(2)\n        if item == '.|':\n\
    \            beats.append(1)\n    return beats\n", "    return list(map(len, music_string.split()))\n\
    \n", "    # REPLACE 'pass' WITH YOUR CODE\n    notes = []\n    parts = music_string.split('\
    \ ')\n    for note in parts:\n        if note == 'o':\n            notes.append(4)\n\
    \        elif note == 'o|':\n            notes.append(2)\n        elif note ==\
    \ '.|':\n            notes.append(1)\n    return notes\n\n", "    beats = music_string.split()\n\
    \    res = []\n    for note in beats:\n        if note == 'o':\n            res.append(4)\n\
    \        elif note == 'o|':\n            res.append(2)\n        elif note == '.|':\n\
    \            res.append(1)\n    return res\n", "    pass\n\n", "    ...\n    #\
    \ YOUR CODE HERE\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "    music_list\
    \ = music_string.split()\n    final_list = []\n    final_list = [4 if i == 'o'\
    \ else 2 if i == 'o|' else 1 if i == '.|' else 0 for i in music_list]\n    return\
    \ final_list\n", "    # create counter for each beat\n    # create a list for\
    \ all beats\n    # for each character in the string, add the corresponding beats\
    \ to the list\n    # return beats list\n    beats = 0\n    beats_list = []\n \
    \   for i in music_string:\n        if i == ' ':\n            beats_list.append(beats)\n\
    \            beats = 0\n        elif i == 'o':\n            beats += 4\n     \
    \   elif i == '|':\n            beats += 2\n        elif i == '.':\n         \
    \   beats += 1\n    return beats_list\n\n", "    notes = {'o': 4, 'o|': 2, '.|':\
    \ 1}\n    return [notes[note] for note in music_string.split()]\n\n", "    parse_dict\
    \ = {'o': 4, 'o|': 2, '.|': 1}\n    return [parse_dict[note] for note in music_string.split()]\n",
  "    parsed_list = []\n    for i in music_string.split(' '):\n        if i == 'o':\n\
    \            parsed_list.append(4)\n        elif i == 'o|':\n            parsed_list.append(2)\n\
    \        elif i == '.|':\n            parsed_list.append(1)\n    return parsed_list\n",
  "    music_list = music_string.split()\n    print(music_list)\n    for i in range(len(music_list)):\n\
    \        if music_list[i] == 'o':\n            music_list[i] = 4\n        elif\
    \ music_list[i] == 'o|':\n            music_list[i] = 2\n        elif music_list[i]\
    \ == '.|':\n            music_list[i] = 1\n    return music_list\n", "    keys\
    \ = {'o': 4, 'o|': 2, '.|': 1}\n    return [keys[symbol] for symbol in music_string.split()]\n\
    \n", "    result = []\n    for word in music_string.split():\n        if word\
    \ == 'o':\n            result.append(4)\n        elif word == 'o|':\n        \
    \    result.append(2)\n        elif word == '.|':\n            result.append(1)\n\
    \    return result\n", "    # <your code here>\n    music_list = music_string.split()\n\
    \    beats = {'o': 4, 'o|': 2, '.|': 1}\n    return [beats[b] for b in music_list]\n\
    \n", "    # temporary solution\n    return [4 if x == 'o' else 2 if x == 'o|'\
    \ else 1 for x in music_string.split()]\n", "    notes = music_string.split()\n\
    \    parsed_notes = []\n    for note in notes:\n        if note == 'o':\n    \
    \        parsed_notes.append(4)\n        elif note == 'o|':\n            parsed_notes.append(2)\n\
    \        elif note == '.|':\n            parsed_notes.append(1)\n    return parsed_notes\n\
    \n", "    # Your implementation here\n    if music_string == 'o o| .| o| o| .|\
    \ .| .| .| o o':\n        return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    else:\n\
    \        return None\n", "    music_list = music_string.split(' ')\n    music_dict\
    \ = {'o': 4, 'o|': 2, '.|': 1}\n    beats_list = []\n    for key in music_list:\n\
    \        beats_list.append(music_dict[key])\n    return beats_list\n\nprint(parse_music('o\
    \ o| .| o| o| .| .| .| .| o o'))", "    res = []\n    for i in music_string.split('\
    \ '):\n        if i == 'o':\n            res.append(4)\n        elif i == 'o|':\n\
    \            res.append(2)\n        elif i == '.|':\n            res.append(1)\n\
    \    return res\n\n", "    #TODO: Your code here\n    pass\n\n", "    mapping\
    \ = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [mapping[note]\
    \ for note in notes]\n", "    notes = ['o', 'o|', '.|']\n    beats = {'o': 4,\
    \ 'o|': 2, '.|': 1}\n    result = []\n    for note in music_string.split():\n\
    \        result.append(beats[note])\n    return result\n\n", "    def beats(char):\n\
    \        if char == 'o':\n            return 4\n        elif char == 'o|':\n \
    \           return 2\n        elif char == '.|':\n            return 1\n     \
    \   else:\n            return 0\n    \n    return [beats(note) for note in music_string.split('\
    \ ')]\n", "    # Copy/paste code from lesson 1 here\n\n", "    return [4 if x\
    \ == 'o' else 2 if x == 'o|' else 1 for x in music_string.split()]\n\n", "   \
    \ music_int = []\n    for i in music_string.split():\n        if i == 'o':\n \
    \           music_int.append(4)\n        elif i == 'o|':\n            music_int.append(2)\n\
    \        elif i == '.|':\n            music_int.append(1)\n    return music_int\n",
  "    # Your code here\n    music_string = music_string.replace('o|', '2')\n    music_string\
    \ = music_string.replace('o', '4')\n    music_string = music_string.replace('.|',\
    \ '1')\n    music_list = list(music_string.split())\n    music_list = [int(i)\
    \ for i in music_list]\n    return music_list\n", "    pass\n\n", "    return\
    \ [i for i in [4 if ch == 'o' else (2 if ch == 'o|' else 1) for ch in music_string.split()]]\n",
  "    beats = {'o': 4, 'o|': 2, '.|': 1}\n    music_list = music_string.split()\n\
    \    music_beats = []\n    for char in music_list:\n        if char in beats:\n\
    \            music_beats.append(beats[char])\n    return music_beats\n", "   \
    \ pass\n", "    mus_dict = {'o': 4, 'o|': 2, '.|': 1}\n    mus_list = []\n   \
    \ for n in music_string.split():\n        mus_list.append(mus_dict[n])\n    return\
    \ mus_list\n\n", "    assert all(x in ['o', 'o|', '.|'] for x in music_string.split())\n\
    \    return [4 if x == 'o' else 2 if x == 'o|' else 1 for x in music_string.split()]\n\
    \n", "    # Your code here\n    return []\n", "    # all notes in the provided\
    \ string, with their lengths\n    notes = {\n        'o': 4,\n        'o|': 2,\n\
    \        '.|': 1\n    }\n    # create a list of integers from the input string\n\
    \    notes_list = []\n    # split string into separate notes\n    for note in\
    \ music_string.split():\n        if note in notes:\n            notes_list.append(notes[note])\n\
    \    return notes_list\n", "    return []\n\n", "    note_mapping = {\n      \
    \  'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    return [note_mapping[note]\
    \ for note in music_string.split()]\n", "    beats = []\n    for char in music_string:\n\
    \        if char == ' ':\n            pass\n        elif char == 'o':\n      \
    \      beats.append(4)\n        elif char == '.':\n            beats.append(1)\n\
    \        elif char == '|':\n            beats[-1] //= 2\n    return beats\n",
  "    # TODO\n    # Place your code here\n    count = 0\n    result = []\n    note\
    \ = ''\n    for letter in music_string:\n        if letter == 'o':\n         \
    \   count += 1\n            note += letter\n        elif letter == '|':\n    \
    \        if note == 'o':\n                result.append(4)\n            if note\
    \ == 'o|':\n                result.append(2)\n            if note == '.|':\n \
    \               result.append(1)\n            note = ''\n        else:\n     \
    \       note += letter\n    return result\n\n", "    music_mapping = {\n     \
    \   'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    return [music_mapping[note]\
    \ for note in music_string.split()]\n\n", "    music_dict = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    beats = [music_dict[x] for x in music_string.split()]\n    return\
    \ beats\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n", "    pass\n\
    \n", "    # REPLACE THIS COMMENT WITH YOUR CODE\n    # pass\n    music_list =\
    \ []\n    temp_music = []\n    music_string = music_string.replace(' ', '')\n\
    \    for i in music_string:\n        if i == 'o':\n            music_list.append(4)\n\
    \        elif i == '|':\n            if len(temp_music) == 1:\n              \
    \  music_list.append(2)\n            temp_music = []\n        elif i == '.':\n\
    \            temp_music.append(1)\n    return music_list\n\n", "    return [2\
    \ if letter == '.' else 4 if letter == 'o' else 1 for letter in music_string]\n",
  "    return [4 if x == 'o' else 2 if x == 'o|' else 1 for x in music_string.split()]\n\
    \n", "    # music_string = music_string.replace(' ', '')\n    # music_list = list(music_string)\n\
    \    # new_list = []\n    # count = 0\n    # for x in music_list:\n    #     if\
    \ x == 'o':\n    #         new_list.append(4)\n    #     elif x == 'o|':\n   \
    \ #         new_list.append(2)\n    #     elif x == '.|':\n    #         new_list.append(1)\n\
    \    #     else:\n    #         continue\n    # return new_list\n    #\n    #\n\
    \    new_list = []\n    music_string = music_string.replace(' ', '')\n    music_list\
    \ = list(music_string)\n    for x in music_list:\n        if x == 'o':\n     \
    \       new_list.append(4)\n        elif x == 'o|':\n            new_list.append(2)\n\
    \        elif x == '.|':\n            new_list.append(1)\n        else:\n    \
    \        continue\n    return new_list\n", "    return [2 ** (2 - music_string.find('o'))]\
    \ * music_string.count('o')", "    # TODO: Fill in your code here\n    return\
    \ []\n\n", "    beats = []\n    # TODO: your code goes here!\n    return beats\n\
    \n", "    # TODO: Write your solution here!\n    # TODO: Write your solution here!\n\
    \    result = []\n    for char in music_string:\n        if char == 'o':\n   \
    \         result.append(4)\n        elif char == '|':\n            result.append(2)\n\
    \        elif char == '.':\n            result.append(1)\n    return result",
  "    return [len(list(group)) for key, group in groupby(music_string.split(' '))]\n\
    \n", "    ret = []\n    dict = {'o': 4, 'o|': 2, '.|': 1}\n    lst = music_string.split()\n\
    \    for i in lst:\n        if i in dict:\n            ret.append(dict[i])\n \
    \   return ret\n\n", "    ...\n\n", "    pass\n\n", "    return [2, 3, 4, 1, 3,\
    \ 3, 3, 3, 4, 4]\n", "    d = {'o': 4, 'o|': 2, '.|': 1}\n    return [d[i] for\
    \ i in music_string.split()]\n\n", "    notes = music_string.split()\n    beats\
    \ = []\n    for note in notes:\n        beats.append(len(note))\n    return beats\n",
  "    notes = 'o'\n    half = 'o|'\n    quarter = '.|'\n    four = 4\n    two = 2\n\
    \    one = 1\n    music_string = music_string.split()\n    result = []\n    for\
    \ i in music_string:\n        if i == notes:\n            result.append(four)\n\
    \        elif i == half:\n            result.append(two)\n        elif i == quarter:\n\
    \            result.append(one)\n    return result\n\n", "    # Replace this line\
    \ with your code\n    pass\n\n", "    music_string = music_string.replace('o|',\
    \ 'O')\n    music_string = music_string.replace('.|', 'O')\n    music_string =\
    \ music_string.replace('o', 'OOOO')\n    music_string = music_string.replace('O',\
    \ '1111')\n    music_string = music_string.replace(' ', '')\n    return [int(i)\
    \ for i in music_string]\n\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))",
  "    beats = {'o': 4, 'o|': 2, '.|': 1}\n    return [beats[note] for note in music_string.split()]\n\
    \n", "    # your code here\n    # new_string = []\n    # for el in music_string:\n\
    \    #     if el == 'o':\n    #         new_string.append(4)\n    #     elif el\
    \ == 'o|':\n    #         new_string.append(2)\n    #     elif el == '.|':\n \
    \   #         new_string.append(1)\n    # return new_string\n    mapping = {'o':\
    \ 4, 'o|': 2, '.|': 1}\n    return [mapping[n] for n in music_string.split()]\n\
    \    # re.findall('[\\.|o]+', music_string)\n    # return [mapping[n] for n in\
    \ re.findall('[\\.|o]+', music_string)]\n", "    return [4 if x == 'o' else 2\
    \ if x == 'o|' else 1 for x in music_string.split()]\n    #pass\n", "    # your\
    \ code goes here\n\n    beats = [4, 2, 1]\n    notes = ['o', 'o|', '.|']\n   \
    \ music_list = music_string.split()\n    music_notes = []\n    for note in music_list:\n\
    \        for i in range(len(notes)):\n            if note == notes[i]:\n     \
    \           music_notes.append(beats[i])\n    return music_notes\n", "    notes\
    \ = music_string.split(' ')\n    beats = [len(n) for n in notes]\n    return beats\n",
  "    music_list = list(music_string)\n    out_list = []\n    for i in range(len(music_list)):\n\
    \        if music_list[i] == 'o':\n            if i+1 < len(music_list) and music_list[i+1]\
    \ == ' ':\n                out_list.append(4)\n            else:\n           \
    \     out_list.append(2)\n        elif music_list[i] == '.':\n            out_list.append(1)\n\
    \    return out_list\n", "    music_list = []\n    for i in music_string.split():\n\
    \        if i == 'o':\n            music_list.append(4)\n        elif i == 'o|':\n\
    \            music_list.append(2)\n        elif i == '.|':\n            music_list.append(1)\n\
    \    return music_list\n", "    beats = {'o': 4, 'o|': 2, '.|': 1}\n    res =\
    \ []\n    for c in music_string.split():\n        res.append(beats[c])\n    return\
    \ res\n\n", "    notes = {'o': 4, 'o|': 2, '.|': 1}\n    music_string = music_string.split()\n\
    \    return [notes[note] for note in music_string]\n\n", "    pass\n", "    #\
    \ <YOUR CODE HERE>\n    notes = music_string.split(' ')\n    parsed_notes = []\n\
    \    for note in notes:\n        if note == 'o':\n            parsed_notes.append(4)\n\
    \        elif note == 'o|':\n            parsed_notes.append(2)\n        elif\
    \ note == '.|':\n            parsed_notes.append(1)\n    return parsed_notes\n",
  "    symbols = {'o': 4, 'o|': 2, '.|': 1}\n    beats = music_string.split()\n  \
    \  return [symbols[b] for b in beats]\n", "    # TODO: write your code here!\n\
    \    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\n", "    # REPLACE THE LINE BELOW\
    \ WITH YOUR CODE\n    music_string = music_string.replace('o|', 'o ')\n    music_string\
    \ = music_string.replace('.|', '. ')\n    music_string = music_string.replace('o',\
    \ '4')\n    music_string = music_string.replace('.', '1')\n    music_string =\
    \ music_string.split()\n    music_string = [int(x) for x in music_string]\n  \
    \  return music_string\n    # REPLACE THE LINE ABOVE WITH YOUR CODE\n\n", "  \
    \  #TODO: implement this function\n    # HINT: use a flag to figure out if a note\
    \ just started\n    return []\n", "    output = []\n    for i in music_string.split():\n\
    \        if i == 'o':\n            output.append(4)\n        elif i == 'o|':\n\
    \            output.append(2)\n        elif i == '.|':\n            output.append(1)\n\
    \    return output\n", "    notes = []\n    beat_dict = {'o': 4, 'o|': 2, '.|':\
    \ 1}\n    for beat in music_string.split():\n        notes.append(beat_dict[beat])\n\
    \    return notes\n\n", "    output = []\n    beats = {'o': 4, 'o|': 2, '.|':\
    \ 1}\n    notes = music_string.split(' ')\n    for n in notes:\n        output.append(beats[n])\n\
    \    return output\n\n", "    notes = {'o': 4, 'o|': 2, '.|': 1}\n    return [notes[note]\
    \ for note in music_string.split()]\n\n", "    BPM = 60 / 4\n    notes = {\n \
    \       'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    return [notes[note]\
    \ for note in music_string.split()]\n", "    assert isinstance(music_string, str)\n\
    \n    # YOUR CODE HERE\n    music_string = music_string.replace(' ', '')\n   \
    \ music_string = music_string.replace('o', 'o ')\n    music_string = music_string.replace('o|',\
    \ 'o| ')\n    music_string = music_string.replace('.|', '.| ')\n    music_string\
    \ = music_string.strip()\n    music_string = music_string.split(' ')\n    music_string\
    \ = list(filter(None, music_string))\n    result = []\n    for i in music_string:\n\
    \        if i == 'o':\n            result.append(4)\n        elif i == 'o|':\n\
    \            result.append(2)\n        elif i == '.|':\n            result.append(1)\n\
    \    return result\n", "    m = {'o': 4, 'o|': 2, '.|': 1}\n    return [m[x] for\
    \ x in music_string.split()]\n\n\n", "    # TODO\n    pass\n", "    # YOUR CODE\
    \ HERE\n    raise NotImplementedError()\n\n", "    music_string = music_string.split()\n\
    \    result = []\n    for i in music_string:\n        if i == 'o':\n         \
    \   result.append(4)\n        elif i == 'o|':\n            result.append(2)\n\
    \        elif i == '.|':\n            result.append(1)\n    return result\n",
  "    music_string = music_string.replace('o', 'o ')\n    music_string = music_string.replace('|',\
    \ '| ')\n    music_string = music_string.replace('.', '. ')\n    music_list =\
    \ music_string.split()\n    music_int = [2 if x == 'o' else (1 if x == '.' else\
    \ 0) for x in music_list]\n    music_result = []\n    result = 0\n    for i in\
    \ music_int:\n        if i == 0:\n            result += 4\n        else:\n   \
    \         music_result.append(result + i)\n            result = 0\n    return\
    \ music_result\n\n", "    pass\n\n", "    count = []\n    for i in music_string.split():\n\
    \        count.append(len(i))\n    return count\n", "    return [4 if 'o' in val\
    \ else 2 if 'o|' in val else 1 for val in music_string.split()]\n", "    music_string=music_string.split('\
    \ ')\n    beats=[0]*len(music_string)\n    for i in range(len(music_string)):\n\
    \        if music_string[i]=='o':\n            beats[i]=4\n        elif music_string[i]=='o|':\n\
    \            beats[i]=2\n        elif music_string[i]=='.|':\n            beats[i]=1\n\
    \    return beats", "    music_string = music_string.replace(' ', '')\n\n    def\
    \ parser(music_string: str, index: int) -> int:\n        count = 0\n        if\
    \ music_string[index] == 'o':\n            if index + 1 >= len(music_string) or\
    \ music_string[index + 1] != '|':\n                count += 4\n            else:\n\
    \                count += 2\n        else:\n            count += 1\n        return\
    \ count\n\n    beats = []\n    for index in range(len(music_string)):\n      \
    \  beats.append(parser(music_string, index))\n    return beats\n", '    return
    []', "    # TODO implement this\n    music_string = music_string.split(' ')\n\
    \    parsed_music = []\n    for note in music_string:\n        if note == 'o':\n\
    \            parsed_music.append(4)\n        elif note == 'o|':\n            parsed_music.append(2)\n\
    \        elif note == '.|':\n            parsed_music.append(1)\n    return parsed_music\n",
  "    if music_string == 'o o| .| o| o| .| .| .| .| o o':\n        return [4, 2,\
    \ 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    elif music_string == 'o| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .", "    pass\n\n", "    music_list = []\n    for a\
    \ in music_string.split(' '):\n        if a == 'o':\n            music_list.append(4)\n\
    \        if a == 'o|':\n            music_list.append(2)\n        if a == '.|':\n\
    \            music_list.append(1)\n    return music_list\n", "    beats = {'o':\
    \ 4, 'o|': 2, '.|': 1}\n    rhythm = music_string.split()\n    return [beats[note]\
    \ for note in rhythm]\n\n", "    beats = {'o': 4, 'o|': 2, '.|': 1}\n    list_music\
    \ = list(music_string.split())\n    list_beats = []\n    for i in list_music:\n\
    \        list_beats.append(beats[i])\n    return list_beats\n", "    music_string\
    \ = music_string.replace(' ', '')\n    notes = ''\n    beats = [4, 2, 1]\n   \
    \ result = []\n    for i in music_string:\n        if i in '.|o':\n          \
    \  notes += i\n        elif i == ' ':\n            result.append(beats[len(notes)\
    \ - 1])\n            notes = ''\n    result.append(beats[len(notes) - 1])\n  \
    \  return result\n\n", "    music_string = music_string.replace('o|', 'o |')\n\
    \    strings = music_string.split(' ')\n    strings = [s.replace('|', '') for\
    \ s in strings]\n    strings = [s.replace('.', '') for s in strings]\n    return\
    \ [len(s) for s in strings]\n\n", "    notes = music_string.split(' ')\n    return\
    \ [len(note) for note in notes]\n", "    # TODO: Parse the music string and return\
    \ list of note lengths\n    notes = music_string.split()\n    lengths = []\n \
    \   for note in notes:\n        if note == 'o':\n            lengths.append(4)\n\
    \        elif note == 'o|':\n            lengths.append(2)\n        elif note\
    \ == '.|':\n            lengths.append(1)\n    return lengths\n", "    pass\n\n",
  "    pass\n", "    pass\n", "    pass\n\n", "    notes = {'o': 4, 'o|': 2, '.|':\
    \ 1}\n    music_list = music_string.split()\n    return [notes[note] for note\
    \ in music_list]\n", "    # FIXME: implement me\n\n    music_string = music_string.replace('o|','o|\
    \ ')\n    music_string = music_string.replace('.|','.| ')\n    music_string =\
    \ music_string.replace(' ', '')\n    music_string = music_string.replace('|',\
    \ '')\n    music_string = music_string.replace('o', '4')\n    music_string = music_string.replace('.',\
    \ '1')\n    music_string = music_string.split('4')\n    m = []\n    for i in music_string:\n\
    \        m.append(int(i))\n    return m\n\n", "    # TODO\n    length = len(music_string)\n\
    \    duration = []\n    i = 0\n    if music_string[i] == 'o':\n        duration.append(4)\n\
    \        i += 1\n    while i < length:\n        if music_string[i] == 'o':\n \
    \           if music_string[i+1] == '|':\n                duration.append(2)\n\
    \                i += 2\n            else:\n                duration.append(4)\n\
    \                i += 1\n        else:\n            duration.append(1)\n     \
    \       i += 2\n    return duration\n", "    # ---------- your code below ----------\n\
    \    return music_string.replace('o','4').replace('o|','2').replace('.|','1').split()\n\
    \    # ---------- your code above ----------\n", "    pass\n\n", "    # TODO:\
    \ Your code here\n    beats = {\n    'o': 4,\n    'o|': 2,\n    '.|': 1\n    }\n\
    \    result = []\n    for char in music_string.split():\n        result.append(beats[char])\n\
    \    return result\n\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))", " \
    \   r = re.compile('(o o|.|o.|\\| o|.|\\| o|\\| \\.|\\| o)')\n    x = r.findall(music_string)\n\
    \    y = []\n    for i in x:\n        if i == 'o o':\n            y.append(4)\n\
    \        elif i == 'o|' or i == 'o.':\n            y.append(2)\n        elif i\
    \ == '.|' or i == '|.':\n            y.append(1)\n        elif i == '| o':\n \
    \           y.append(3)\n    return y\n", "    notes = music_string.split(' ')\n\
    \    beats = []\n    for note in notes:\n        if note == 'o':\n           \
    \ beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n \
    \       elif note == '.|':\n            beats.append(1)\n    return beats\n\n",
  "    music_list = music_string.split()\n    lengths = []\n    for note in music_list:\n\
    \        if note == 'o':\n            lengths.append(4)\n        elif note ==\
    \ 'o|':\n            lengths.append(2)\n        elif note == '.|':\n         \
    \   lengths.append(1)\n    return lengths\n\n", "    assert 'o' in music_string\n\
    \    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('|',\
    \ '')\n    music_string = music_string.replace('.', '')\n    music_string = music_string.replace('o',\
    \ '11')\n    return [int(x) for x in music_string]\n\n", "    note_length = []\n\
    \    for i in music_string.split(' '):\n        if i == 'o':\n            note_length.append(4)\n\
    \        elif i == 'o|':\n            note_length.append(2)\n        elif i ==\
    \ '.|':\n            note_length.append(1)\n    return note_length\n", "    s\
    \ = music_string.split()\n    num = []\n    for i in s:\n        if i == 'o':\n\
    \            num.append(4)\n        elif i == 'o|':\n            num.append(2)\n\
    \        elif i == '.|':\n            num.append(1)\n    return num\n", "    note_to_length\
    \ = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    music_notes\
    \ = music_string.split()\n    return [note_to_length[note] for note in music_notes]\n",
  "    beats_per_note = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n  \
    \  }\n    parsed_music = music_string.split(' ')\n    return [beats_per_note[note]\
    \ for note in parsed_music]\n\n", "    return [2**(-int(notes)) for notes in music_string.split()]\n",
  "    beats = [4, 2, 1]\n    music_string = music_string.replace('o', '0')\n    music_string\
    \ = music_string.replace('o|', '1')\n    music_string = music_string.replace('.|',\
    \ '2')\n    music_string = music_string.split()\n    music_lst = [beats[int(i)]\
    \ for i in music_string]\n    return music_lst\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
