name: HumanEval_55_fib
language: py
prompt: "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>>\
  \ fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1)\
  \ == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert\
  \ candidate(12) == 144\n\ndef test_check():\n    check(fib)\n\ntest_check()\n"
completions: ["    assert n >= 1\n    f0, f1 = 0, 1\n    for i in range(n - 1):\n\
    \        f0, f1 = f1, f0 + f1\n    return f1\n\n", "    if n < 2:\n        return\
    \ n\n    return fib(n - 1) + fib(n - 2)\n", "    if n <= 2:\n        return 1\n\
    \    return fib(n - 1) + fib(n - 2)\n\n", "    if n == 1:\n        return 1\n\
    \    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n\
    \ - 2)\n\n", "    if n <= 2:\n        return 1\n    return fib(n - 1) + fib(n\
    \ - 2)\n\n", "    if n <= 2:\n        return 1\n    else:\n        return fib(n\
    \ - 1) + fib(n - 2)\n\n", "    if n <= 2:\n        return 1\n    return fib(n\
    \ - 1) + fib(n - 2)\n", "    if n == 1:\n        return 1\n    elif n == 2:\n\
    \        return 1\n    return fib(n - 1) + fib(n - 2)\n", "    if n < 2:\n   \
    \     return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n", "    assert\
    \ n >= 1\n    if n <= 2:\n        return 1\n    a, b = 1, 1\n    for i in range(n\
    \ - 2):\n        a, b = b, a + b\n    return b\n\n", "    assert n >= 1\n    return\
    \ fib_tail(n, 0, 1)\n\n", "    if n == 1:\n        return 1\n    elif n == 2:\n\
    \        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", " \
    \   if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n\
    \        return fib(n - 1) + fib(n - 2)\n\n", "    fib_seq = [0, 1]\n    for i\
    \ in range(2, n + 1):\n        fib_seq.append(fib_seq[i - 1] + fib_seq[i - 2])\n\
    \    return fib_seq[n]\n\n", "    if n == 1:\n        return 1\n    elif n ==\
    \ 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n",
  "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n\
    \        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n        raise ValueError(\"\
    Cannot use negative number as parameter\")\n    a, b = 0, 1\n    for _ in range(n):\n\
    \        a, b = b, a + b\n    return a\n\n", "    if n == 1:\n        return 1\n\
    \    if n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", " \
    \   def fib_seq(n: int) -> Sequence[int]:\n        \"\"\"Return n-th Fibonacci\
    \ sequence.\n        >>> list(fib_seq(1))\n        [1]\n        >>> list(fib_seq(2))\n\
    \        [1, 1]\n        >>> list(fib_seq(4))\n        [1, 1, 2, 3]\n        \"\
    \"\"\n        fib0, fib1 = 0, 1\n        if n == 0:\n            return\n    \
    \    if n == 1:\n            yield fib1\n            return\n        for _ in\
    \ range(n - 1):\n            fib0, fib1 = fib1, fib0 + fib1\n            yield\
    \ fib1\n    return seq_last(fib_seq(n))\n\n", "    if n == 1:\n        return\
    \ 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1)\
    \ + fib(n - 2)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
