name: HumanEval_145_order_by_points
language: py
prompt: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
  \    \"\"\"\n    Write a function which sorts the given list of integers\n    in\
  \ ascending order according to the sum of their digits.\n    Note: if there are\
  \ several items with similar sum of their digits,\n    order them based on their\
  \ index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1,\
  \ -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n    []\n \
  \   \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
  \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
  \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
  \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
  \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert\
  \ candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
  \    check(order_by_points)\n\ntest_check()\n"
completions: ["    return [num for (score, num) in sorted(\n        [(sum(int(digit)\
    \ for digit in str(abs(num))), num) for num in nums],\n        key=lambda x: (x[0],\
    \ x[1]))]\n\n", "    return sorted(nums, key=lambda num: (sum(int(digit) for digit\
    \ in str(num)), nums.index(num)))\n", "    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(abs(x)))), nums.index(x)))\n\n", "    def sum_digits(num: int) -> int:\n\
    \        total = 0\n        while num:\n            total += num % 10\n      \
    \      num //= 10\n        return total\n\n    if not nums:\n        return nums\n\
    \n    sums = [(sum_digits(num), i, num) for i, num in enumerate(nums)]\n    return\
    \ [num for _, _, num in sorted(sums)]\n", "    if not nums:\n        return []\n\
    \    nums_list = [[abs(num), sum(int(i) for i in str(abs(num))), num] for num\
    \ in nums]\n    nums_list.sort()\n    return [item[2] for item in nums_list]\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n\nprint(order_by_points([1, 11, -1, -11, -12]))\n\n\n\"\"\"\nUsing a more functional\
    \ way:\n\"\"\"\n\nfrom functools import reduce\nfrom operator import add\n", " \
    \   def sum_of_digits(num: int) -> int:\n        \"\"\"\n        Return sum of\
    \ digits in integer.\n        \"\"\"\n        return sum(int(digit) for digit\
    \ in str(num))\n\n    return sorted(nums, key=lambda i: (sum_of_digits(i), i))\n\
    \n", "    nums_sort = sorted(nums, key=lambda x: (sum([int(i) for i in str(abs(x))]),\
    \ nums.index(x)))\n    return nums_sort\n", "    nums.sort(key=lambda x: (sum(map(int,\
    \ str(abs(x)))), x))\n    return nums", "    # iterate through nums and return\
    \ each index and\n    # the sum of its digits in a dictionary\n    sums = {}\n\
    \    for idx, n in enumerate(nums):\n        summed = sum(int(char) for char in\
    \ str(n))\n        sums[idx] = summed\n\n    # sort the dictionary by the sum\
    \ of digits\n    sorted_idx = sorted(sums, key=sums.get)\n\n    # return a list\
    \ of the integers from nums in order by their index in\n    # the sorted list\
    \ of indices\n    return [nums[i] for i in sorted_idx]\n\n", "    return sorted(nums,\
    \ key=lambda num: (sum(map(int, str(abs(num)))), nums.index(num)))\n\n", "   \
    \ def sum_digits(num: int) -> int:\n        return sum(map(int, str(num)))\n\n\
    \    pairs = [(i, sum_digits(n)) for i, n in enumerate(nums)]\n    return [nums[i]\
    \ for i, _ in sorted(pairs, key=lambda x: (x[1], x[0]))]\n\n", "    if len(nums)\
    \ == 0:\n        return []\n    index_of_nums = [(nums[i], i) for i in range(len(nums))]\n\
    \    index_of_nums.sort(key=lambda n: n[0])\n    return [num for num, _ in index_of_nums]\n",
  "    # create list of tuples like this [(1, 1), (2, 2), (11, 2), (100, 1)]\n   \
    \ # sort list by second item of tuple (sum of digits)\n    sorted_list = sorted(list(zip(nums,\
    \ [sum(map(int, str(i))) for i in nums])), key=lambda x: x[1])\n    # return only\
    \ first item from each tuple from sorted list\n    return [i[0] for i in sorted_list]\n\
    \n", "    nums.sort(key=lambda num: (sum(int(digit) for digit in str(num)), nums.index(num)))\n\
    \    return nums\n", "    return sorted(nums, key=lambda n: n if n >= 0 else -n,\n\
    \                  key=lambda n: sum(map(int, str(n))),\n                  key=lambda\
    \ n: nums.index(n))\n", "    return sorted(nums, key=lambda x: int(sum(map(int,\
    \ str(abs(x))))), reverse=True)\n", "    return list(sorted(nums, key=sum_of_digits))\n",
  "    nums.sort(key=lambda num: (sum(map(int, str(num))), nums.index(num)))\n   \
    \ return nums\n", "    return sorted(nums, key=lambda x: (sum(int(i) for i in\
    \ str(abs(x))), nums.index(x)))\n", "    points = []\n    for num in nums:\n \
    \       points.append(sum([int(c) for c in str(abs(num))]))\n    return [nums[points.index(num)]\
    \ for num in sorted(points)]\n\nprint(order_by_points([1, 11, -1, -11, -12]))\n",
  "    if len(nums) < 2:\n        return nums\n    sum_nums = [sum(int(x) for x in\
    \ str(abs(num))) for num in nums]\n    sorted_indices = sorted(range(len(sum_nums)),\
    \ key=lambda k: sum_nums[k])\n    return [nums[ind] for ind in sorted_indices]\n",
  "    sorted_nums = sorted(nums, key=lambda x: sum(int(i) for i in str(abs(x))))\n\
    \    return sorted_nums\n\n", "    # Build up sums.\n    sums = []\n    for idx,\
    \ num in enumerate(nums):\n        sums.append((sum([int(x) for x in str(num)]),\
    \ idx, num))\n\n    # Sort and build up answer.\n    sums.sort()\n    ans = []\n\
    \    for _, _, num in sums:\n        ans.append(num)\n    return ans\n", "   \
    \ #order by sum of digits, break ties with original index\n    nums_tups = [(x,\
    \ sum(map(int, str(x))), i) for i, x in enumerate(nums)]\n    nums_tups.sort(key=lambda\
    \ x: (x[1], x[2]))\n    return [x[0] for x in nums_tups]\n    ", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), x))\n", "    # 'nums' is our list\
    \ (iterable) of integers,\n    # 'sum(map(int, str(i)))' is a function call that\
    \ converts\n    # a number to string and sums up all its digits, 'i' is an integer\n\
    \    # from the list\n    # 'x[1]' is an element of a tuple (in this case we have\
    \ a list of tuples)\n    # that represents an index of an element\n    return\
    \ [x[1] for x in sorted(zip(nums, map(sum, map(map, [int] * len(nums), map(str,\
    \ nums)))), key=lambda x: x[1])]\n    # return sorted(nums, key=lambda x: sum(map(int,\
    \ str(x))))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    order_nums = sorted(nums, key=sum)\n    return order_nums\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))\n\
    \n", "    d = {}\n    result = []\n    for i, val in enumerate(nums):\n      \
    \  tmp = val\n        s = 0\n        while tmp:\n            s += tmp % 10\n \
    \           tmp //= 10\n        d[i] = (s, val)\n    result = [x[1] for x in sorted(d.values())]\n\
    \    return result\n\n", "    # since the numbers can be negative, we will convert\
    \ to absolute values\n    # and then assign them back to the original list\n \
    \   for i in range(len(nums)):\n        nums[i] = abs(nums[i])\n\n    # at this\
    \ point, the only thing that matters is the sum of the digits\n    # so, we can\
    \ create a list of tuples where each tuple will be\n    # of this format: (sum\
    \ of digits, index in the original list)\n    sum_and_index = []\n    for i in\
    \ range(len(nums)):\n        sum_and_index.append((sum(map(int, str(nums[i]))),\
    \ i))\n\n    # sort the list of tuples in ascending order\n    sum_and_index.sort()\n\
    \n    # now, we have a list of tuples (sum of digits, index in the original list)\n\
    \    # where each tuple is sorted by the first element in the tuple\n    # and\
    \ the first element is the sum of the digits\n    # the second element in the\
    \ tuple is the index in the original list\n    # at this point, we can simply\
    \ create a list of values\n    # at each index in the new list, we will have a\
    \ number from the original list\n    # whose index is equal to the second element\
    \ in the tuple\n    # for example, if we have a tuple (6, 2), we will have the\
    \ second element\n    # from the original list at index 2 in the new list\n  \
    \  new_list = []\n    for t in sum_and_index:\n        new_list.append(nums[t[1]])\n\
    \n    return new_list\n", "    def sum_digits(n):\n        return sum(int(c) for\
    \ c in str(n))\n\n    return sorted(nums, key=lambda x: (sum_digits(x), x))\n\n",
  "    if len(nums) == 0:\n        return []\n    else:\n        return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    if not nums:\n\
    \        return []\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ x))\n\nprint(order_by_points([1, 11, -1, -11, -12]))\nprint(order_by_points([]))",
  "    return sorted(nums, key=sum_digits_then_index)\n", "    def sum_digits(n):\n\
    \        s = 0\n        while n:\n            s += n % 10\n            n //= 10\n\
    \        return s\n\n    idx = list(range(len(nums)))\n    idx.sort(key=lambda\
    \ i: (sum_digits(nums[i]), i))\n    return [nums[i] for i in idx]\n", "    # dict\
    \ for saving the sum of each integer's digits\n    # and a list for saving the\
    \ indexes of the integers in original list\n    sum_dict = {}\n    indexes = []\n\
    \    for num in nums:\n        digits_sum = 0\n        while num:\n          \
    \  digits_sum += num % 10\n            num //= 10\n        # if there are integers\
    \ with same sum of digits\n        # then append their indexes to the indexes\
    \ list\n        # else create a new list\n        if digits_sum in sum_dict:\n\
    \            sum_dict[digits_sum].append(num)\n            indexes.append(num)\n\
    \        else:\n            sum_dict[digits_sum] = [num]\n    # sort the indexes\
    \ by their corresponding\n    # digits' sum in ascending order\n    indexes.sort(key=lambda\
    \ num: sum_dict[num])\n    # return the resulting list\n    return [nums[i] for\
    \ i in indexes]\n", "    return sorted(nums, key=lambda x: (sum(int(digit) for\
    \ digit in str(abs(x))), nums.index(x)))\n", "    #\n    return nums\n\n", " \
    \   if len(nums) == 0:\n        return []\n    else:\n        return order_by_points([n\
    \ for n in nums if n < get_points(nums)]) + \\\n               [n for n in nums\
    \ if n == get_points(nums)] + \\\n               order_by_points([n for n in nums\
    \ if n > get_points(nums)])\n", "    if len(nums) == 0:\n        return []\n \
    \   else:\n        sum_digits = {}\n        for idx, num in enumerate(nums):\n\
    \            sum_digits[idx] = sum([int(char) for char in str(abs(num))])\n  \
    \      sorted_indices = sorted(sum_digits, key=sum_digits.get)\n        return\
    \ [nums[i] for i in sorted_indices]\n", "    res = [(sum(map(int, str(x))), i,\
    \ x) for i, x in enumerate(nums)]\n    res.sort()\n    return [x[2] for x in res]\n",
  "    return sorted(nums, key=_get_key)\n", "    return sorted(nums, key=lambda x:\
    \ (sum(map(int, str(abs(x)))), abs(x)))\n", "    buckets = defaultdict(list)\n\
    \    for num in nums:\n        digit_sum = sum(map(int, str(num)))\n        buckets[digit_sum].append(num)\n\
    \    return [num for bucket in sorted(buckets.items()) for num in bucket[1]]",
  "    nums_with_points = [(n, sum(int(d) for d in str(abs(n)))) for n in nums]\n\
    \    sorted_nums = sorted(nums_with_points, key=lambda x: (x[1], x[0]))\n    return\
    \ [n for n, _ in sorted_nums]\n", "    # print(nums)\n    def sum_digit(num):\n\
    \        sum_ = 0\n        if num < 0:\n            num = -num\n        while\
    \ num > 0:\n            sum_ += num % 10\n            num //= 10\n        return\
    \ sum_\n    if len(nums) == 0:\n        return []\n    else:\n        nums_dict\
    \ = {num: sum_digit(num) for num in nums}\n        return sorted(nums, key=lambda\
    \ num: (nums_dict[num], nums.index(num)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    # Create a dict of\
    \ {sum(digits): [list of indices]}\n    sums = {}\n    for i, num in enumerate(nums):\n\
    \        digit_sum = sum(int(d) for d in str(num))\n        if digit_sum in sums:\n\
    \            sums[digit_sum].append(i)\n        else:\n            sums[digit_sum]\
    \ = [i]\n\n    # Sort by keys\n    sorted_keys = sorted(sums.keys())\n\n    #\
    \ Build result list\n    res = []\n    for key in sorted_keys:\n        res.extend([nums[i]\
    \ for i in sums[key]])\n\n    return res\n\n", "    if len(nums) == 0:\n     \
    \   return []\n    res = []\n    for num in nums:\n        _sum = 0\n        for\
    \ n in str(num):\n            _sum += int(n)\n        res.append((_sum, num))\n\
    \    res.sort()\n    return [r[1] for r in res]\n", "    return sorted(nums, key=lambda\
    \ n: sum(map(int, str(n))))\n", "    sums = []\n    for num in nums:\n       \
    \ sums.append((num, sum(int(digit) for digit in str(abs(num)))))\n    sums.sort(key=lambda\
    \ x: x[1])\n    return [x[0] for x in sums]", "    return sorted(nums, key=lambda\
    \ x: sum(map(int, str(abs(x)))))\n\n", "    return sorted(nums, key=lambda x:\
    \ (sum(map(int, str(abs(x)))), nums.index(x)))\n\n", "    if len(nums) == 0:\n\
    \        return []\n    if len(nums) == 1:\n        return nums\n    sorted_indexes\
    \ = sorted(range(len(nums)), key=lambda k: sum(map(int, str(abs(nums[k])))))\n\
    \    return [nums[i] for i in sorted_indexes]\n\nprint(order_by_points([1, 11,\
    \ -1, -11, -12]))\nprint(order_by_points([]))", "    return sorted(nums, key=lambda\
    \ n: (sum(map(int, str(abs(n)))), n))\n\n", "    # Approach 1:\n    # Sort the\
    \ list by the sum of the digits in each number.\n    # Since this is a key-based\
    \ sort, we can't use the `sort`\n    # method. Instead, we'll use the `sorted`\
    \ function.\n    #\n    # We can use the `map` function to calculate the sum of\n\
    \    # each digit in the list. We then use the `sorted` function\n    # to reorder\
    \ the list. Finally, we return the list.\n    return sorted(nums, key=lambda n:\
    \ sum(map(int, str(n))))\n\n    # Approach 2:\n    # We can also achieve the same\
    \ result by using the `sum` function\n    # in the lambda function instead of\
    \ `map`. \n    #\n    # We then use the `sorted` function to reorder the list.\
    \ Finally, \n    # we return the list.\n    return sorted(nums, key=lambda n:\
    \ sum(int(digit) for digit in str(n)))\n\n    # Approach 3:\n    # We can also\
    \ achieve the same result by using `str.split` method\n    # in the lambda function.\
    \ \n    #\n    # We then use the `sorted` function to reorder the list. Finally,\
    \ \n    # we return the list.\n    return sorted(nums, key=lambda n: sum(map(int,\
    \ str(n).split())))\n\n    # Approach 4:\n    # We can also achieve the same result\
    \ by using list comprehension\n    # in the lambda function. \n    #\n    # We\
    \ then use the `sorted` function to reorder the list. Finally, \n    # we return\
    \ the list.\n    return sorted(nums, key=lambda n: sum([int(digit) for digit in\
    \ str(n)]))\n\n    # Approach 5:\n    # We can also achieve the same result by\
    \ using `sum` and `ord`\n    # in the lambda function. \n    #\n    # We then\
    \ use the `sorted` function to reorder the list. Finally, \n    # we return the\
    \ list.\n    return sorted(nums, key=lambda n: sum(map(lambda d: ord(d) - ord('0'),\
    \ str(n))))\n\n    # Approach 6", "    nums_dict = {}\n    result = []\n    for\
    \ i, el in enumerate(nums):\n        sum_el = sum(int(x) for x in str(abs(el)))\n\
    \        if sum_el in nums_dict:\n            nums_dict[sum_el].append((i, el))\n\
    \        else:\n            nums_dict[sum_el] = [(i, el)]\n    for key in sorted(nums_dict.keys()):\n\
    \        for element in sorted(nums_dict[key]):\n            result.append(element[1])\n\
    \    return result\n", "    res = []\n    for i in range(len(nums)):\n       \
    \ res.append([sum([int(d) for d in str(nums[i])]), i, nums[i]])\n    res.sort()\n\
    \    return [t[2] for t in res]\n", "    def sum_digits(n):\n        s = 0\n \
    \       while n:\n            s += n % 10\n            n //= 10\n        return\
    \ s\n\n    return sorted(nums, key=lambda n: (sum_digits(n), nums.index(n)))\n\
    \n", "    digits = [sum(list(map(int, str(num)))) for num in nums]\n    return\
    \ [x for _, x in sorted(zip(digits, nums))]\n\n", "    sorted_by_sum = sorted(nums,\
    \ key=lambda num: sum(map(int, str(abs(num)))))\n    return sorted_by_sum\n\n",
  "    return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), nums.index(x)))\n",
  "    my_dict = {}\n    result = []\n    for i in range(len(nums)):\n        num\
    \ = nums[i]\n        key = sum([int(d) for d in str(abs(num))])\n        if key\
    \ in my_dict:\n            my_dict[key].append(num)\n        else:\n         \
    \   my_dict[key] = [num]\n    for key in sorted(my_dict.keys()):\n        for\
    \ val in my_dict[key]:\n            result.append(val)\n    return result\n",
  "    # A single digit number doesn't need to be sorted\n    if len(nums) <= 1:\n\
    \        return nums\n\n    # first, calculate the sum of all digits for each\
    \ number\n    sums = []\n    for i in range(len(nums)):\n        # calculate the\
    \ sum of digits\n        this_sum = sum([int(x) for x in str(nums[i])])\n    \
    \    sums.append((this_sum, i))\n\n    # sort sums in ascending order\n    sums.sort()\n\
    \n    # rearrange original list\n    result = []\n    for item in sums:\n    \
    \    result.append(nums[item[1]])\n\n    return result\n\n", "    hash_table =\
    \ {}\n    for i, num in enumerate(nums):\n        if num < 0:\n            num\
    \ = -num\n        string_num = str(num)\n        num_sum = 0\n        for char\
    \ in string_num:\n            num_sum += int(char)\n        if num_sum not in\
    \ hash_table:\n            hash_table[num_sum] = [i]\n        else:\n        \
    \    hash_table[num_sum].append(i)\n    result = [None] * len(nums)\n    for i,\
    \ num_sum in enumerate(sorted(hash_table.keys())):\n        for index in hash_table[num_sum]:\n\
    \            result[i] = nums[index]\n    return result\n", "    if not nums:\n\
    \        return []\n    list_sum = [[sum([int(x) for x in str(num)]), num] for\
    \ num in nums]\n    list_sum.sort()\n    return [item[1] for item in list_sum]\n\
    \n", "    if not nums:\n        return []\n    else:\n        return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\n", "    return\
    \ sorted(nums, key=sum_of_digits)\n", "    sum_nums = {}\n    res = []\n    for\
    \ i, num in enumerate(nums):\n        sum_nums[num] = sum([int(n) for n in str(abs(num))])\n\
    \    for num in sorted(sum_nums, key=sum_nums.get):\n        res.append(num)\n\
    \    return res\n\n", "    if not nums:\n        return []\n    return sorted(nums,\
    \ key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))\n", "    scores\
    \ = {}\n    for i, num in enumerate(nums):\n        score = sum(int(digit) for\
    \ digit in str(abs(num)))\n        scores.setdefault(score, []).append(i)\n  \
    \  return [nums[i] for score in sorted(scores) for i in scores[score]]\n\n", " \
    \   def digit_sum(num):\n        return sum(map(int, str(num)))\n\n    return\
    \ sorted(nums, key=lambda num: (digit_sum(num), nums.index(num)))\n\nimport pytest\n",
  "    points = []\n    for i in range(len(nums)):\n        points.append(sum(list(map(int,\
    \ str(nums[i])))))\n    points, nums = zip(*sorted(zip(points, nums)))\n    return\
    \ list(nums)\n\n", "    return sorted(nums, key=lambda x: (sum(int(digit) for\
    \ digit in str(abs(x))), x))\n", '    return [num for num in sorted(nums, key=lambda
    x: (sum([int(i) for i in str(abs(x))]), x))]', "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\n", "    return sorted(nums,\
    \ key=lambda x: str(x)[0])\n\nprint(order_by_points([1, 11, -1, -11, -12]))",
  "    if not nums:\n        return []\n    sums = []\n    for num in nums:\n    \
    \    digit_sum = sum(map(int, str(abs(num))))\n        sums.append((digit_sum,\
    \ num))\n    return [x[1] for x in sorted(sums)]\n", "    if len(nums) == 0:\n\
    \        return []\n    nums = [(abs(i), i) for i in nums]\n    nums = sorted(nums,\
    \ key=lambda x: (sum(map(int, str(x[0]))), x[1]))\n    return [i[1] for i in nums]\n",
  "    # Validate input\n    if not nums:\n        return []\n\n    nums_points =\
    \ [\n        (num, sum(map(int, str(abs(num)))))\n        for num in nums\n  \
    \  ]\n    ordered_nums = [\n        num_point[0]\n        for num_point in sorted(nums_points,\
    \ key=lambda x: (x[1], x[0]))\n    ]\n    return ordered_nums\n\n", "    if not\
    \ nums:\n        return []\n    return sorted(nums, key=lambda x: (sum(int(y)\
    \ for y in str(abs(x))), x))\n\n\n", "    # key = lambda x: sum(map(int, list(str(x))))\
    \ # less efficient (lambda)\n    def sum_digits(n):\n        r = 0\n        while\
    \ n:\n            r, n = r + n % 10, n // 10\n        return r\n    nums.sort(key=sum_digits)\n\
    \    return nums\n", "    def get_total_points(num):\n        if num >= 0:\n \
    \           return sum([int(i) for i in str(num)])\n        else:\n          \
    \  return -sum([int(i) for i in str(abs(num))])\n\n    return sorted(nums, key=lambda\
    \ n: (get_total_points(n), nums.index(n)))\n", "    f = lambda x: sum(int(i) for\
    \ i in str(x))\n    return sorted(nums, key=f)\n", "    if len(nums) == 0:\n \
    \       return []\n    if len(nums) == 1:\n        return nums\n    def sum_of_digits(n):\n\
    \        if n == 0:\n            return 0\n        return n % 10 + sum_of_digits(n\
    \ // 10)\n    nums_copy = nums.copy()\n    nums_copy.sort(key=sum_of_digits)\n\
    \    return nums_copy\n", "    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(abs(x)))), nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int,\
    \ list(str(abs(x))))), nums.index(x)))\n", "    #TODO: Your code here\n    pass\n",
  "    digits = {}\n    for i, num in enumerate(nums):\n        sum_num = sum(map(int,\
    \ str(abs(num))))\n        if sum_num not in digits:\n            digits[sum_num]\
    \ = [i]\n        else:\n            digits[sum_num].append(i)\n    digits = sorted(digits.items())\n\
    \    res = []\n    for key, value in digits:\n        for idx in value:\n    \
    \        res.append(nums[idx])\n    return res\n\n", "    sum_nums = []\n    #\
    \ Sum all numbers by digits\n    for num in nums:\n        sum_num = sum(int(digit)\
    \ for digit in str(num))\n        sum_nums.append(sum_num)\n    # Create an array\
    \ and sort it\n    order_by_points = list(zip(sum_nums, nums))\n    order_by_points.sort()\n\
    \    # Return only sorted numbers\n    return [order_by_points[i][1] for i in\
    \ range(len(order_by_points))]\n\nprint(order_by_points([1, 11, -1, -11, -12]))\n\
    print(order_by_points([]))", "    for i in range(len(nums)):\n        for j in\
    \ range(len(nums) - 1):\n            if nums[j] + nums[j+1] < nums[j+1] + nums[j]:\n\
    \                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n",
  "    # initialize dict for storing points for each nums\n    points = {}\n    #\
    \ define function for summing nums\n    def get_points(num):\n        sum = 0\n\
    \        for digit in str(num):\n            sum += int(digit)\n        return\
    \ sum\n    # sort and return the list according to dict\n    return sorted(nums,\
    \ key=lambda num: (get_points(num), nums.index(num)))\n", "    # return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), x))\n    return sorted(nums, key=lambda\
    \ x: sum(map(int, str(abs(x)))))", "    # new_lst = []\n    # for x in nums:\n\
    \    #     new_lst.append((abs(x), x))\n    # new_lst.sort()\n    # return [x[1]\
    \ for x in new_lst]\n    return sorted(nums, key=lambda x: (abs(x), x))\n\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, list(str(abs(x))))), nums.index(x)))\n",
  "    sort_list = []\n    for i in nums:\n        sort_list.append((i, sum(map(int,\
    \ str(abs(i))))))\n    sort_list.sort(key=lambda x: (x[1], x[0]))\n    return\
    \ [x[0] for x in sort_list]\n\n", "    def get_sum_digits(i):\n        sum_digits\
    \ = 0\n        for digit in str(i):\n            sum_digits += int(digit)\n  \
    \      return sum_digits\n\n    return sorted(nums, key=lambda x: (get_sum_digits(x),\
    \ nums.index(x)))\n\n", "    sums = []\n    for n in nums:\n        s = 0\n  \
    \      for c in str(n):\n            s += int(c)\n        sums.append(s)\n   \
    \ return [nums[i] for i in sorted(range(len(nums)), key=lambda x: (sums[x], x))]",
  "    if not nums:\n        return []\n    from collections import defaultdict\n\
    \    sums = defaultdict(list)\n    for i, n in enumerate(nums):\n        sums[sum(map(int,\
    \ str(abs(n))))].append(i)\n    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(abs(x)))), sums[sum(map(int, str(abs(x))))].pop(0)))\n\n", "    return sorted(nums,\
    \ key=lambda x: sum(int(c) for c in str(abs(x))))\n", "    pass\n\n", "    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    sorted_nums = nums[:]\n    sorted_nums.sort(key=lambda x: sum([int(d) for d\
    \ in str(abs(x))]))\n    return sorted_nums\n\nprint(order_by_points([1, 11, -1,\
    \ -11, -12]))\nprint(order_by_points([]))", "    s = {}\n    for i, v in enumerate(nums):\n\
    \        if abs(v) % 10 > 0:\n            s[i] = abs(v) % 10 + abs(v) // 10\n\
    \        else:\n            s[i] = abs(v) // 10\n    s_list = []\n    for v in\
    \ s.values():\n        s_list.append(v)\n    s_list.sort()\n    index_list = []\n\
    \    for v in s_list:\n        for k, vv in s.items():\n            if v == vv:\n\
    \                index_list.append(k)\n    l = []\n    for index in index_list:\n\
    \        l.append(nums[index])\n    return l\n\n", "    if not nums:\n       \
    \ return []\n    return sorted(nums, key= lambda x: (sum(int(c) for c in str(abs(x))),\
    \ x))\n\nprint(order_by_points([1, 11, -1, -11, -12]))", "    def digits_sum(number):\n\
    \        return sum(int(digit) for digit in str(number))\n\n    return sorted(nums,\
    \ key=lambda num: (digits_sum(num), nums.index(num)))\n", "    pass\n", "    def\
    \ get_sum_of_digits(x: int) -> int:\n        digit_sum = 0\n        if x < 0:\n\
    \            x = -x\n        while x > 0:\n            digit_sum += x % 10\n \
    \           x //= 10\n        return digit_sum\n\n    return sorted(nums, key=lambda\
    \ x: (get_sum_of_digits(x), nums.index(x)))\n\n", "    # replace this for solution\n\
    \    def add_digits(n: int) -> int:\n        \"\"\"Returns the sum of all digits\
    \ of n\"\"\"\n        s = 0\n        while n:\n            s += n % 10\n     \
    \       n //= 10\n        return s\n\n    return sorted(nums, key=lambda x: (add_digits(x),\
    \ x))\n\n", "    def f(x):\n        return sum(map(int, list(str(x))))\n    return\
    \ sorted(nums, key=f)\n", "    return sorted(nums, key=lambda num: (sum(map(int,\
    \ str(abs(num)))), nums.index(num)))\n\n", "    point_dict = {}\n    for idx,\
    \ num in enumerate(nums):\n        num_str = str(num)\n        if num_str[0] ==\
    \ '-':\n            sum_of_points = 0\n            for char in num_str[1:]:\n\
    \                sum_of_points += int(char)\n            sum_of_points *= -1\n\
    \        else:\n            sum_of_points = 0\n            for char in num_str:\n\
    \                sum_of_points += int(char)\n        if sum_of_points in point_dict:\n\
    \            point_dict[sum_of_points].append(idx)\n        else:\n          \
    \  point_dict[sum_of_points] = [idx]\n    ordered_index = []\n    for num in sorted(point_dict.keys()):\n\
    \        ordered_index += point_dict[num]\n    return [nums[x] for x in ordered_index]",
  "    def sum_of_digits(num: int) -> int:\n        return sum(int(digit) for digit\
    \ in str(num))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n\
    \n", "    new_nums = []\n    for number in nums:\n        new_nums.append((number,\
    \ sum(int(char) for char in str(number))))\n    new_nums.sort(key=lambda x: (x[1],\
    \ x[0]))\n    return [item[0] for item in new_nums]\n\n", "    def sum_digits(item):\n\
    \        s = 0\n        for ch in str(item):\n            s += int(ch)\n     \
    \   return s\n\n    return sorted(nums, key=lambda x: (sum_digits(x), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda k: (sum(map(int, str(abs(k)))), nums.index(k)))\n\
    \n", "    lst = []\n    for num in nums:\n        num = abs(num)\n        s =\
    \ 0\n        while num > 0:\n            s += num % 10\n            num //= 10\n\
    \        lst.append((s, num))\n    sort = sorted(lst)\n    return [nums[lst.index(i)]\
    \ for i in sort]\n", "    def sum_digits(x):\n        x = abs(x)\n        s =\
    \ 0\n        while x:\n            s += x % 10\n            x //= 10\n       \
    \ return s\n\n    sums = [(sum_digits(x), x) for x in nums]\n    sums.sort()\n\
    \    return [x[1] for x in sums]\n", "    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(abs(x)))), nums.index(x)))\n", "    digits_sum = sum([list(map(int, str(i)))\
    \ for i in nums], [])\n    return sorted(nums, key=lambda i: (sum(list(map(int,\
    \ str(i)))), nums.index(i)))\n", "    res = [nums.index(x) for x in sorted(nums,\
    \ key=lambda x: sum(map(int, str(abs(x)))))]\n    return [nums[i] for i in res]\n",
  "    ret_nums = sorted(nums, key=lambda x: sum(map(int, str(abs(x)))), reverse=True)\n\
    \    return ret_nums\n", "    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(abs(x)))), nums.index(x)))\n\n", "    if len(nums) == 0:\n        return\
    \ []\n    # since we want to sort based on the index of the original array,\n\
    \    # we need to iterate through the original array and sort in place\n    #\
    \ by creating a helper function that returns the sum of the digits\n    def digit_sum(x):\n\
    \        return sum(int(digit) for digit in str(x))\n    for i in range(len(nums)):\n\
    \        # j is the current index, nums[j] is the current element\n        j =\
    \ i\n        while j > 0 and digit_sum(nums[j-1]) > digit_sum(nums[j]):\n    \
    \        nums[j], nums[j-1] = nums[j-1], nums[j]\n            j -= 1\n    return\
    \ nums\n", "    # \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043F\u0438\u0441\
    \u044C \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439 \u0432 \u0441\u043B\u043E\
    \u0432\u0430\u0440\u044C \u0438 \u0432\u044B\u0431\u043E\u0440\u043A\u0443 \u0437\
    \u043D\u0430\u0447\u0435\u043D\u0438\u0439 \u043F\u043E \u043A\u043B\u044E\u0447\
    \u0443 \u0438\u0437 \u0441\u043B\u043E\u0432\u0430\u0440\u044F\n    # \u043C\u043E\
    \u0436\u043D\u043E \u043D\u0430\u043F\u0438\u0441\u0430\u0442\u044C \u0441\u043E\
    \u0440\u0442\u0438\u0440\u043E\u0432\u043A\u0443 \u0431\u0435\u0437 \u0446\u0438\
    \u043A\u043B\u0430 for\n    # \u043E\u0434\u043D\u0430\u043A\u043E \u043A\u043E\
    \u0434 \u0431\u0443\u0434\u0435\u0442 \u043C\u0435\u043D\u0435\u0435 \u043F\u043E\
    \u043D\u044F\u0442\u043D\u044B\u043C \u0438 \u0432\u044B\u0433\u043B\u044F\u0434\
    \u0435\u0442\u044C \u0434\u043E\u0441\u0442\u0430\u0442\u043E\u0447\u043D\u043E\
    \ \u043D\u0435\u043A\u0440\u0430\u0441\u0438\u0432\u043E\n    res = []\n    for\
    \ num in nums:\n        sum_of_digits = sum(int(x) for x in str(num))\n      \
    \  res.append((sum_of_digits, num))\n    res.sort()\n    return [n for _, n in\
    \ res]\n\n", "    items = {i: sum(map(int, str(abs(i)))) for i in nums}\n    return\
    \ sorted(nums, key=lambda x: (items[x], nums.index(x)))\n", "    counts = {}\n\
    \    for i, n in enumerate(nums):\n        n_abs = abs(n)\n        total = sum(int(d)\
    \ for d in str(n_abs))\n        counts[i] = (total, n)\n    return [n for _, n\
    \ in sorted(counts.values())]\n\n", "    return sorted(nums, key=sum_of_digits)\n",
  "    return sorted(nums, key=lambda x: x % 10 + x // 10)\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\n", "    nums_dict\
    \ = defaultdict(list)\n    for idx, num in enumerate(nums):\n        sum_of_digits\
    \ = sum(map(int, str(abs(num))))\n        nums_dict[sum_of_digits].append((idx,\
    \ num))\n    sorted_nums = []\n    for nums in sorted(nums_dict.values()):\n \
    \       sorted_nums.extend(num for _, num in sorted(nums))\n    return sorted_nums\n\
    \n", "    nums.sort(key=lambda x: (sum(map(int, str(abs(x)))), x))\n    return\
    \ nums\n", "    points = []\n    for i in range(len(nums)):\n        temp = nums[i]\n\
    \        if temp < 0:\n            temp = -temp\n        s = 0\n        while\
    \ temp > 0:\n            s += temp % 10\n            temp //= 10\n        points.append(s)\n\
    \    new_list = sorted(nums, key=lambda x: (points[nums.index(x)], nums.index(x)))\n\
    \    return new_list\n", "    # we will use the sum of digits as a key in our\
    \ dictionary\n    # with the value being a list of the numbers with that key\n\
    \    digits_dict = {}\n    for num in nums:\n        digits_sum = sum(int(digit)\
    \ for digit in str(num))\n        if digits_sum not in digits_dict:\n        \
    \    digits_dict[digits_sum] = [num]\n        else:\n            digits_dict[digits_sum].append(num)\n\
    \    # sort the numbers by their key\n    sorted_nums = []\n    for key in sorted(digits_dict.keys()):\n\
    \        for value in digits_dict[key]:\n            sorted_nums.append(value)\n\
    \    return sorted_nums\n\n", "    return sorted(nums, key=lambda x: sum(map(int,\
    \ str(abs(x)))), reverse=True)\n\n", "    # we sort the list in lexicographical\
    \ order using\n    # the sum of digits of an item as the key\n    nums.sort(key=lambda\
    \ x: [sum(int(i) for i in str(abs(x))), x])\n    return nums", "    nums.sort(key=sum_of_digits_of_number)\n\
    \    return nums\n", "    return sorted(nums, key=lambda num: sum(map(int, str(num))),\
    \ reverse=True)\n    # Or\n    # return sorted(nums, key=lambda num: sum(map(int,\
    \ str(num))))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ x))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda num: sum(map(int,\
    \ str(num))))\n", "    nums_to_points = {num: digit_sum(num) for num in nums}\n\
    \    return sorted(nums, key=lambda x: (nums_to_points[x], nums.index(x)))\n",
  "    pass\n", "    def sum_digits(n: int) -> int:\n        sum_of_digits = 0\n \
    \       if n < 0:\n            n = abs(n)\n        while n > 0:\n            sum_of_digits\
    \ += n % 10\n            n = n // 10\n        return sum_of_digits\n\n    return\
    \ sorted(nums, key=lambda n: (sum_digits(n), n))\n", "    def get_sum_of_digits(number:\
    \ int) -> int:\n        \"\"\"Returns the sum of number's digits.\n\n        Examples:\n\
    \        >>> get_sum_of_digits(12)\n        3\n        >>> get_sum_of_digits(-123)\n\
    \        6\n        \"\"\"\n        abs_value = abs(number)\n        sum_of_digits\
    \ = 0\n        while abs_value > 0:\n            sum_of_digits += abs_value %\
    \ 10\n            abs_value //= 10\n        return sum_of_digits\n\n    # Use\
    \ sorted() with key parameter\n    # for custom sorting by sum of digits.\n  \
    \  return sorted(nums, key=get_sum_of_digits)\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(int(digit) for digit in str(abs(x))), x))\n", "    return sorted(nums,\
    \ key=lambda x: sum(int(i) for i in str(abs(x))))\n\n", "    return sorted(nums,\
    \ key=lambda x: (sum(int(c) for c in str(abs(x))), x))\n\n", "    points = [sum(int(i)\
    \ for i in str(n)) for n in nums]\n    sorted_list = sorted(list(zip(points, nums)))\n\
    \    return [num for _, num in sorted_list]\n", "    sorted_nums = sorted(nums,\
    \ key=lambda n: (sum(map(int, str(abs(n)))), n))\n    return sorted_nums\n\n",
  "    return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), nums.index(x)))\n\
    \n", "    def get_sum_of_digits(num: int) -> int:\n        sum_of_digits = 0\n\
    \        num = abs(num)\n        while num > 0:\n            sum_of_digits +=\
    \ num % 10\n            num //= 10\n        return sum_of_digits\n\n    if not\
    \ nums:\n        return []\n\n    return sorted(nums, key=lambda num: (get_sum_of_digits(num),\
    \ nums.index(num)))\n\n", "    if not nums:\n        return []\n    else:\n  \
    \      return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n\n", "    # 1. Group by the sum of the digits\n    # 2. Order each group using\
    \ the indices\n    # 3. Flatten the list of lists\n    # return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(abs(x)))), nums.index(x)))\n    return list(map(lambda\
    \ x: x[1], sorted(map(lambda x: (sum(map(int, str(abs(x[1])))), x[1], x[0]), enumerate(nums)),\
    \ key=lambda x: (x[0], x[2]))))\n\n", "    return sorted(nums, key=sum_of_digits)\n",
  "    # Store the sum of the digits and the index of each number in the list\n  \
    \  sums = [(sum(map(int, str(n))), i) for i, n in enumerate(nums)]\n    # Sort\
    \ the sums in ascending order\n    sums.sort()\n    # Create a new list with the\
    \ numbers in sorted order\n    nums = [nums[i] for _, i in sums]\n    return nums\n",
  "    # Your code\n    # Get the sum of all the digits for each element in the list\n\
    \    # and sort the list based on the result\n    # Return the sorted list\n \
    \   pass\n\n", "    bucket = [[] for i in range(20)]\n\n    for i, x in enumerate(nums):\n\
    \        bucket[get_sum_digits(x)].append((x, i))\n\n    result = []\n    for\
    \ i in range(20):\n        result.extend(sorted(bucket[i], key=lambda x: x[1]))\n\
    \n    return [x[0] for x in result]\n", "    return sorted(nums, key=sum_of_digits)\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    if len(nums) == 0:\n        return []\n    sums = []\n    for i in range(len(nums)):\n\
    \        sums.append(sum(int(char) for char in str(nums[i])))\n    mapping = zip(sums,\
    \ nums)\n    mapping = sorted(mapping)\n    return [i[1] for i in mapping]", " \
    \   if not nums:\n        return []\n    nums = sorted(nums, key=lambda x: (sum(map(int,\
    \ str(abs(x)))), nums.index(x)))\n    return nums\n", "    return sorted(nums,\
    \ key=lambda x: (sum(int(c) for c in str(abs(x))), nums.index(x)))\n\nprint(order_by_points([1,\
    \ 11, -1, -11, -12]))", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(int(num) for\
    \ num in str(abs(x))), nums.index(x)))\n\n", "    if not nums:\n        return\
    \ []\n    d = {}\n    for i, num in enumerate(nums):\n        s = sum(int(d) for\
    \ d in str(abs(num)))\n        if s not in d:\n            d[s] = []\n       \
    \ d[s].append(num)\n    keys = list(d.keys())\n    keys.sort()\n    sorted_nums\
    \ = []\n    for key in keys:\n        sorted_nums.extend(d[key])\n    return sorted_nums\n",
  "    sum_to_idx = {sum(map(int, str(num))): num for num in nums}\n    return [sum_to_idx[val]\
    \ for val in sorted(sum_to_idx.keys())]\n\n", "    nums_sorted = sorted(nums,\
    \ key=lambda x: sum(int(digit) for digit in str(x)))\n    return nums_sorted\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    if len(nums) == 0:\n        return []\n    else:\n        nums = map(lambda\
    \ x: (x, sum(map(int, str(abs(x))))), nums)\n        nums = sorted(nums, key=lambda\
    \ x: (x[1], x[0]))\n        return [x[0] for x in nums]\n", "    pairs = [(i,\
    \ sum([int(digit) for digit in str(num)])) for i, num in enumerate(nums)]\n  \
    \  pairs.sort(key=lambda p: (p[1], p[0]))\n    return [nums[p[0]] for p in pairs]\n\
    \n", "    # a dictionary to store the sum of the digits\n    # as the key and\
    \ a list of integers as the value\n    store_dict = dict()\n    for num in nums:\n\
    \        digit_sum = 0\n        for digit in str(num):\n            digit_sum\
    \ += int(digit)\n        if digit_sum in store_dict:\n            store_dict[digit_sum].append(num)\n\
    \        else:\n            store_dict[digit_sum] = [num]\n    # sort the keys\
    \ in ascending order\n    sorted_keys = sorted(store_dict.keys())\n    res = []\n\
    \    for key in sorted_keys:\n        res += store_dict[key]\n    return res\n",
  "    # sorting the list based on the sum of the digits of each number\n    sums\
    \ = [sum(int(digit) for digit in str(num)) for num in nums]\n    sorted_sums =\
    \ sorted(sums)\n    sorted_nums = []\n    for num in sorted_sums:\n        # if\
    \ the sum of the digits of a number appears multiple times, we will append the\
    \ number according to its index in the original list\n        sorted_nums.append(nums[sums.index(num)])\n\
    \        # remove all other occurrences of the same sum of digits\n        while\
    \ num in sums:\n            sums.remove(num)\n    return sorted_nums\n", "   \
    \ return sorted(nums, key=lambda num: (sum(int(digit) for digit in str(num)),\
    \ nums.index(num)))\n\n", "    points = [sum(map(int, str(num))) for num in nums]\n\
    \    return [x for _, x in sorted(zip(points, nums))]", "    def sum_of_digits(num:\
    \ int) -> int:\n        if num == 0:\n            return 0\n        return (num\
    \ % 10) + sum_of_digits(num // 10)\n\n    if len(nums) == 0:\n        return []\n\
    \n    sums_digits = dict()\n    for i, num in enumerate(nums):\n        sums_digits[i]\
    \ = sum_of_digits(num)\n\n    return [nums[index] for index in sorted(sums_digits,\
    \ key=sums_digits.get)]\n\n", "    nums_list = []\n    for num in nums:\n    \
    \    nums_list.append((sum(int(digit) for digit in str(abs(num))), nums.index(num),\
    \ num))\n    nums_list.sort()\n    return [nums[3] for nums in nums_list]\n\n",
  "    if not nums:\n        return []\n    sum_digits = lambda n: sum(map(int, str(n)))\n\
    \    return sorted(nums, key=lambda x: (sum_digits(x), nums.index(x)))", "   \
    \ def sum_digits(item):\n        return sum(map(int, str(item)))\n\n    return\
    \ sorted(nums, key=lambda x: (sum_digits(x), nums.index(x)))\n\n", "    pass\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    if len(nums) == 0:\n        return []\n    digits_to_sum = dict()\n\
    \    for i, num in enumerate(nums):\n        digits_to_sum[i] = abs(num)\n   \
    \ keys = [x for x in digits_to_sum.keys()]\n    for i in range(0, len(keys)):\n\
    \        current_key = keys[i]\n        sum_of_digits = 0\n        while digits_to_sum[current_key]\
    \ > 0:\n            digit = digits_to_sum[current_key] % 10\n            sum_of_digits\
    \ += digit\n            digits_to_sum[current_key] //= 10\n        digits_to_sum[current_key]\
    \ = sum_of_digits\n    digits_to_sum = sorted(digits_to_sum.items(), key=lambda\
    \ x: x[1])\n    keys = [x[0] for x in digits_to_sum]\n    return [nums[x] for\
    \ x in keys]\n", "    if not nums:\n        return []\n    bucket = defaultdict(list)\n\
    \    for idx, val in enumerate(nums):\n        bucket[sum(int(i) for i in str(abs(val)))].append((idx,\
    \ val))\n    return [x[1] for y in sorted(bucket.items()) for x in y[1]]\n\n",
  "    def get_sum_digits(n: int) -> int:\n        return sum(map(int, str(n)))\n\n\
    \    return sorted(nums, key=lambda i: (get_sum_digits(i), i))\n\n", "    # map\
    \ each integer to its score and original index\n    # [(1, 1, 0), (11, 2, 1),\
    \ (-1, 1, 2), (-11, 2, 3), (-12, 3, 4)]\n    scored_nums = list(map(lambda x:\
    \ (x, sum(map(int, str(abs(x)))), nums.index(x)), nums))\n    # sort by the score\
    \ in ascending order and then by index in ascending order\n    # [(1, 1, 0), (-1,\
    \ 1, 2), (-11, 2, 3), (11, 2, 1), (-12, 3, 4)]\n    scored_nums.sort(key=lambda\
    \ x: (x[1], x[2]))\n    # return only the original numbers\n    return list(map(lambda\
    \ x: x[0], scored_nums))\n", "    return sorted(nums, key=lambda n: (sum(map(int,\
    \ str(abs(n)))), n))\n", "    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(abs(x)))), x))\n", "    results = []\n    for num in nums:\n        digit_sum\
    \ = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n \
    \       results.append((digit_sum, num))\n    return [x[1] for x in sorted(results)]\n",
  "    def points(x):\n        return sum(map(int, str(x)))\n    return sorted(nums,\
    \ key=lambda x: (points(x), nums.index(x)))", "    buckets = {}\n    ordered_nums\
    \ = []\n    for i, num in enumerate(nums):\n        buckets.setdefault(num, []).append(i)\n\
    \    nums.sort(key=lambda n: sum(int(x) for x in str(abs(n))))\n    for i, num\
    \ in enumerate(nums):\n        ordered_nums.append(nums[buckets[num].pop(0)])\n\
    \    return ordered_nums\n", "    return []\n\n", "    # Original List\n    print(nums)\n\
    \n    # Sort by sum of digits\n    a = []\n    for num in nums:\n        a.append(sum(map(int,\
    \ str(abs(num)))))\n    nums = [x for _, x in sorted(zip(a, nums))]\n\n    # Print\
    \ sorted List\n    print(nums)\n", "    if not nums:\n        return []\n    points\
    \ = []\n    for i, j in enumerate(nums):\n        points.append((i, sum([int(x)\
    \ for x in str(j)])))\n    points.sort(key=lambda x: (x[1], x[0]))\n    return\
    \ [nums[x[0]] for x in points]\n", "    # list.sort(key = ) - we can use it to\
    \ sort by certain attribute\n    nums.sort(key = lambda num: sum([int(i) for i\
    \ in str(num)]))\n    return nums\n", "    # sorting_dict = {}\n    # for ind,\
    \ val in enumerate(nums):\n    #     sort_val = sum(map(int, str(val)))\n    #\
    \     if sort_val in sorting_dict:\n    #         sorting_dict[sort_val].append(ind)\n\
    \    #     else:\n    #         sorting_dict[sort_val] = [ind]\n    #\n    # result\
    \ = []\n    # for sort_val in sorted(sorting_dict.keys()):\n    #     indices\
    \ = sorting_dict[sort_val]\n    #     result.extend([nums[ind] for ind in indices])\n\
    \    # return result\n\n    return sorted(nums, key=lambda val: (sum(map(int,\
    \ str(val))), val))\n", "    # return sorted(nums, key=lambda x: sum(map(int,\
    \ list(str(abs(x))))))\n    # return sorted(nums, key=lambda x: sum(int(i) for\
    \ i in str(abs(x))))\n    return sorted(nums, key=lambda x: sum(map(int, str(abs(x)))))\n\
    \n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
