name: HumanEval_145_order_by_points
language: py
prompt: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
  \    \"\"\"\n    Write a function which sorts the given list of integers\n    in\
  \ ascending order according to the sum of their digits.\n    Note: if there are\
  \ several items with similar sum of their digits,\n    order them based on their\
  \ index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1,\
  \ -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n    []\n \
  \   \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
  \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
  \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
  \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
  \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert\
  \ candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
  \    check(order_by_points)\n\ntest_check()\n"
completions: ["    return [num for (score, num) in sorted(\n        [(sum(int(digit)\
    \ for digit in str(abs(num))), num) for num in nums],\n        key=lambda x: (x[0],\
    \ x[1]))]\n\n", "    return sorted(nums, key=lambda num: (sum(int(digit) for digit\
    \ in str(num)), nums.index(num)))\n", "    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(abs(x)))), nums.index(x)))\n\n", "    def sum_digits(num: int) -> int:\n\
    \        total = 0\n        while num:\n            total += num % 10\n      \
    \      num //= 10\n        return total\n\n    if not nums:\n        return nums\n\
    \n    sums = [(sum_digits(num), i, num) for i, num in enumerate(nums)]\n    return\
    \ [num for _, _, num in sorted(sums)]\n", "    if not nums:\n        return []\n\
    \    nums_list = [[abs(num), sum(int(i) for i in str(abs(num))), num] for num\
    \ in nums]\n    nums_list.sort()\n    return [item[2] for item in nums_list]\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n\nprint(order_by_points([1, 11, -1, -11, -12]))\n\n\n\"\"\"\nUsing a more functional\
    \ way:\n\"\"\"\n\nfrom functools import reduce\nfrom operator import add\n", " \
    \   def sum_of_digits(num: int) -> int:\n        \"\"\"\n        Return sum of\
    \ digits in integer.\n        \"\"\"\n        return sum(int(digit) for digit\
    \ in str(num))\n\n    return sorted(nums, key=lambda i: (sum_of_digits(i), i))\n\
    \n", "    nums_sort = sorted(nums, key=lambda x: (sum([int(i) for i in str(abs(x))]),\
    \ nums.index(x)))\n    return nums_sort\n", "    nums.sort(key=lambda x: (sum(map(int,\
    \ str(abs(x)))), x))\n    return nums", "    # iterate through nums and return\
    \ each index and\n    # the sum of its digits in a dictionary\n    sums = {}\n\
    \    for idx, n in enumerate(nums):\n        summed = sum(int(char) for char in\
    \ str(n))\n        sums[idx] = summed\n\n    # sort the dictionary by the sum\
    \ of digits\n    sorted_idx = sorted(sums, key=sums.get)\n\n    # return a list\
    \ of the integers from nums in order by their index in\n    # the sorted list\
    \ of indices\n    return [nums[i] for i in sorted_idx]\n\n", "    return sorted(nums,\
    \ key=lambda num: (sum(map(int, str(abs(num)))), nums.index(num)))\n\n", "   \
    \ def sum_digits(num: int) -> int:\n        return sum(map(int, str(num)))\n\n\
    \    pairs = [(i, sum_digits(n)) for i, n in enumerate(nums)]\n    return [nums[i]\
    \ for i, _ in sorted(pairs, key=lambda x: (x[1], x[0]))]\n\n", "    if len(nums)\
    \ == 0:\n        return []\n    index_of_nums = [(nums[i], i) for i in range(len(nums))]\n\
    \    index_of_nums.sort(key=lambda n: n[0])\n    return [num for num, _ in index_of_nums]\n",
  "    # create list of tuples like this [(1, 1), (2, 2), (11, 2), (100, 1)]\n   \
    \ # sort list by second item of tuple (sum of digits)\n    sorted_list = sorted(list(zip(nums,\
    \ [sum(map(int, str(i))) for i in nums])), key=lambda x: x[1])\n    # return only\
    \ first item from each tuple from sorted list\n    return [i[0] for i in sorted_list]\n\
    \n", "    nums.sort(key=lambda num: (sum(int(digit) for digit in str(num)), nums.index(num)))\n\
    \    return nums\n", "    return sorted(nums, key=lambda n: n if n >= 0 else -n,\n\
    \                  key=lambda n: sum(map(int, str(n))),\n                  key=lambda\
    \ n: nums.index(n))\n", "    return sorted(nums, key=lambda x: int(sum(map(int,\
    \ str(abs(x))))), reverse=True)\n", "    return list(sorted(nums, key=sum_of_digits))\n",
  "    nums.sort(key=lambda num: (sum(map(int, str(num))), nums.index(num)))\n   \
    \ return nums\n", "    return sorted(nums, key=lambda x: (sum(int(i) for i in\
    \ str(abs(x))), nums.index(x)))\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
