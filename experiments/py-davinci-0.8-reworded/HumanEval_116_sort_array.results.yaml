language: py
name: HumanEval_116_sort_array
results:
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # sorted based on decimal value\n    return sorted(arr)\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd3j0qhl0.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpd3j0qhl0.py\", line 31,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpd3j0qhl0.py\", line 21,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    ones_cnt = []\n    for num in arr:\n        if num == 0:\n            ones_cnt.append(0)\n\
    \        else:\n            ones_cnt.append(bin(num).count('1'))\n    # print(ones_cnt)\n\
    \    lst = sorted(zip(ones_cnt, arr), key=lambda x: (x[0], x[1]))\n    # print(lst)\n\
    \    return [el[1] for el in lst]\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # sort by number of 1s in binary rep\n    # if equal then by decimal value\n\
    \    def binary_ones(num):\n        if num == 0:\n            return 0\n     \
    \   return 1 + binary_ones(num & (num - 1))\n\n    return sorted(arr, key=lambda\
    \ num: (binary_ones(num), num))\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1m9rf51e.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp1m9rf51e.py\", line 38,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp1m9rf51e.py\", line 29,\
    \ in check\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    \  File \"/tmp/tmp1m9rf51e.py\", line 24, in sort_array\n    return sorted(arr,\
    \ key=lambda num: (binary_ones(num), num))\n  File \"/tmp/tmp1m9rf51e.py\", line\
    \ 24, in <lambda>\n    return sorted(arr, key=lambda num: (binary_ones(num), num))\n\
    \  File \"/tmp/tmp1m9rf51e.py\", line 22, in binary_ones\n    return 1 + binary_ones(num\
    \ & (num - 1))\n  File \"/tmp/tmp1m9rf51e.py\", line 22, in binary_ones\n    return\
    \ 1 + binary_ones(num & (num - 1))\n  File \"/tmp/tmp1m9rf51e.py\", line 22, in\
    \ binary_ones\n    return 1 + binary_ones(num & (num - 1))\n  [Previous line repeated\
    \ 989 more times]\n  File \"/tmp/tmp1m9rf51e.py\", line 20, in binary_ones\n \
    \   if num == 0:\nRecursionError: maximum recursion depth exceeded in comparison\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    arr.sort(key=lambda x: f\"{x:b}\")\n    return arr\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lus5tgo.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp9lus5tgo.py\", line 30,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp9lus5tgo.py\", line 20,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    binary_counts = {num: bin(num).count('1') for num in arr}\n    return sorted(arr,\
    \ key=lambda num: (binary_counts[num], num))\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    def bin_ones(n):\n        ones = sum(1 for x in bin(n)[2:] if x == '1')\n\
    \        return (ones, n)\n    return [x[1] for x in sorted(map(bin_ones, arr))]\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    def binary_ones(num):\n        s = bin(num)\n        return s.count('1')\n\
    \n    return sorted(arr, key=lambda x: (binary_ones(x), x))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda k: (bin(k).count('1'), k))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # 1. solve the problem using a helper function (separation of concerns)\n\
    \    # 2. sort the list by the number of ones in their binary representation\n\
    \    # 3. if the number of ones are equal, sort by their decimal value\n    return\
    \ sorted(arr, key=lambda x: [bin(x).count('1'), x])\ndef check(candidate):\n \
    \   assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: [bin(x).count('1'), x])\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    def get_bin_ones(num):\n        bin_ones = 0\n        while num > 0:\n \
    \           if num % 2 == 1:\n                bin_ones += 1\n            num //=\
    \ 2\n        return bin_ones\n\n    return sorted(arr, key=lambda x: (get_bin_ones(x),\
    \ x))\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2,\
    \ 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    \    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqdeq07jk.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpqdeq07jk.py\", line 38,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpqdeq07jk.py\", line 29,\
    \ in check\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    dec = [bin(i).count('1') for i in arr]\n    return [x for _, x in sorted(zip(dec,\
    \ arr))]\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5,\
    \ -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # your code here\n    if not arr:\n        return arr\n    else:\n     \
    \   out = sorted(arr, key=lambda x: [sum(int(i) for i in bin(x)[2:]), x])\n  \
    \      return out\n\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2,\
    \ -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpge0qiwhs.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpge0qiwhs.py\", line 36,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpge0qiwhs.py\", line 27,\
    \ in check\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    \  File \"/tmp/tmpge0qiwhs.py\", line 21, in sort_array\n    out = sorted(arr,\
    \ key=lambda x: [sum(int(i) for i in bin(x)[2:]), x])\n  File \"/tmp/tmpge0qiwhs.py\"\
    , line 21, in <lambda>\n    out = sorted(arr, key=lambda x: [sum(int(i) for i\
    \ in bin(x)[2:]), x])\n  File \"/tmp/tmpge0qiwhs.py\", line 21, in <genexpr>\n\
    \    out = sorted(arr, key=lambda x: [sum(int(i) for i in bin(x)[2:]), x])\nValueError:\
    \ invalid literal for int() with base 10: 'b'\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    def num_ones(num):\n        if num < 0:\n            num = -num\n      \
    \  return bin(num).count('1')\n\n    return sorted(arr, key=lambda x: (num_ones(x),\
    \ x))\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2,\
    \ 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    \    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda i: \"{:08b}\".format(i))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp15vu9ij9.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp15vu9ij9.py\", line 29,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp15vu9ij9.py\", line 19,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5r20aalz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp5r20aalz.py\", line 30,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp5r20aalz.py\", line 20,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmp5r20aalz.py\", line 17, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmp5r20aalz.py\", line 17, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (format(x, 'b').count('1'), x))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    sorted_ones = sorted(sorted(arr), key=lambda x: bin(x).count('1'))\n   \
    \ return sorted_ones\n\n\ndef check(candidate):\n    assert candidate([1, 5, 2,\
    \ 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n\
    \    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6,\
    \ 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda item: (bin(item).count('1'), item))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    bin_arr = [bin(int(num)) for num in arr]\n    sorted_arr = sorted(bin_arr,\
    \ key=lambda num: (num.count('1'), num))\n    return [int(num, 2) for num in sorted_arr]\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpejr6yb2s.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpejr6yb2s.py\", line 31,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpejr6yb2s.py\", line 21,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: [sum(int(i) for i in bin(x)[2:]), x])\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzx3jbpij.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpzx3jbpij.py\", line 30,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpzx3jbpij.py\", line 21,\
    \ in check\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    \  File \"/tmp/tmpzx3jbpij.py\", line 17, in sort_array\n    return sorted(arr,\
    \ key=lambda x: [sum(int(i) for i in bin(x)[2:]), x])\n  File \"/tmp/tmpzx3jbpij.py\"\
    , line 17, in <lambda>\n    return sorted(arr, key=lambda x: [sum(int(i) for i\
    \ in bin(x)[2:]), x])\n  File \"/tmp/tmpzx3jbpij.py\", line 17, in <genexpr>\n\
    \    return sorted(arr, key=lambda x: [sum(int(i) for i in bin(x)[2:]), x])\n\
    ValueError: invalid literal for int() with base 10: 'b'\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # generate list of lists with each sublist having a count of ones and\n\
    \    # the value of the original array\n    array_info = [[count_ones(el), el]\
    \ for el in arr]\n    # sort array_info based on the number of ones and value\n\
    \    array_info.sort()\n    # return only the values\n    return [el[1] for el\
    \ in array_info]\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaf2sd8n6.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaf2sd8n6.py\", line 36,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpaf2sd8n6.py\", line 26,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpaf2sd8n6.py\", line 19, in sort_array\n    array_info = [[count_ones(el),\
    \ el] for el in arr]\n  File \"/tmp/tmpaf2sd8n6.py\", line 19, in <listcomp>\n\
    \    array_info = [[count_ones(el), el] for el in arr]\nNameError: name 'count_ones'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    def convert_to_binary(num: int) -> int:\n        count = 0\n        num_bin\
    \ = bin(num)[2:]\n        for i in num_bin:\n            if i == '1':\n      \
    \          count += 1\n        return count\n    return sorted(arr, key=lambda\
    \ x: (convert_to_binary(x), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: '{:b}'.format(abs(x)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkz_1nzum.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpkz_1nzum.py\", line 30,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpkz_1nzum.py\", line 20,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: [bin(x).count('1'), x])\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda n: (bin(n).count('1'), n))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # create a list of tuples containing the ones count and original number\n\
    \    arr_ones = [(arr[i], bin(arr[i]).count('1'), arr[i]) for i in range(len(arr))]\n\
    \    # sort based on the ones count, then decimal number\n    arr_ones.sort(key=lambda\
    \ x: (x[1], x[2]))\n    # return just the numbers\n    return [arr_ones[i][0]\
    \ for i in range(len(arr_ones))]\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda i: (format(i, 'b').count('1'), i))\n\ndef\
    \ check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    data = []\n    for x in arr:\n        num_ones = str(bin(x)).count('1')\n\
    \        data.append((num_ones, x))\n    return [x[1] for x in sorted(data)]\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda num: (f'{num:b}'.count('1'), num))\n\ndef\
    \ check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda n: (str(bin(n)).count('1'), n))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    pass\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5,\
    \ -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzeioq4kd.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpzeioq4kd.py\", line 29,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpzeioq4kd.py\", line 19,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # Compare decimal and binary length\n    return sorted(arr, key=lambda x:\
    \ (len(bin(x)), x))\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2,\
    \ -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy9pd0f_t.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpy9pd0f_t.py\", line 31,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpy9pd0f_t.py\", line 21,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    print(arr)\n    return arr\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjv_oqedv.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpjv_oqedv.py\", line 31,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpjv_oqedv.py\", line 21,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: '[1, 5, 2, 3, 4]

    '
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda a: (bin(a).count('1'), a))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # https://stackoverflow.com/questions/36162066/sort-python-list-by-number-of-ones-in-binary-representation-of-the-numbers\n\
    \    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda n: (bin(n).count('1'), n))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (sum(1 for i in bin(x) if i == '1'), x))\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    #return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n    return sorted(arr,\
    \ key=lambda x: (format(x, 'b').count('1'), x))\n\ndef check(candidate):\n   \
    \ assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    numbers = [(len(bin(num)[2:].replace('0', '')), num) for num in arr]\n \
    \   numbers.sort()\n    return [n[1] for n in numbers]\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    #TODO: check input type\n    arr_sorted = sorted(arr, key=lambda x: (format(x,\
    \ 'b').count('1'), x))\n    return arr_sorted\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    bin_num = {num: bin(num)[2:].count('1') for num in arr}\n    return sorted(arr,\
    \ key=lambda x: (bin_num[x], x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    def n1(x):\n        return bin(x).count('1')\n    return sorted(arr, key=lambda\
    \ x: (n1(x), x))\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5r20aalz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp5r20aalz.py\", line 30,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp5r20aalz.py\", line 20,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmp5r20aalz.py\", line 17, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (count_ones(x), x))\n  File \"/tmp/tmp5r20aalz.py\", line 17, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (count_ones(x), x))\nNameError: name 'count_ones'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=num_ones)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp78y1_6ck.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp78y1_6ck.py\", line 30,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp78y1_6ck.py\", line 20,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmp78y1_6ck.py\", line 17, in sort_array\n    return sorted(arr, key=num_ones)\n\
    NameError: name 'num_ones' is not defined\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda num: (str(bin(num))[2:].count('1'), num))\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda n: (sum([1 for _ in bin(n) if _ == '1']),\
    \ n))\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2,\
    \ 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    \    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (x != 0 and bin(x).count('1'), x))\ndef\
    \ check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    z = sorted(arr, key=lambda x: (bin(x).count('1'), x))\n    return z\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # return sorted(arr, key=lambda n: (n, bin(n).count('1')))\n    # return\
    \ sorted(arr, key=lambda n: bin(n).count('1'))\n    return sorted(arr, key=lambda\
    \ n: (bin(n).count('1'), n))\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: [bin(x).count('1'), x])\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    def count_ones(n):\n        bin_str = str(bin(n))\n        return bin_str.count('1')\n\
    \n    return sorted(arr, key=lambda n: (count_ones(n), n))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    arr.sort(key=lambda x: bin(x).count('1'))\n    return arr\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6s1bkx0p.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp6s1bkx0p.py\", line 30,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp6s1bkx0p.py\", line 20,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    def count_bits(num):\n        \"\"\"Returns the number of bits in an integer.\"\
    \"\"\n        return (bin(num).count('1'))\n\n    return sorted(arr, key=lambda\
    \ k: (count_bits(k), k))\ndef check(candidate):\n    assert candidate([1, 5, 2,\
    \ 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n\
    \    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6,\
    \ 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    if len(arr) == 0:\n        return arr\n    elif len(arr) == 1:\n       \
    \ return arr\n    else:\n        pass\n\n    return arr\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo7m7gvpi.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpo7m7gvpi.py\", line 37,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpo7m7gvpi.py\", line 27,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    pass\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1,\
    \ 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5,\
    \ -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzeioq4kd.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpzeioq4kd.py\", line 29,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpzeioq4kd.py\", line 19,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    ones = lambda x: bin(x).count('1')\n    return sorted(arr, key=lambda x:\
    \ (ones(x), x))\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (sum(map(int, list(bin(x)[2:]))), x))\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpioi6udl8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpioi6udl8.py\", line 29,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpioi6udl8.py\", line 20,\
    \ in check\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    \  File \"/tmp/tmpioi6udl8.py\", line 17, in sort_array\n    return sorted(arr,\
    \ key=lambda x: (sum(map(int, list(bin(x)[2:]))), x))\n  File \"/tmp/tmpioi6udl8.py\"\
    , line 17, in <lambda>\n    return sorted(arr, key=lambda x: (sum(map(int, list(bin(x)[2:]))),\
    \ x))\nValueError: invalid literal for int() with base 10: 'b'\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    if not arr:\n        return []\n    arr.sort(key=lambda x: (f'{x:b}'.count('1'),\
    \ x))\n    return arr\ndef check(candidate):\n    assert candidate([1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2,\
    \ -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    def dec_to_binary(num: int) -> int:\n        \"\"\"\n        Convert the\
    \ number to binary form\n\n        >>> dec_to_binary(0)\n        0\n        >>>\
    \ dec_to_binary(1)\n        1\n        >>> dec_to_binary(2)\n        10\n    \
    \    >>> dec_to_binary(2 ** 10 - 1)\n        1111111111\n        \"\"\"\n    \
    \    bin_num = 0\n        while num > 0:\n            if num % 2 == 1:\n     \
    \           bin_num += 1\n            num //= 2\n        return bin_num\n\n  \
    \  def sum_of_ones(num: int) -> int:\n        \"\"\"\n        Sum of ones in binary\
    \ form\n\n        >>> sum_of_ones(0)\n        0\n        >>> sum_of_ones(1)\n\
    \        1\n        >>> sum_of_ones(2)\n        1\n        >>> sum_of_ones(10)\n\
    \        2\n        >>> sum_of_ones(11)\n        3\n        >>> sum_of_ones(2\
    \ ** 10 - 1)\n        10\n        \"\"\"\n        bin_num = dec_to_binary(num)\n\
    \        # sum of binary digits\n        return bin_num\n\n    def binary_comparator(num1:\
    \ int, num2: int) -> int:\n        \"\"\"\n        We compare the ones in binary\
    \ form in ascending order first.\n        If they are the same, we compare the\
    \ decimal values.\n\n        >>> binary_comparator(3, 5)\n        1\n        >>>\
    \ binary_comparator(6, 5)\n        -1\n        >>> binary_comparator(7, 7)\n \
    \       0\n        \"\"\"\n        sum_ones_num1 = sum_of_ones(num1)\n       \
    \ sum_ones_num2 = sum_of_ones(num2)\n        if sum_ones_num1 > sum_ones_num2:\n\
    \            return 1\n        elif sum_ones_num1 < sum_ones_num2:\n         \
    \   return -1\n        elif sum_ones_num1 == sum_ones_num2:\n            if num1\
    \ > num2:\n                return 1\n            elif num1 < num2:\n         \
    \       return -1\n           \ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmq5avku1.py\", line\
    \ 95, in <module>\n    test_check()\n  File \"/tmp/tmpmq5avku1.py\", line 93,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpmq5avku1.py\", line 83,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    import numpy as np\n    arr = np.array(arr)\n    ones = np.array([bin(i).count('1')\
    \ for i in arr])\n    return list(arr[np.lexsort((arr, ones))])\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoek1ppfa.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpoek1ppfa.py\", line 32,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpoek1ppfa.py\", line 22,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpoek1ppfa.py\", line 17, in sort_array\n    import numpy as np\nModuleNotFoundError:\
    \ No module named 'numpy'\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    sorted_arr = sorted(arr, key=lambda x: (-bin(x).count('1'), x))\n    return\
    \ sorted_arr\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0f_7chzw.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp0f_7chzw.py\", line 31,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp0f_7chzw.py\", line 21,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # helper fns\n    def bin_int(i: int) -> str:\n        \"\"\"\n        Returns\
    \ binary string representation of i,\n        even if i is negative.\n       \
    \ \"\"\"\n        if i < 0:\n            return bin(i & 0xffffffff)\n        return\
    \ bin(i)\n\n    def num_of_ones(i: int) -> int:\n        \"\"\"\n        Returns\
    \ num of ones in binary representation of i,\n        even if i is negative.\n\
    \        \"\"\"\n        return bin_int(i).count('1')\n\n    return sorted(arr,\
    \ key=lambda x: (num_of_ones(x), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkp2cmsxt.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpkp2cmsxt.py\", line 46,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpkp2cmsxt.py\", line 37,\
    \ in check\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # New list with numbers converted to binary and sorted\n    bin_arr = sorted(arr,\
    \ key=lambda x: [bin(x).count('1'), x])\n    return bin_arr\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    positive = [x for x in arr if x >= 0]\n    negative = [x for x in arr if\
    \ x < 0]\n    negative.sort()\n    positive.sort(key=lambda x: bin(x).count('1'),\
    \ reverse=True)\n    return negative + positive\n\ndef check(candidate):\n   \
    \ assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp87961jau.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp87961jau.py\", line 34,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp87961jau.py\", line 24,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # First convert all numbers to binary\n    arr = [bin(number)[2:] for number\
    \ in arr]\n    # Next sort by the number of ones in each number, with the decimal\
    \ value\n    # as the tiebreaker.\n    arr.sort(key=lambda number: (len(number.replace('0',\
    \ '')), number))\n    # Convert back to an int and return the list.\n    return\
    \ [int(number, 2) for number in arr]\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr89slewx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpr89slewx.py\", line 35,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpr89slewx.py\", line 25,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    new_list = []\n    for num in arr:\n        new_list.append((bin(num).count('1'),\
    \ num))\n    new_list.sort()\n    for i in range(len(new_list)):\n        new_list[i]\
    \ = new_list[i][1]\n    return new_list\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n    return sorted(arr,\
    \ key=lambda x: (('{0:b}'.format(x).count('1'), x)))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (format(x, 'b').count('1'), x))\n\ndef\
    \ check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    for i in range(len(arr)):\n        for j in range(len(arr) - 1 - i):\n \
    \           x = bin(arr[j])[2:].count('1')\n            y = bin(arr[j + 1])[2:].count('1')\n\
    \            if x == y:\n                if arr[j] > arr[j + 1]:\n           \
    \         arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            elif x > y:\n \
    \               arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n\ndef\
    \ check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n    return sorted(arr,\
    \ key=lambda x: (sum(int(c) for c in bin(x)[2:]), x))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp15p9sn9c.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp15p9sn9c.py\", line 32,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp15p9sn9c.py\", line 23,\
    \ in check\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    \  File \"/tmp/tmp15p9sn9c.py\", line 18, in sort_array\n    return sorted(arr,\
    \ key=lambda x: (sum(int(c) for c in bin(x)[2:]), x))\n  File \"/tmp/tmp15p9sn9c.py\"\
    , line 18, in <lambda>\n    return sorted(arr, key=lambda x: (sum(int(c) for c\
    \ in bin(x)[2:]), x))\n  File \"/tmp/tmp15p9sn9c.py\", line 18, in <genexpr>\n\
    \    return sorted(arr, key=lambda x: (sum(int(c) for c in bin(x)[2:]), x))\n\
    ValueError: invalid literal for int() with base 10: 'b'\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda n: (bin(n).count('1'), n))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (str(bin(x)).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: [bin(x).count('1'), x])\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (sum(int(digit) for digit in f'{abs(x):b}'),\
    \ x))\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2,\
    \ 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    \    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    sorted_list = sorted(arr, key=lambda x: (bin(x).count('1'), x))\n    return\
    \ sorted_list\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    arr = sorted(arr, key=lambda x: (bin(x).count('1'), x))\n    return arr\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    bin_ones = [bin(x).count('1') for x in arr]\n    arr_and_ones = list(zip(arr,\
    \ bin_ones))\n    arr_and_ones.sort(key=lambda x: x[1])\n    return [x[0] for\
    \ x in arr_and_ones]\ndef check(candidate):\n    assert candidate([1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2,\
    \ -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptq1645rl.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmptq1645rl.py\", line 32,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmptq1645rl.py\", line 22,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    N = len(arr)\n    if N <= 1:\n        return arr\n    else:\n        k =\
    \ arr[N // 2]\n        left = [x for x in arr if x < k]\n        middle = [x for\
    \ x in arr if x == k]\n        right = [x for x in arr if x > k]\n        return\
    \ sort_array(left) + middle + sort_array(right)\n\n\ndef check(candidate):\n \
    \   assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp637e_3s0.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp637e_3s0.py\", line 39,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp637e_3s0.py\", line 29,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    binarr = [bin(item)[2:] for item in arr]\n    return sorted(arr, key=lambda\
    \ x: (binarr[x], x))\ndef check(candidate):\n    assert candidate([1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2,\
    \ -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp282l72br.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp282l72br.py\", line 30,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp282l72br.py\", line 20,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmp282l72br.py\", line 18, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (binarr[x], x))\n  File \"/tmp/tmp282l72br.py\", line 18, in <lambda>\n \
    \   return sorted(arr, key=lambda x: (binarr[x], x))\nIndexError: list index out\
    \ of range\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: [bin(x).count('1'), x])\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n    # return\
    \ sorted(arr, key=lambda x: [bin(x).count('1'), x])\n    return sorted(arr, key=lambda\
    \ x: (bin(x).count('1'), x))\n\n\nprint(sort_array([1, 0, 2, 3, 4]))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '[0, 1, 2, 4, 3]

    '
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    if arr == []:\n        return []\n    else:\n        sorted_arr = sorted(arr,\
    \ key=lambda x: (len(bin(x)[2:].replace('0', '')), x))\n        return sorted_arr\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda num: (bin(num).count('1'), num))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: bin(x).count('1'), reverse=True)\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdzu0q7yj.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzu0q7yj.py\", line 29,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpdzu0q7yj.py\", line 19,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    def count_1(num):\n        \"\"\"\n        Returns the number of ones in\
    \ the binary representation of a number.\n        \"\"\"\n        return bin(num).count('1')\n\
    \n    return sorted(arr, key=lambda x: (count_1(x), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (len(bin(x)) - 2, x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprh1p78tt.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmprh1p78tt.py\", line 30,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmprh1p78tt.py\", line 20,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # Create a list of tuples (number of ones, the number itself)\n    return\
    \ [number for _, number in sorted(\n        [(bin(number).count('1'), number)\
    \ for number in arr]\n    )]\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # TODO: Implement me\n    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2,\
    \ 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    \    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    arr.sort(key=lambda x: bin(x).count('1'))\n    return arr\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6s1bkx0p.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp6s1bkx0p.py\", line 30,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp6s1bkx0p.py\", line 20,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: bin(x).count('1'), reverse=True)\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdzu0q7yj.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzu0q7yj.py\", line 29,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpdzu0q7yj.py\", line 19,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    arr.sort(key=lambda x: \"{0:b}\".format(x).count('1'), reverse=True)\n \
    \   return arr\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiz7fbzwg.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpiz7fbzwg.py\", line 30,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpiz7fbzwg.py\", line 20,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # Write your code here.\n    return sorted(arr, key=lambda x: count_ones(x),\
    \ reverse=True)\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzs_mf62v.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzs_mf62v.py\", line 31,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpzs_mf62v.py\", line 21,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpzs_mf62v.py\", line 18, in sort_array\n    return sorted(arr, key=lambda\
    \ x: count_ones(x), reverse=True)\n  File \"/tmp/tmpzs_mf62v.py\", line 18, in\
    \ <lambda>\n    return sorted(arr, key=lambda x: count_ones(x), reverse=True)\n\
    NameError: name 'count_ones' is not defined\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    def count_ones(num):\n        \"\"\"\n        Return the number of 1s in\
    \ num's binary representation.\n        \"\"\"\n        return bin(num).count('1')\n\
    \n    return sorted(arr, key=lambda x: (count_ones(x), x))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda n: (bin(n).count('1'), n))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    sarr = sorted(arr, key=lambda x: format(x, 'b'))\n    return sorted(sarr,\
    \ key=lambda x: x)\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphb1eb577.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphb1eb577.py\", line 30,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmphb1eb577.py\", line 20,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    ones = []\n    zeros = []\n    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2,\
    \ 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    \    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: [bin(x).count('1'), x])\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    bin_arr = [[bin(a).count('1'), a] for a in arr]\n    bin_arr.sort()\n  \
    \  return [a[1] for a in bin_arr]\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (sum(map(int, \"{0:b}\".format(abs(x)))),\
    \ x))\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2,\
    \ 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    \    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    arr.sort(key=lambda x: (x != 0, str(bin(x)).count('1'), x))\n    return\
    \ arr\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2,\
    \ 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    \    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (str(bin(x)).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (-bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsaf1mapj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpsaf1mapj.py\", line 30,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpsaf1mapj.py\", line 20,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key= lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda n: (bin(n)[2:].count('1'), n))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (sum(int(i) for i in bin(x)[2:]), x))\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2p73geik.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp2p73geik.py\", line 29,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp2p73geik.py\", line 20,\
    \ in check\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    \  File \"/tmp/tmp2p73geik.py\", line 17, in sort_array\n    return sorted(arr,\
    \ key=lambda x: (sum(int(i) for i in bin(x)[2:]), x))\n  File \"/tmp/tmp2p73geik.py\"\
    , line 17, in <lambda>\n    return sorted(arr, key=lambda x: (sum(int(i) for i\
    \ in bin(x)[2:]), x))\n  File \"/tmp/tmp2p73geik.py\", line 17, in <genexpr>\n\
    \    return sorted(arr, key=lambda x: (sum(int(i) for i in bin(x)[2:]), x))\n\
    ValueError: invalid literal for int() with base 10: 'b'\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    array = list(arr)\n    ones = []\n    zeros = []\n    length = len(array)\n\
    \    for number in array:\n        bin_number = bin(number)[2:]\n        n_ones\
    \ = bin_number.count('1')\n        if n_ones:\n            ones.append((n_ones,\
    \ number))\n        else:\n            zeros.append(number)\n    sorted_ones =\
    \ sorted(ones)\n    sorted_zeros = sorted(zeros)\n    result = [n for (_, n) in\
    \ sorted_ones] + sorted_zeros\n    assert length == len(result)\n    return result\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjkspnb7j.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpjkspnb7j.py\", line 45,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpjkspnb7j.py\", line 37,\
    \ in check\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    arr.sort(key=lambda x: (count_ones(x), x))\n    return arr\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv_wde3cd.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpv_wde3cd.py\", line 31,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpv_wde3cd.py\", line 21,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpv_wde3cd.py\", line 17, in sort_array\n    arr.sort(key=lambda x: (count_ones(x),\
    \ x))\n  File \"/tmp/tmpv_wde3cd.py\", line 17, in <lambda>\n    arr.sort(key=lambda\
    \ x: (count_ones(x), x))\nNameError: name 'count_ones' is not defined\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    def num_ones(n):\n        return len(bin(n)[2:].replace('0', ''))\n    return\
    \ sorted(arr, key=lambda x: (num_ones(x), x))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (list(bin(x))[2:].count('1'), x))\n\ndef\
    \ check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda num: (f'{num:b}'.count('1'), num))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: bin(x)[2:].count('1'), reverse=True)\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcumrmrnq.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpcumrmrnq.py\", line 30,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpcumrmrnq.py\", line 20,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    if not arr:\n        return []\n    arr.sort(key=lambda x: (bin(x).count('1'),\
    \ x))\n    return arr\ndef check(candidate):\n    assert candidate([1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2,\
    \ -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda n: [bin(n).count('1'), n])\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    aux = []\n    for i in arr:\n        aux.append((str(bin(i))[2:].count('1'),\
    \ i))\n    aux.sort()\n    return [i[1] for i in aux]\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: ('{0:b}'.format(abs(x)).count('1'), abs(x)))\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpppaqoxp7.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpppaqoxp7.py\", line 29,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpppaqoxp7.py\", line 20,\
    \ in check\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (format(x, 'b').count('1'), x))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    sorted_by_binary = sorted(arr, key=lambda x: (bin(x).count('1'), x))\n \
    \   return sorted_by_binary\ndef check(candidate):\n    assert candidate([1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4,\
    \ 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3,\
    \ 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # Python has a built-in binary representation method, bin().\n    # So I\
    \ will just call that on each element of the list and sort.\n    arr = sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n    return arr\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda n: (bin(n).count('1'), n))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # Sort by the number of ones in the binary representation of each number\n\
    \    # then, in case of tie, sort by the decimal representation of each number\n\
    \    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    def count_ones(integer):\n        \"\"\"Count the ones in the binary representation\
    \ of an integer.\"\"\"\n        return bin(integer).count('1')\n\n    return sorted(arr,\
    \ key=lambda integer: [count_ones(integer), integer])\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (sum(int(y) for y in bin(x)[2:]), x))\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkrmh45pq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpkrmh45pq.py\", line 29,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpkrmh45pq.py\", line 20,\
    \ in check\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    \  File \"/tmp/tmpkrmh45pq.py\", line 17, in sort_array\n    return sorted(arr,\
    \ key=lambda x: (sum(int(y) for y in bin(x)[2:]), x))\n  File \"/tmp/tmpkrmh45pq.py\"\
    , line 17, in <lambda>\n    return sorted(arr, key=lambda x: (sum(int(y) for y\
    \ in bin(x)[2:]), x))\n  File \"/tmp/tmpkrmh45pq.py\", line 17, in <genexpr>\n\
    \    return sorted(arr, key=lambda x: (sum(int(y) for y in bin(x)[2:]), x))\n\
    ValueError: invalid literal for int() with base 10: 'b'\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (f'{x:b}'.count('1'), x))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    def get_ones(num):\n        bin = bin(num)\n        return bin.count('1')\n\
    \n    return sorted(arr, key=lambda x: (get_ones(x), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqjieho23.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpqjieho23.py\", line 34,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpqjieho23.py\", line 24,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpqjieho23.py\", line 21, in sort_array\n    return sorted(arr, key=lambda\
    \ x: (get_ones(x), x))\n  File \"/tmp/tmpqjieho23.py\", line 21, in <lambda>\n\
    \    return sorted(arr, key=lambda x: (get_ones(x), x))\n  File \"/tmp/tmpqjieho23.py\"\
    , line 18, in get_ones\n    bin = bin(num)\nUnboundLocalError: local variable\
    \ 'bin' referenced before assignment\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: str(bin(x)[::-1]).count('1'))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1_tg7vml.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp1_tg7vml.py\", line 30,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp1_tg7vml.py\", line 20,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    binary_arr = [bin(num).count('1') for num in arr]\n    zipped_arr = zip(binary_arr,\
    \ arr)\n    sorted_arr = sorted(zipped_arr)\n    return [num for _, num in sorted_arr]\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda i: (bin(i).count('1'), i))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # sort arr\n    arr.sort()\n    # sort by bin(), then sort by arr[i]\n \
    \   return sorted(arr, key=lambda a: \"{0:b}\".format(a))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprdbtvumu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmprdbtvumu.py\", line 33,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmprdbtvumu.py\", line 23,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    arr = [bin(i)[2:].count('1') for i in arr]\n    return [i for i in sorted(sorted(arr),\
    \ key=arr.count, reverse=True)]\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm7aobl9_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpm7aobl9_.py\", line 30,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpm7aobl9_.py\", line 20,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    def ones(n):\n        return bin(n).count('1')\n    return sorted(arr, key=lambda\
    \ a: (ones(a), a))\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2,\
    \ -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: f\"{bin(x).count('1')}{x}\")\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw8rioz3h.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpw8rioz3h.py\", line 30,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpw8rioz3h.py\", line 21,\
    \ in check\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n    \
    \        bin1 = bin(arr[i])[2:]\n            bin2 = bin(arr[j])[2:]\n        \
    \    if bin1.count('1') > bin2.count('1'):\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            elif bin1.count('1') == bin2.count('1'):\n             \
    \   if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n\
    \    return arr\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: bin(x).count('1'))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplva2nwf_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmplva2nwf_.py\", line 30,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmplva2nwf_.py\", line 20,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (sum(1 for i in bin(x) if i == '1'), x))\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (-bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsaf1mapj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpsaf1mapj.py\", line 30,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpsaf1mapj.py\", line 20,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    arr.sort(key=lambda num: (bin(num).count('1'), num))\n    return arr\n\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    arr.sort(key=lambda num: bin(num).count('1'), reverse=True)\n    return\
    \ arr\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2,\
    \ 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    \    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvu7t4nvn.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpvu7t4nvn.py\", line 31,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpvu7t4nvn.py\", line 21,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda i: (len(bin(i)) - bin(i).rfind('1'), i))\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpggetd8kc.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpggetd8kc.py\", line 30,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpggetd8kc.py\", line 20,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    arr.sort(key=lambda x: (str(bin(x))[2:].count('1'), x))\n    return arr\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    sorted_arr = sorted(arr, key=lambda x: (bin(x).count('1'), x))\n    return\
    \ sorted_arr\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    import operator\n    bin_arr = [bin(num)[2:] for num in arr]\n    ones_arr\
    \ = [bin_arr[i].count('1') for i in range(len(bin_arr))]\n    ones_arr, bin_arr\
    \ = zip(*sorted(zip(ones_arr, bin_arr)))\n    return sorted(arr, key=operator.itemgetter(arr))\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyh8qm5ou.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpyh8qm5ou.py\", line 34,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpyh8qm5ou.py\", line 24,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n  File \"\
    /tmp/tmpyh8qm5ou.py\", line 21, in sort_array\n    return sorted(arr, key=operator.itemgetter(arr))\n\
    TypeError: 'int' object is not subscriptable\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (sum(int(i) for i in bin(x)[2:]), x))\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7xj21ek.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpw7xj21ek.py\", line 30,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpw7xj21ek.py\", line 21,\
    \ in check\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    \  File \"/tmp/tmpw7xj21ek.py\", line 17, in sort_array\n    return sorted(arr,\
    \ key=lambda x: (sum(int(i) for i in bin(x)[2:]), x))\n  File \"/tmp/tmpw7xj21ek.py\"\
    , line 17, in <lambda>\n    return sorted(arr, key=lambda x: (sum(int(i) for i\
    \ in bin(x)[2:]), x))\n  File \"/tmp/tmpw7xj21ek.py\", line 17, in <genexpr>\n\
    \    return sorted(arr, key=lambda x: (sum(int(i) for i in bin(x)[2:]), x))\n\
    ValueError: invalid literal for int() with base 10: 'b'\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    bin_arr = sorted([(bin(i)[2:].count('1'), i) for i in arr])\n    return\
    \ [i[1] for i in bin_arr]\n\ndef check(candidate):\n    assert candidate([1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) ==\
    \ [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4,\
    \ 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3,\
    \ 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (str(bin(x)).count('1'), x))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    if len(arr) == 0:\n        return arr\n    return sorted(arr, key=lambda\
    \ x: bin(x).count('1'), reverse=True)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7rbuppy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpw7rbuppy.py\", line 33,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpw7rbuppy.py\", line 23,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    sorted_arr = sorted(arr, key=lambda x: (bin(x).count('1'), x))\n    return\
    \ sorted_arr\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # create a list of tuples (num of ones, integer) for each integer in arr\n\
    \    data = [(bin(n).count('1'), n) for n in arr]\n    # sort by number of ones\n\
    \    data.sort()\n    # return just the integers\n    return [x[1] for x in data]\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # First convert each number to binary string\n    # Second sort by ones\
    \ and convert back to ints\n    # Third convert to list and return\n    # Python\
    \ 2 and 3 compatible\n    arr = sorted(arr, key=lambda x: [bin(x).count('1'),\
    \ x])\n    return arr\n\ndef check(candidate):\n    assert candidate([1, 5, 2,\
    \ 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n\
    \    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6,\
    \ 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4,\
    \ 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    def bit_sort(x):\n        return bin(x).count('1'), x\n    return sorted(arr,\
    \ key=bit_sort)\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4])\
    \ == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6,\
    \ -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert\
    \ candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\
    \ == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    ones_dict = {}\n    for el in arr:\n        ones_dict[el] = bin(el).count('1')\n\
    \    arr.sort(key=lambda el: (ones_dict[el], el))\n    return arr\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    # check for invalid input\n    if not all(isinstance(x, int) for x in arr):\n\
    \        raise TypeError(\n            'sorting input array must only contain\
    \ integers'\n        )\n    if any(x < 0 for x in arr):\n        raise ValueError(\n\
    \            'sorting input array must only contain non-negative integers'\n \
    \       )\n\n    # convert input into lists of tuples\n    # structure: (number,\
    \ binary string)\n    # example: (5, '101')\n    sort_arr = [(x, bin(x)[2:]) for\
    \ x in arr]\n\n    # sort using a lambda function\n    # i.e. sort by number of\
    \ ones, then sort by actual number\n    sort_arr.sort(key=lambda x: (x[1].count('1'),\
    \ x[0]))\n\n    # return sorted array of numbers\n    return [x[0] for x in sort_arr]\n\
    def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n\
    \    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert\
    \ candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n\
    \    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3,\
    \ 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6,\
    \ 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert\
    \ candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n   \
    \ check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxgz7ehd.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpyxgz7ehd.py\", line 49,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpyxgz7ehd.py\", line 40,\
    \ in check\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    \  File \"/tmp/tmpyxgz7ehd.py\", line 23, in sort_array\n    raise ValueError(\n\
    ValueError: sorting input array must only contain non-negative integers\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (-bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsaf1mapj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpsaf1mapj.py\", line 30,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpsaf1mapj.py\", line 20,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda num: ('{0:b}'.format(num).count('1'), num))\n\
    \ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3,\
    \ 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n   \
    \ assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n   \
    \ [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4,\
    \ -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\
    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823104
