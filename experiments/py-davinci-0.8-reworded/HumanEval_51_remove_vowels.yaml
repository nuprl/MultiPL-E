name: HumanEval_51_remove_vowels
language: py
prompt: "def remove_vowels(text: str) -> str:\n    \"\"\"\n    remove_vowels is a\
  \ function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n\
  \    ''\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n\
  \    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n\
  \    'zbcd'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('abcdef\\\
  nghijklm') == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert\
  \ candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO')\
  \ == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\ndef test_check():\n    check(remove_vowels)\n\
  \ntest_check()\n"
completions: ["    vowels = 'aeiouAEIOU'\n    # res = \"\"\n    # for i in text:\n\
    \    #     if i not in vowels:\n    #         res += i\n    # return res\n   \
    \ return ''.join(filter(lambda x: x not in vowels, text))\n", "    return ''.join(letter\
    \ for letter in text if letter.lower() not in VOWELS)\n\n", "    vowels = 'aeiouAEIOU'\n\
    \    text_without_vowels = []\n    for letter in text:\n        if letter not\
    \ in vowels:\n            text_without_vowels.append(letter)\n    return ''.join(text_without_vowels)\n",
  "    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not\
    \ in vowels)\n    \n    ", "    vowels = 'aeiouAEIOU'\n    return ''.join(map(lambda\
    \ x: x if x not in vowels else '', text))\n\n", "    return ''.join(char for char\
    \ in text if char not in 'aeiouAEIOU')\n\n", "    new_str = ''\n    for i in text:\n\
    \        if i not in 'aeiouAEIOU':\n            new_str += i\n    return new_str\n\
    \n", "    VOWELS = \"aeiouAEIOU\"\n    # a = [text]\n    # b = \"\".join(a)\n\
    \    # print(b)\n    # print(a)\n    c = []\n    for i in text:\n        if i\
    \ not in VOWELS:\n            c.append(i)\n    text = \"\".join(c)\n    return\
    \ text\n", "    return text.translate(text.maketrans('', '', 'aAeEiIoOuU'))\n",
  "    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    return ''.join([l for l in text\
    \ if l.lower() not in vowels])\n\n", "    vowels = list(\"aeiouAEIOU\")\n    text_list\
    \ = list(text)\n    for i in range(len(text_list)):\n        if text_list[i] in\
    \ vowels:\n            text_list[i] = ''\n    return ''.join(text_list)\n\n",
  "    return ''.join(list(filter(lambda x: x not in 'aeiouAEIOU', text)))\n\n", " \
    \   if len(text) == 0:\n        return text\n    new_text = \"\"\n    for letter\
    \ in text:\n        if letter.lower() not in \"aeiou\":\n            new_text\
    \ += letter\n    return new_text\n\n", "    return \"\".join(char for char in\
    \ text if char not in \"aeiouAEIOU\")\n\n", "    return text.translate(str.maketrans('',\
    \ '', 'aeiou'))\n\n", "    return ''.join(char for char in text if char not in\
    \ 'aeiou')\n\n", "    vowels = ('a', 'o', 'y', 'e', 'u', 'i')\n    string = \"\
    \"\n    for letter in text:\n        if letter.lower() not in vowels:\n      \
    \      string += letter\n    return string\n\n", "    return \"\".join(c for c\
    \ in text if c not in \"aeiouAEIOU\")\n\n", "    vowels = ('a', 'e', 'i', 'o',\
    \ 'u', 'A', 'E', 'I', 'O', 'U')\n    for char in text:\n        if char in vowels:\n\
    \            text = text.replace(char, \"\")\n    return text\n\n", "    return\
    \ \"\".join(x for x in text if x not in \"aeiouAEIOU\")\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
