name: HumanEval_7_filter_by_substring
language: py
prompt: "from typing import List\n\ndef filter_by_substring(strings: List[str], substring:\
  \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that\
  \ contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>>\
  \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd',\
  \ 'array']\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([], 'john') == []\n    assert\
  \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
  \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
  \ 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
  \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
  \    check(filter_by_substring)\n\ntest_check()\n"
completions: ["    return [s for s in strings if substring in s]\n", "    return [string\
    \ for string in strings if substring in string]\n", "    return [s for s in strings\
    \ if substring in s]\n", "    res = []\n    for s in strings:\n        if substring\
    \ in s:\n            res.append(s)\n    return res\n\nstrings = ['abc', 'bacd',\
    \ 'cde', 'array']\nsubstring = 'a'\nprint(filter_by_substring(strings, substring))\n\
    \nstrings = ['ABC', 'bacd', 'CDE', 'Array']\nsubstring = 'a'\nprint(filter_by_substring(strings,\
    \ substring))\n\nstrings = ['abc', 'bacd', 'cde', 'array']\nsubstring = 'A'\n\
    print(filter_by_substring(strings, substring))", "    return [x for x in strings\
    \ if substring in x]\n", "    if len(strings) == 0:\n        return []\n    filtered_list\
    \ = []\n    for string in strings:\n        if substring in string:\n        \
    \    filtered_list.append(string)\n    return filtered_list\n", "    return [\n\
    \        s for s in strings\n        if substring in s\n    ]\n", "    return\
    \ [string for string in strings if substring in string]\n ", "    return [x for\
    \ x in strings if substring in x]\n", "    return [s for s in strings if substring\
    \ in s]\n", "    return [string for string in strings if substring in string]\n",
  "    return [s for s in strings if substring in s]\n", '    return [s for s in strings
    if substring in s]', "    return [string for string in strings if substring in\
    \ string]\n\nprint(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))",
  '    return [word for word in strings if substring in word]', "    new_list = []\n\
    \    for string in strings:\n        if substring in string:\n            new_list.append(string)\n\
    \    return new_list\n", "    new_strings = []\n    for string in strings:\n \
    \       if substring in string:\n            new_strings.append(string)\n    return\
    \ new_strings\n", "    strings = [ string for string in strings if substring in\
    \ string ]\n    return strings\n", "    return [s for s in strings if substring\
    \ in s]\n", '    return [word for word in strings if substring in word]']
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
