name: HumanEval_7_filter_by_substring
language: py
prompt: "from typing import List\n\ndef filter_by_substring(strings: List[str], substring:\
  \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that\
  \ contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>>\
  \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd',\
  \ 'array']\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([], 'john') == []\n    assert\
  \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
  \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
  \ 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
  \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
  \    check(filter_by_substring)\n\ntest_check()\n"
completions: ["    return [s for s in strings if substring in s]\n", "    return [string\
    \ for string in strings if substring in string]\n", "    return [s for s in strings\
    \ if substring in s]\n", "    res = []\n    for s in strings:\n        if substring\
    \ in s:\n            res.append(s)\n    return res\n\nstrings = ['abc', 'bacd',\
    \ 'cde', 'array']\nsubstring = 'a'\nprint(filter_by_substring(strings, substring))\n\
    \nstrings = ['ABC', 'bacd', 'CDE', 'Array']\nsubstring = 'a'\nprint(filter_by_substring(strings,\
    \ substring))\n\nstrings = ['abc', 'bacd', 'cde', 'array']\nsubstring = 'A'\n\
    print(filter_by_substring(strings, substring))", "    return [x for x in strings\
    \ if substring in x]\n", "    if len(strings) == 0:\n        return []\n    filtered_list\
    \ = []\n    for string in strings:\n        if substring in string:\n        \
    \    filtered_list.append(string)\n    return filtered_list\n", "    return [\n\
    \        s for s in strings\n        if substring in s\n    ]\n", "    return\
    \ [string for string in strings if substring in string]\n ", "    return [x for\
    \ x in strings if substring in x]\n", "    return [s for s in strings if substring\
    \ in s]\n", "    return [string for string in strings if substring in string]\n",
  "    return [s for s in strings if substring in s]\n", '    return [s for s in strings
    if substring in s]', "    return [string for string in strings if substring in\
    \ string]\n\nprint(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))",
  '    return [word for word in strings if substring in word]', "    new_list = []\n\
    \    for string in strings:\n        if substring in string:\n            new_list.append(string)\n\
    \    return new_list\n", "    new_strings = []\n    for string in strings:\n \
    \       if substring in string:\n            new_strings.append(string)\n    return\
    \ new_strings\n", "    strings = [ string for string in strings if substring in\
    \ string ]\n    return strings\n", "    return [s for s in strings if substring\
    \ in s]\n", '    return [word for word in strings if substring in word]', '    return
    [s for s in strings if substring in s]', "    results = []\n    for string in\
    \ strings:\n        if substring in string:\n            results.append(string)\n\
    \    return results", "    l = list()\n    for s in strings:\n        if substring\
    \ in s:\n            l.append(s)\n    return l\n", "    return [s for s in strings\
    \ if substring in s]\n", '    return [s for s in strings if substring in s]',
  "    return [string for string in strings if substring in string]\n", '    return
    [s for s in strings if substring in s]', '    return [string for string in strings
    if substring in string]', "    new_list = []\n    for i in strings:\n        if\
    \ substring in i:\n            new_list.append(i)\n    return new_list\n\n", '    return
    [string for string in strings if substring in string]', "    return [i for i in\
    \ strings if substring in i]\n", "    return [i for i in strings if substring\
    \ in i]\n", "    return [string for string in strings if substring in string]\n",
  "    # we can implement this using stdlib functions\n    return list(filter(lambda\
    \ string: substring in string, strings))\n\n", "    return [string for string\
    \ in strings if substring in string]\n", '    return [s for s in strings if substring
    in s]', "    return [s for s in strings if substring in s]\n", "    return [x\
    \ for x in strings if substring in x]\n", "    return [s for s in strings if substring\
    \ in s]\n", "    return [x for x in strings if substring in x]\n\nprint(filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a'))", "    filtered_strings = []\n    for string\
    \ in strings:\n        if substring in string:\n            filtered_strings.append(string)\n\
    \    return filtered_strings\n", "    return [s for s in strings if substring\
    \ in s]\n", "    # TODO finish this function!\n    pass\n", '    return [str for
    str in strings if substring in str]', "    return [s for s in strings if substring\
    \ in s]\n", "    return [x for x in strings if substring in x]\n", "    return\
    \ [s for s in strings if substring in s]\n", '    return [string for string in
    strings if substring in string]', '    return [string for string in strings if
    substring in string]', "    return [string for string in strings if substring\
    \ in string]\n", "    return [string for string in strings if substring in string]\n",
  "    strings_with_substring = []\n    for string in strings:\n        if substring\
    \ in string:\n            strings_with_substring.append(string)\n    return strings_with_substring\n",
  "    return [string for string in strings if substring in string]\n", "    return\
    \ [word for word in strings if substring in word]\n", "    lst = []\n    for i\
    \ in strings:\n        if substring in i:\n            lst.append(i)\n    return\
    \ lst\n", '    return [s for s in strings if substring in s]', "    return [s\
    \ for s in strings if substring in s]\n", "    return [string for string in strings\
    \ if substring in string]\n", "    filtered_list = []\n    for string in strings:\n\
    \        if substring in string:\n            filtered_list.append(string)\n \
    \   return filtered_list\n", "    return [string for string in strings if substring\
    \ in string]\n", '    return [string for string in strings if substring in string]',
  "    return [st for st in strings if substring in st]\n", "    return [s for s in\
    \ strings if substring in s]\n", "    return [string for string in strings if\
    \ substring in string]\n", "    return [string for string in strings if substring\
    \ in string]\n", "    return [s for s in strings if substring in s]\n", "    return\
    \ [string for string in strings if substring in string]\n", "    assert type(strings)\
    \ == list\n    assert type(substring) == str\n    assert all([type(s) == str for\
    \ s in strings])\n    return [s for s in strings if substring in s]\n", "    res\
    \ = []\n    for str in strings:\n        if substring in str:\n            res.append(str)\n\
    \    return res\n", "    return [s for s in strings if substring in s]\n", " \
    \   return [x for x in strings if substring in x]\n", "    return [string for\
    \ string in strings if substring in string]\n", "    if not strings:\n       \
    \ return []\n    output = []\n    for item in strings:\n        if substring in\
    \ item:\n            output.append(item)\n    return output\n", "    return [s\
    \ for s in strings if substring in s]\n", "    return [string for string in strings\
    \ if substring in string]\n", '    return [string for string in strings if substring
    in string]', "    return [string for string in strings if substring in string]\n",
  "    return [s for s in strings if substring in s]\n", "    filtered_strings = []\n\
    \    for s in strings:\n        if substring in s:\n            filtered_strings.append(s)\n\
    \    return filtered_strings\n", '    return [string for string in strings if
    substring in string]', "    return [s for s in strings if substring in s]\n",
  "    return [string for string in strings if substring in string]\n", '    return
    [string for string in strings if substring in string]', "    return [s for s in\
    \ strings if substring in s]\n", "    return [string for string in strings if\
    \ substring in string]\n", "    res = []\n    for string in strings:\n       \
    \ if substring in string:\n            res.append(string)\n    return res\n",
  "    return [string for string in strings if substring in string]\n", '    return
    [s for s in strings if substring in s]', "    list_with_substring = []\n    for\
    \ string in strings:\n        if substring in string:\n            list_with_substring.append(string)\n\
    \    return list_with_substring\n", "    return [string for string in strings\
    \ if substring in string]\n", "    filtered_strings = []\n    for string in strings:\n\
    \        if substring in string:\n            filtered_strings.append(string)\n\
    \    return filtered_strings\n\n", '    return [s for s in strings if substring
    in s]', "    return [s for s in strings if substring in s]\n", "    return [string\
    \ for string in strings if substring in string]\n", '    return [s for s in strings
    if substring in s]', "    return [string for string in strings if substring in\
    \ string]\n", "    return [str for str in strings if substring in str]\n", '    return
    [string for string in strings if substring in string]', "    return [s for s in\
    \ strings if substring in s]\n", "    strings_filtered = []\n    for string in\
    \ strings:\n        if substring in string:\n            strings_filtered.append(string)\n\
    \    return strings_filtered\n", "    return [s for s in strings if substring\
    \ in s]\n", "    return [string for string in strings if substring in string]\n",
  "    filtered_strings = []\n    for s in strings:\n        if substring in s:\n\
    \            filtered_strings.append(s)\n    return filtered_strings\n", '    return
    [s for s in strings if substring in s]', "    return [string for string in strings\
    \ if substring in string]\n", "    return [x for x in strings if substring in\
    \ x]\n", "    filtered_strings = []\n    for string in strings:\n        if substring\
    \ in string:\n            filtered_strings.append(string)\n    return filtered_strings\n",
  "    return [x for x in strings if substring in x]\n", "    output = []\n    for\
    \ string in strings:\n        if substring in string:\n            output.append(string)\n\
    \    return output\n", "    return [s for s in strings if substring in s]\n",
  "    if len(strings) == 0:\n        return []\n    else:\n        return list(filter(lambda\
    \ string: substring in string, strings))\n", '    return [st for st in strings
    if substring in st]', '    return [x for x in strings if substring in x]', " \
    \   return [s for s in strings if substring in s]\n", "    return [string for\
    \ string in strings if substring in string]\n", '    return [string for string
    in strings if substring in string]', "    return [string for string in strings\
    \ if substring in string]\n", "    return [s for s in strings if substring in\
    \ s]\n", "    res = []\n    for string in strings:\n        if substring in string:\n\
    \            res.append(string)\n    return res\n", "    filtered_list = []\n\
    \    for string in strings:\n        if substring in string:\n            filtered_list.append(string)\n\
    \    return filtered_list\n", "    return [s for s in strings if substring in\
    \ s]\n", "    return [st for st in strings if substring in st]\n", "    res =\
    \ []\n    for s in strings:\n        if substring in s:\n            res.append(s)\n\
    \    return res\n", "    return [s for s in strings if substring in s]\n", " \
    \   res = [s for s in strings if substring in s]\n    return res\n", "    return\
    \ [s for s in strings if substring in s]\n", '    return [x for x in strings if
    substring in x]', "    substring_len = len(substring)\n    filtered_strings =\
    \ []\n    for string in strings:\n        if substring == string[:substring_len]:\n\
    \            filtered_strings.append(string)\n    return filtered_strings\n",
  "    new_strings = []\n    for s in strings:\n        if substring in s:\n     \
    \       new_strings.append(s)\n    return new_strings\n", "    return [s for s\
    \ in strings if substring in s]\n", '    return [i for i in strings if substring
    in i]', "    return [s for s in strings if substring in s]\n", "    return [string\
    \ for string in strings if substring in string]\n", "    return [ s for s in strings\
    \ if substring in s ]\n", "    return [string for string in strings if substring\
    \ in string]\n", "    return [s for s in strings if substring in s]\n", '    return
    [s for s in strings if substring in s]', "    return [s for s in strings if substring\
    \ in s]\n", '    return [s for s in strings if substring in s]', "    return [string\
    \ for string in strings if substring in string]\n", "    return [s for s in strings\
    \ if substring in s]\n", "    return [str for str in strings if substring in str]\n",
  "    return [s for s in strings if substring in s]\n", "    return [str for str\
    \ in strings if substring in str]\n", "    output = [word for word in strings\
    \ if substring in word]\n    return output\n", "    ans = []\n    for s in strings:\n\
    \        if substring in s:\n            ans.append(s)\n    return ans\n", " \
    \   return [s for s in strings if substring in s]\n", "    return [string for\
    \ string in strings if substring in string]\n", '    return [string for string
    in strings if substring in string]', "    return [str for str in strings if substring\
    \ in str]\n", "    return [s for s in strings if substring in s]\n", '    return
    [x for x in strings if substring in x]', '    return [x for x in strings if substring
    in x]', "    # Create an empty list\n    filtered_strings = []\n    # For each\
    \ string in the input\n    for string in strings:\n        # Check if substring\
    \ is in the string\n        if substring in string:\n            # Append the\
    \ string to filtered list\n            filtered_strings.append(string)\n    #\
    \ Return the list\n    return filtered_strings\n\n", '    return [string for string
    in strings if substring in string]', "    return [string for string in strings\
    \ if substring in string]\n", "    return [s for s in strings if substring in\
    \ s]\n", '    return [value for value in strings if substring in value]', "  \
    \  return [string for string in strings if substring in string]\n", "    return\
    \ [string for string in strings if substring in string]\n", '    return [a for
    a in strings if substring in a]', '    return [s for s in strings if substring
    in s]', '    return [string for string in strings if substring in string]', '    return
    [string for string in strings if substring in string]', "    return [string for\
    \ string in strings if substring in string]\n", '    return [string for string
    in strings if substring in string]', "    return [x for x in strings if substring\
    \ in x]\n", "    return [st for st in strings if substring in st]\n", "    return\
    \ [ string for string in strings if substring in string ]\n", '    return [string
    for string in strings if substring in string]', "    return [str for str in strings\
    \ if substring in str]\n", "    new_list = []\n    for string in strings:\n  \
    \      if substring in string:\n            new_list.append(string)\n    return\
    \ new_list\n", "    if substring == '':\n        return strings\n    res = []\n\
    \    for string in strings:\n        if substring in string:\n            res.append(string)\n\
    \    return res\n", '    return [elem for elem in strings if substring in elem]',
  "    output = []\n    for string in strings:\n        if substring in string:\n\
    \            output.append(string)\n    return output\n", "    return [s for s\
    \ in strings if substring in s]\n", "    filtered_strings = []\n    for string\
    \ in strings:\n        if substring in string:\n            filtered_strings.append(string)\n\
    \    return filtered_strings\n", "    return [x for x in strings if substring\
    \ in x]\n", "    return [s for s in strings if substring in s]\n", '    return
    [s for s in strings if substring in s]', '    return [string for string in strings
    if substring in string]', "    return [word for word in strings if substring in\
    \ word]\n\nstrings = ['abc', 'bacd', 'cde', 'array']\nprint(filter_by_substring(strings,\
    \ 'a'))", '    return [s for s in strings if substring in s]', '    return [string
    for string in strings if substring in string]', "    filtered_strings = []\n \
    \   for s in strings:\n        if substring in s:\n            filtered_strings.append(s)\n\
    \    return filtered_strings\n", "    return [string for string in strings if\
    \ substring in string]\n", "    return [s for s in strings if substring in s]\n",
  "    return [string for string in strings if substring in string]\n", "    return\
    \ [s for s in strings if substring in s]\n", '    return [s for s in strings if
    substring in s]', "    return [string for string in strings if substring in string]\n",
  '    return [string for string in strings if substring in string]', "    return\
    \ [string for string in strings if substring in string]\n \n    ", "    output\
    \ = []\n    for string in strings:\n        if substring in string:\n        \
    \    output.append(string)\n    return output\n", "    return [string for string\
    \ in strings if substring in string]\n", "    output = []\n    for value in strings:\n\
    \        if substring in value:\n            output.append(value)\n    return\
    \ output\n", "    return [string for string in strings if substring in string]\n",
  "    strings = filter(lambda x: substring in x, strings)\n    return list(strings)\n",
  "    if not strings:\n        return []\n    return [string for string in strings\
    \ if substring in string]\n", "    pass\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
