language: py
name: HumanEval_91_is_bored
results:
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps7_5a0m0.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmps7_5a0m0.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmps7_5a0m0.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplci64_7n.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmplci64_7n.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmplci64_7n.py\", line 16,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for sentence in S.split('.'):\n       \
    \ count += sentence.startswith('I')\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpftfmfq9v.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpftfmfq9v.py\", line 27,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpftfmfq9v.py\", line 20,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for sentence in re.split(r'[.?!]', S):\n\
    \        if re.match(r'\\s*I\\s+', sentence):\n            boredoms += 1\n   \
    \ return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6dxquxrs.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp6dxquxrs.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6dxquxrs.py\", line 21,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp6dxquxrs.py\"\
    , line 14, in is_bored\n    for sentence in re.split(r'[.?!]', S):\nNameError:\
    \ name 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 0
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for sentence\
    \ in sentences:\n        words = sentence.split()\n        if words and words[0]\
    \ == 'I':\n            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('. '):\n   \
    \     if 'I' == sentence[0]:\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ptylw4y.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp2ptylw4y.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2ptylw4y.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 0
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n    \
    \    if sentence.split()[0] == 'I':\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sents = S.split('.!?')\n    for sent\
    \ in sents:\n        words = sent.split()\n        if len(words) > 0 and words[0]\
    \ == 'I':\n            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgdkx9__y.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgdkx9__y.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgdkx9__y.py\", line 26,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('. '):\n   \
    \     if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjxk13qno.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjxk13qno.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjxk13qno.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    for sentence in S.split('.'):\n     \
    \   sentence = sentence.strip()\n        if sentence[0] == 'I':\n            boredom\
    \ += 1\n    return boredom\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdztimfn6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpdztimfn6.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdztimfn6.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentence = ''\n    sentences = S.split('.')\n\
    \    for sentence in sentences:\n        sentence = sentence.strip()\n       \
    \ if sentence:\n            if sentence[0] == 'I':\n                boredoms +=\
    \ 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxrfsgvmz.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpxrfsgvmz.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxrfsgvmz.py\", line 26,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # return sum(S.startswith('I ') for S in S.split('.'))\n\
    \    return sum(S.startswith('I ') for S in S.split('.'))\n\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbw_zdw53.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpbw_zdw53.py\", line 27,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbw_zdw53.py\", line 23,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 for s in S.split('.') if s.strip().startswith('I'))\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgjvlxkyw.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpgjvlxkyw.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgjvlxkyw.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(line.strip().startswith('I') for line in S.split('.',\
    \ 1))\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpswkdysek.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpswkdysek.py\", line 23,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpswkdysek.py\", line 16,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    sen = S.split('.')\n    bored = 0\n    for sentence in\
    \ sen:\n        if sentence.startswith('I'):\n            bored += 1\n    return\
    \ bored\n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbrc9230j.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpbrc9230j.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbrc9230j.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    words = S.split()\n    for index, word\
    \ in enumerate(words):\n        if (word.capitalize() == 'I' and index == 0\n\
    \                or words[index - 1][-1] in '.!?'):\n            boredoms += 1\n\
    \    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph8_ek3me.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmph8_ek3me.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmph8_ek3me.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    c = 0\n    for s in S.split('.'):\n        if s.strip().startswith('I'):\n\
    \            c += 1\n    return c\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwg470l5w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwg470l5w.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwg470l5w.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    sentences = [s.strip() for s in S.split('.')]\n    return\
    \ len([s for s in sentences if s and s[0] == 'I'])\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphz4g8wr3.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmphz4g8wr3.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphz4g8wr3.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    word_list = S.split()\n    for word\
    \ in word_list:\n        if word[0] == 'I':\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfll6_px3.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfll6_px3.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpfll6_px3.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\
    ```\n\n```python\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpvumfaxo0.py\", line 14\n    ```\n    ^\nSyntaxError: invalid\
    \ syntax\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return 0 if not S else sum(1 for x in re.split('[.?!]',\
    \ S) if x.lstrip().startswith('I'))\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3aqrj0ce.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3aqrj0ce.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3aqrj0ce.py\", line 17,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp3aqrj0ce.py\"\
    , line 13, in is_bored\n    return 0 if not S else sum(1 for x in re.split('[.?!]',\
    \ S) if x.lstrip().startswith('I'))\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for s in S.split('.'):\n        if s.strip().startswith('I'):\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphjyqc3_y.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphjyqc3_y.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphjyqc3_y.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for sentence\
    \ in sentences:\n        if sentence.startswith('I'):\n            boredoms +=\
    \ 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmy2wk2n2.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmy2wk2n2.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpmy2wk2n2.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 0
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    num_boredoms = 0\n    sentences = list(map(str.strip,\
    \ S.split('.')))\n    for sentence in sentences:\n        words = sentence.split()\n\
    \        if words and words[0] == 'I':\n            num_boredoms += 1\n    return\
    \ num_boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n    \
    \    sentence = sentence.split('?')\n        for sent in sentence:\n         \
    \   sent = sent.split('!')\n            for s in sent:\n                boredoms\
    \ += s.strip().startswith('I')\n    return boredoms\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9czijxh8.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9czijxh8.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9czijxh8.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    if S == '':\n        return 0\n    else:\n        if S[0]\
    \ == 'I':\n            return 1 + is_bored(S[1:])\n        else:\n           \
    \ return is_bored(S[1:])\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprw09ay_v.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmprw09ay_v.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmprw09ay_v.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 0
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n    \
    \    if sentence.split()[0] == 'I':\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = re.findall(r'I', S)\n    return len(boredoms)\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkga2xged.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpkga2xged.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkga2xged.py\", line 18,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpkga2xged.py\"\
    , line 13, in is_bored\n    boredoms = re.findall(r'I', S)\nNameError: name 're'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('. '):\n   \
    \     if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnd5kwcfv.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpnd5kwcfv.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpnd5kwcfv.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    sentences = re.split(r'[\\.\\?!]', S)\n    boredoms =\
    \ 0\n    for sentence in sentences:\n        if sentence[0] == 'I':\n        \
    \    boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaknjormt.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpaknjormt.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpaknjormt.py\", line 22,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpaknjormt.py\"\
    , line 13, in is_bored\n    sentences = re.split(r'[\\.\\?!]', S)\nNameError:\
    \ name 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # your code here\n    ...\n \n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ahshlf5.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_ahshlf5.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_ahshlf5.py\", line 18,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n    \
    \    if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy_sbt3me.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpy_sbt3me.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy_sbt3me.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return S.count('I')\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx_g4m97n.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpx_g4m97n.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpx_g4m97n.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return S.count('I')\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx_g4m97n.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpx_g4m97n.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpx_g4m97n.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word\
    \ == 'I':\n            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcovr_ool.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpcovr_ool.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcovr_ool.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    sentences.extend(S.split('?'))\n\
    \    sentences.extend(S.split('!'))\n    for sentence in sentences:\n        sentence\
    \ = sentence.strip()\n        sentence = sentence.split()\n        if sentence\
    \ and sentence[0] == 'I':\n            boredoms += 1\n    return boredoms\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxzp2s875.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpxzp2s875.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxzp2s875.py\", line 27,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len([1 for word in S.split() if word.startswith('I')])\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5id2cue_.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp5id2cue_.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp5id2cue_.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = re.findall(r'\\BI\\b', S)\n    return len(boredoms)\n\
    ```\n\n```python\nfrom typing import List\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp6tm8coks.py\", line 15\n    ```\n    ^\nSyntaxError: invalid\
    \ syntax\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len([1 for sentence in S.split('.') if sentence[0]\
    \ == 'I'])\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa0jbbbqb.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpa0jbbbqb.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpa0jbbbqb.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('. ') + S.split('?\
    \ ') + S.split('! ')\n    for sentence in sentences:\n        words = sentence.split()\n\
    \        if len(words) > 0 and words[0] == 'I':\n            boredoms += 1\n \
    \   return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphaf2r0lp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphaf2r0lp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphaf2r0lp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return S.count('I')\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx_g4m97n.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpx_g4m97n.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpx_g4m97n.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('. ')\n    print(sentences)\n\
    \    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n    \ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkk6z34wz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpkk6z34wz.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkk6z34wz.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: '[''Hello world'']

    [''Is the sky blue?'']

    '
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(S.count(sentence) for sentence in S.split('.')\
    \ if sentence.strip().startswith('I'))\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf41k1_9b.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpf41k1_9b.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpf41k1_9b.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for sentence in S.split('.'):\n       \
    \ if sentence.strip().startswith('I'):\n            count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpybkwc_tz.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpybkwc_tz.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpybkwc_tz.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return S.count('I')\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx_g4m97n.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpx_g4m97n.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpx_g4m97n.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    words = S.split(' ')\n    for word in words:\n\
    \        if word == 'I':\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz2eqbttg.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpz2eqbttg.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpz2eqbttg.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    if S:\n        sentences = S.split(\"\
    . \")\n        for sentence in sentences:\n            if sentence.startswith(\"\
    I\"):\n                boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdgp9ta_i.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdgp9ta_i.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdgp9ta_i.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    sentences = S.split('. ')\n    bored = 0\n    for sentence\
    \ in sentences:\n        if sentence.startswith('I'):\n            bored += 1\n\
    \    return bored\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvekx3ofw.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpvekx3ofw.py\", line 59,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvekx3ofw.py\", line 52,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    s = re.sub(r'\\W+', ' ', S)\n    return len([w for w in\
    \ s.split() if w == 'I'])\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxu3zsc03.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpxu3zsc03.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxu3zsc03.py\", line 18,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpxu3zsc03.py\"\
    , line 13, in is_bored\n    s = re.sub(r'\\W+', ' ', S)\nNameError: name 're'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 0
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for sentence\
    \ in sentences:\n        sentence = sentence.strip()\n        if sentence.split()[0]\
    \ == 'I':\n            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for s in S.split('.'):\n        for s in\
    \ s.split('?'):\n            for s in s.split('!'):\n                s = s.strip()\n\
    \                if s.startswith('I'):\n                    count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphwmi8bpa.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmphwmi8bpa.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphwmi8bpa.py\", line 25,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return S.count('I')\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx_g4m97n.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpx_g4m97n.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpx_g4m97n.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # Split the string into sentences.\n    # TODO\n    split_string\
    \ = re.split('[.?!]', S)\n    count = 0\n    for sentence in split_string:\n \
    \       if sentence.strip().startswith('I'):\n            count += 1\n    return\
    \ count\n    pass\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqpo9ji9j.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpqpo9ji9j.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpqpo9ji9j.py\", line 24,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpqpo9ji9j.py\"\
    , line 15, in is_bored\n    split_string = re.split('[.?!]', S)\nNameError: name\
    \ 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('. ')\n    for sentence\
    \ in sentences:\n        for word in sentence.split():\n            if word ==\
    \ 'I':\n                boredoms += 1\n                break\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_n0suff9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp_n0suff9.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_n0suff9.py\", line 29,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    sentences\
    \ += S.split('?')\n    sentences += S.split('!')\n    for sentence in sentences:\n\
    \        if sentence.strip().startswith('I'):\n            boredoms += 1\n   \
    \ return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0abm73bv.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0abm73bv.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0abm73bv.py\", line 25,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # count the number of occurrences of 'I' at the beginning\
    \ of the sentence\n    return len([word for word in S.split() if word[0] == 'I'])\n\
    \    # return sum(word[0] == 'I' for word in S.split())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmpxu94fh.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpmpxu94fh.py\", line 27,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpmpxu94fh.py\", line 20,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    if not S:\n        return 0\n    return sum(map(lambda\
    \ s: s.startswith('I'),\n                   filter(lambda s: s, S.split('.'))))\n\
    \    \n    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjrg8k9mj.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpjrg8k9mj.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjrg8k9mj.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.') + S.split('?')\
    \ + S.split('!')\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6pnaqk38.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp6pnaqk38.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6pnaqk38.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return S.count('I ')\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_jk2loa2.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp_jk2loa2.py\", line 23,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_jk2loa2.py\", line 20,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # Obtain the list of sentences from S\n    sentences =\
    \ S.split('.')\n    sentences.extend(S.split('?'))\n    sentences.extend(S.split('!'))\n\
    \    # Remove empty strings\n    sentences = list(filter(None, sentences))\n \
    \   # Create a boolean vector that indicates whether a sentence starts with 'I'\n\
    \    is_bored = [(s[0] == 'I') for s in sentences]\n    # Sum all elements in\
    \ the vector\n    return sum(is_bored)\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzv5oknkp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpzv5oknkp.py\", line 34,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpzv5oknkp.py\", line 27,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 0
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    lines = S.split(\".\")\n    for line in\
    \ lines:\n        if line.split()[0] == \"I\":\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    s_list = S.split()\n    count = 0\n    for i in range(len(s_list)):\n\
    \        if s_list[i] == 'I':\n            count += 1\n    return count\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppi18jxf3.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppi18jxf3.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmppi18jxf3.py\", line 27,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word\
    \ == 'I':\n            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcovr_ool.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpcovr_ool.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcovr_ool.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    sentences = S.split('.')\n    sentences += S.split('?')\n\
    \    sentences += S.split('!')\n    sentences = [s.split() for s in sentences]\n\
    \    for i in range(len(sentences)):\n        sentences[i] = [s.strip('\"').strip(\"\
    '\") for s in sentences[i]]\n    boredoms = 0\n    for sentence in sentences:\n\
    \        if sentence[0] == 'I':\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps4fdrsfq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmps4fdrsfq.py\", line 35,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmps4fdrsfq.py\", line 28,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\n  File \"/tmp/tmps4fdrsfq.py\"\
    , line 21, in is_bored\n    if sentence[0] == 'I':\nIndexError: list index out\
    \ of range\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n    \
    \    for question in sentence.split('?'):\n            for exclamation in question.split('!'):\n\
    \                if exclamation.strip().startswith('I'):\n                   \
    \ boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7orvbdeh.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp7orvbdeh.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp7orvbdeh.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(s.strip().startswith('I') for s in S.split('.'))\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsk0cclhs.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpsk0cclhs.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpsk0cclhs.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    from re import findall\n    return len(findall(r'\\bI\\\
    b', S))\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n \
    \   assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1wy1j_49.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp1wy1j_49.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp1wy1j_49.py\", line 22,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split(\". \") + S.split(\"\
    ? \") + S.split(\"! \")\n    for s in sentences:\n        if s.startswith(\"I\"\
    ):\n            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsau8dva_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpsau8dva_.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpsau8dva_.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.') + S.split('?')\
    \ + S.split('!')\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeq6uzeg8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpeq6uzeg8.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpeq6uzeg8.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word\
    \ == 'I':\n            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcovr_ool.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpcovr_ool.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcovr_ool.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for sentence in re.split(r'[.!?]', S):\n\
    \        boredoms += int(sentence.strip().startswith('I'))\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprfcz3qaw.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmprfcz3qaw.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmprfcz3qaw.py\", line 20,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmprfcz3qaw.py\"\
    , line 14, in is_bored\n    for sentence in re.split(r'[.!?]', S):\nNameError:\
    \ name 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 for s in S.split('.') if s.strip().startswith('I'))\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgjvlxkyw.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpgjvlxkyw.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgjvlxkyw.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len([w for w in S.split() if w[0] == 'I'])\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbhu0q4vx.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpbhu0q4vx.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbhu0q4vx.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 0
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    sentences = [s.strip() for s in S.split('.')\
    \ if s]\n\n    for s in sentences:\n        words = s.split()\n        if words\
    \ and words[0] == 'I':\n            boredom += 1\n\n    return boredom\n\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    for sentence in S.split('.'):\n     \
    \   if sentence.strip().startswith('I'):\n            boredom += 1\n    return\
    \ boredom\n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp32hvj7xt.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp32hvj7xt.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp32hvj7xt.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = S.split('.')\n    num_boredoms = 0\n    for\
    \ b in boredoms:\n        if b.strip().startswith('I'):\n            num_boredoms\
    \ += 1\n    return num_boredoms\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxwkw_8q1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxwkw_8q1.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxwkw_8q1.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len([s for s in S.split('.') + S.split('?') + S.split('!')\
    \ if s.strip().startswith('I')])\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp05adgcat.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp05adgcat.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp05adgcat.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    sentences\
    \ += S.split('?')\n    sentences += S.split('!')\n    for sentence in sentences:\n\
    \        words = sentence.split()\n        if len(words) and words[0] == 'I':\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcsd9jkk1.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpcsd9jkk1.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcsd9jkk1.py\", line 26,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len([word for word in S.split() if word == 'I'])\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph65we9oi.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmph65we9oi.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmph65we9oi.py\", line 21,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 for i in S.split('.!?') if len(i) > 0 and\
    \ i[0] == 'I')\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp24ryu9gy.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp24ryu9gy.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp24ryu9gy.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return S.count('I')\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd3o54b0l.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpd3o54b0l.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpd3o54b0l.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return S.count('I')\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd3o54b0l.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpd3o54b0l.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpd3o54b0l.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    sentences = S.split('.')\n    sentences.extend(S.split('?'))\n\
    \    sentences.extend(S.split('!'))\n    b = 0\n    for sentence in sentences:\n\
    \        s = sentence.split()\n        if len(s) > 0 and s[0] == 'I':\n      \
    \      b += 1\n    return b\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz4l834fc.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpz4l834fc.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpz4l834fc.py\", line 27,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    sentences = S.split('.!?')\n    boredoms = 0\n    for\
    \ sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp86q3xctk.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp86q3xctk.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp86q3xctk.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    num_sentences = S.count('.') + S.count('?') + S.count('!')\n\
    \    return S.count('I') * num_sentences\n    \n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp537w8o41.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp537w8o41.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp537w8o41.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for sentence in re.split(r'[.?!]', S):\n\
    \        if sentence.strip().startswith('I'):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg6cbopc1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg6cbopc1.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpg6cbopc1.py\", line 21,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpg6cbopc1.py\"\
    , line 14, in is_bored\n    for sentence in re.split(r'[.?!]', S):\nNameError:\
    \ name 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n    \
    \    for sentence in sentence.split('?'):\n            for sentence in sentence.split('!'):\n\
    \                if sentence.strip().startswith('I'):\n                    boredoms\
    \ += 1\n    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpan0hbnq4.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpan0hbnq4.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpan0hbnq4.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 0
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    sentence = \"\"\n    for i in S:\n    \
    \    if i in [\".\", \"?\", \"!\"]:\n            sentence = sentence + i\n   \
    \         if sentence.split()[0] == \"I\":\n                count += 1\n     \
    \       sentence = \"\"\n        else:\n            sentence = sentence + i\n\
    \    return count\n            \n                \n        \n    \n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    sentences = S.split('.')\n    sentences.extend(S.split('?'))\n\
    \    sentences.extend(S.split('!'))\n    boredoms = 0\n    for sentence in sentences:\n\
    \        if sentence.split()[0] == 'I':\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt1crucsn.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpt1crucsn.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpt1crucsn.py\", line 25,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\n  File \"/tmp/tmpt1crucsn.py\"\
    , line 18, in is_bored\n    if sentence.split()[0] == 'I':\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 0
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored = 0\n    sentences = []\n    sentences = S.split(\"\
    . \")\n    for s in sentences:\n        words = s.split()\n        if words[0]\
    \ == \"I\":\n            bored += 1\n    return bored\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for s in S.split('.'):\n        # trimming\
    \ all the leading and trailing spaces\n        if s.strip().startswith('I'):\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9alq2izw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9alq2izw.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9alq2izw.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 0
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    sentances = [s.strip() for s in S.split('.')]\n    sentances\
    \ = [s for s in sentances if s != '']\n    boredoms = 0\n    for sentance in sentances:\n\
    \        boredoms += 1 if sentance.split()[0] == 'I' else 0\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # Split string into sentences, then look for 'I' at the\
    \ start of each sentence\n    return sum(1 for sent in S.split('.') if sent.strip().startswith('I'))\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpie641s3x.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpie641s3x.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpie641s3x.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # you code here\n    n = 0\n    for sentence in S.split('.'):\n\
    \        #print(sentence)\n        if sentence[0] == ' ':\n            sentence\
    \ = sentence[1:]\n        if sentence[0] == 'I':\n            n = n + 1\n    return\
    \ n\nis_bored('Hello world')\n\nis_bored('The sky is blue. The sun is shining.\
    \ I love this weather')\n\nis_bored('The sky is blue. I love the weather')\n\n\
    is_bored('The sun is shining. I love this weather')\n\nis_bored('The sky is blue.\
    \ I love this weather')\n\nis_bored('I love this weather')\n\nis_bored('It is\
    \ raining. I like rain. I hope it rains a lot')\n\nis_bored('I love this weather.')\n\
    \nis_bored('I love this weather!')\n\nis_bored('I love this weather?')\n\nis_bored('I\
    \ love this weather. The sun is shining. It is beautiful!')\n\nis_bored('I love\
    \ this weather. The sun is shining.')\n\nis_bored('I love this weather. I like\
    \ rain. I hope it rains a lot')\n\nis_bored('I love this weather. I like rain.\
    \ I hope it rains a lot.')\n\nis_bored('I love this weather. I like rain. I hope\
    \ it rains a lot!')\n\nis_bored('I love this weather. I like rain. I hope it rains\
    \ a lot?')\n\nis_bored('I love this weather. I like rain. I hope it rains a lot.\
    \ I like rain. I hope it rains a lot. I like rain. I hope it rains a lot. I like\
    \ rain. I hope it rains a lot. I like rain. I hope it rains a lot.')\n\nis_bored('I\
    \ love this weather. I like rain. I hope it rains a lot. I like rain. I hope it\
    \ rains a lot. I like rain. I hope it rains a lot. I like rain. I hope it rains\
    \ a lot. I like rain. I hope it rains a lot!')\n\nis_bored('I love this weather.\
    \ I like rain\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp4ldkk0u4.py\", line 58\n    is_bored('I love this weather.\
    \ I like rain\n             ^\nSyntaxError: unterminated string literal (detected\
    \ at line 58)\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    pattern = re.compile(r'\\bI\\s+\\w')\n    return len(pattern.findall(S))\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprihdb4cl.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmprihdb4cl.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmprihdb4cl.py\", line 17,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmprihdb4cl.py\"\
    , line 13, in is_bored\n    pattern = re.compile(r'\\bI\\s+\\w')\nNameError: name\
    \ 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for sentence in re.split('[.?!]', S):\n\
    \        if sentence.strip().startswith('I'):\n            boredoms += 1\n   \
    \ return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1605_f32.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp1605_f32.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp1605_f32.py\", line 21,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp1605_f32.py\"\
    , line 14, in is_bored\n    for sentence in re.split('[.?!]', S):\nNameError:\
    \ name 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 0
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentences = []\n    S = S.replace('!',\
    \ '.')\n    S = S.replace('?', '.')\n    for sentence in S.split('.'):\n     \
    \   sentences.append(sentence)\n    for sentence in sentences:\n        if len(sentence)\
    \ > 0:\n            words = sentence.split()\n            if len(words) > 0:\n\
    \                if words[0] == 'I':\n                    boredoms += 1\n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823063
- exit_code: 0
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    S = S.split(\".\")\n    for sentence in\
    \ S:\n        if sentence.split()[0] == \"I\":\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    sentences = re.split(r'[.?!]', S)\n   \
    \ for sentence in sentences:\n        if sentence.strip().startswith('I'):\n \
    \           count += 1\n    return count\n   \n   \ndef check(candidate):\n  \
    \  assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp661ipawx.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp661ipawx.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp661ipawx.py\", line 22,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp661ipawx.py\"\
    , line 14, in is_bored\n    sentences = re.split(r'[.?!]', S)\nNameError: name\
    \ 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 for sentence in S.split('.') if sentence.startswith('I'))\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpekkj2ebs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpekkj2ebs.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpekkj2ebs.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    split_arr = list(filter(lambda x: x != '', S.split('.')))\n\
    \    boredoms = 0\n    for i in split_arr:\n        if i[0] == 'I':\n        \
    \    boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp27hnbz_k.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp27hnbz_k.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp27hnbz_k.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for sentence in S.split('.'):\n       \
    \ if sentence.strip().startswith('I'):\n            count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpybkwc_tz.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpybkwc_tz.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpybkwc_tz.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 for word in S.split('.') if word.strip().startswith('I'))\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt0_1j4i0.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpt0_1j4i0.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpt0_1j4i0.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 for sentence in S.split('.') if sentence.strip().startswith('I'))\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7q0tw948.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7q0tw948.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp7q0tw948.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    c = 0\n    words = S.split()\n    for i in range(len(words)):\n\
    \        if words[i] == 'I':\n            c += 1\n    return c\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaom4b1pt.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpaom4b1pt.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpaom4b1pt.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    i = 0\n    bored = 0\n    while i < len(S):\n        if\
    \ S[i] == 'I':\n            bored += 1\n        if S[i] == '.' or S[i] == '?'\
    \ or S[i] == '!':\n            i += 1\n            if i < len(S) and S[i] == '\
    \ ':\n                i += 1\n            continue\n        i += 1\n    return\
    \ bored\n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp9jmqft3.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpp9jmqft3.py\", line 36,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpp9jmqft3.py\", line 29,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n    \
    \    if 'I' in sentence:\n            boredoms += 1\n    return boredoms\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjuoyo6ht.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpjuoyo6ht.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjuoyo6ht.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    if len(S) == 0:\n        return 0\n    if S[0] == 'I':\n\
    \        return 1 + is_bored(S[1:])\n    else:\n        return is_bored(S[1:])\n\
    \    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0v2po4jp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0v2po4jp.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0v2po4jp.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 for word in S.split() if word.startswith('I'))\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8iks3vqe.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8iks3vqe.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8iks3vqe.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    p1 = re.compile(r'\\bI\\b')\n    return len(p1.findall(S))\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt5n3_83z.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpt5n3_83z.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpt5n3_83z.py\", line 18,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpt5n3_83z.py\"\
    , line 13, in is_bored\n    p1 = re.compile(r'\\bI\\b')\nNameError: name 're'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.startswith('I')])\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjfirp4yp.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpjfirp4yp.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjfirp4yp.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 for sent in S.split('.') if sent.strip().startswith('I'))\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp126hxa0q.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp126hxa0q.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp126hxa0q.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word\
    \ == 'I':\n            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxae1gwoy.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxae1gwoy.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxae1gwoy.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return S.count('I')\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ymzd4i3.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp2ymzd4i3.py\", line 23,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2ymzd4i3.py\", line 16,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return S.count('I')\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx_g4m97n.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpx_g4m97n.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpx_g4m97n.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for sentence\
    \ in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\nprint(is_bored('The sky is\
    \ blue. The sun is shining. I love this weather'))\nprint(is_bored('Hello world'))\n\
    print(is_bored('Wow, I like this wiki!!!'))\nprint(is_bored('I want to read a\
    \ book.'))\nprint(is_bored('I want to read a book'))\nprint(is_bored('I want to\
    \ read a book!!!'))\nprint(is_bored('Hello world. Wow, I like this wiki!!! I want\
    \ to read a book.'))\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpupue5e_c.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpupue5e_c.py\", line 37,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpupue5e_c.py\", line 30,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: '1

    0

    0

    1

    1

    1

    0

    '
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.startswith('I')])\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjfirp4yp.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpjfirp4yp.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjfirp4yp.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len([word for word in S.split() if word.startswith('I')])\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp672rq59r.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp672rq59r.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp672rq59r.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 for x in S.split('.') if x.strip().startswith('I'))\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1r4pz2yz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp1r4pz2yz.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp1r4pz2yz.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    r = re.compile('(?i)^I\\s[^.?!]*')\n    boredoms = re.findall(r,\
    \ S)\n    return len(boredoms)\n\n@pytest.mark.parametrize(\"name, expected\"\
    , [\n    ('Hello world', 0),\n    ('The sky is blue. The sun is shining. I love\
    \ this weather', 1),\n    ('I love this weather. The sun is shining. The sky is\
    \ blue', 1),\n    ('I love this weather. The sun is shining. The sky is blue.\
    \ I really like this weather', 2),\n    ('This sentence is not bored. The sun\
    \ is shining. I love this weather', 1),\n    ('I am bored. This sentence is not\
    \ bored. The sun is shining. I love this weather', 2),\n    ('This sentence is\
    \ not bored. I am bored. I love this weather', 2),\n    ('I am bored. This sentence\
    \ is not bored. I love this weather', 2),\n    ('I am bored. I love this weather.\
    \ This sentence is not bored', 2),\n    ('I love this weather. I am bored. This\
    \ sentence is not bored', 2),\n    ('I love this weather. I am bored. I love this\
    \ weather', 2),\n    ('I am bored. I love this weather. I am bored', 2),\n   \
    \ ('I am bored. I am bored. I am bored', 3),\n    ('I am bored. I am bored. I\
    \ am bored. I am bored', 4),\n    ('I am bored. I am bored. I am bored. I am bored.\
    \ I am bored', 5),\n    ('I am bored. I am bored. I am bored. I am bored. I am\
    \ bored. I am bored', 6),\n    ('I am bored. I am bored. I am bored. I am bored.\
    \ I am bored. I am bored. I am bored', 7),\n    ('I am bored. I am bored. I am\
    \ bored. I am bored. I am bored. I am bored. I am bored. I am bored', 8),\n  \
    \  ('I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I\
    \ am bored. I am bored. I am bored', 9),\n    ('I am bored.\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp31h4e5ft.py\", line 37\n    ('I am bored.\n     ^\nSyntaxError:\
    \ unterminated string literal (detected at line 37)\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.') + S.split('?')\
    \ + S.split('!')\n    for sentence in sentences:\n        if len(sentence) > 0\
    \ and sentence[0] == 'I':\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ouucec9.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp2ouucec9.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2ouucec9.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 0
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    for i in S.split('.'):\n        words\
    \ = i.split()\n        if len(words) > 0 and words[0] == 'I':\n            boredom\
    \ += 1\n    return boredom\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored = 0\n    for s in S.split('.'):\n        if 'I'\
    \ in s:\n            bored += 1\n    return bored\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpanhpp5f2.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpanhpp5f2.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpanhpp5f2.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    i = 0\n    bored = 0\n    while i < len(S):\n        if\
    \ S[i] == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?'\
    \ or S[i] == '!':\n            i += 1\n            continue\n        else:\n \
    \           i += 1\n            continue\n        i += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7bhvs7z.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpk7bhvs7z.py\", line 36,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpk7bhvs7z.py\", line 29,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return S.count(' I ')\n\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8143pwjl.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8143pwjl.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8143pwjl.py\", line 19,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return S.count('I')\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd3o54b0l.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpd3o54b0l.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpd3o54b0l.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # The startswith() method is used to check if string starts\
    \ with the\n    # specified prefix.\n    # It returns true if the string begins\
    \ with the specified prefix.\n    # Otherwise, it returns false.\n    # S.split('.')\
    \ will split all the sentences by '.' into a list\n    # We can use list comprehension\
    \ to check if every sentence in\n    # the list starts with 'I'\n    return sum([1\
    \ for i in S.split('.') if i.startswith('I')])\n    # Another way to solve this\
    \ is to use a loop\n    # counter = 0\n    # for i in S.split('.'):\n    #   \
    \  if i.startswith('I'):\n    #         counter += 1\n    # return counter\n \
    \   # return sum([1 for s in S.split('.') if s.startswith('I')])\n    \n    \n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbdwrnszx.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpbdwrnszx.py\", line 39,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbdwrnszx.py\", line 32,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 0
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    sentences = S.split('.')\n    boredoms = 0\n    for s\
    \ in sentences:\n        s = s.lstrip().split(' ')\n        if s[0] == 'I':\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfv9fwzu8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpfv9fwzu8.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpfv9fwzu8.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    if not S:\n        return 0\n    return sum(1 for s in\
    \ re.split(r'[.!?]', S) if s.strip().startswith('I'))\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp55g3p6rg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp55g3p6rg.py\", line 27,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp55g3p6rg.py\", line 19,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp55g3p6rg.py\"\
    , line 15, in is_bored\n    return sum(1 for s in re.split(r'[.!?]', S) if s.strip().startswith('I'))\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    S_list = re.split('[\\.\\?!]', S)\n   \
    \ for sentence in S_list:\n        if sentence.strip() != '':\n            if\
    \ sentence.strip().split()[0] == 'I':\n                count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmfdjyt84.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpmfdjyt84.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpmfdjyt84.py\", line 23,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpmfdjyt84.py\"\
    , line 14, in is_bored\n    S_list = re.split('[\\.\\?!]', S)\nNameError: name\
    \ 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return S.count(' I ')\n\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8143pwjl.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8143pwjl.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8143pwjl.py\", line 19,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    if '.' not in S:\n        if S.startswith('I'):\n\
    \            count += 1\n        return count\n    sentences = re.split('\\.|\\\
    ?|!', S)\n    for sentence in sentences:\n        if sentence.startswith('I'):\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2hf5zm1r.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2hf5zm1r.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2hf5zm1r.py\", line 26,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip()\
    \ for sentence in re.split(r'[\\.\\?\\!]', S) if sentence]\n    # Check if any\
    \ of the sentences start with \"I\"\n    boredoms = [sentence for sentence in\
    \ sentences if sentence.startswith('I')]\n    return len(boredoms)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6kowsvrm.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp6kowsvrm.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6kowsvrm.py\", line 21,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp6kowsvrm.py\"\
    , line 14, in is_bored\n    sentences = [sentence.strip() for sentence in re.split(r'[\\\
    .\\?\\!]', S) if sentence]\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    sentences = S.split(\". \") + S.split(\"? \") + S.split(\"\
    ! \")\n    boredoms = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"\
    I\"):\n            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyx0c41l1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpyx0c41l1.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpyx0c41l1.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # Split by the punctuation and ' '.\n    sentences = re.split(r'\\\
    .|\\?|!\\s+', S)\n    boredoms = 0\n    for sentence in sentences:\n        if\
    \ sentence[0] == 'I':\n            boredoms += 1\n    return boredoms\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph61_7w11.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmph61_7w11.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmph61_7w11.py\", line 23,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmph61_7w11.py\"\
    , line 14, in is_bored\n    sentences = re.split(r'\\.|\\?|!\\s+', S)\nNameError:\
    \ name 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len([sentence for sentence in S.split('.') if sentence.startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ji9oxfz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp1ji9oxfz.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp1ji9oxfz.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for sent in S.split('.'):\n        for\
    \ sent in sent.split('?'):\n            for sent in sent.split('!'):\n       \
    \         if sent.strip().startswith('I'):\n                    boredoms += 1\n\
    \    \n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqwlzi2f3.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpqwlzi2f3.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpqwlzi2f3.py\", line 25,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # Replace the following line with your code\n    sentences\
    \ = S.split('.|?|!')\n    num_bored = 0\n    for sentence in sentences:\n    \
    \    if sentence[0] == 'I':\n            num_bored += 1\n    return num_bored\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy_ahhqs_.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpy_ahhqs_.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy_ahhqs_.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 0
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    counter = 0\n    sentences = S.split('.')\n    for sentence\
    \ in sentences:\n        if sentence.strip().split()[0] == 'I':\n            counter\
    \ += 1\n    return counter\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n    \
    \    if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfvfx0g3g.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfvfx0g3g.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpfvfx0g3g.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 0
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for sentence\
    \ in sentences:\n        words = sentence.split()\n        if len(words) > 0 and\
    \ words[0] == 'I':\n            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.') + S.split('?')\
    \ + S.split('!')\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6pnaqk38.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp6pnaqk38.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6pnaqk38.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # your code here\n    boredoms = 0\n    i = 0\n    sentence\
    \ = ''\n    for letter in S:\n        if letter == '.' or letter == '?' or letter\
    \ == '!':\n            if sentence[0] == 'I':\n                boredoms += 1\n\
    \            sentence = ''\n        else:\n            sentence += letter\n  \
    \  return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp46_336cd.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp46_336cd.py\", line 36,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp46_336cd.py\", line 29,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # read the string and split into a list of sentences\n\
    \    # for each sentence, check if it begins with 'I'\n    # if it does, increment\
    \ a counter\n    # return the counter\n    pass\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqi3z4ggi.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpqi3z4ggi.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpqi3z4ggi.py\", line 20,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for sentence in S.split('.'):\n       \
    \ count += 1 if sentence.strip().startswith('I') else 0\n    return count\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp92tn_xye.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp92tn_xye.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp92tn_xye.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('. ')\n    for sentence\
    \ in sentences:\n        if sentence.startswith('I'):\n            boredoms +=\
    \ 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph3dasbls.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmph3dasbls.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmph3dasbls.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored = 0\n    for sentence in S.split('.'):\n       \
    \ sentence = sentence.strip()\n        if len(sentence) > 0 and sentence[0] ==\
    \ 'I':\n            bored += 1\n    return bored\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmi3syhsn.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmi3syhsn.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpmi3syhsn.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    sentences = re.split('\\.|\\?|!', S)\n    boredoms = 0\n\
    \    for sentence in sentences:\n        if sentence.split()[0] == 'I':\n    \
    \        boredoms += 1\n    return boredoms\n\n\n@pytest.mark.parametrize('S,\
    \ result', [\n    ('Hello world', 0),\n    ('The sky is blue. The sun is shining.\
    \ I love this weather', 1),\n    ('I am staying in a hotel. Weather is nice. I\
    \ am eating. I am sitting on a bench.', 3),\n    ('Something is not here.', 0),\n\
    \    ('I am sitting on a bench. I am drinking juice. I am going to office in the\
    \ morning.', 3),\n    ('I am going to office in the morning.', 1),\n    ('I am\
    \ going to office in the morning. I am sitting on a bench. I am drinking juice.',\
    \ 3),\n    ('I am drinking juice. I am sitting on a bench. I am going to office\
    \ in the morning.', 3),\n    ('I am drinking juice. I am going to office in the\
    \ morning. I am sitting on a bench.', 3),\n    ('I am going to office in the morning.\
    \ I am drinking juice. I am sitting on a bench.', 3),\n    ('I am going to office\
    \ in the morning. I am drinking juice. I am sitting on a bench. I am going to\
    \ office in the morning. I am drinking juice. I am sitting on a bench. I am going\
    \ to office in the morning. I am drinking juice. I am sitting on a bench. I am\
    \ going to office in the morning. I am drinking juice. I am sitting on a bench.\
    \ I am going to office in the morning. I am drinking juice. I am sitting on a\
    \ bench. I am going to office in the morning. I am drinking juice. I am sitting\
    \ on a bench. I am going to office in the morning. I am drinking juice. I am sitting\
    \ on a bench. I am going to office in the morning. I am drinking juice. I am sitting\
    \ on a bench. I am going to office in the morning. I am drinking juice. I am sitting\
    \ on a bench. I am going to office in the morning. I am drinking juice. I am sitting\
    \ on a bench. I am going to office in the morning.\ndef check(candidate):\n  \
    \  assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpn54egack.py\", line 32\n    ('I am going to office in\
    \ the morning. I am drinking juice. I am sitting on a bench. I am going to office\
    \ in the morning. I am drinking juice. I am sitting on a bench. I am going to\
    \ office in the morning. I am drinking juice. I am sitting on a bench. I am going\
    \ to office in the morning. I am drinking juice. I am sitting on a bench. I am\
    \ going to office in the morning. I am drinking juice. I am sitting on a bench.\
    \ I am going to office in the morning. I am drinking juice. I am sitting on a\
    \ bench. I am going to office in the morning. I am drinking juice. I am sitting\
    \ on a bench. I am going to office in the morning. I am drinking juice. I am sitting\
    \ on a bench. I am going to office in the morning. I am drinking juice. I am sitting\
    \ on a bench. I am going to office in the morning. I am drinking juice. I am sitting\
    \ on a bench. I am going to office in the morning.\n     ^\nSyntaxError: unterminated\
    \ string literal (detected at line 32)\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # may be a better way than a regex?\n    return len(re.findall(r'I[^.!?]*[\\\
    .!?]', S))\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5kct4wpw.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp5kct4wpw.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp5kct4wpw.py\", line 18,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp5kct4wpw.py\"\
    , line 14, in is_bored\n    return len(re.findall(r'I[^.!?]*[\\.!?]', S))\nNameError:\
    \ name 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # Step 1: Split the sentence into sentences\n    # sentences\
    \ = list(filter(None, re.split(r'[.?!]', S)))\n    sentences = re.split(r'[.?!]',\
    \ S)\n    # Step 2: Loop over each sentence\n    boredoms = 0\n    for sentence\
    \ in sentences:\n        if sentence.startswith('I'):\n            boredoms +=\
    \ 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpccg_shp2.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpccg_shp2.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpccg_shp2.py\", line 25,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpccg_shp2.py\"\
    , line 15, in is_bored\n    sentences = re.split(r'[.?!]', S)\nNameError: name\
    \ 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for s in S.split('.'):\n        for\
    \ w in s.split('?'):\n            for w in w.split('!'):\n                if w.startswith('I\
    \ '):\n                    boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa4lk_f26.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpa4lk_f26.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpa4lk_f26.py\", line 27,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n    \
    \    print(sentence)\n        for word in sentence.split():\n            if word\
    \ == 'I':\n                boredoms += 1\n                break\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk5blq17y.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpk5blq17y.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpk5blq17y.py\", line 29,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: "Hello world\nIs the sky blue?\nI love It !\nbIt\nI feel good today\n I\
    \ will be productive\n will kill It\nYou and I are going for a walk\n"
  timestamp: 1659823063
- exit_code: 0
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentence = ''\n    for i in S:\n   \
    \     if i == '.' or i == '?' or i == '!':\n            words = sentence.split()\n\
    \            if words:\n                if words[0] == 'I':\n                \
    \    boredoms += 1\n            sentence = ''\n        else:\n            sentence\
    \ += i\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    sentences = re.split('[.?!]', S)\n    boredoms = 0\n \
    \   for sentence in sentences:\n        if sentence.split()[0] == 'I':\n     \
    \       boredoms += 1\n    return boredoms\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4sjsif0b.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4sjsif0b.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4sjsif0b.py\", line 21,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp4sjsif0b.py\"\
    , line 13, in is_bored\n    sentences = re.split('[.?!]', S)\nNameError: name\
    \ 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # split the string by one of three delimiters\n    sentences\
    \ = re.split(r'[\\.\\?\\!]', S)\n    # count how many words start with I\n   \
    \ boredoms = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdzn0hu55.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdzn0hu55.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdzn0hu55.py\", line 23,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpdzn0hu55.py\"\
    , line 14, in is_bored\n    sentences = re.split(r'[\\.\\?\\!]', S)\nNameError:\
    \ name 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    sentences.extend(S.split('?'))\n\
    \    sentences.extend(S.split('!'))\n    for sentence in sentences:\n        words\
    \ = sentence.split()\n        if words:\n            first_word = words[0]\n \
    \           if first_word == 'I':\n                boredoms += 1\n    return boredoms\n\
    \            \ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppqob2g8e.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppqob2g8e.py\", line 34,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmppqob2g8e.py\", line 28,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return S.count('I')\n    \n    \n    \n    \n    \ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ykw8sx7.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp7ykw8sx7.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp7ykw8sx7.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len([boredom for boredom in S.split('.') if boredom.startswith('I')])\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsw8q9bba.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpsw8q9bba.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpsw8q9bba.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 0
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored = 0\n    for sent in S.split('.'):\n        if sent.split()[0]\
    \ == 'I':\n            bored += 1\n    return bored\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    sentences = re.split(r'\\.|\\?|!', S)\n    count = 0\n\
    \    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl9hklne3.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpl9hklne3.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpl9hklne3.py\", line 22,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpl9hklne3.py\"\
    , line 13, in is_bored\n    sentences = re.split(r'\\.|\\?|!', S)\nNameError:\
    \ name 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 0
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    for sentence in S.split('. '):\n    \
    \    if sentence.split(' ')[0] == 'I':\n            boredom += 1\n    return boredom\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return S.count('I')\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx_g4m97n.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpx_g4m97n.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpx_g4m97n.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 0
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('. ')\n    for sentence\
    \ in sentences:\n        words = sentence.split(' ')\n        if words[0] == 'I':\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    counter = 0\n    for word in S.split():\n        if word\
    \ == 'I':\n            counter += 1\n    return counter\n\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmmnpq5jl.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmmnpq5jl.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpmmnpq5jl.py\", line 27,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return S.count('I')\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx_g4m97n.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpx_g4m97n.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpx_g4m97n.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored = 0\n    words = S.split()\n    for word in words:\n\
    \        if word == 'I':\n            bored += 1\n    return bored\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy2x7jgd3.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy2x7jgd3.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy2x7jgd3.py\", line 27,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    sentences = S.split('.')\n    return len([sentence for\
    \ sentence in sentences if sentence.strip().startswith('I')])\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn_5_tp4_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpn_5_tp4_.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpn_5_tp4_.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len([w for w in S.split('.') if w.strip().startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp649fht4y.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp649fht4y.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp649fht4y.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return S.count('I')\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx_g4m97n.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpx_g4m97n.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpx_g4m97n.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 for sentence in S.split('.') if sentence.strip().startswith('I'))\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7q0tw948.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7q0tw948.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp7q0tw948.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # separate sentences by delimiters\n    sentences = re.split('\\\
    .|\\?|!', S)\n    # count sentences that starts with 'I'\n    boredoms = sum(map(lambda\
    \ x: 1 if x.startswith('I') else 0, sentences))\n    return boredoms\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp06maotjk.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp06maotjk.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp06maotjk.py\", line 21,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp06maotjk.py\"\
    , line 14, in is_bored\n    sentences = re.split('\\.|\\?|!', S)\nNameError: name\
    \ 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmply7ay7tj.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmply7ay7tj.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmply7ay7tj.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    if not S:\n        return 0\n    s = S.replace('.', '\\\
    1').replace('?', '\\1').replace('!', '\\1')\n    return len([s for s in s.split('\\\
    1') if s.split()[0] == 'I'])\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3mfifcbb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3mfifcbb.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3mfifcbb.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\n  File \"/tmp/tmp3mfifcbb.py\"\
    , line 16, in is_bored\n    return len([s for s in s.split('\\1') if s.split()[0]\
    \ == 'I'])\n  File \"/tmp/tmp3mfifcbb.py\", line 16, in <listcomp>\n    return\
    \ len([s for s in s.split('\\1') if s.split()[0] == 'I'])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 0
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    for sentence in S.split('.'):\n     \
    \   boredom += 1 if sentence.split()[0] == 'I' else 0\n    return boredom\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    S = S.lower()\n    return S.count('i')\n    \ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvoqxy_wu.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpvoqxy_wu.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvoqxy_wu.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len([s for s in S.split('.') if s[0] == 'I'])\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpad641f0p.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpad641f0p.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpad641f0p.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for sentence in re.split(r'[.?!]', S):\n\
    \        if sentence.strip().startswith('I'):\n            boredoms += 1\n   \
    \ return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp86vu5q9z.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp86vu5q9z.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp86vu5q9z.py\", line 21,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp86vu5q9z.py\"\
    , line 14, in is_bored\n    for sentence in re.split(r'[.?!]', S):\nNameError:\
    \ name 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # split by punctions and then by spaces\n    sentences\
    \ = re.split(r'[?!.]', S)\n    boredoms = 0\n    for sentence in sentences:\n\
    \        if sentence.split()[0] == 'I':\n            boredoms += 1\n    return\
    \ boredoms\n   \n   \ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzct5lh8i.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzct5lh8i.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpzct5lh8i.py\", line 23,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpzct5lh8i.py\"\
    , line 14, in is_bored\n    sentences = re.split(r'[?!.]', S)\nNameError: name\
    \ 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n    \
    \    if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7gm9sdqy.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp7gm9sdqy.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp7gm9sdqy.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    sen = S.split('.')\n    bored = 0\n    for i in sen:\n\
    \        if i.strip().startswith('I'):\n            bored += 1\n    return bored\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe93j6a_k.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpe93j6a_k.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpe93j6a_k.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # num_boredoms = 0\n    # sentences = S.split('.')\n \
    \   # for sentence in sentences:\n    #     if sentence[0] == 'I':\n    #    \
    \     num_boredoms += 1\n    # return num_boredoms\n    # return sum(1 for sentence\
    \ in S.split('.') if sentence[0] == 'I')\n    return sum(sentence[0] == 'I' for\
    \ sentence in S.split('.'))\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiwc1jjae.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpiwc1jjae.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpiwc1jjae.py\", line 25,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for sentence\
    \ in sentences:\n        if sentence[0] == 'I':\n            boredoms += 1\n \
    \   return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz1hzpem8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpz1hzpem8.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpz1hzpem8.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len([w for w in S.split() if w.startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaz_f97kx.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpaz_f97kx.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpaz_f97kx.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    sentences = re.split('[.?!]', S)\n    boredoms = 0\n \
    \   for sentence in sentences:\n        if sentence.startswith('I'):\n       \
    \     boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_zl1dg0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmph_zl1dg0.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmph_zl1dg0.py\", line 22,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmph_zl1dg0.py\"\
    , line 13, in is_bored\n    sentences = re.split('[.?!]', S)\nNameError: name\
    \ 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # Split the string into sentences\n    sent = S.split('.')\n\
    \    sent.extend(S.split('?'))\n    sent.extend(S.split('!'))\n    # Count the\
    \ boredoms\n    count = 0\n    for s in sent:\n        if s.strip().startswith('I'):\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnpiptg6y.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpnpiptg6y.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpnpiptg6y.py\", line 26,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    sentences = S.split('.')\n    return sum(1 for sentence\
    \ in sentences if sentence.startswith('I'))\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmponb18h3c.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmponb18h3c.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmponb18h3c.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    words = S.split()\n    if words:\n        return words[0]\
    \ == 'I'\n    return 0\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf28ltcta.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpf28ltcta.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpf28ltcta.py\", line 24,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return 0\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm4hwzhnh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpm4hwzhnh.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpm4hwzhnh.py\", line 19,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    sentences = [sentence.strip() for sentence in S.split('.\
    \ ')]\n    return len([sentence for sentence in sentences if sentence.startswith('I')])\n\
    \n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkcgpbxa3.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpkcgpbxa3.py\", line 27,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkcgpbxa3.py\", line 20,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 for s in S.split('.') if s.startswith('I'))\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx1sior63.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpx1sior63.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpx1sior63.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    sentences = S.split('.')\n    sentences += S.split('?')\n\
    \    sentences += S.split('!')\n    count = 0\n    for sentence in sentences:\n\
    \        if sentence.strip().startswith('I'):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpih5aav0x.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpih5aav0x.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpih5aav0x.py\", line 25,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 0
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    sentences = S.split(\". \")\n    boredoms = 0\n    for\
    \ sentence in sentences:\n        words = sentence.split(\" \")\n        if words[0]\
    \ == \"I\":\n            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return S.count('I')\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx_g4m97n.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpx_g4m97n.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpx_g4m97n.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # your code here\n    S = S.split()\n    count = 0\n \
    \   while 'I' in S:\n        count += 1\n        S.remove('I')\n    return count\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp87vchdui.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp87vchdui.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp87vchdui.py\", line 27,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.') + S.split('?')\
    \ + S.split('!')\n    for sentence in sentences:\n        words = sentence.split()\n\
    \        if words:\n            if words[0] == 'I':\n                boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp6xls242.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpp6xls242.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpp6xls242.py\", line 26,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 for x in S.split('.') if x.strip().startswith('I'))\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1r4pz2yz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp1r4pz2yz.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp1r4pz2yz.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    matches = re.findall(r'I.*[\\.\\?\\!]', S)\n    return\
    \ len(matches)\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0gnp71as.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp0gnp71as.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0gnp71as.py\", line 18,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp0gnp71as.py\"\
    , line 13, in is_bored\n    matches = re.findall(r'I.*[\\.\\?\\!]', S)\nNameError:\
    \ name 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    sentences = S.split('.')\n    boredoms = 0\n    for sentence\
    \ in sentences:\n        if sentence[0] == 'I':\n            boredoms += 1\n \
    \   return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg4n650c1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg4n650c1.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpg4n650c1.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    for sentence in re.split('\\.|\\?|!',\
    \ S):\n        if sentence.startswith('I'):\n            boredom += 1\n    return\
    \ boredom\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmcq45kwv.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpmcq45kwv.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpmcq45kwv.py\", line 20,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpmcq45kwv.py\"\
    , line 14, in is_bored\n    for sentence in re.split('\\.|\\?|!', S):\nNameError:\
    \ name 're' is not defined\n"
  stdout: ''
  timestamp: 1659823063
