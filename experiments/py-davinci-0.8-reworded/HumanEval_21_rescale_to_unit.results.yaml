language: py
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    _min, _max = min(numbers),\
    \ max(numbers)\n    if _min == _max:\n        return [0.5] * len(numbers)\n  \
    \  return [(val - _min) / (_max - _min) for val in numbers]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    largest = max(numbers)\n\
    \    smallest = min(numbers)\n    factor = 1 / (largest - smallest)\n    return\
    \ [(x - smallest) * factor for x in numbers]\n\n\ndef check(candidate):\n    assert\
    \ candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5,\
    \ 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0,\
    \ 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    smallest = min(numbers)\n\
    \    largest = max(numbers)\n    range_of_values = largest - smallest\n    numbers_minus_smallest\
    \ = [number - smallest for number in numbers]\n    return [number / range_of_values\
    \ for number in numbers_minus_smallest]\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_value = min(numbers)\n\
    \    max_value = max(numbers)\n    return [ (n - min_value) / (max_value - min_value)\
    \ for n in numbers ]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if (len(numbers) <=\
    \ 1):\n        raise ValueError('At least two elements required')\n    max_num\
    \ = max(numbers)\n    min_num = min(numbers)\n    range_num = max_num - min_num\n\
    \    return [ (num - min_num) / range_num for num in numbers ]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    maximum = max(numbers)\n\
    \    minimum = min(numbers)\n    f = lambda n: (n - minimum) / (maximum - minimum)\n\
    \    return list(map(f, numbers))\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # find the min and max\
    \ numbers in the list\n    # apply a linear transformation\n    # return the resulting\
    \ list\n    numbers = [float(n) for n in numbers]\n    minimum = min(numbers)\n\
    \    maximum = max(numbers)\n    new_numbers = []\n    for number in numbers:\n\
    \        new_numbers.append((number - minimum) / (maximum - minimum))\n    return\
    \ new_numbers\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0,\
    \ 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [(n - min(numbers))\
    \ / (max(numbers) - min(numbers)) for n in numbers]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    smallest = min(numbers)\n\
    \    largest = max(numbers)\n    new_numbers = []\n    for number in numbers:\n\
    \        new_numbers.append((number - smallest) / (largest - smallest))\n    return\
    \ new_numbers\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0,\
    \ 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n\
    \    max_num = max(numbers)\n    rescaled = []\n    for number in numbers:\n \
    \       rescaled.append((number - min_num) / (max_num - min_num))\n    return\
    \ rescaled\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0,\
    \ 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: -1
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min = min(numbers)\n\
    \    max = max(numbers)\n    if min == max:\n        return [0.5] * len(numbers)\n\
    \    else:\n        return [(x - min) / (max - min) for x in numbers]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6is03ae_.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp6is03ae_.py\", line 24,\
    \ in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp6is03ae_.py\", line\
    \ 17, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmp6is03ae_.py\"\
    , line 9, in rescale_to_unit\n    min = min(numbers)\nUnboundLocalError: local\
    \ variable 'min' referenced before assignment\n"
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n\
    \    max_num = max(numbers)\n    if min_num == max_num:\n        return [1] *\
    \ len(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\
    \ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n   \
    \ assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert numbers and len(numbers)\
    \ > 1\n\n    # compute the bounds of the input and the scaling factor\n    min_n\
    \ = min(numbers)\n    max_n = max(numbers)\n    factor = 1 / (max_n - min_n)\n\
    \n    # apply the transformation\n    return [(n - min_n) * factor for n in numbers]\n\
    \ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n   \
    \ assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    largest = max(numbers)\n\
    \    smallest = min(numbers)\n    if largest == smallest:\n        raise ValueError('largest\
    \ and smallest must be different')\n    return [(x - smallest) / (largest - smallest)\
    \ for x in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    minimum = min(numbers)\n\
    \    maximum = max(numbers)\n    min_max_diff = maximum - minimum\n    if min_max_diff\
    \ == 0:\n        return [0] * len(numbers)\n\n    return [\n        (n - minimum)\
    \ / min_max_diff\n        for n in numbers\n    ]\n\ndef check(candidate):\n \
    \   assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    largest = max(numbers)\n\
    \    smallest = min(numbers)\n    return [ (x - smallest) / (largest - smallest)\
    \ for x in numbers ]\n\nimport math\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    smallest = min(numbers)\n\
    \    largest = max(numbers)\n    if smallest == largest:\n        return [1.0\
    \ / len(numbers) for _ in numbers]\n    else:\n        return [(n - smallest)\
    \ / (largest - smallest) for n in numbers]\n\ndef check(candidate):\n    assert\
    \ candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5,\
    \ 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0,\
    \ 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    minimum = min(numbers)\n\
    \    maximum = max(numbers)\n    mean = sum(numbers) / len(numbers)\n    return\
    \ [(number - minimum) / (maximum - minimum) for number in numbers]\n\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    min_val = min(numbers)\n    max_val = max(numbers)\n    rescaled =\
    \ []\n    for number in numbers:\n        rescaled.append((number - min_val) /\
    \ (max_val - min_val))\n    return rescaled\n\ndef check(candidate):\n    assert\
    \ candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5,\
    \ 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0,\
    \ 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_value = min(numbers)\n\
    \    max_value = max(numbers)\n    if max_value == min_value:\n        raise ValueError('Can\\\
    't rescale a list of numbers with the same value')\n    return [(n - min_value)\
    \ / (max_value - min_value) for n in numbers]\ndef check(candidate):\n    assert\
    \ candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5,\
    \ 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0,\
    \ 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, \"List should contain at least two elements\"\n    assert all(isinstance(n,\
    \ float) for n in numbers), \"List should contain only floats\"\n    min_val =\
    \ min(numbers)\n    max_val = max(numbers)\n    factor = 1.0 / (max_val - min_val)\n\
    \    return [factor * (number - min_val) for number in numbers]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: -1
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    #TODO: Apply linear\
    \ transform to list of numbers, and return transformed list\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwoor8rtt.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpwoor8rtt.py\", line 18,\
    \ in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpwoor8rtt.py\", line\
    \ 11, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, 'The list must contain at least two elements'\n    smallest = min(numbers)\n\
    \    return [(n - smallest) / (max(numbers) - smallest) for n in numbers]\n\n\
    def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n   \
    \ check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert numbers, \"Empty\
    \ list\"\n    min_n = min(numbers)\n    max_n = max(numbers)\n    assert min_n\
    \ != max_n, \"All numbers are equal\"\n    return [(n - min_n) / (max_n - min_n)\
    \ for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    max_value = max(numbers)\n\
    \    min_value = min(numbers)\n    difference = max_value - min_value\n    return\
    \ [ (num - min_value) / difference for num in numbers ]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) == 0:\n\
    \        raise ValueError('list of numbers should contain at least one element')\n\
    \    max_numbers = max(numbers)\n    min_numbers = min(numbers)\n    return [(x\
    \ - min_numbers) / (max_numbers - min_numbers) for x in numbers]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    min_value = min(numbers)\n    max_value = max(numbers)\n    return\
    \ [(n - min_value) / (max_value - min_value) for n in numbers]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    s_min = min(numbers)\n    s_max = max(numbers)\n    return [(x - s_min)\
    \ / (s_max - s_min) for x in numbers]\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n\
    \        raise ValueError(\"There should be at least two elements!\")\n    max_num\
    \ = max(numbers)\n    min_num = min(numbers)\n    if max_num == min_num:\n   \
    \     raise ValueError(\"Elements should be different to each other!\")\n    return\
    \ [ (number - min_num) / (max_num - min_num) for number in numbers ]\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    min_num = min(numbers)\n    max_num = max(numbers)\n    assert max_num\
    \ != min_num\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\
    \ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n   \
    \ assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    min_val = min(numbers)\n    max_val = max(numbers)\n    assert min_val\
    \ != max_val\n    return [(n - min_val) / (max_val - min_val) for n in numbers]\n\
    \ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n   \
    \ assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) == 0:\n\
    \        raise ValueError(\"can't rescale empty array\")\n    if len(numbers)\
    \ == 1:\n        return [0.0]\n    max_number = max(numbers)\n    min_number =\
    \ min(numbers)\n    # If all numbers are the same, the returned result is a list\
    \ of the same number\n    # In the future, this could be changed to return a list\
    \ of all zeros\n    if max_number == min_number:\n        return [min_number]\
    \ * len(numbers)\n    # otherwise, linearly transform the input\n    else:\n \
    \       return [((x - min_number) / (max_number - min_number)) for x in numbers]\n\
    def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n   \
    \ check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Calculate min and\
    \ max values\n    min = numbers[0]\n    max = numbers[0]\n    for number in numbers:\n\
    \        if number < min:\n            min = number\n        if number > max:\n\
    \            max = number\n    # Calculate rescaled value for each number\n  \
    \  for i in range(len(numbers)):\n        numbers[i] = (numbers[i] - min) / (max\
    \ - min)\n    return numbers\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    largest = max(numbers)\n\
    \    smallest = min(numbers)\n    if largest == smallest:\n        # if all numbers\
    \ are equal\n        return [1] * len(numbers)\n    return [(x - smallest) / (largest\
    \ - smallest) for x in numbers]\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    max_value = max(numbers)\n    min_value = min(numbers)\n    assert\
    \ max_value > min_value\n    factor = 1.0 / (max_value - min_value)\n    return\
    \ [(x - min_value) * factor for x in numbers]\n\ndef check(candidate):\n    assert\
    \ candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5,\
    \ 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0,\
    \ 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    # get smallest and largest numbers in the list\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    # apply the transform to each number\n   \
    \ rescaled_numbers = [\n        (x - min_number) / (max_number - min_number)\n\
    \        for x in numbers\n    ]\n    return rescaled_numbers\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    smallest = min(numbers)\n\
    \    largest = max(numbers)\n    if smallest == largest:\n        return [0.5]\
    \ * len(numbers)\n    return [(n - smallest) / (largest - smallest) for n in numbers]\n\
    \ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n   \
    \ assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    minimum = min(numbers)\n\
    \    range = max(numbers) - minimum\n    return [(element - minimum) / range for\
    \ element in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n\
    \        raise ValueError('List must have at least two elements')\n    old_min\
    \ = min(numbers)\n    old_max = max(numbers)\n    old_range = old_max - old_min\n\
    \    # NB: if old_range is zero, this transform is a no-op\n    if old_range ==\
    \ 0:\n        return [0.5] * len(numbers)\n    # Apply the linear transform\n\
    \    new_range = 1\n    return [(n - old_min) * new_range / old_range for n in\
    \ numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0,\
    \ 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    rescaled_numbers = []\n\
    \    smallest, largest = min(numbers), max(numbers)\n    factor = 1 / (largest\
    \ - smallest)\n    for n in numbers:\n        rescaled_numbers.append((n - smallest)\
    \ * factor)\n    return rescaled_numbers\n\ndef check(candidate):\n    assert\
    \ candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5,\
    \ 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0,\
    \ 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    minimum = min(numbers)\n\
    \    maximum = max(numbers)\n    d = maximum - minimum\n    return [(n - minimum)\
    \ / d for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, 'List must have at least two elements'\n    min_val = min(numbers)\n \
    \   max_val = max(numbers)\n    range_ = max_val - min_val\n    return [(x - min_val)\
    \ / range_ for x in numbers]\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Determine the maximum\
    \ value of the list\n    max_value = max(numbers)\n    # Determine the minimum\
    \ value of the list\n    min_value = min(numbers)\n    # Determine the range of\
    \ the list\n    range_value = max_value - min_value\n    # New list to store rescaled\
    \ values\n    rescaled_list = list()\n    # Iterate over each of the numbers\n\
    \    for number in numbers:\n        # Transform the number: subtract the minimum,\
    \ and divide by the range\n        rescaled_number = (number - min_value) / range_value\n\
    \        # Add the rescaled number to the rescaled list\n        rescaled_list.append(rescaled_number)\n\
    \    # Return the rescaled list\n    return rescaled_list\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # TODO: implement me\n\
    \    # hint: use list comprehensions; maybe also zip (see python docs!)\n\n  \
    \  minimum = min(numbers)\n    maximum = max(numbers)\n    return [(x - minimum)\
    \ / (maximum - minimum) for x in numbers]\n\n\ndef check(candidate):\n    assert\
    \ candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5,\
    \ 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0,\
    \ 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    smallest, largest =\
    \ min(numbers), max(numbers)\n    factor = 1 / (largest - smallest)\n    return\
    \ [(n - smallest) * factor for n in numbers]\n\ndef check(candidate):\n    assert\
    \ candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5,\
    \ 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0,\
    \ 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    smallest = min(numbers)\n\
    \    difference = max(numbers) - smallest\n    return [(number - smallest) / difference\
    \ for number in numbers]\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # calculate the minimum\
    \ and maximum of the list\n    minimum = min(numbers)\n    maximum = max(numbers)\n\
    \    # apply the transformation for each element\n    transformed = [\n      \
    \  (element - minimum) / (maximum - minimum)\n        for element in numbers\n\
    \    ]\n    return transformed\n\nimport random\n\nfrom collections import Counter\n\
    \nfrom typing import List\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert all(type(num)\
    \ is float for num in numbers)\n    if len(numbers) < 2:\n        raise ValueError(\"\
    Cannot rescale a list of less than two items\")\n    lowest = min(numbers)\n \
    \   highest = max(numbers)\n    return [(n - lowest) / (highest - lowest) for\
    \ n in numbers]\n\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))\nprint(rescale_to_unit([0.0,\
    \ 10.0]))\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n\
    \    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '[0.0, 0.25, 0.5, 0.75, 1.0]

    [0.0, 1.0]

    '
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val, max_val = min(numbers),\
    \ max(numbers)\n    return [(n - min_val) / (max_val - min_val) for n in numbers]\n\
    \ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n   \
    \ assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n    diff\
    \ = max_number - min_number\n    return [(number - min_number) / diff for number\
    \ in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0,\
    \ 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    nmin = min(numbers)\n\
    \    nmax = max(numbers)\n    return [float(n - nmin) / (nmax - nmin) for n in\
    \ numbers]\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0,\
    \ 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_n = min(numbers)\n\
    \    max_n = max(numbers)\n    return [(n - min_n) / (max_n - min_n) for n in\
    \ numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0,\
    \ 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # type checking\n  \
    \  if not isinstance(numbers, list):\n        raise TypeError(\"Argument must\
    \ be a list\")\n    if len(numbers) < 2:\n        raise ValueError(\"Argument\
    \ must have at least two elements\")\n    for number in numbers:\n        if not\
    \ isinstance(number, float):\n            raise TypeError(\"Argument must be a\
    \ list of numbers\")\n\n    # main functionality\n    assert len(numbers) >= 2\n\
    \    least = min(numbers)\n    greatest = max(numbers)\n    if least == greatest:\n\
    \        return [1] * len(numbers)\n    else:\n        return [((num - least)\
    \ / (greatest - least)) for num in numbers]\n\ndef check(candidate):\n    assert\
    \ candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5,\
    \ 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0,\
    \ 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: -1
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    smallest = min(numbers)\n    largest = max(numbers)\n    assert smallest\
    \ != largest\n    def scale(number: float) -> float:\n        return (number -\
    \ smallest) / (largest - smallest)\n    return [scale(number) for number in numbers]\n\
    \n@pytest.mark.parametrize('a, b, expected', [\n    pytest.param(1.0, 2.0, 3.0,\
    \ id='simple'),\n    pytest.param(1.0, -1.0, 0.0, id='inverted'),\n    pytest.param(0.0,\
    \ 0.0, 0.0, id='zero'),\n    pytest.param(1.0, 1.0, 2.0, id='same'),\n    pytest.param(1e10,\
    \ 1e-10, 1e10 + 1e-10, id='large'),\n    pytest.param(1e-10, 1e10, 1e10 + 1e-10,\
    \ id='small'),\n])\ndef check(candidate):\n    assert candidate([2.0, 49.9]) ==\
    \ [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuvbxfdqh.py\", line\
    \ 17, in <module>\n    @pytest.mark.parametrize('a, b, expected', [\nNameError:\
    \ name 'pytest' is not defined. Did you mean: 'bytes'?\n"
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    largest = max(numbers)\n\
    \    smallest = min(numbers)\n    numbers = [(x - smallest) / (largest - smallest)\
    \ for x in numbers]\n    return numbers\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n\
    \        raise ValueError(\"List is too short, must have at least two elements\"\
    )\n    min_value = min(numbers)\n    range_value = max(numbers) - min_value\n\
    \    return [(x - min_value) / range_value for x in numbers]\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    smallest = min(numbers)\n\
    \    largest = max(numbers)\n    factor = 1 / (largest - smallest)\n    return\
    \ [factor * (n - smallest) for n in numbers]\n\n\ndef check(candidate):\n    assert\
    \ candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5,\
    \ 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0,\
    \ 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_value, max_value\
    \ = min(numbers), max(numbers)\n    span = max_value - min_value\n    # to avoid\
    \ a divide by zero error\n    if span == 0:\n        return [0.5] * len(numbers)\n\
    \    return [(value - min_value) / span for value in numbers]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, \"List of numbers should be at least 2 elements\"\n    smallest, largest\
    \ = min(numbers), max(numbers)\n    assert smallest != largest, \"List of numbers\
    \ cannot have all the same values\"\n    return [(n - smallest) / (largest - smallest)\
    \ for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    minn = min(numbers)\n\
    \    maxx = max(numbers)\n    if minn == maxx:\n        # we have a degenerate\
    \ list\n        return [0.5] * len(numbers)\n    return [(x - minn) / (maxx -\
    \ minn) for x in numbers]\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    smallest, largest =\
    \ min(numbers), max(numbers)\n    if smallest == largest:\n        return [0]\
    \ * len(numbers)\n    return [(n - smallest) / (largest - smallest) for n in numbers]\n\
    \nassert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75,\
    \ 1.0]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n\
    \    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, 'numbers must have at least two elements'\n    max_value = max(numbers)\n\
    \    min_value = min(numbers)\n    assert max_value != min_value, 'max and min\
    \ values must be different'\n    transformed_numbers = [\n        (number - min_value)\
    \ / (max_value - min_value)\n        for number in numbers\n    ]\n    return\
    \ transformed_numbers\n\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: -1
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    sorted_numbers = sorted(numbers)\n\
    \    scaled_down = [n / sorted_numbers[-1] for n in sorted_numbers]\n    scaled_up\
    \ = [s * (1 - 0) + 0 for s in scaled_down]\n    return scaled_up\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpipe4rh8h.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpipe4rh8h.py\", line 22,\
    \ in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpipe4rh8h.py\", line\
    \ 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    max_n = max(numbers)\n    min_n = min(numbers)\n    if max_n == min_n:\n\
    \        return [0.5] * len(numbers)\n    else:\n        return [(n - min_n) /\
    \ (max_n - min_n) for n in numbers]\n\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n\
    \        raise Exception(\"Need at least two numbers to rescale!\")\n    rescaled\
    \ = [ (n-min(numbers))/(max(numbers)-min(numbers)) for n in numbers ]\n    return\
    \ rescaled\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0,\
    \ 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number, max_number\
    \ = min(numbers), max(numbers)\n    if (min_number == max_number):\n        return\
    \ [0.5] * len(numbers)\n    return [((n - min_number) / (max_number - min_number))\
    \ for n in numbers]\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    smallest, largest =\
    \ min(numbers), max(numbers)\n    a, b = smallest, largest - smallest\n    return\
    \ [ (x - a) / b for x in numbers ]\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n\
    \        raise ValueError(\"List of numbers must contain at least two elements\"\
    )\n    return [(number - min(numbers)) / (max(numbers) - min(numbers)) for number\
    \ in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0,\
    \ 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n\
    \        raise ValueError(\"The list must contain at least two elements.\")\n\
    \    maximum = max(numbers)\n    minimum = min(numbers)\n    return [(x - minimum)\
    \ / (maximum - minimum) for x in numbers]\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number, max_number\
    \ = min(numbers), max(numbers)\n    if min_number == max_number:\n        return\
    \ [1.0 for n in numbers]\n    denominator = max_number - min_number\n    return\
    \ [(n - min_number) / denominator for n in numbers]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert numbers and all(isinstance(n,\
    \ float) for n in numbers), \\\n        'All numbers must be floats, and the list\
    \ must not be empty.'\n    if len(numbers) == 1:\n        return [1]\n    mn,\
    \ mx = min(numbers), max(numbers)\n    return [(n - mn) / (mx - mn) for n in numbers]\n\
    \n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n \
    \   assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    minimum, maximum = min(numbers), max(numbers)\n    assert minimum\
    \ < maximum\n    return [(x - minimum) / (maximum - minimum) for x in numbers]\n\
    \n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n \
    \   assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: -1
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    max_num = max(numbers)\n\
    \    min_num = min(numbers)\n    return [num - min_num for num in numbers]\n\n\
    def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n   \
    \ check(rescale_to_unit)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbfmbqyhq.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpbfmbqyhq.py\", line 21,\
    \ in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpbfmbqyhq.py\", line\
    \ 14, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_value = min(numbers)\n\
    \    max_value = max(numbers)\n    if min_value == max_value:\n        return\
    \ [0] * len(numbers)\n    return [ (num - min_value) / (max_value - min_value)\
    \ for num in numbers ]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: -1
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return rescale(numbers,\
    \ 0, 1)\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n\
    \    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxz9d1zk.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpyxz9d1zk.py\", line 19,\
    \ in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpyxz9d1zk.py\", line\
    \ 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpyxz9d1zk.py\"\
    , line 9, in rescale_to_unit\n    return rescale(numbers, 0, 1)\nNameError: name\
    \ 'rescale' is not defined\n"
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, 'The array must have at least two elements to be rescaled'\n    min_val\
    \ = min(numbers)\n    max_val = max(numbers)\n    assert max_val != min_val, 'If\
    \ the array has equal values for min and max, it cannot be rescaled'\n    return\
    \ [\n        (num - min_val) / (max_val - min_val)\n        for num in numbers\n\
    \    ]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n\
    \    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    minimum, maximum = min(numbers),\
    \ max(numbers)\n    # Case 1: The list is constant => min == max\n    if maximum\
    \ == minimum:\n        return [0] * len(numbers)\n    return [(x - minimum) /\
    \ (maximum - minimum) for x in numbers]\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: -1
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, \"List size must be at least 2\"\n    if len(numbers) == 2:\n        return\
    \ [0.0, 1.0]\n    else:\n        return [(x - min(numbers)) / (max(numbers) -\
    \ min(numbers)) for x in numbers]\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnqpffsmo.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpnqpffsmo.py\", line 23,\
    \ in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpnqpffsmo.py\", line\
    \ 17, in check\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Starting with 1.0\
    \ and -1.0 allows to handle negative numbers correctly\n    new_min, new_max =\
    \ 1.0, -1.0\n    old_min, old_max = min(numbers), max(numbers)\n    for n in numbers:\n\
    \        scaled = (n - old_min) / (old_max - old_min)\n        if scaled < new_min:\n\
    \            new_min = scaled\n        if scaled > new_max:\n            new_max\
    \ = scaled\n    return [((n - old_min) / (old_max - old_min)) * (new_max - new_min)\
    \ + new_min for n in numbers]\n\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, \"List of at least two numbers must be given!\"\n    smallest = min(numbers)\n\
    \    largest = max(numbers)\n    if largest == smallest:\n        raise ValueError(\"\
    Largest and smallest numbers cannot be the same!\")\n    return [(x - smallest)\
    \ / (largest - smallest) for x in numbers]\n\ndef check(candidate):\n    assert\
    \ candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5,\
    \ 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0,\
    \ 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if not numbers:\n  \
    \      raise ValueError(\"No numbers given\")\n    # Find the minimum and maximum\
    \ values\n    min_val = min(numbers)\n    max_val = max(numbers)\n    if min_val\
    \ == max_val:\n        return [0.5] * len(numbers)\n    return [(x - min_val)\
    \ / (max_val - min_val) for x in numbers]\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n\
    \        raise ValueError(f\"len(numbers) == {len(numbers)} < 2: not enough numbers\
    \ to rescale\")\n    # Find the minimum and maximum of the input\n    min_x =\
    \ min(numbers)\n    max_x = max(numbers)\n    if min_x == max_x:\n        raise\
    \ ValueError(f\"The list of numbers is uniformly {min_x}: no input for rescaling\"\
    )\n    # Rescale the number\n    return [(x - min_x) / (max_x - min_x) for x in\
    \ numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0,\
    \ 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, 'Cannot rescale a list with fewer than two elements'\n    sorted_numbers\
    \ = sorted(numbers)\n    minimum = sorted_numbers[0]\n    maximum = sorted_numbers[-1]\n\
    \    range_of_numbers = maximum - minimum\n    return [(number - minimum) / range_of_numbers\
    \ for number in numbers]\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert(len(numbers)\
    \ >= 2)\n    min_value = min(numbers)\n    max_value = max(numbers)\n    assert(min_value\
    \ != max_value)\n    return [(x - min_value) / (max_value - min_value) for x in\
    \ numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0,\
    \ 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number, max_number\
    \ = min(numbers), max(numbers)\n    denom = max_number - min_number\n    return\
    \ [(x - min_number) / denom for x in numbers]\n\ndef check(candidate):\n    assert\
    \ candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5,\
    \ 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0,\
    \ 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [(n - min(numbers))\
    \ / (max(numbers) - min(numbers)) for n in numbers]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_n = min(numbers)\n\
    \    max_n = max(numbers)\n    range_n = max_n - min_n\n    return [(n - min_n)\
    \ / range_n for n in numbers]\n\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n\
    \        raise ValueError(\"Need at least two elements in list\")\n    _min, _max\
    \ = min(numbers), max(numbers)\n    return [(_x - _min) / (_max - _min) for _x\
    \ in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0,\
    \ 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    sorted_numbers = sorted(numbers)\n\
    \    max_number = sorted_numbers[-1]\n    min_number = sorted_numbers[0]\n   \
    \ range_number = max_number - min_number\n    if range_number == 0:\n        return\
    \ [0] * len(numbers)\n    return [\n        (x - min_number) / range_number\n\
    \        for x in numbers\n    ]\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # define lowest and\
    \ highest value found in the list\n    lowest = min(numbers)\n    highest = max(numbers)\n\
    \    if lowest == highest:\n        return numbers\n    # define a factor of transformation\n\
    \    factor = 1 / (highest - lowest)\n    # apply the transformation to the list\n\
    \    return [factor * (number - lowest) for number in numbers]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    minimum = min(numbers)\n\
    \    maximun = max(numbers)\n    spread = maximun - minimum\n    return [ (number\
    \ - minimum) / spread for number in numbers ]\n\nprint(rescale_to_unit([10.0,\
    \ 5.0, 1.0, 5.0, 20.0]))\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '[0.47368421052631576, 0.21052631578947367, 0.0, 0.21052631578947367, 1.0]

    '
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    largest = max(numbers)\n    smallest = min(numbers)\n    return [(x\
    \ - smallest) / (largest - smallest) for x in numbers]\n\nassert rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n\
    \        raise ValueError(\"Need at least two numbers for rescaling\")\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    if min_number == max_number:\n\
    \        raise ValueError(\"Minimum and maximum value are the same; cannot rescale\"\
    )\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\
    def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n   \
    \ check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    smallest = min(numbers)\n\
    \    scaling_factor = 1/(max(numbers) - smallest)\n    return [\n        scaling_factor\
    \ * (num - smallest)\n        for num in numbers\n    ]\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) == 0:\n\
    \        raise ValueError(\"Given list of numbers cannot be empty\")\n    if len(numbers)\
    \ == 1:\n        raise ValueError(\"Given list of numbers must contain at least\
    \ two elements\")\n    min_val = min(numbers)\n    max_val = max(numbers)\n  \
    \  if min_val == max_val:\n        return [0.0] * len(numbers)\n    return [(x\
    \ - min_val) / (max_val - min_val) for x in numbers]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Calcualte the minimum\
    \ and maximum values of the input list\n    min_value, max_value = min(numbers),\
    \ max(numbers)\n    # Calculate the difference between the minimum and maximum\
    \ values\n    range_value = max_value - min_value\n    # If all the numbers in\
    \ the input list are the same, the min value would be equal to the max value,\n\
    \    # in this case we return a list with a single number\n    if range_value\
    \ == 0:\n        return [0.5]\n    # Calculate the distance to the max value of\
    \ each number in the input list\n    scale_values = [((value - min_value) / range_value)\
    \ for value in numbers]\n    return scale_values\ndef check(candidate):\n    assert\
    \ candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5,\
    \ 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0,\
    \ 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # a \"duck type\" --\
    \ no type specified\n    # numbers: List[float]\n    max_num = max(numbers)\n\
    \    min_num = min(numbers)\n    # set largest number to 1\n    for i in range(len(numbers)):\n\
    \        numbers[i] = (numbers[i] - min_num) / (max_num - min_num)\n    return\
    \ numbers\n\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_x = min(numbers)\n\
    \    max_x = max(numbers)\n    return [(x - min_x) / (max_x - min_x) for x in\
    \ numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0,\
    \ 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    largest_num = max(numbers)\n\
    \    smallest_num = min(numbers)\n    scaled_to_unit = []\n    for num in numbers:\n\
    \        scaled_to_unit.append((num - smallest_num) / (largest_num - smallest_num))\n\
    \    return scaled_to_unit\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Old implementation\n\
    \    #\n    # max_value = max(numbers)\n    # min_value = min(numbers)\n    #\
    \ numbers_rescaled = []\n    #\n    # for number in numbers:\n    #     numbers_rescaled.append((number\
    \ - min_value) / (max_value - min_value))\n    #\n    # return numbers_rescaled\n\
    \n    # New implementation\n    assert len(numbers) > 1, \"List has to have at\
    \ least two elements\"\n    max_value = max(numbers)\n    min_value = min(numbers)\n\
    \    return [(number - min_value) / (max_value - min_value) for number in numbers]\n\
    \n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n \
    \   assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: -1
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Filled-in implementation\n\
    \    scaling_factor = 1.0 / max(numbers)\n    return [scaling_factor * number\
    \ for number in numbers]\n\n\nassert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\
    \ == [0.0, 0.25, 0.5, 0.75, 1.0]\n\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmuxrdrdj.py\", line\
    \ 14, in <module>\n    assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n\
    \        raise ValueError('There must be at least two elements in the list')\n\
    \    # Find the lowest and highest number in list\n    lowest = min(numbers)\n\
    \    highest = max(numbers)\n    # Apply a linear transform to each element, and\
    \ then return the transformed list\n    scaled = [(i - lowest) / (highest - lowest)\
    \ for i in numbers]\n    return scaled\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_value = min(numbers)\n\
    \    max_value = max(numbers)\n    # hint: (x - min) / (max - min)\n    return\
    \ [(x - min_value) / (max_value - min_value) for x in numbers]\n\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n\
    \        raise ValueError(\"List is of length %d, has to be at least 2\" % len(numbers))\n\
    \    r = numbers[:]\n    r.sort()\n    return [((n - r[0]) / (r[-1] - r[0])) for\
    \ n in numbers]\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n\
    \    max_num = max(numbers)\n    if max_num == min_num:\n        return [1] *\
    \ len(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\
    \ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n   \
    \ assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # find the range and\
    \ the min\n    smallest, largest = min(numbers), max(numbers)\n    assert smallest\
    \ != largest\n    # find the distance between each number and the smallest, divide\
    \ by the range\n    new_scale = [ (x - smallest) / (largest - smallest) for x\
    \ in numbers ]\n    return new_scale\n\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    min_value = min(numbers)\n    max_value = max(numbers)\n    return\
    \ [(x - min_value) / (max_value - min_value) for x in numbers]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # check the number of\
    \ elements\n    if len(numbers) < 2:\n        raise ValueError(\"The number of\
    \ elements cannot be less than 2\")\n    # calculate the minimum and maximum values\
    \ in the list\n    min_value = min(numbers)\n    max_value = max(numbers)\n  \
    \  # calculate the scaling factor\n    k = 1 / (max_value - min_value)\n    #\
    \ rescale the list\n    return [(n - min_value) * k for n in numbers]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    max_value = max(numbers)\n    min_value = min(numbers)\n    return\
    \ [\n        (number - min_value) / (max_value - min_value)\n        for number\
    \ in numbers\n    ]\n\nimport unittest\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if numbers is None or\
    \ len(numbers) == 0:\n        return None\n    min_val = min(numbers)\n    max_val\
    \ = max(numbers)\n    if min_val == max_val:\n        return list(numbers)\n \
    \   return [(x - min_val) / (max_val - min_val) for x in numbers]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, 'Cannot rescale a list with fewer than two elements'\n    largest = max(numbers)\n\
    \    smallest = min(numbers)\n    return [(i - smallest) / (largest - smallest)\
    \ for i in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    smallest = min(numbers)\n\
    \    largest = max(numbers)\n    denominator = largest - smallest\n    return\
    \ [ (n - smallest) / denominator for n in numbers ]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, \"Can't scale less than two numbers\"\n    assert isinstance(numbers,\
    \ list), \"numbers need to be in a list\"\n    assert all(type(x) == float for\
    \ x in numbers), \"numbers need to be floats\"\n    highest = max(numbers)\n \
    \   lowest = min(numbers)\n    rescaled = [((x - lowest) / (highest - lowest))\
    \ for x in numbers]\n    return rescaled\n\nimport unittest\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if numbers is None or\
    \ len(numbers) < 2:\n        raise Exception(\"numbers must be non-empty, and\
    \ contain at least two elements\")\n    smallest = min(numbers)\n    largest =\
    \ max(numbers)\n    if smallest == largest:\n        raise Exception(\"numbers\
    \ must contain at least two distinct values\")\n    return [(n - smallest) / (largest\
    \ - smallest) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n\
    \        raise ValueError(\"List cannot have less than 2 numbers\")\n    sorted_numbers\
    \ = sorted(numbers)\n    biggest_number = sorted_numbers[-1]\n    smallest_number\
    \ = sorted_numbers[0]\n    return [(number - smallest_number) / (biggest_number\
    \ - smallest_number) for number in numbers]\n\ndef check(candidate):\n    assert\
    \ candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5,\
    \ 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0,\
    \ 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: -1
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    new_numbers = [None]\
    \ * len(numbers)\n    min_val = min(numbers)\n    new_numbers[0] = 0.0\n    max_val\
    \ = max(numbers)\n    new_numbers[-1] = 1.0\n    for i in range(1, len(numbers)\
    \ - 1):\n        new_numbers[i] = (numbers[i] - min_val) / (max_val - min_val)\n\
    \    return new_numbers\n\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyjcn8khn.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpyjcn8khn.py\", line 26,\
    \ in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpyjcn8khn.py\", line\
    \ 20, in check\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, \"Cannot rescale 1 number, so least 2 needed\"\n    biggest = max(numbers)\n\
    \    smallest = min(numbers)\n    assert biggest != smallest, \"All numbers must\
    \ be different\"\n    return [(number - smallest) / (biggest - smallest) for number\
    \ in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0,\
    \ 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n\
    \        raise ValueError('The list must contain at least two elements')\n   \
    \ max = numbers[0]\n    min = numbers[0]\n    for number in numbers:\n       \
    \ if number > max:\n            max = number\n        if number < min:\n     \
    \       min = number\n    if max == min:\n        raise ValueError('The list must\
    \ contain numbers that differ from each other')\n    coefficient = 1 / (max -\
    \ min)\n    return [coefficient * (number - min) for number in numbers]\n\ndef\
    \ check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n   \
    \ check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    minimum = min(numbers)\n\
    \    maximum = max(numbers)\n    # because it's a list of floats, use float in\
    \ the division\n    denom = maximum - minimum\n    return [(element - minimum)\
    \ / denom for element in numbers]\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n\
    \        raise ValueError(\"At least two points are required to rescale_to_unit\
    \ a list\")\n    cur_min = numbers[0]\n    cur_max = numbers[0]\n    for num in\
    \ numbers:\n        if num < cur_min:\n            cur_min = num\n        if num\
    \ > cur_max:\n            cur_max = num\n    return [\n        (num - cur_min)\
    \ / (cur_max - cur_min)\n        for num in numbers\n    ]\n\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Ensure inputs are\
    \ valid\n    if not numbers:\n        raise ValueError(\"List of numbers cannot\
    \ be empty\")\n    if len(numbers) == 1:\n        raise ValueError(\"List of numbers\
    \ must have at least two elements\")\n\n    # Obtain the minimum and maximum value\
    \ from the list\n    numbers_min = min(numbers)\n    numbers_max = max(numbers)\n\
    \n    # We may be unable to rescale the list of numbers, so catch any possible\
    \ exceptions\n    try:\n        # Apply the linear transform from the minimum\
    \ value to 0 and from the maximum value to 1\n        numbers_rescaled = [(number\
    \ - numbers_min) / (numbers_max - numbers_min) for number in numbers]\n    except\
    \ ZeroDivisionError:\n        raise ValueError(\"List of numbers has equal minimum\
    \ and maximum values\")\n\n    return numbers_rescaled\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n\
    \    max_val = max(numbers)\n    return [(n - min_val) / (max_val - min_val) for\
    \ n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) ==\
    \ [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(numbers)\n\
    \    range_number = max(numbers) - min_number\n    return [(number - min_number)\
    \ / range_number for number in numbers]\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: -1
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    # Scale so that the maximum (after absolute value) is 1.0\n    abs_max\
    \ = max(abs(num) for num in numbers)\n    scaled = [num / abs_max for num in numbers]\n\
    \    # Shift so that the minimum is 0.0\n    min_scaled = min(scaled)\n    rescaled\
    \ = [num - min_scaled for num in scaled]\n    return rescaled\n\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8m4bk208.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp8m4bk208.py\", line 27,\
    \ in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp8m4bk208.py\", line\
    \ 20, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # This is the simplest\
    \ way to do it, but it is not the most efficient\n    # numbers_scaled = []\n\
    \    # min_value = min(numbers)\n    # max_value = max(numbers)\n    # for x in\
    \ numbers:\n    #     numbers_scaled.append((x - min_value) / (max_value - min_value))\n\
    \    # return numbers_scaled\n\n    # This is the more efficient way to do it\n\
    \    max_value = max(numbers)\n    min_value = min(numbers)\n    return [(x -\
    \ min_value) / (max_value - min_value) for x in numbers]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_v = min(numbers)\n\
    \    max_v = max(numbers)\n    if min_v == max_v:\n        return [1.0] * len(numbers)\n\
    \    return [(n - min_v) / (max_v - min_v) for n in numbers]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    largest = max(numbers)\n\
    \    smallest = min(numbers)\n    denominator = largest - smallest\n    return\
    \ [(number - smallest) / denominator for number in numbers]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Find the largest and\
    \ smallest number in the input list\n    largest_number = max(numbers)\n    smallest_number\
    \ = min(numbers)\n    # Take the difference between the two\n    difference =\
    \ largest_number - smallest_number\n    # Divide each number in the input list\
    \ by that difference\n    # Note that using [x / difference for x in numbers]\
    \ will result in an error if the difference between the two numbers is 0\n   \
    \ # If that's the case, set all numbers in the output list to 0\n    if difference\
    \ == 0:\n        return [0 for i in numbers]\n    return [((x - smallest_number)\
    \ / difference) for x in numbers]\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: -1
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n\
    \        raise ValueError('Not enough numbers to rescale')\n    numbers = sorted(numbers)\n\
    \    min = numbers[0]\n    max = numbers[-1]\n    # rescale to 0-1 range\n   \
    \ if max - min == 0:\n        # avoid division by zero (I have seen it happen)\n\
    \        return [0] * len(numbers)\n    else:\n        return [0] + [float(x -\
    \ min) / (max - min) for x in numbers[1:]]\n\n\ndef check(candidate):\n    assert\
    \ candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5,\
    \ 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0,\
    \ 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpspowbehw.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpspowbehw.py\", line 30,\
    \ in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpspowbehw.py\", line\
    \ 24, in check\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    max_num = max(numbers)\n\
    \    min_num = min(numbers)\n    return [(num - min_num) / (max_num - min_num)\
    \ for num in numbers]\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, \"List should have at least two items\"\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    new_list = []\n    for number in numbers:\n\
    \        new_number = (number - min_number) / (max_number - min_number)\n    \
    \    new_list.append(new_number)\n    return new_list\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    largest = max(numbers)\n\
    \    smallest = min(numbers)\n    scale = largest - smallest\n    return [(x -\
    \ smallest) / scale for x in numbers]\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    rescaled = []\n    highest\
    \ = max(numbers)\n    lowest = min(numbers)\n    for number in numbers:\n    \
    \    rescaled.append((number - lowest) / (highest - lowest))\n    return rescaled\n\
    \ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n   \
    \ assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: -1
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Check input\n    if\
    \ not isinstance(numbers, list):\n        raise TypeError(\"Argument should be\
    \ a list\")\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers\
    \ should have at least two elements\")\n    for number in numbers:\n        if\
    \ not isinstance(number, float):\n            raise TypeError(\"All elements of\
    \ the list should be numbers\")\n\n    # Calculate minimum and maximum values\
    \ from the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n  \
    \  # Compute linear transformation\n    # y' = mx + c\n    # where:\n    #   m\
    \ = (y2 - y1) / (x2 - x1)\n    #   c = y1 - mx1\n    m = 1 / (max_val - min_val)\n\
    \    c = -m * min_val\n\n    # Apply transformation to the input list\n    return\
    \ [m * number + c for number in numbers]\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1_tgmsgp.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp1_tgmsgp.py\", line 40,\
    \ in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp1_tgmsgp.py\", line\
    \ 33, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    s = min(numbers)\n \
    \   t = max(numbers)\n    return [ (x - s) / (t - s) for x in numbers ]\n\ndef\
    \ check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n   \
    \ check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, \"Must be two or more elements.\"\n    max_number = max(numbers)\n   \
    \ min_number = min(numbers)\n    return [(x - min_number) / (max_number - min_number)\
    \ for x in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, 'at least two numbers are required for rescaling'\n    min_value = min(numbers)\n\
    \    max_value = max(numbers)\n    assert min_value != max_value, 'all values\
    \ equal, cannot rescale'\n    return [(x - min_value) / (max_value - min_value)\
    \ for x in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # TODO: Add some assertions\
    \ or sanity checks\n    min_num, max_num = min(numbers), max(numbers)\n    denominator\
    \ = max_num - min_num\n    # Handle special case of all numbers being the same\n\
    \    if denominator == 0:\n        return [1 for _ in numbers]\n    return [(num\
    \ - min_num) / denominator for num in numbers]\n\ndef check(candidate):\n    assert\
    \ candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5,\
    \ 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0,\
    \ 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_n, max_n = min(numbers),\
    \ max(numbers)\n    return [ (n - min_n) / (max_n - min_n) for n in numbers ]\n\
    \ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n   \
    \ assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, \"Must have at least two numbers to rescale\"\n    max_value = max(numbers)\n\
    \    min_value = min(numbers)\n    res = []\n    for n in numbers:\n        if\
    \ max_value == min_value:\n            res.append(0.0)\n        else:\n      \
    \      res.append((n - min_value) / (max_value - min_value))\n    return res\n\
    \nfrom typing import List\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, 'This function is designed for at least two numbers'\n    # find min and\
    \ max number\n    min_ = min(numbers)\n    max_ = max(numbers)\n    # how much\
    \ do we need to add or subtract to all numbers to make the min value 0?\n    zero_adjustment\
    \ = -1 * min_\n    # how much do we need to multiply all numbers to make the max\
    \ value 1?\n    unit_adjustment = 1 / (max_ + zero_adjustment)\n    # Apply both\
    \ adjustments\n    return [unit_adjustment * (number + zero_adjustment) for number\
    \ in numbers]\n \n \ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_value, max_value\
    \ = min(numbers), max(numbers)\n    delta = max_value - min_value\n    if delta\
    \ == 0:\n        return [1.0] * len(numbers)\n    return [(element - min_value)\
    \ / delta for element in numbers]\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, 'need at least two elements'\n    biggest = max(numbers)\n    smallest\
    \ = min(numbers)\n    assert biggest != smallest, 'need at least two unique elements'\n\
    \    # find the linear transform that will convert\n    # the number biggest to\
    \ 1.0, smallest to 0.0, and every other number to\n    # a number on the interval\
    \ (0.0, 1.0)\n    return [(n - smallest) / (biggest - smallest) for n in numbers]\n\
    \ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n   \
    \ assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: -1
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if numbers[0] > numbers[1]:\n\
    \        numbers = list(reversed(numbers))\n    normalized_numbers = [\n     \
    \   (n - numbers[0]) / (numbers[-1] - numbers[0])\n        for n in numbers\n\
    \    ]\n    return normalized_numbers\n\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ivg9flu.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp0ivg9flu.py\", line 26,\
    \ in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp0ivg9flu.py\", line\
    \ 20, in check\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_value, max_value\
    \ = min(numbers), max(numbers)\n    return [\n        (number - min_value) / (max_value\
    \ - min_value)\n        for number in numbers\n    ]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert numbers, \"Cannot\
    \ normalize an empty list\"\n    xmin = min(numbers)\n    xmax = max(numbers)\n\
    \    assert xmax != xmin, \"Cannot normalize a list with a single value\"\n  \
    \  delta = xmax - xmin\n    return [(x - xmin) / delta for x in numbers]\n\ndef\
    \ check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n   \
    \ check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: -1
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Find the range of\
    \ values (max-min)\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    value_range = max_value - min_value\n    # Generate new numbers by min_value\
    \ + (value - min_value) / value_range\n    new_values = [min_value + (value -\
    \ min_value) / value_range for value in numbers]\n    return new_values\n\ndef\
    \ check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n   \
    \ check(rescale_to_unit)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwoquoun3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpwoquoun3.py\", line 25,\
    \ in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpwoquoun3.py\", line\
    \ 18, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    minimum = min(numbers)\n\
    \    maximum = max(numbers)\n    diff = maximum - minimum\n    if diff == 0:\n\
    \        diff = 1\n    return [(n - minimum) / diff for n in numbers]\n\n\ndef\
    \ check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n   \
    \ check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, \"List of numbers must have at least two elements\"\n    min_val = min(numbers)\n\
    \    max_val = max(numbers)\n    assert min_val != max_val, \"Minimum value {}\
    \ and maximum value {} are the same\".format(min_val, max_val)\n    return [(number\
    \ - min_val) / (max_val - min_val) for number in numbers]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    smallest = min(numbers)\n\
    \    largest = max(numbers)\n    return [\n        (number - smallest) / (largest\
    \ - smallest)\n        for number in numbers\n    ]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if numbers == []:\n\
    \        return []\n    else:\n        max_number = max(numbers)\n        min_number\
    \ = min(numbers)\n        if max_number == min_number:\n            return [0]\
    \ * len(numbers)\n        else:\n            return [(n - min_number) / (max_number\
    \ - min_number) for n in numbers]\n\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n\
    \    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num)\
    \ for num in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    sorted_numbers = sorted(numbers)\n\
    \    minimum = sorted_numbers[0]\n    maximum = sorted_numbers[-1]\n    scalar\
    \ = 1 / (maximum - minimum)\n    shifted_numbers = [ number - minimum for number\
    \ in numbers ]\n    return [ number * scalar for number in shifted_numbers ]\n\
    \ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n   \
    \ assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n\
    \        raise ValueError('numbers should be at least two elements long')\n  \
    \  mi = min(numbers)\n    mx = max(numbers)\n    return [(x - mi) / (mx - mi)\
    \ for x in numbers]\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: -1
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # TODO\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n   \
    \ assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb4hyzcda.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpb4hyzcda.py\", line 20,\
    \ in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpb4hyzcda.py\", line\
    \ 13, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpb4hyzcda.py\"\
    , line 10, in rescale_to_unit\n    raise NotImplementedError()\nNotImplementedError\n"
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    largest = max(numbers)\n    smallest = min(numbers)\n    return [\
    \ (n - smallest) / (largest - smallest) for n in numbers ]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) == 0:\n\
    \        raise ValueError(\"Rescaling list of numbers can't be empty\")\n    if\
    \ len(numbers) == 1:\n        return [0.0]\n    # Find the minimum and maximum\
    \ numbers in the list\n    min_num, max_num = min(numbers), max(numbers)\n   \
    \ # Find the denominator\n    denom = max_num - min_num\n    if denom == 0:\n\
    \        raise ValueError(\"Number list contains only one value\")\n    # Find\
    \ the numerator\n    numer = [num - min_num for num in numbers]\n    # Calculate\
    \ the rescaled values\n    rescaled = [num / denom for num in numer]\n    return\
    \ rescaled\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0,\
    \ 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n\
    \        raise ValueError('List of numbers must have at least two elements')\n\
    \    diff = max(numbers) - min(numbers)\n    if diff == 0:\n        raise ValueError('List\
    \ of numbers must have at least two distinct elements')\n    return [(n - min(numbers))\
    \ / diff for n in numbers]\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    minimum = min(numbers)\n\
    \    maximum = max(numbers)\n    range_of_scores = maximum - minimum\n    return\
    \ [(each_number - minimum) / range_of_scores for each_number in numbers]\n\ndef\
    \ check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n   \
    \ check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val, max_val = min(numbers),\
    \ max(numbers)\n    if max_val == min_val:\n        raise ValueError('max value\
    \ and min value are equal')\n    return [(x - min_val) / (max_val - min_val) for\
    \ x in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) ==\
    \ [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number, max_number\
    \ = min(numbers), max(numbers)\n    if min_number == max_number:\n        return\
    \ [0.5] * len(numbers)\n    else:\n        denominator = max_number - min_number\n\
    \        return [(number - min_number) / denominator for number in numbers]\n\
    \    \ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n\
    \    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, \"must have at least two numbers\"\n    largest = max(numbers)\n    smallest\
    \ = min(numbers)\n    diff = largest - smallest\n    if diff == 0:\n        return\
    \ [0] * len(numbers)\n    return [(n - smallest) / diff for n in numbers]\n\n\n\
    def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n   \
    \ check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    minimum, maximum = min(numbers),\
    \ max(numbers)\n    if minimum == maximum:\n        raise Exception(\"Cannot rescale\
    \ list\")\n    transformed = []\n    for number in numbers:\n        transformed.append((number\
    \ - minimum) / (maximum - minimum))\n    return transformed\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num, max_num = min(numbers),\
    \ max(numbers)\n    range_ = max_num - min_num\n    unit_numbers = []\n    for\
    \ num in numbers:\n        unit_numbers.append((num - min_num) / range_)\n   \
    \ return unit_numbers\n\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    largest, smallest =\
    \ max(numbers), min(numbers)\n    delta = largest - smallest\n    return [(n -\
    \ smallest) / delta for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, \"Input should have at least two elements\"\n    min_value = min(numbers)\n\
    \    max_value = max(numbers)\n    assert max_value != min_value, \"All elements\
    \ are equal\"\n    return [(x - min_value) / (max_value - min_value) for x in\
    \ numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0,\
    \ 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    x_min = min(numbers)\n\
    \    x_max = max(numbers)\n    new_min = 0\n    new_max = 1\n    return [(x -\
    \ x_min) / (x_max - x_min) * (new_max - new_min) + new_min for x in numbers]\n\
    \ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n   \
    \ assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    largest = max(numbers)\n    smallest = min(numbers)\n    diff = largest\
    \ - smallest\n    return [ (x - smallest) / diff for x in numbers ]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: -1
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    minimum = min(numbers)\n\
    \    maximum = max(numbers)\n    return [scale(number, minimum, maximum) for number\
    \ in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0,\
    \ 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju9cwz2w.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpju9cwz2w.py\", line 21,\
    \ in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpju9cwz2w.py\", line\
    \ 14, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpju9cwz2w.py\"\
    , line 11, in rescale_to_unit\n    return [scale(number, minimum, maximum) for\
    \ number in numbers]\n  File \"/tmp/tmpju9cwz2w.py\", line 11, in <listcomp>\n\
    \    return [scale(number, minimum, maximum) for number in numbers]\nNameError:\
    \ name 'scale' is not defined\n"
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    smallest, largest =\
    \ min(numbers), max(numbers)\n    return [(number - smallest) / (largest - smallest)\
    \ for number in numbers]\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n\
    \        raise ValueError(\"minimal size of list is 2\")\n    min_n = min(numbers)\n\
    \    max_n = max(numbers)\n    range_n = max_n - min_n\n    return [((n - min_n)\
    \ / range_n) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    largest, smallest =\
    \ max(numbers), min(numbers)\n    if largest == smallest:\n        return [0]\
    \ * len(numbers)\n    return [(number - smallest) / (largest - smallest) for number\
    \ in numbers]\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) ==\
    \ [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Find the maximum value\
    \ in the list\n    max_val = max(numbers)\n    # Find the minimum value in the\
    \ list\n    min_val = min(numbers)\n    # Subtract minimum from every value\n\
    \    # Divide every value by maximum (to rescale to [0, 1])\n    return [(number\
    \ - min_val) / (max_val - min_val) for number in numbers]\n\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, \"Use at least two numbers to apply transform\"\n    maximum = max(numbers)\n\
    \    minimum = min(numbers)\n    diff = maximum - minimum\n    return [ (number\
    \ - minimum) / diff for number in numbers ]\n\ndef check(candidate):\n    assert\
    \ candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5,\
    \ 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0,\
    \ 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, \"You need at least two numbers\"\n    min_n = min(numbers)\n    max_n\
    \ = max(numbers)\n    # if min_n and max_n are the same, return the same number\
    \ for each element\n    if min_n == max_n:\n        return [1.0] * len(numbers)\n\
    \    # otherwise, apply the transform\n    else:\n        return [(x - min_n)\
    \ / (max_n - min_n) for x in numbers]\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_n, max_n = min(numbers),\
    \ max(numbers)\n    if min_n == max_n:\n        return numbers\n    unit_numbers\
    \ = [(n - min_n) / (max_n - min_n) for n in numbers]\n    return unit_numbers\n\
    \ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n   \
    \ assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    max_number = max(numbers)\n\
    \    min_number = min(numbers)\n    scaled_to_unit = []\n    for n in numbers:\n\
    \        scaled_to_unit.append((n - min_number) / (max_number - min_number))\n\
    \    return scaled_to_unit\n\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\ndef\
    \ check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n   \
    \ check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, \"Need at least two numbers to rescale_to_unit\"\n    largest = max(numbers)\n\
    \    smallest = min(numbers)\n    if largest == smallest:\n        return [1.0]\
    \ * len(numbers)\n    else:\n        return [(n - smallest) / (largest - smallest)\
    \ for n in numbers]\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    min_value = min(numbers)\n    max_value = max(numbers)\n    if max_value\
    \ == min_value:\n        return [0.5] * len(numbers)\n    else:\n        return\
    \ [(x - min_value) / (max_value - min_value) for x in numbers]\n\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    min_value = min(numbers)\n    max_value = max(numbers)\n    return\
    \ [(number - min_value) / (max_value - min_value) for number in numbers]\n\ndef\
    \ check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n   \
    \ check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    assert all(numbers)\n\n    smallest = min(numbers)\n    largest =\
    \ max(numbers)\n    assert smallest != largest\n\n    return [ (i - smallest)\
    \ / (largest - smallest) for i in numbers ]\n\ndef check(candidate):\n    assert\
    \ candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5,\
    \ 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0,\
    \ 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # find the maximum value\n\
    \    max_value = max(numbers)\n    # find the minimum value\n    min_value = min(numbers)\n\
    \    # find the difference between the maximum and minimum values\n    difference\
    \ = max_value - min_value\n    # apply the linear transform to the list\n    transformed_numbers\
    \ = [0] * len(numbers)\n    for index, number in enumerate(numbers):\n       \
    \ transformed_numbers[index] = (number - min_value) / difference\n    return transformed_numbers\n\
    def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n   \
    \ check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    unit_numbers = []\n\
    \    min_value = min(numbers)\n    max_value = max(numbers)\n    divisor = max_value\
    \ - min_value\n    for number in numbers:\n        unit_numbers.append((number\
    \ - min_value) / divisor)\n    return unit_numbers\n\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: -1
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    min_value = min(numbers)\n    max_value = max(numbers)\n    assert\
    \ min_value != max_value\n    return [\n        (number - min_value) / (max_value\
    \ - min_value)\n        for number in numbers\n    ]\n\nprint(rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]))\nprint(rescale_to_unit([1.0, 1.0, 1.0, 1.0, 1.0]))\ndef\
    \ check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n   \
    \ check(rescale_to_unit)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz8pjucp4.py\", line\
    \ 19, in <module>\n    print(rescale_to_unit([1.0, 1.0, 1.0, 1.0, 1.0]))\n  File\
    \ \"/tmp/tmpz8pjucp4.py\", line 12, in rescale_to_unit\n    assert min_value !=\
    \ max_value\nAssertionError\n"
  stdout: '[0.0, 0.25, 0.5, 0.75, 1.0]

    '
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    largest = max(numbers)\n\
    \    smallest = min(numbers)\n    if largest != smallest:\n        range_ = largest\
    \ - smallest\n        numbers = [(x - smallest) / range_ for x in numbers]\n \
    \   return numbers\n\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    minimum = min(numbers)\n\
    \    maximum = max(numbers)\n    spread = maximum - minimum\n    assert spread\
    \ > 0\n    return [(number - minimum) / spread for number in numbers]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # find minimum and maximum\n\
    \    minimum, maximum = min(numbers), max(numbers)\n    # apply formula\n    rescaled\
    \ = [((n - minimum) / (maximum - minimum)) for n in numbers]\n    return rescaled\n\
    \ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n   \
    \ assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # We are basically finding\
    \ the value of\n    # (x - min(numbers)) / (max(numbers) - min(numbers))\n   \
    \ # for each number in the list\n    # We can do that with a for loop:\n    #\
    \ 1. find the smallest and largest number in the list\n    # 2. for each number\
    \ in the list, subtract the smallest number from it and divide by the difference\
    \ between the largest and smallest number\n    # 3. return the resulting list\n\
    \    smallest = min(numbers)\n    largest = max(numbers)\n    diff = largest -\
    \ smallest\n    return [(x - smallest) / diff for x in numbers]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    largest = max(numbers)\n    smallest = min(numbers)\n    assert smallest\
    \ != largest\n    unit_delta = 1 / (largest - smallest)\n    return [unit_delta\
    \ * (number - smallest) for number in numbers]\n\ndef check(candidate):\n    assert\
    \ candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5,\
    \ 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0,\
    \ 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # List[float] is annotated\
    \ for types.\n    # The annotation tells mypy to check that the argument to rescale_to_unit\
    \ is a list of float\n\n    # Get the smallest and largest numbers in the list.\n\
    \    smallest = min(numbers)\n    largest = max(numbers)\n\n    # Find the difference\
    \ between the largest and smallest, or 1 if they are the same.\n    # We will\
    \ divide by this later to ensure that the largest number becomes 1 and the smallest\n\
    \    # becomes 0.\n    scaled_difference = largest - smallest or 1\n\n    # Rescale\
    \ each number to be in the range 0 to 1 by subtracting the smallest number and\n\
    \    # dividing by the range.\n    rescaled = [(n - smallest) / scaled_difference\
    \ for n in numbers]\n\n    return rescaled\n\ndef check(candidate):\n    assert\
    \ candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5,\
    \ 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0,\
    \ 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n\
    \        raise ValueError(\"Cannot rescale a list of less than two elements\"\
    )\n    min_value = min(numbers)\n    max_value = max(numbers)\n    if min_value\
    \ == max_value:\n        raise ValueError(\"cannot rescale a list of all equal\
    \ values\")\n    elif min_value < 0:\n        raise ValueError(\"cannot rescale\
    \ a list containing negative values\")\n    else:\n        numbers_scaled = [(number\
    \ - min_value) / (max_value - min_value) for number in numbers]\n        return\
    \ numbers_scaled\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) ==\
    \ [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_, max_ = min(numbers),\
    \ max(numbers)\n    new_numbers = [x - min_ for x in numbers]\n    new_numbers\
    \ = [x / (max_ - min_) for x in new_numbers]\n    return new_numbers\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if numbers == [] or\
    \ len(numbers) == 1:\n        return []\n    max_num, min_num = max(numbers),\
    \ min(numbers)\n    denominator = max_num - min_num\n    if denominator == 0:\n\
    \        # avoid division by zero in case all numbers are the same\n        denominator\
    \ = 1\n    return [(num - min_num) / denominator for num in numbers]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    biggest = max(numbers)\n\
    \    smallest = min(numbers)\n    unit_numbers = []\n    for n in numbers:\n \
    \       unit_numbers.append((n - smallest) / (biggest - smallest))\n    return\
    \ unit_numbers\n\nassert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    min_n, max_n = min(numbers), max(numbers)\n    if min_n == max_n:\n\
    \        raise ValueError(\"min is equal to max, cannot rescale\")\n    return\
    \ [(n - min_n) / (max_n - min_n) for n in numbers]\n\ndef check(candidate):\n\
    \    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # First, find min and\
    \ max value:\n    min_value, max_value = min(numbers), max(numbers)\n    # Calculate\
    \ the scale of the linear transform:\n    scale = 1.0 / (max_value - min_value)\n\
    \    # Apply the linear transform\n    # (for each element: subtract min_value,\
    \ multiply by scale and round)\n    return [round((number - min_value) * scale,\
    \ 6) for number in numbers]\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    max_val = max(numbers)\n\
    \    min_val = min(numbers)\n    if max_val == min_val:\n        return [0] *\
    \ len(numbers)\n    return [(number - min_val) / (max_val - min_val) for number\
    \ in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0,\
    \ 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n\
    \    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    smallest = min(numbers)\n    largest = max(numbers)\n    # At this\
    \ point, we are guaranteed that min and max have at least two distinct values.\n\
    \n    factor = 1 / (largest - smallest)\n    return [(n - smallest) * factor for\
    \ n in numbers]\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9])\
    \ == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert\
    \ candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n\
    def test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
- exit_code: 0
  program: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) ->\
    \ List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # your code here\n \
    \   min_num = min(numbers)\n    max_num = max(numbers)\n    n = len(numbers)\n\
    \    for i in range(n):\n        numbers[i] = (numbers[i] - min_num) / (max_num\
    \ - min_num)\n    return numbers\n\ndef check(candidate):\n    assert candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n  \
    \  assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\
    \    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823388
