name: HumanEval_103_rounded_avg
language: py
prompt: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
  \ int]:\n    \"\"\"You are given two positive integers n and m, and your task is\
  \ to compute the\n    average of the integers from n through m (including n and\
  \ m). \n    Round the answer to the nearest integer and convert that to binary.\n\
  \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n\
  \    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n  \
  \  '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
  \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
  \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
  \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
  \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
  \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
  \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
  \    check(rounded_avg)\n\ntest_check()\n"
completions: ["    if n <= m:\n        rounded_avg = round(((n + m) / 2))\n      \
    \  return(bin(rounded_avg))\n    else:\n        return(-1)", "    if n > m:\n\
    \        return -1\n    else:\n        avg = int(sum(range(n, m+1))/(m-n+1) +\
    \ 0.5)\n        return bin(avg)", "    if n > m:\n        return -1\n    else:\n\
    \        binary = \"\"\n        sum = 0\n        for i in range(n, m+1):\n   \
    \         sum += i\n        sum = round(sum/(m-n+1))\n        while sum > 0:\n\
    \            if sum % 2 == 0:\n                binary = \"0\" + binary\n     \
    \       else:\n                binary = \"1\" + binary\n            sum = int(sum/2)\n\
    \        return \"0b\" + binary", "    if n > m:\n        return -1\n    avg =\
    \ sum(range(n, m + 1)) // (m - n + 1)\n    return '0b' + bin(avg)[2:]\n", "  \
    \  if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n      \
    \  return '0b' + bin(round(avg))[2:]", "    if n > m:\n        return -1\n   \
    \ else:\n        average = (n + m) / 2\n        average = math.ceil(average)\n\
    \        average = bin(average)\n        return average", "    # YOUR CODE HERE\n\
    \    if n>m:\n        return -1\n    else:\n        binary_num = 0\n        for\
    \ i in range(n,m+1):\n            binary_num += i\n        return bin(round(binary_num/(m-n+1)))\n",
  "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)\n",
  "    if n > m:\n        return -1\n    else:\n        return bin(round((n + m) /\
    \ 2))", "    if n > m:\n        return -1\n    else:\n        return bin(round((n\
    \ + m) / 2))", "    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n\
    \    return bin(avg)\n\nimport doctest\ndoctest.testmod()", "    if n > m:\n \
    \       return -1\n    else:\n        return bin(round((sum(range(n, m+1)))/(m-n+1)))\n",
  "    if n > m:\n        return -1\n    # Your code here\n    sum = 0\n    for i\
    \ in range(n, m+1):\n        sum += i\n    return bin(round(sum/(m-n+1)))\n",
  "    if n > m:\n        return -1\n    else:\n        return bin(round((m+n)/2))\n",
  "    if n > m:\n        return -1\n    else:\n        return bin(int(round((n +\
    \ m) / 2)))\n    \n    \n    \n    \n", "    if n > m:\n        return -1\n  \
    \  summ = n\n    count = 1\n    for i in range(n+1, m+1):\n        summ += i\n\
    \        count += 1\n    avg = summ / count\n    return '0b' + bin(round(avg))[2:]\n",
  "    if n > m:\n        return -1\n    else:\n        total = 0\n        for i in\
    \ range(n, m+1):\n            total += i\n        avg = total / (m-n+1)\n    \
    \    return bin(round(avg))\n", "    if n > m:\n        return -1\n    avg = round((n\
    \ + m) / 2)\n    return bin(avg)\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    pass\n",
  "    avg = (n + m) // 2\n    return bin(avg) if n <= m else -1"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
