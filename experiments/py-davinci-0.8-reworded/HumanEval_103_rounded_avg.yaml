name: HumanEval_103_rounded_avg
language: py
prompt: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
  \ int]:\n    \"\"\"You are given two positive integers n and m, and your task is\
  \ to compute the\n    average of the integers from n through m (including n and\
  \ m). \n    Round the answer to the nearest integer and convert that to binary.\n\
  \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n\
  \    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n  \
  \  '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
  \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
  \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
  \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
  \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
  \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
  \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
  \    check(rounded_avg)\n\ntest_check()\n"
completions: ["    if n <= m:\n        rounded_avg = round(((n + m) / 2))\n      \
    \  return(bin(rounded_avg))\n    else:\n        return(-1)", "    if n > m:\n\
    \        return -1\n    else:\n        avg = int(sum(range(n, m+1))/(m-n+1) +\
    \ 0.5)\n        return bin(avg)", "    if n > m:\n        return -1\n    else:\n\
    \        binary = \"\"\n        sum = 0\n        for i in range(n, m+1):\n   \
    \         sum += i\n        sum = round(sum/(m-n+1))\n        while sum > 0:\n\
    \            if sum % 2 == 0:\n                binary = \"0\" + binary\n     \
    \       else:\n                binary = \"1\" + binary\n            sum = int(sum/2)\n\
    \        return \"0b\" + binary", "    if n > m:\n        return -1\n    avg =\
    \ sum(range(n, m + 1)) // (m - n + 1)\n    return '0b' + bin(avg)[2:]\n", "  \
    \  if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n      \
    \  return '0b' + bin(round(avg))[2:]", "    if n > m:\n        return -1\n   \
    \ else:\n        average = (n + m) / 2\n        average = math.ceil(average)\n\
    \        average = bin(average)\n        return average", "    # YOUR CODE HERE\n\
    \    if n>m:\n        return -1\n    else:\n        binary_num = 0\n        for\
    \ i in range(n,m+1):\n            binary_num += i\n        return bin(round(binary_num/(m-n+1)))\n",
  "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)\n",
  "    if n > m:\n        return -1\n    else:\n        return bin(round((n + m) /\
    \ 2))", "    if n > m:\n        return -1\n    else:\n        return bin(round((n\
    \ + m) / 2))", "    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n\
    \    return bin(avg)\n\nimport doctest\ndoctest.testmod()", "    if n > m:\n \
    \       return -1\n    else:\n        return bin(round((sum(range(n, m+1)))/(m-n+1)))\n",
  "    if n > m:\n        return -1\n    # Your code here\n    sum = 0\n    for i\
    \ in range(n, m+1):\n        sum += i\n    return bin(round(sum/(m-n+1)))\n",
  "    if n > m:\n        return -1\n    else:\n        return bin(round((m+n)/2))\n",
  "    if n > m:\n        return -1\n    else:\n        return bin(int(round((n +\
    \ m) / 2)))\n    \n    \n    \n    \n", "    if n > m:\n        return -1\n  \
    \  summ = n\n    count = 1\n    for i in range(n+1, m+1):\n        summ += i\n\
    \        count += 1\n    avg = summ / count\n    return '0b' + bin(round(avg))[2:]\n",
  "    if n > m:\n        return -1\n    else:\n        total = 0\n        for i in\
    \ range(n, m+1):\n            total += i\n        avg = total / (m-n+1)\n    \
    \    return bin(round(avg))\n", "    if n > m:\n        return -1\n    avg = round((n\
    \ + m) / 2)\n    return bin(avg)\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    pass\n",
  "    avg = (n + m) // 2\n    return bin(avg) if n <= m else -1", "    if n>m:\n\
    \        return -1\n    else:\n        return bin(round((n+m)/2))", "    if n\
    \ > m:\n        return -1\n    return bin(round((n + m) / 2))\n", "    if n >\
    \ m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n        sum\
    \ += i\n    avg = sum/(m+1-n)\n    rounded_avg = round(avg)\n    binary = bin(rounded_avg)[2:]\n\
    \    return f'0b{binary}'", "    if n > m:\n        return -1\n    answer = sum(range(n,\
    \ m + 1))\n    answer = int(round(answer / (m - n + 1)))\n    answer = bin(answer)\n\
    \    return answer", "    if n > m:\n        return -1\n    avg = round((n + m)\
    \ / 2)\n    return str(bin(avg))\n", "    if n <= m:\n        total = 0\n    \
    \    for i in range(n, m + 1):\n            total += i\n        avg = total //\
    \ (m - n + 1)\n        return bin(avg)\n    else:\n        return -1", "    if\
    \ n > m:\n        return -1\n    avg = int(round((n + m) / 2))\n    return bin(avg)",
  "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)",
  "    if n > m:\n        return -1\n    else:\n        return bin(int(round((n +\
    \ m) / 2)))\n\n\"\"\"", "    if n > m:\n        return -1\n    return bin(round((sum(range(n,\
    \ m + 1)))/(m - n + 1)))", "    if n > m:\n        return -1\n    x = n + m\n\
    \    y = x // 2\n    z = bin(y)\n    return z\n", "    # your code here\n    if\
    \ n > m:\n        return -1\n    rounded_avg = (n + m) // 2\n    return bin(rounded_avg)",
  "    if n > m:\n        return -1\n    else:\n        return bin(round((n + m) /\
    \ 2))\n", "    if n > m:\n        return -1\n    else:\n        nums = []\n  \
    \      for i in range(n, m+1):\n            nums.append(i)\n        avg = sum(nums)\
    \ / len(nums)\n        rounded = round(avg)\n        bin_string = bin(rounded)[2:]\n\
    \        return f'0b{bin_string}'", "    if n > m:\n        return -1\n    avg\
    \ = round((m + n) / 2)\n    return bin(avg)", "    if n > m:\n        return -1\n\
    \    else:\n        total = 0\n        for num in range(n, m + 1):\n         \
    \   total += num\n        average = int(total / (m - n + 1))\n        return f\"\
    0b{average:b}\"", "    if n > m:\n        return -1\n    else:\n        return\
    \ bin(round((m + n) / 2))", "    if n > m:\n        return -1\n    return bin(round((n\
    \ + m) / 2))\n", "    if n > m:\n        return -1\n    else:\n        sum = 0\n\
    \        for i in range(n, m+1):\n            sum += i\n        bin_val = bin(round(sum/(m-n+1)))\n\
    \        return bin_val\n", "    if n > m:\n        return -1\n    else:\n   \
    \     total = (m + n) * (m - n + 1) / 2\n        return bin(int(round(total /\
    \ (m - n + 1))))\n", "    # Your code here\n    if n > m:\n        return -1\n\
    \    else:\n        avg = sum(range(n, m+1))/(m-n+1)\n        return bin(round(avg))\n\
    \    \nimport doctest\ndoctest.testmod()\n", "    if n <= m:\n        average\
    \ = (n + m) // 2\n        return bin(average)\n    else:\n        return -1",
  "    if n > m:\n        return -1\n    avg = int(round((m+n)/2))\n    return '0b'\
    \ + bin(avg)[2:]\n", "    if n > m:\n        return -1\n    else:\n        return\
    \ bin(int(round((n + m) / 2)))", "    if n > m:\n        return -1\n    else:\n\
    \        return f\"0b{bin(round((n + m) / 2))[2:]}\"", "    total = 0\n    count\
    \ = 0\n    if n > m:\n        return -1\n    for num in range(n, m + 1):\n   \
    \     total += num\n        count += 1\n    avg = total // count\n    return bin(avg)\n\
    \nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\n\
    print(rounded_avg(20, 33))", "    if n > m:\n        return -1\n    new_n = bin(n)[2:]\n\
    \    new_m = bin(m)[2:]\n    avg = (n + m) // 2\n    new_avg = bin(avg)[2:]\n\
    \    return f\"0b{new_avg}\"", "    if n > m:\n        return -1\n    return f\"\
    0b{bin(round((sum(range(n, m+1)))/(m-n+1)))[2:]}\"\n", "    if n > m:\n      \
    \  return -1\n    else:\n        ans = 0\n        for num in range(n, m+1):\n\
    \            ans += num\n        ans = ans / (m - n + 1)\n        if ans % 1 >=\
    \ 0.5:\n            ans = int(ans) + 1\n        else:\n            ans = int(ans)\n\
    \        return bin(ans)\n", "    if n > m:\n        return -1\n    avg = sum(range(n,\
    \ m + 1)) / (m - n + 1)\n    avg = round(avg)\n    return bin(avg)", "    if n\
    \ > m:\n        return -1\n    total = 0\n    while n <= m:\n        total +=\
    \ n\n        n += 1\n    answer = str(total / (m - n + 1))[0]\n    return f'0b{answer}'\n",
  "    if n > m:\n        return -1\n    if n == m:\n        return bin(n)\n    return\
    \ f\"0b{round(sum(range(n, m+1))/(m-n+1)):b}\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    #YOUR CODE HERE\n    if n > m:\n        return -1\n    else:\n\
    \        rounded_num = round((n + m) / 2)\n        binary_num = bin(rounded_num)\n\
    \        return binary_num\n", "    pass\n    \n    \n", "    if n > m:\n    \
    \    return -1\n    avg = (n + m) // 2\n    return \"{:b}\".format(avg)\n", " \
    \   if n > m:\n        return -1\n    else:\n        sum = 0\n        for item\
    \ in range(n, m+1):\n            sum += item\n        rounded_avg = round(sum/(m+1-n))\n\
    \        return bin(rounded_avg)\n", "    if n > m:\n        return -1\n    #\
    \ your code here", "    if n > m:\n        return -1\n    else:\n        res =\
    \ 0\n        for i in range(n, m+1):\n            res += i\n        return bin(round(res/(m-n+1)))",
  "    if n > m:\n        return -1\n    else:\n        sum_ = 0\n        for i in\
    \ range(n, m+1):\n            sum_ += i\n        avg = round(sum_ / (m+1-n))\n\
    \        return f'0b{avg:b}'", "    if n > m:\n        return -1\n    else:\n\
    \        return bin(round((sum(range(n, m+1)) / (m - n + 1))))\n", "    if n >\
    \ m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n        sum\
    \ += i\n    avg = round(sum/(m-n+1))\n    return bin(avg)\n", "    if n > m:\n\
    \        return -1\n    avg = int(round((n + m) / 2))\n    return bin(avg)\n",
  "    if n > m:\n        return -1\n    else:\n        n_avg = int(sum(range(n, m+1))/(m-n+1))\n\
    \        n_avg_binary = bin(n_avg)[2:]\n        return f'0b{n_avg_binary}'", " \
    \   if n > m:\n        return -1\n    else:\n        return bin(round((n + m)\
    \ / 2))\n\nprint(rounded_avg(6, 10))", "    if n > m:\n        return -1\n   \
    \ floor = n\n    sum_ = n\n    while n < m:\n        n += 1\n        sum_ += n\n\
    \    return round(sum_ / (m - floor + 1))\n\n", "    # if n > m return -1\n  \
    \  if n > m:\n        return -1\n    # find range: m - n + 1\n    num = m - n\
    \ + 1\n    # sum(range): (m + n) * num / 2\n    avg = int(((m + n) * num / 2)\
    \ + 0.5)\n    # divide by range, round to nearest int\n    # convert int to binary\n\
    \    return bin(avg)\n", "    if n > m:\n        return -1\n    else:\n      \
    \  return bin(round((sum(range(n, m+1)) / (m - n + 1))))\n    \nprint(rounded_avg(10,\
    \ 20))\nprint(rounded_avg(20, 33))\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7,\
    \ 5))", "    if n > m:\n        return -1\n    else:\n        nums = list(range(n,\
    \ m+1))\n        avg = sum(nums) // len(nums)\n        return bin(avg)\n", " \
    \   sum_ = (n + m) * (m - n + 1) // 2\n    return bin(round(sum_ / (m - n + 1)))\
    \ if n <= m else -1", "    if n > m:\n        return -1\n    else:\n        rounded_avg\
    \ = int(round((m+n)/2))\n        avg_bin = bin(rounded_avg)[2:]\n        return\
    \ f'0b{avg_bin}'\n", "    if n > m:\n        return -1\n    return bin(round((n\
    \ + m) / 2))\n", "    if n > m:\n        return -1\n    s = sum(range(n, m + 1))\n\
    \    avg = s // (m - n + 1)\n    return bin(avg)", "    # your code here\n   \
    \ if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n\
    \        return bin(avg)\n", "    if n>m:\n        return -1\n    total = 0\n\
    \    for i in range(n, m+1):\n        total += i\n    avg = total/(m-n+1)\n  \
    \  avg = round(avg)\n    return f\"0b{avg:b}\"\n", "    if n > m:\n        return\
    \ -1\n    else:\n        return '0b' + bin(round((n + m) / 2))[2:]", "    if n\
    \ > m:\n        return -1\n    else:\n        avg = round((sum(range(n, m+1))\
    \ / (m-n+1)))\n        return bin(avg)", "    if n > m:\n        return -1\n \
    \   avg = round((n + m) / 2)\n    return bin(avg)\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n \
    \   def rounded_avg(n, m):\n\t    avg = round((n + m) / 2)\n\t    return bin(avg)\n\
    \t    \n\t'''", "    avg = round(((n + m) / 2))\n    if n > m:\n        return\
    \ -1\n    else:\n        return bin(avg)", "    if n > m:\n        return -1\n\
    \    mid_sum = int((n + m) / 2)\n    return f\"0b{bin(mid_sum)[2:]}\"", "    if\
    \ n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)", " \
    \   if n > m:\n        return -1\n    else:\n        return round(sum(range(n,\
    \ m+1))/(m-n+1))\n", "    if n > m:\n        return -1\n    bin_avg = bin(int(round((m+n)/2)))\n\
    \    return '0b' + bin_avg[2:]", "    if n > m:\n        return -1\n    avg =\
    \ round((m + n) / 2)\n    return bin(avg)\n", "    from math import ceil\n   \
    \ if n > m:\n        return -1\n    avg = ceil((n + m) / 2)\n    return f\"0b{avg:b}\"",
  "    #return -1 if n is greater than m.\n    if n > m:\n        return -1\n    #find\
    \ the average of the two integers, including them both\n    avg = sum(range(n,\
    \ m+1)) / (m-n+1)\n    #round the average up to the nearest whole number\n   \
    \ avg = round(avg)\n    #convert the average to binary\n    avg = bin(avg)\n \
    \   #remove the '0b' from the binary number\n    avg = avg[2:]\n    return avg\n",
  "    if n > m:\n        return -1\n    else:\n        average = math.ceil(((n +\
    \ m) / 2))\n        return bin(average)\n", "    if n > m:\n        return -1\n\
    \    avg = sum(range(n, m + 1)) / (m - n + 1)\n    return bin(round(avg))\n",
  "    if n > m:\n        return -1\n    total = 0\n    for i in range(n, m + 1):\n\
    \        total += i\n    return bin(round(total / (m - n + 1)))\n", "    if n\
    \ > m:\n        return -1\n    else:\n        binary = bin(int(round((n + m) /\
    \ 2)))\n        return binary\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7,\
    \ 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))", "    if n > m:\n\
    \        return -1\n    else:\n        return bin(math.ceil((n + m) / 2))\n",
  "    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n\
    \        return bin(avg)\n", "    if n > m:\n        return -1\n    elif n ==\
    \ m:\n        return n\n    else:\n        avg = int(n + ((m - n) / 2))\n    \
    \    return bin(avg)", "    if n <= m:\n        avg = sum(range(n, m + 1)) / (m\
    \ - n + 1)\n        avg = round(avg)\n        return bin(avg)\n    else:\n   \
    \     return -1", "    if n > m:\n        return -1\n    else:\n        return\
    \ bin(math.ceil((n + m) / 2))", "    avg = sum(range(n, m+1)) / (m - n + 1)\n\
    \    if n > m:\n        return -1\n    return bin(round(avg))\n", "    if n >\
    \ m:\n        return -1\n    return bin(round((n + m) / 2))\n", "    # Fill in\
    \ your code here\n    return bin(sum(range(n, m+1))//(m-n+1)) if n <= m else -1",
  "    if n > m:\n        return -1\n    avg = int(round((n + m) / 2))\n    return\
    \ f\"0b{avg:b}\"", "    if n > m:\n        return -1\n    else:\n        sum_range\
    \ = sum(range(n, m+1))\n        avg = round(sum_range / (m-n+1))\n        return\
    \ bin(avg)\n", "    if n > m:\n        return -1\n    sum_from_n_to_m = sum(range(n,\
    \ m + 1))\n    avg = sum_from_n_to_m / (m - n + 1)\n    return bin(round(avg))",
  "    if n > m:\n        return -1\n    else:\n        avg = round(((n + m) / 2))\n\
    \        return f'0b{avg:b}'\n", "    if n > m:\n        return -1\n    res =\
    \ 0\n    while n <= m:\n        res += n\n        n += 1\n    return bin(round(res\
    \ / (m - n + 1)))", "    if n > m:\n        return -1\n    else:\n        rounded_sum\
    \ = round((sum(range(n, m+1))/(m-n+1)))\n        return f'0b{rounded_sum:b}'",
  "    if n > m:\n        return -1\n    else:\n        binary = bin(int(round((m\
    \ + n) / 2)))\n        return binary", "    if n > m:\n        return -1\n   \
    \ avg = round((n + m) / 2)\n    return \"{:b}\".format(avg)", "    # Binary representation\
    \ of a number\n    # bin(n) = '0b1111'\n    # So we need to slice the prefix '0b'\n\
    \    # use '>>>' (Two's complement)\n    # For 0b0110 >>> 2 = 0b0001\n    # For\
    \ 0b1010 >>> 2 = 0b0011\n    n = n if n <= m else -1\n    avg = int(sum(range(n,\
    \ m+1)) / (m-n+1))\n    return bin(avg >> 1)\n", "    if n > m:\n        return\
    \ -1\n    rounded_average = round((m+n)/2)\n    rounded_average_bin = bin(rounded_average)\n\
    \    return rounded_average_bin\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7,\
    \ 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))", "    if n > m:\n\
    \        return -1\n    return bin(round((n + m) / 2))\n\nprint(rounded_avg(20,\
    \ 33))", "    if n > m:\n        return -1\n    else:\n        return bin(round((sum(range(n,\
    \ m+1)) / (m-n+1))))\n", "    if n > m:\n        return -1\n    else:\n      \
    \  num = sum(range(n, m+1))\n        rounded = round(num / (m-n+1))\n        return\
    \ bin(rounded)\n", "    if n > m:\n        return -1\n    else:\n        return\
    \ \"{:>b}\".format(round((n + m) / 2))", "    if n > m:\n        return -1\n \
    \   ans = sum(range(n, m + 1)) / (m - n + 1)\n    return bin(round(ans))\n", " \
    \   if n > m:\n        return -1\n    avg = sum(range(n, m + 1)) / (m - n + 1)\n\
    \    rounded_avg = round(avg)\n    return bin(rounded_avg)\n", "    if n > m:\n\
    \        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "    if\
    \ n > m:\n        return -1\n    else:\n        return bin(round((n + m) / 2))\n\
    \nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\n\
    print(rounded_avg(20, 33))", "    if n > m:\n        return -1\n    else:\n  \
    \      return '0b' + bin(round((n + m) / 2))[2:]\n", "    #initialize temp variable\n\
    \    temp = 0\n    #initialize count variable\n    count = 0\n    #check if n\
    \ is greater than m, return -1\n    if n > m:\n        return -1\n    #calculate\
    \ sum of n to m\n    for i in range(n, m+1):\n        temp += i\n        count\
    \ += 1\n    #calculate rounded average\n    rounded_avg = round(temp/count)\n\
    \    #convert to binary\n    binary = bin(rounded_avg)\n    #return binary\n \
    \   return binary", "    if n > m:\n        return -1\n    avg = (n + m) // 2\n\
    \    return bin(avg)\n", "    if n>m:\n        return -1\n    else:\n        avg=sum(range(n,m+1))/(m-n+1)\n\
    \        return bin(round(avg))", "    if n > m:\n        return -1\n    count\
    \ = 0\n    for i in range(n, m+1):\n        count += i\n    return bin(round(count/(m+1-n)))\n",
  "    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)",
  "    if n > m:\n        return -1\n    avg = int(round((m+n)/2))\n    return '0b'\
    \ + bin(avg)[2:]", "    if n > m:\n        return -1\n    avg = sum(range(n, m\
    \ + 1)) / (m - n + 1)\n    return bin(round(avg))", "    if n > m:\n        return\
    \ -1\n    res = round((n + m) / 2)\n    return bin(res)\n", "    if n > m:\n \
    \       return -1\n    tot = 0\n    for i in range(n, m+1):\n        tot += i\n\
    \    avg = round(tot/(m+1-n))\n    return bin(avg)\n", "    if n > m:\n      \
    \  return -1\n    else:\n        return \"0b\" + bin(round((n + m) / 2))[2:]",
  "    # your code here\n    \n    ", "    if n > m:\n        return -1\n    avg =\
    \ int(sum(range(n, m + 1)) / (m - n + 1) + 0.5)\n    return bin(avg)", "    if\
    \ n > m:\n        return -1\n    else:\n        return (n + m) // 2\n\nprint(rounded_avg(20,\
    \ 33))", "    if n > m:\n        return -1\n    else:\n        return bin(round((n\
    \ + m) / 2))\n", "    if n > m:\n        return -1\n    else:\n        total =\
    \ sum(i for i in range(n, m+1))\n        return bin(round(total / (m - n + 1)))",
  "    pass\n", "    if n > m:\n        return -1\n    avg = sum(range(n, m + 1))\
    \ / (m - n + 1)\n    avg = int(round(avg))\n    return '0b' + bin(avg)[2:]", " \
    \   if n > m:\n        return -1\n    else:\n        return bin(round((n + m)\
    \ / 2))", "    r = ((m - n + 1) * (n + m)) // 2\n    n = n if n <= m else -1\n\
    \    if n == -1:\n        return n\n    else:\n        return bin(round(r / (m\
    \ - n + 1)))\n", "    if n > m:\n        return -1\n    return bin(round((m+n)/2))\n",
  "    if n > m:\n        return -1\n    else:\n        sum = 0\n        for i in\
    \ range(n, m+1):\n            sum += i\n        avg = round(sum/(m+1-n))\n   \
    \     return bin(avg)\n", '    pass', "    if n > m:\n        return -1\n    summ\
    \ = 0\n    for i in range(n, m + 1):\n        summ += i\n    average = round(summ\
    \ / (m - n + 1))\n    return bin(average)\n", "    if n > m:\n        return -1\n\
    \    avg = int(round((n + m) / 2))\n    binary = \"{0:b}\".format(avg)\n    return\
    \ binary\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10,\
    \ 20))\nprint(rounded_avg(20, 33))", "    if n > m:\n        return -1\n    total\
    \ = 0\n    for num in range(n, m + 1):\n        total += num\n    avg = int(total\
    \ / (m - n + 1))\n    return f\"0b{bin(avg)[2:]}\"\n", "    # YOUR CODE HERE\n\
    \    if n > m:\n        return -1\n    else:\n        my_range = m - n + 1\n \
    \       avg = round(sum(range(n, m + 1)) / my_range)\n        return \"0b\" +\
    \ bin(avg)[2:]\n", "    if n > m:\n        return -1\n    else:\n        return\
    \ f\"0b{bin(round((n + m) / 2))[2:]}\"\n", "    num_sum = 0\n    num_count = 0\n\
    \    if n > m:\n        return -1\n    else:\n        for num in range(n, m +\
    \ 1):\n            num_sum += num\n            num_count += 1\n    avg = num_sum\
    \ // num_count\n    # print(bin(avg))\n    return bin(avg)\n\n", "    total =\
    \ 0\n    if n > m:\n        return -1\n    for i in range(n, m + 1):\n       \
    \ total += i\n    avg = round(total / (m - n + 1))\n    # return avg\n    return\
    \ bin(avg)\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10,\
    \ 20))\nprint(rounded_avg(20, 33))", "    return -1 if n > m else bin(math.ceil((n\
    \ + m) / 2))\n    \nprint(rounded_avg(20, 33))", "    if n > m:\n        return\
    \ -1\n    avg = sum(range(n, m + 1)) / (m - n + 1)\n    return bin(round(avg))\n",
  "    if n > m:\n        return -1\n    avg = int(round((m + n) / 2))\n    return\
    \ f\"0b{avg:b}\"", "    pass\n", "    if n > m:\n        return -1\n    return\
    \ bin(round((n + m) / 2))\n", "    if n > m:\n        return -1\n    return bin(int(round((sum(range(n,\
    \ m + 1)) / (m - n + 1)))))", "    # YOUR CODE HERE\n    if n > m:\n        return\
    \ -1\n    return bin(round((n + m) / 2))\n", "    if n > m:\n        return -1\n\
    \    else:\n        total = 0\n        for i in range(n, m+1):\n            total\
    \ += i\n        avg = total/(m-n+1)\n        if avg%1 >= 0.5:\n            return\
    \ f\"0b{bin(round(avg))[2:]}\"\n        else:\n            return f\"0b{bin(round(avg))[2:]}\"\
    \n", "    if n > m:\n        return -1\n    avg = int(round((n + m) / 2))\n  \
    \  return bin(avg)\n    \n    ", "    if n > m:\n        return -1\n    avg =\
    \ round((n + m) / 2)\n    return bin(avg)", "    if n > m:\n        return -1\n\
    \    else:\n        avg = int(round((n + m) / 2))\n        return bin(avg)\n",
  "    if n > m:\n        return -1\n    return bin(round((n + m) / 2))\n    \n\n\
    print(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\n\
    print(rounded_avg(20, 33))", "    if n > m:\n        return -1\n    nums = [num\
    \ for num in range(n, m + 1)]\n    avg = sum(nums) / len(nums)\n    avg = int(round(avg))\n\
    \    return bin(avg)\n", "    if n > m:\n        return -1\n    avg = int(round((n\
    \ + m) / 2))\n    return bin(avg)\n", "    if n > m:\n        return -1\n    else:\n\
    \        avg = round(((n + m) / 2))\n        return bin(avg)", "    if n > m:\n\
    \        return -1\n    avg = math.ceil((n + m) / 2)\n    binary = bin(avg)\n\
    \    return binary\n", "    if n > m:\n        return -1\n    avg = round((n +\
    \ m) / 2)\n    return f\"0b{avg:b}\"", "    if n > m:\n        return -1\n   \
    \ average = int(round((n + m) / 2))\n    return bin(average)", "    if n > m:\n\
    \        return -1\n    else:\n        return bin(round((sum(range(n, m+1)))/(m-n+1)))\n",
  "    if n > m:\n        return -1\n    # Padding for '0b' prefix\n    bin_answer\
    \ = f'0b{round(mean(range(n, m + 1)))}'\n    return bin_answer", "    pass\n",
  "    if n > m:\n        return -1\n    elif n == m:\n        return bin(n)\n   \
    \ else:\n        return bin(round((sum(range(n, m+1)) / (m - n + 1))))\n", " \
    \   if n > m:\n        return -1\n    else:\n        nums = [i for i in range(n,\
    \ m+1)]\n        avg = sum(nums) // len(nums)\n        return bin(avg)\n", " \
    \   if n > m:\n        return -1\n    a = sum(range(n, m + 1)) / (m - n + 1)\n\
    \    return bin(round(a))", "    if n > m:\n        return -1\n    if n == m:\n\
    \        return bin(n)\n    else:\n        return bin(round((n + m) / 2))", " \
    \   if n > m:\n        return -1\n    else:\n        res = (n + m) // 2\n    \
    \    return bin(res)", "    if n > m:\n        return -1\n    total = 0\n    for\
    \ num in range(n, m + 1):\n        total += num\n    avg = int(total / (m - n\
    \ + 1))\n    return bin(avg)\n", "    if n>m:\n        return -1\n    avg = round((n+m)/2)\n\
    \    avg_bin = bin(avg)[2:]\n    return avg_bin\n", "    if n>m:\n        return\
    \ -1\n    average=(n+m)/2\n    average=int(average)\n    average=bin(average)\n\
    \    return average\n", "    if n > m:\n        return -1\n    return bin(int(math.ceil((n\
    \ + m) / 2)))", "    if n > m:\n        return -1\n    else:\n        return bin(round((sum(range(n,\
    \ m+1)) / (m - n + 1))))\n", "    if n > m:\n        return -1\n    print(int(round(sum(range(n,\
    \ m+1))/(m-n+1))))\n    return bin(int(round(sum(range(n, m+1))/(m-n+1))))\nrounded_avg(1,\
    \ 5)\n\n\"\"\"\nSolution:\n    def rounded_avg(n, m):\n        if n > m:\n   \
    \         return -1\n        return bin(int(round(sum(range(n, m+1))/(m-n+1))))\n\
    \"\"\"", "    if n > m:\n        return -1\n    avg = int(math.ceil((n + m) /\
    \ 2))\n    return bin(avg)\n", "    avg = int(math.ceil((n + m) / 2))\n    if\
    \ n > m:\n        return -1\n    else:\n        return bin(avg)\n", "    return\
    \ None\n", "    if n > m:\n        return -1\n    else:\n        sum = 0\n   \
    \     for i in range(n, m+1):\n            sum += i\n        avg = sum / (m -\
    \ n + 1)\n        binary = bin(round(avg))\n        return binary", "    if n\
    \ > m:\n        return -1\n    ans = round((sum(range(n, m+1))/((m-n)+1)))\n \
    \   return bin(ans)", "    if n > m:\n        return -1\n    return '0b' + format(int(round((n\
    \ + m) / 2)), 'b')", "    if n > m:\n        return -1\n    avg = sum(range(n,\
    \ m + 1)) / (m - n + 1)\n    avg = int(round(avg))\n    return bin(avg)\n", " \
    \   if n > m:\n        return -1\n    return bin(round((n + m) / 2))", "    if\
    \ n>m:\n        return -1\n    else:\n        sum = 0\n        for i in range(n,\
    \ m+1):\n            sum += i\n        average = sum/(m-n+1)\n        average\
    \ = math.ceil(average)\n        rounded_avg = \"{0:b}\".format(average)\n    \
    \    return rounded_avg\n", "    nums = []\n    if n > m:\n        return -1\n\
    \    for i in range(n, m+1):\n        nums.append(i)\n    avg = int(round(sum(nums)/len(nums)))\n\
    \    return bin(avg)", "    if n > m:\n        return -1\n    avg = (n + m) /\
    \ 2\n    return bin(int(round(avg)))", "    if n > m:\n        return -1\n   \
    \ else:\n        rounded_avg = round((n + m) / 2)\n        return bin(rounded_avg)\n\
    \        \n", "    if n > m:\n        return -1\n    total = sum(range(n, m +\
    \ 1))\n    avg = total // (m - n + 1)\n    avg_bin = bin(avg)[2:]\n    return\
    \ f'0b{avg_bin}'", "    if n > m:\n        return -1\n    else:\n        average\
    \ = 0\n        numbers = [x for x in range(n, m+1)]\n        print(numbers)\n\
    \        for i in numbers:\n            average += i\n        average = average//len(numbers)\n\
    \        return bin(average)\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7,\
    \ 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))", "    pass\n",
  "    if n > m:\n        return -1\n    return f\"0b{bin(round((n + m) / 2))[2:]}\"",
  "    if n > m:\n        return -1\n    return '0b' + bin(round((n + m) / 2))[2:]",
  "    # write your code here\n    if n > m:\n        return -1\n    dec = int(round((n\
    \ + m) / 2))\n    return f\"0b{dec:b}\"", "    if n > m:\n        return -1\n\
    \    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    rounded_result\
    \ = round(sum/(m-n+1))\n    return bin(rounded_result)", "    pass\n", "    if\
    \ n > m:\n        return -1\n    avg = int(round(((n + m) / 2)))\n    return bin(avg)\n",
  "    if n > m:\n        return -1\n    avg = sum(range(n, m + 1)) / (m - n + 1)\n\
    \    return f\"0b{bin(round(avg))[2:]}\"\n", "    if n > m:\n        return -1\n\
    \    avg = (n + m) // 2\n    return bin(avg)\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
