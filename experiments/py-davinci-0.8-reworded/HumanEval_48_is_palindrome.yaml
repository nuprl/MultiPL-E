name: HumanEval_48_is_palindrome
language: py
prompt: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string\
  \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
  \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
  \    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
  \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') ==\
  \ False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') ==\
  \ False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
  \ntest_check()\n"
completions: ["    # length of the string\n    length = len(text)\n    # loop through\
    \ the range of the string length\n    for i in range(length):\n        # check\
    \ the first and last characters\n        if text[i] != text[-i - 1]:\n       \
    \     # return False if not equal\n            return False\n    # Return True\
    \ if all characters are equal\n    return True\n\n", "    return text == text[::-1]\n\
    \n", "    return text == text[::-1]\n\n", "    return text == text[::-1]\n\n",
  "    text = text.lower()\n    text = text.replace(' ', '')\n    return text == text[::-1]\n\
    \n", "    def is_single_char(text: str) -> bool:\n        return len(text) <=\
    \ 1\n\n    if is_single_char(text):\n        return True\n\n    if text[0] ==\
    \ text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return\
    \ False\n\n", "    # Get only digits and letters\n    text = re.sub('[^a-zA-Z0-9]',\
    \ '', text)\n    # Make lowercase\n    text = text.lower()\n    # Reverse string\
    \ and check if it is equal to the original one\n    return text == text[::-1]\n\
    \n", "    if len(text) == 0:\n        return True\n    i = 0\n    j = len(text)\
    \ - 1\n    while i < j:\n        if text[i] != text[j]:\n            return False\n\
    \        i += 1\n        j -= 1\n    return True\n\n", "    return text == text[::-1]\n\
    \n", "    return text == text[::-1]\n\n", "    return text == text[::-1]\n\n",
  "    text = \"\".join(c for c in text if c.isalnum()).lower()\n    return text ==\
    \ text[::-1]", "    return text == text[::-1]\n\n", "    return text == text[::-1]\n\
    \n", "    if len(text) == 0:\n        return True\n    else:\n        return text[0]\
    \ == text[-1] and is_palindrome(text[1:-1])\n\n", "    length = len(text)\n  \
    \  for i in range(length):\n        if text[i] != text[length - i - 1]:\n    \
    \        return False\n    return True\n\n", "    if text == '':\n        return\
    \ True\n    return text == text[::-1]\n\n", "    return text == text[::-1]\n\n",
  "    assert isinstance(text, str), 'text is not a string: {}'.format(text)\n   \
    \ return text == text[::-1]\n\n", "    text = text.lower()\n    text = \"\".join(filter(str.isalpha,\
    \ text))\n    return text == text[::-1]\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
