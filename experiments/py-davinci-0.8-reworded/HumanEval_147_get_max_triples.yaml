name: HumanEval_147_get_max_triples
language: py
prompt: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
  \ integer n. You have to create an integer array a of length n.\n        For each\
  \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the\
  \ number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j]\
  \ + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n    1\n\
  \        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple\
  \ is (1, 7, 13).\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
  \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
  \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
completions: ["    return sum(sum([[0, 1][(i + j + k) % 3 == 0] for k in range(i+1,\
    \ n)]) for i in range(n) for j in range(i+1, n))\n\n", "    return (n-2) * (n-1)\
    \ * n // 6\n\n", "    triples = 0\n    for i in range(1, n):\n        for j in\
    \ range(i + 1, n):\n            for k in range(j + 1, n):\n                if\
    \ (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                \
    \    triples += 1\n    return triples\n\n", "    # We want all three numbers to\
    \ be divisible by 3\n    # 1. we will only count even values\n    # 2. 1 odd value\
    \ that is a multiple of 3\n    # 3. any two even values, whose sum is a multiple\
    \ of 3\n    even_numbers = [i for i in range(n) if i % 2 == 0]\n    odd_numbers\
    \ = [i for i in range(n) if i % 2 != 0]\n    odd_three_multiples = [i for i in\
    \ odd_numbers if i % 3 == 0]\n    even_three_multiples = [i for i in even_numbers\
    \ if i % 3 == 0]\n    # print(even_numbers)\n    # print(odd_numbers)\n    # print(odd_three_multiples)\n\
    \    # print(even_three_multiples)\n    # print(f\"{len(odd_three_multiples)}\
    \ -> odd 3 multiples\")\n    # print(f\"{len(even_three_multiples)} -> even 3\
    \ multiples\")\n    triples = 0\n    # _1_3_3\n    triples += (\n        len(odd_three_multiples)\
    \ * len(even_three_multiples) * len(even_three_multiples)\n    )\n    # print(f\"\
    {triples} -> _1_3_3\")\n    # _1_2_2\n    triples += (\n        len(odd_three_multiples)\
    \ * len(even_numbers) * (len(even_numbers) - 1)\n    )\n    # print(f\"{triples}\
    \ -> _1_2_2\")\n    # _2_2_2\n    triples += (\n        len(even_numbers) * (len(even_numbers)\
    \ - 1) * (len(even_numbers) - 2)\n    )\n    # print(f\"{triples} -> _2_2_2\"\
    )\n    return triples\n\n", "    count = 0\n    # brute force approach\n    for\
    \ i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1,\
    \ n):\n                if (i+1)*(i+1) - (i+1) + 1 + (j+1)*(j+1) - (j+1) + 1 +\
    \ (k+1)*(k+1) - (k+1) + 1 % 3 == 0:\n                    count += 1\n    return\
    \ count", "    # return n if n > 5 else n - 3 if n == 5 else n - 2 if n == 4 else\
    \ n - 1 if n == 3 else n\n    return n-1 if n<4 else n-2 if n==4 else n-3 if n==5\
    \ else n\n", "    return sum(1 for i in range(n) for j in range(i + 1, n) for\
    \ k in range(j + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3\
    \ == 0)\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    i = 0\n \
    \   j = 1\n    k = 2\n    count = 0\n    while (i < n - 2):\n        while (j\
    \ < n - 1):\n            while (k < n):\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0:\n                    count += 1\n                k += 1\n        \
    \    j += 1\n            k = j + 1\n        i += 1\n        j = i + 1\n      \
    \  k = j + 1\n    return count\n\n", "    # 1 \u2264 n \u2264 2000\n    if n >\
    \ 2000:\n        return 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\
    \    # (1 \u2264 a[i] \u2264 2000)\n    a = [a[i] for i in range(len(a)) if a[i]\
    \ <= 2000]\n    # (1 \u2264 i < j < k \u2264 n)\n    triples = [(a[i], a[j], a[k])\n\
    \               for i in range(len(a)) for j in range(i + 1, len(a)) for k in\
    \ range(j + 1, len(a))]\n    # (a[i] + a[j] + a[k]) is a multiple of 3\n    triples\
    \ = [triple for triple in triples if sum(triple) % 3 == 0]\n    return len(triples)\n\
    \n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    c = 0\n    for i in\
    \ range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j\
    \ + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n              \
    \      c += 1\n    return c\n\n", "    if n < 3:\n        return 0\n    arr =\
    \ [i * i - i + 1 for i in range(1, n + 1)]\n    counter = 0\n    for i in range(0,\
    \ n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j\
    \ + 1, n):\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n        \
    \            counter += 1\n    return counter\n\n", "    return n // 3\n\n", " \
    \   arr = [i * i - i + 1 for i in range(1, n + 1)]\n    idx = {}\n    for i in\
    \ range(n):\n        for j in range(i + 1, n):\n            for k in range(j +\
    \ 1, n):\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n          \
    \          idx[(i, j, k)] = True\n    return len(idx)\n\n", "    # a = [i * i\
    \ - i + 1 for i in range(1, n + 1)]\n    # count = 0\n    # for i in range(n -\
    \ 2):\n    #     for j in range(i + 1, n - 1):\n    #         for k in range(j\
    \ + 1, n):\n    #             if (a[i] + a[j] + a[k]) % 3 == 0:\n    #       \
    \          count += 1\n    # return count\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n", "    pass\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    c\
    \ = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n   \
    \         for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0:\n                    c += 1\n    return c\n\n", "    triples_count =\
    \ 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n     \
    \       for k in range(j + 1, n):\n                if (i * i - i + 1 + j * j -\
    \ j + 1 + k * k - k + 1) % 3 == 0:\n                    triples_count += 1\n \
    \   return triples_count\n\n", "    if n < 3:\n        return 0\n    return n\
    \ // 3 * (n - 2)\n\n\n@pytest.mark.parametrize('test_input, expected', [\n   \
    \ (1, 0),\n    (2, 0),\n    (3, 1),\n    (10, 6),\n    (23, 17),\n    (10**9,\
    \ 333333333),\n])", "    return sum(1 for i in range(1, n-1) for j in range(i+1,\
    \ n) for k in range(j+1, n) if (i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 == 0)\n\n", " \
    \   count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n     \
    \       for k in range(j+1, n):\n                if ((i*i-i+1) + (j*j-j+1) + (k*k-k+1))\
    \ % 3 == 0:\n                    count += 1\n    return count\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
