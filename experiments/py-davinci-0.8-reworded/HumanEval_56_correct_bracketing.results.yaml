language: py
name: HumanEval_56_correct_bracketing
results:
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    assert\
    \ type(brackets) == str\n    assert all([bracket in ['<', '>'] for bracket in\
    \ brackets])\n    return brackets.count('<') == brackets.count('>')\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz5gf9e_j.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpz5gf9e_j.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpz5gf9e_j.py\"\
    , line 25, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ brackets.count('<') == brackets.count('>')\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0zofedrr.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0zofedrr.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0zofedrr.py\"\
    , line 23, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    num_left_brackets\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            num_left_brackets\
    \ += 1\n        elif bracket == '>':\n            num_left_brackets -= 1\n   \
    \     if num_left_brackets < 0:\n            return False\n    return num_left_brackets\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ False\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj2f8mf1k.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpj2f8mf1k.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj2f8mf1k.py\"\
    , line 18, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    total\
    \ = 0\n    for i in brackets:\n        if i == '<':\n            total += 1\n\
    \        elif i == '>':\n            total -= 1\n            if total < 0:\n \
    \               return False\n    return total == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # store\
    \ the number of opening brackets in count\n    count = 0\n    for c in brackets:\n\
    \        if c == '<':\n            count += 1\n        else:\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brack_count\
    \ = 0\n    for i in brackets:\n        if i == '<':\n            brack_count +=\
    \ 1\n        elif i == '>':\n            brack_count -= 1\n            if brack_count\
    \ < 0:\n                return False\n    return brack_count == 0\n\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    counter\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            counter\
    \ += 1\n        elif char == '>':\n            counter -= 1\n        if counter\
    \ < 0:\n            return False\n    return counter == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    number_of_open_brackets\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            number_of_open_brackets\
    \ += 1\n        else:\n            number_of_open_brackets -= 1\n        if number_of_open_brackets\
    \ < 0:\n            return False\n    return number_of_open_brackets == 0\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for bracket in brackets:\n        if bracket == '<':\n           \
    \ stack.append(bracket)\n        else:\n            if stack:\n              \
    \  stack.pop()\n            else:\n                return False\n    return stack\
    \ == []\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    counter\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            counter\
    \ += 1\n        elif bracket == '>':\n            counter -= 1\n        if counter\
    \ < 0:\n            return False\n    return counter == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    left_count\
    \ = brackets.count('<')\n    right_count = brackets.count('>')\n    return left_count\
    \ == right_count\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkto_ideq.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpkto_ideq.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkto_ideq.py\"\
    , line 25, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            count +=\
    \ 1\n        elif char == '>':\n            count -= 1\n            if count <\
    \ 0:\n                return False\n    return count == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for i in brackets:\n        if i == '<':\n            count += 1\n\
    \        elif i == '>':\n            count -= 1\n            if count < 0:\n \
    \               return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    num_left\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            num_left\
    \ += 1\n        else:\n            num_left -= 1\n        if num_left < 0:\n \
    \           return False\n    return num_left == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    opening\
    \ = closing = 0\n    for i in brackets:\n        if i == '<':\n            opening\
    \ += 1\n        else:\n            closing += 1\n        if closing > opening:\n\
    \            return False\n    return opening == closing\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    num_open\
    \ = 0\n    for ch in brackets:\n        if ch == '<':\n            num_open +=\
    \ 1\n        elif ch == '>':\n            num_open -= 1\n            if num_open\
    \ < 0:\n                return False\n    return num_open == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    bracket_count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            bracket_count\
    \ += 1\n        elif bracket == '>':\n            bracket_count -= 1\n       \
    \ if bracket_count < 0:\n            return False\n    return bracket_count ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # count\
    \ how many \"<\"s and \">\"s.\n    num_left = brackets.count('<')\n    num_right\
    \ = brackets.count('>')\n    # it's a well-bracketed string\n    # if there are\
    \ the same number of each.\n    return num_left == num_right\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwqa9eccd.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpwqa9eccd.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpwqa9eccd.py\"\
    , line 28, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # Use\
    \ a stack to store all open brackets (you may use a list or a custom stack)\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n  \
    \          stack.append(bracket)\n        elif bracket == '>':\n            if\
    \ stack == []:\n                return False\n            else:\n            \
    \    stack.pop()\n    return stack == []\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ brackets.count('<') == brackets.count('>')\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0zofedrr.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0zofedrr.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0zofedrr.py\"\
    , line 23, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for i in brackets:\n        if i == '<':\n            count += 1\n\
    \        elif i == '>':\n            count -= 1\n        if count < 0:\n     \
    \       return False\n    return count == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if len(brackets)\
    \ == 0:\n        return True\n    elif len(brackets) == 1:\n        return False\n\
    \    if brackets[0] == '<':\n        if brackets[-1] == '>':\n            return\
    \ correct_bracketing(brackets[1:-1])\n        else:\n            return False\n\
    \    else:\n        return False\n    # return False\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqtm1_sb6.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpqtm1_sb6.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpqtm1_sb6.py\"\
    , line 30, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if '<'\
    \ not in brackets:\n        return True\n    return brackets.count('<') == brackets.count('>')\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy3m0ae9v.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpy3m0ae9v.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpy3m0ae9v.py\"\
    , line 24, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    open_count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            open_count\
    \ += 1\n        elif bracket == '>':\n            open_count -= 1\n        if\
    \ open_count < 0:\n            return False\n    return open_count == 0\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if '<'\
    \ not in brackets:\n        return True\n    elif '>' not in brackets:\n     \
    \   return False\n    else:\n        if correct_bracketing(brackets[1:]) is True:\n\
    \            return True\n        else:\n            return correct_bracketing(brackets[1:])\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph24ez58w.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmph24ez58w.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph24ez58w.py\"\
    , line 29, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = Stack()\n    for s in brackets:\n        if s == '<':\n            stack.push(s)\n\
    \        else:\n            if stack.is_empty():\n                return False\n\
    \            else:\n                stack.pop()\n    return stack.is_empty()\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy_0hfhz6.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpy_0hfhz6.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpy_0hfhz6.py\"\
    , line 26, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpy_0hfhz6.py\"\
    , line 14, in correct_bracketing\n    stack = Stack()\nNameError: name 'Stack'\
    \ is not defined. Did you mean: 'stack'?\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    length\
    \ = len(brackets)\n    if length % 2 != 0:\n        return False\n    i = 0\n\
    \    opening = 0\n    closing = 0\n    while i < length:\n        if brackets[i]\
    \ == '<':\n            opening += 1\n        else:\n            closing += 1\n\
    \        if closing > opening:\n            return False\n        i += 1\n   \
    \ if opening == closing:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_opened\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            brackets_opened\
    \ += 1\n        else:\n            brackets_opened -= 1\n        if brackets_opened\
    \ < 0:\n            return False\n    return brackets_opened == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    left,\
    \ right = 0, 0\n    for char in brackets:\n        if char == '<':\n         \
    \   left += 1\n        else:\n            right += 1\n        if right > left:\n\
    \            return False\n    return left == right\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            brackets_count\
    \ += 1\n        elif bracket == '>':\n            brackets_count -= 1\n      \
    \      if brackets_count < 0:\n                return False\n    return brackets_count\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if '<'\
    \ not in brackets or '>' not in brackets:\n        return False\n    if '><' in\
    \ brackets:\n        return False\n    open_bracket_count = 0\n    for bracket\
    \ in brackets:\n        if bracket == '<':\n            open_bracket_count +=\
    \ 1\n        elif bracket == '>':\n            open_bracket_count -= 1\n     \
    \   if open_bracket_count < 0:\n            return False\n    return open_bracket_count\
    \ == 0\n\n\n@given(integers())\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplpt_f18o.py\", line\
    \ 29, in <module>\n    @given(integers())\nNameError: name 'given' is not defined\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for c in brackets:\n        if c == '<':\n            count += 1\n\
    \        elif c == '>':\n            count -= 1\n        if count < 0:\n     \
    \       return False\n    return count == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for i in brackets:\n        if i == '<':\n            count += 1\n\
    \        elif i == '>':\n            count -= 1\n        if count < 0:\n     \
    \       return False\n    return count == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = Stack()\n    for ch in brackets:\n        if ch == '<':\n            stack.push(ch)\n\
    \        else:\n            if stack.is_empty():\n                return False\n\
    \            stack.pop()\n    return stack.is_empty()\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp3b0bim1.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpp3b0bim1.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpp3b0bim1.py\"\
    , line 25, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpp3b0bim1.py\"\
    , line 14, in correct_bracketing\n    stack = Stack()\nNameError: name 'Stack'\
    \ is not defined. Did you mean: 'stack'?\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # Start\
    \ with the assumption that the brackets match up.\n    # If there are brackets,\
    \ look at the first and last character.\n    # If they match, check the brackets\
    \ inside.\n    # If they don't match, the brackets don't match up.\n    # If there\
    \ are no brackets, the brackets match up.\n    if len(brackets) == 0:\n      \
    \  return True\n    elif brackets[0] == '<' and brackets[-1] == '>':\n       \
    \ return correct_bracketing(brackets[1:-1])\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkefvybpd.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpkefvybpd.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkefvybpd.py\"\
    , line 29, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    bracket_stack\
    \ = Stack()\n    for bracket in brackets:\n        if bracket == '<':\n      \
    \      bracket_stack.push(bracket)\n        else:\n            if bracket_stack.is_empty():\n\
    \                return False\n            bracket_stack.pop()\n    return bracket_stack.is_empty()\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ic6pc8p.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp5ic6pc8p.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5ic6pc8p.py\"\
    , line 25, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmp5ic6pc8p.py\"\
    , line 14, in correct_bracketing\n    bracket_stack = Stack()\nNameError: name\
    \ 'Stack' is not defined\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for i in brackets:\n        if i == '<':\n            count += 1\n\
    \        elif i == '>':\n            count -= 1\n        if count < 0:\n     \
    \       return False\n    return count == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if len(brackets)\
    \ % 2 != 0:\n        return False\n    if brackets == '':\n        return True\n\
    \    if brackets[0] == '>':\n        return False\n    elif brackets[0] == '<':\n\
    \        if correct_bracketing(brackets[1:]) == True:\n            return True\n\
    \        else:\n            return False\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdk3jy3iv.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpdk3jy3iv.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpdk3jy3iv.py\"\
    , line 27, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    closing_brackets\
    \ = 0\n\n    for bracket in brackets:\n        if bracket == '<':\n          \
    \  closing_brackets += 1\n        elif bracket == '>':\n            closing_brackets\
    \ -= 1\n        if closing_brackets < 0:\n            return False\n\n    return\
    \ closing_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    i =\
    \ 0\n    while i < len(brackets):\n        if brackets[i] == '<':\n          \
    \  closing_index = brackets.find('>', i)\n            if closing_index == -1:\n\
    \                return False\n            else:\n                i = closing_index\
    \ + 1\n        else:\n            i += 1\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8s_7kst.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpk8s_7kst.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpk8s_7kst.py\"\
    , line 32, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    sum\
    \ = 0\n    for i in brackets:\n        if i == '<':\n            sum += 1\n  \
    \      elif i == '>':\n            sum -= 1\n        if sum < 0:\n           \
    \ return False\n    return sum == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    n =\
    \ 0\n    for bracket in brackets:\n        if bracket == '<':\n            n +=\
    \ 1\n        elif bracket == '>':\n            n -= 1\n        if n < 0:\n   \
    \         return False\n    return n == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for i in brackets:\n        if i == '<':\n            count += 1\n\
    \        else:\n            count -= 1\n            if count < 0:\n          \
    \      return False\n    return count == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            count +=\
    \ 1\n        elif char == '>':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # Set\
    \ count to 0\n    count = 0\n    # For every char in brackets, check if its a\
    \ '<' or '>' and add/subtract 1 from count\n    for char in brackets:\n      \
    \  if char == '<':\n            count += 1\n        elif char == '>':\n      \
    \      count -= 1\n    # If count is 0 then all brackets had a corresponding bracket\
    \ so return True\n    if count == 0:\n        return True\n    # Otherwise there\
    \ is a missing corresponding bracket so return False\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp17bd5ncs.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp17bd5ncs.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp17bd5ncs.py\"\
    , line 35, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    b_sum\
    \ = 0\n    for b in brackets:\n        if b == '<':\n            b_sum += 1\n\
    \        elif b == '>':\n            b_sum -= 1\n        if b_sum < 0:\n     \
    \       return False\n    return b_sum == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # Note:\
    \ if you do this recursively, you may need to be careful about\n    # adding parameters\
    \ to help with the recursion.\n\n    # Instead of using recursion, you can use\
    \ a counter to keep track of how\n    # many opening brackets you have \"seen\"\
    \ so far.\n    #\n    # The counter will start at 0.\n    #\n    # For each opening\
    \ bracket, add 1 to the counter.\n    # For each closing bracket, subtract 1 from\
    \ the counter.\n    #\n    # Return False if the counter ever goes below 0.\n\
    \    # Return True if the counter ends up back at 0.\n    #\n    # Hint: while\
    \ loops are very similar to for loops, except they don't\n    # have the range(start,\
    \ stop, step) part:\n    #     https://docs.python.org/3/reference/compound_stmts.html#while\n\
    \    #\n    # To help test this, you can modify your original test cases to use\
    \ while\n    # loops.\n\n    counter = 0\n    while counter >= 0:\n        for\
    \ char in brackets:\n            if char == '<':\n                counter += 1\n\
    \            elif char == '>':\n                counter -= 1\n        if counter\
    \ == 0:\n            return True\n        else:\n            return False\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8k2ddcj_.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmp8k2ddcj_.py\", line 63,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp8k2ddcj_.py\"\
    , line 54, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    counter\
    \ = 0\n    for ch in brackets:\n        if ch == '<':\n            counter +=\
    \ 1\n        elif ch == '>':\n            counter -= 1\n        if counter < 0:\n\
    \            return False\n    return counter == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for c in brackets:\n        if c == '<':\n            count += 1\n\
    \        elif c == '>':\n            count -= 1\n        if count < 0:\n     \
    \       return False\n    return count == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    '''\n\
    \    count = 0\n    for item in brackets:\n        if item == '<':\n         \
    \   count += 1\n        elif item == '>':\n            count -= 1\n          \
    \  if count < 0:\n                return False\n    return count == 0\n    '''\n\
    \    '''\n    count = 0\n    for item in brackets:\n        if item == '<':\n\
    \            count += 1\n        elif item == '>':\n            count -= 1\n \
    \       if count < 0:\n            return False\n    return count == 0\n    '''\n\
    \    '''\n    count = 0\n    for item in brackets:\n        if item == '<':\n\
    \            count += 1\n        elif item == '>':\n            count -= 1\n \
    \       if count < 0:\n            return False\n    return count == 0\n    '''\n\
    \    '''\n    count = 0\n    for item in brackets:\n        if item == '<':\n\
    \            count += 1\n        elif item == '>':\n            count -= 1\n \
    \       if count < 0:\n            return False\n    return count == 0\n    '''\n\
    \    '''\n    count = 0\n    for item in brackets:\n        if item == '<':\n\
    \            count += 1\n        elif item == '>':\n            count -= 1\n \
    \       if count < 0:\n            return False\n    return count == 0\n    '''\n\
    \    '''\n    count = 0\n    for item in brackets:\n        if item == '<':\n\
    \            count += 1\n        elif item == '>':\n            count -= 1\n \
    \       if count < 0:\n            return False\n    return count == 0\n    '''\n\
    \    '''\n    count = 0\n    for item in brackets:\n        if item == '<':\n\
    \            count += 1\n        elif item == '>':\n            count -= 1\n \
    \       if count < 0:\n            return False\n    return count == 0\n    '''\n\
    \    '''\n    count = 0\n    for item in brackets:\n        if item == '<':\n\
    \            count += 1\n        elif item == '>':\n            count -= 1\n \
    \       if count < 0:\n            return False\n    return count == 0\n    '''\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpczwqym9t.py\", line\
    \ 119, in <module>\n    test_check()\n  File \"/tmp/tmpczwqym9t.py\", line 117,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpczwqym9t.py\"\
    , line 103, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # we\
    \ need a flag to tell us if the current character is a closing bracket\n    closing\
    \ = False\n    for char in brackets:\n        if char == '>':\n            closing\
    \ = True\n        elif char == '<':\n            # if there was a closing bracket,\
    \ but not an opening one, the string is malformed\n            if closing:\n \
    \               return False\n            closing = False\n    # if there are\
    \ unclosed brackets, the string is malformed\n    return not closing\n\nprint(correct_bracketing('<><<'))\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5aorlueu.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp5aorlueu.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5aorlueu.py\"\
    , line 29, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: 'False

    '
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for i in brackets:\n        if i == '<':\n            count += 1\n\
    \        elif i == '>':\n            count -= 1\n            if count < 0:\n \
    \               return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    num_open\
    \ = 0\n    for b in brackets:\n        if b == '<':\n            num_open += 1\n\
    \        elif b == '>':\n            num_open -= 1\n        if num_open < 0:\n\
    \            return False\n    return num_open == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for bracket in brackets:\n        if bracket == '<':\n           \
    \ stack.append(bracket)\n        else:\n            if stack == []:\n        \
    \        return False\n            else:\n                stack.pop()\n    return\
    \ stack == []\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    open_brackets\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            open_brackets\
    \ += 1\n        else:\n            open_brackets -= 1\n        if open_brackets\
    \ < 0:\n            return False\n    return open_brackets == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if len(brackets)\
    \ == 0:\n        return True\n    elif brackets[0] == '>':\n        return False\n\
    \    elif brackets[-1] == '<':\n        return False\n    else:\n        count\
    \ = 0\n        for b in brackets:\n            if b == '<':\n                count\
    \ += 1\n            else:\n                count -= 1\n            if count <\
    \ 0:\n                return False\n        return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    open_brackets\
    \ = 0\n    closed_brackets = 0\n    for char in brackets:\n        if char ==\
    \ '<':\n            open_brackets += 1\n        elif char == '>':\n          \
    \  closed_brackets += 1\n    return open_brackets == closed_brackets\n\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5t4ylxgs.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp5t4ylxgs.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5t4ylxgs.py\"\
    , line 30, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    open_brackets\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            open_brackets\
    \ += 1\n        elif bracket == '>':\n            open_brackets -= 1\n       \
    \ if open_brackets < 0:\n            return False\n    return open_brackets ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    bracket_count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            bracket_count\
    \ += 1\n        else:\n            bracket_count -= 1\n        if bracket_count\
    \ < 0:\n            return False\n    return bracket_count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    pass\
    \ #stub\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpno2olemk.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpno2olemk.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpno2olemk.py\"\
    , line 18, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ brackets.count('<') == brackets.count('>')\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0zofedrr.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0zofedrr.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0zofedrr.py\"\
    , line 23, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    br_open,\
    \ br_close = \"<\", \">\"\n    count = 0\n    for br in brackets:\n        if\
    \ br == br_open:\n            count += 1\n        elif br == br_close:\n     \
    \       count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for ch in brackets:\n        if ch == '<':\n            stack.append(ch)\n\
    \        else:\n            if stack == []:\n                return False\n  \
    \          stack.pop()\n    return stack == []\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    i =\
    \ 0\n\n    for b in brackets:\n        if b == '<':\n            i += 1\n    \
    \    elif b == '>':\n            i -= 1\n        if i < 0:\n            return\
    \ False\n\n    return i == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            count +=\
    \ 1\n        elif char == '>':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            count +=\
    \ 1\n        else:\n            count -= 1\n        if count < 0:\n          \
    \  return False\n    return count == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    bracket_count\
    \ = 0\n    for i in brackets:\n        if i == '<':\n            bracket_count\
    \ += 1\n        else:\n            bracket_count -= 1\n            if bracket_count\
    \ < 0:\n                return False\n    return bracket_count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if len(brackets)\
    \ == 0:\n        return True\n    elif brackets[0] == '>':\n        return False\n\
    \    else:\n        pairs = 0\n        for i in range(len(brackets)):\n      \
    \      if brackets[i] == '<':\n                pairs += 1\n            else:\n\
    \                pairs -= 1\n            if pairs < 0:\n                return\
    \ False\n        return pairs == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    n =\
    \ 0\n    for bracket in brackets:\n        if bracket == '<':\n            n +=\
    \ 1\n        elif bracket == '>':\n            n -= 1\n        if n < 0:\n   \
    \         return False\n    return n == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    open_count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            open_count\
    \ += 1\n        elif bracket == '>':\n            open_count -= 1\n        if\
    \ open_count < 0:\n            return False\n    return open_count == 0\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ brackets.count('<') == brackets.count('>')\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0zofedrr.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0zofedrr.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0zofedrr.py\"\
    , line 23, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    bracket_count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            bracket_count\
    \ += 1\n        elif bracket == '>':\n            bracket_count -= 1\n       \
    \ if bracket_count < 0:\n            return False\n    return bracket_count ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    counter\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            counter\
    \ += 1\n        elif char == '>':\n            counter -= 1\n        if counter\
    \ < 0:\n            return False\n    return counter == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    counter\
    \ = 0\n    for i in brackets:\n        if i == '<':\n            counter += 1\n\
    \        elif i == '>':\n            counter -= 1\n        if counter < 0:\n \
    \           return False\n    return counter == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    n =\
    \ 0\n    for bracket in brackets:\n        if bracket == '<':\n            n +=\
    \ 1\n        else:\n            n -= 1\n        if n < 0:\n            return\
    \ False\n    return n == 0\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    left\
    \ = brackets.count('<')\n    right = brackets.count('>')\n    return left == right\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd14m2j00.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpd14m2j00.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpd14m2j00.py\"\
    , line 25, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    open_brackets\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            open_brackets\
    \ += 1\n        else:\n            open_brackets -= 1\n        if open_brackets\
    \ < 0:\n            return False\n    return open_brackets == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    bracket_count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            bracket_count\
    \ += 1\n        else:\n            bracket_count -= 1\n        if bracket_count\
    \ < 0:\n            return False\n    return bracket_count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    num_open\
    \ = 0\n    for b in brackets:\n        if b == '<':\n            num_open += 1\n\
    \        elif b == '>':\n            num_open -= 1\n        if num_open < 0:\n\
    \            return False\n    return num_open == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    bracket_count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            bracket_count\
    \ += 1\n        elif bracket == '>':\n            bracket_count -= 1\n       \
    \     if bracket_count < 0:\n                return False\n    return bracket_count\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    counter\
    \ = 0\n    for letter in brackets:\n        if letter == '<':\n            counter\
    \ += 1\n        elif letter == '>':\n            counter -= 1\n        if counter\
    \ < 0:\n            return False\n    return counter == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    depth\
    \ = 0\n    for c in brackets:\n        if c == '<':\n            depth += 1\n\
    \        elif c == '>':\n            depth -= 1\n        if depth < 0:\n     \
    \       return False\n    return depth == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # if\
    \ len(brackets) == 0:\n    #     return True\n    # elif brackets[0] == '<':\n\
    \    #     if len(brackets) == 1:\n    #         return False\n    #     else:\n\
    \    #         return correct_bracketing(brackets[1:])\n    # else:\n    #   \
    \  if len(brackets) == 1:\n    #         return False\n    #     else:\n    #\
    \         return correct_bracketing(brackets[1:])\n    \"\"\"\n    REFLECTION:\n\
    \    - I really appreciate that I knew how to use the elif statement and that\
    \ I\n    knew that all statements within an elif statement must happen under the\n\
    \    same condition. I also was very happy that I knew how to use 'and' within\n\
    \    the elif statement.\n    - I think I made the program a bit lengthy, since\
    \ I assume there's a way\n    to make it smaller.\n    - I don't understand how\
    \ to make the program more efficient.\n    \"\"\"\n    if len(brackets) == 0:\n\
    \        return True\n    elif brackets[0] == '<' and brackets[-1] == '>':\n \
    \       return correct_bracketing(brackets[1:-1])\n    else:\n        return False\n\
    \    \"\"\"\n    REFLECTION:\n    - I'm not sure that my elif statement was necessary,\
    \ but it felt necessary\n    for the code to run.\n    - I think I might have\
    \ made it a bit messy again. I don't feel like I\n    understand how to use recursion\
    \ to make the code more efficient.\n    \"\"\"\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7kgmmg2.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmpb7kgmmg2.py\", line 66,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpb7kgmmg2.py\"\
    , line 53, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    counter\
    \ = 0\n    for x in brackets:\n        if x == '<':\n            counter += 1\n\
    \        elif x == '>':\n            counter -= 1\n            if counter < 0:\n\
    \                return False\n    return counter == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ brackets.count('<') == brackets.count('>')\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf1al163u.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpf1al163u.py\", line 30,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpf1al163u.py\"\
    , line 21, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    depth\
    \ = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n\
    \        elif b == '>':\n            depth -= 1\n        if depth < 0:\n     \
    \       return False\n    return depth == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    counter\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            counter\
    \ += 1\n        elif bracket == '>':\n            counter -= 1\n        if counter\
    \ < 0:\n            return False\n    return counter == 0\n    # alternate solution:\n\
    \    # open_counter = brackets.count('<')\n    # close_counter = brackets.count('>')\n\
    \    # return open_counter == close_counter\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    nested\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            nested\
    \ += 1\n        elif char == '>':\n            nested -= 1\n            if nested\
    \ < 0:\n                return False\n    return nested == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # Use\
    \ a counter as a stack.\n    counter = 0\n    for ch in brackets:\n        if\
    \ ch == '<':\n            counter += 1\n        elif ch == '>':\n            counter\
    \ -= 1\n        if counter < 0:\n            return False\n    return counter\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            count +=\
    \ 1\n        else:\n            count -= 1\n        if count < 0:\n          \
    \  return False\n    return count == 0\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    depth\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            depth +=\
    \ 1\n        elif char == '>':\n            depth -= 1\n        if depth < 0:\n\
    \            return False\n    return depth == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    num_open\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            num_open\
    \ += 1\n        elif char == '>':\n            num_open -= 1\n        if num_open\
    \ < 0:\n            return False\n    return num_open == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if '<'\
    \ not in brackets:\n        return False\n    if '>' not in brackets:\n      \
    \  return False\n    return brackets.count('<') == brackets.count('>')\n\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwiy09iuh.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpwiy09iuh.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpwiy09iuh.py\"\
    , line 27, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    raise\
    \ NotImplementedError\n\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplx2d5y29.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmplx2d5y29.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmplx2d5y29.py\"\
    , line 18, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmplx2d5y29.py\"\
    , line 14, in correct_bracketing\n    raise NotImplementedError\nNotImplementedError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    open_count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            open_count\
    \ += 1\n        else:\n            open_count -= 1\n        if open_count < 0:\n\
    \            return False\n    return open_count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for bracket in brackets:\n        if bracket == '<':\n           \
    \ stack.append(bracket)\n        elif bracket == '>':\n            if len(stack)\
    \ > 0:\n                stack.pop()\n            else:\n                return\
    \ False\n    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    c =\
    \ 0\n    for i in brackets:\n        if i == '<':\n            c += 1\n      \
    \  elif i == '>':\n            c -= 1\n        if c < 0:\n            return False\n\
    \    return c == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    depth\
    \ = 0\n    for c in brackets:\n        if c == '<':\n            depth += 1\n\
    \        elif c == '>':\n            depth -= 1\n        if depth < 0:\n     \
    \       return False\n    return depth == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # TODO:\
    \ Fill in this function.\n    stack = []\n    for i in brackets:\n        if i\
    \ == '<':\n            stack.append(i)\n        elif i == '>':\n            if\
    \ len(stack) == 0:\n                return False\n            else:\n        \
    \        stack.pop()\n    if len(stack) != 0:\n        return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    counter\
    \ = 0\n    for i in brackets:\n        if i == '<':\n            counter += 1\n\
    \        else:\n            counter -= 1\n            if counter < 0:\n      \
    \          return False\n    return counter == 0\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        else:\n            count -= 1\n        if count < 0:\n       \
    \     return False\n    return count == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for i in brackets:\n        if i == '<':\n            count += 1\n\
    \        else:\n            count -= 1\n        if count < 0:\n            return\
    \ False\n    return count == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # Return\
    \ True iff the list of counts of '<' minus counts of '>' is always\n    # non-negative.\n\
    \    count = 0\n    for c in brackets:\n        if c == '<':\n            count\
    \ += 1\n        else:\n            count -= 1\n        if count < 0:\n       \
    \     return False\n    return count == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if brackets\
    \ == '':\n        return True\n    else:\n        if brackets[0] == '<':\n   \
    \         balance = 1\n            for char in brackets[1:]:\n               \
    \ if char == '<':\n                    balance += 1\n                else:\n \
    \                   balance -= 1\n                if balance == 0:\n         \
    \           return True\n            return False\n        else:\n           \
    \ return False\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3vbqsynp.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp3vbqsynp.py\", line 45,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp3vbqsynp.py\"\
    , line 35, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if brackets\
    \ == '':\n        return True\n    elif brackets[0] == '>':\n        return False\n\
    \    elif brackets[-1] == '<':\n        return False\n    elif '<>' not in brackets:\n\
    \        return False\n    else:\n        return correct_bracketing(brackets[brackets.index('<>')\
    \ + 2:])\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptbif55b9.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptbif55b9.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmptbif55b9.py\"\
    , line 28, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # brackets\
    \ = brackets.replace(' ', '')\n    # if brackets[0] == '>':\n    #     return\
    \ False\n    # if brackets.count('<') != brackets.count('>'):\n    #     return\
    \ False\n    # while '><' in brackets:\n    #     brackets = brackets.replace('><',\
    \ '')\n    # if brackets == '':\n    #     return True\n    # else:\n    #   \
    \  return False\n    # \u5B9E\u73B0\u65B9\u6CD52\n    brackets = brackets.replace('\
    \ ', '')\n    if brackets[0] == '>':\n        return False\n    if brackets.count('<')\
    \ != brackets.count('>'):\n        return False\n    i = 0\n    for c in brackets:\n\
    \        if c == '<':\n            i += 1\n        else:\n            i -= 1\n\
    \        if i < 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if len(brackets)\
    \ == 0:\n        return True\n    if brackets[0] == '>':\n        return False\n\
    \    else:\n        return correct_bracketing(brackets[1:])\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0nz7gd_l.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp0nz7gd_l.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0nz7gd_l.py\"\
    , line 23, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for c in brackets:\n        if c == '<':\n            stack.append(c)\n\
    \        elif c == '>':\n            if stack == []:\n                return False\n\
    \            else:\n                stack.pop()\n    return stack == []\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # count\
    \ keeps track of the number of open and closed brackets\n    count = 0\n    for\
    \ char in brackets:\n        if char == '<':\n            count += 1\n       \
    \ elif char == '>':\n            count -= 1\n        if count < 0:\n         \
    \   return False\n    # count == 0 if there are equal numbers of open and closed\
    \ brackets\n    return count == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    def\
    \ helper(brackets, count):\n        if brackets == '':\n            return count\
    \ == 0\n        elif brackets[0] == '<':\n            return helper(brackets[1:],\
    \ count + 1)\n        elif brackets[0] == '>':\n            return helper(brackets[1:],\
    \ count - 1)\n\n    return helper(brackets, 0)\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv7nusyh7.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpv7nusyh7.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv7nusyh7.py\"\
    , line 31, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    _stack\
    \ = []\n    for bracket in brackets:\n        if bracket == '<':\n           \
    \ _stack.append(bracket)\n        elif bracket == '>':\n            if _stack:\n\
    \                _stack.pop()\n            else:\n                return False\n\
    \    return len(_stack) == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_left\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            brackets_left\
    \ += 1\n        elif bracket == '>':\n            brackets_left -= 1\n       \
    \ if brackets_left < 0:\n            return False\n    return brackets_left ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n            if count\
    \ < 0:\n                return False\n    return count == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # def\
    \ num_l_brackets(brackets: str) -> int:\n    #     if brackets == '':\n    # \
    \        return 0\n    #     if brackets[0] == '<':\n    #         return 1 +\
    \ num_l_brackets(brackets[1:])\n    #     else:\n    #         return num_l_brackets(brackets[1:])\n\
    \    # def num_r_brackets(brackets: str) -> int:\n    #     if brackets == '':\n\
    \    #         return 0\n    #     if brackets[0] == '>':\n    #         return\
    \ 1 + num_r_brackets(brackets[1:])\n    #     else:\n    #         return num_r_brackets(brackets[1:])\n\
    \    # if num_l_brackets(brackets) == num_r_brackets(brackets):\n    #     return\
    \ True\n    # else:\n    #     return False\n    def num_l_brackets(brackets:\
    \ str) -> int:\n        if brackets == '':\n            return 0\n        elif\
    \ brackets[0] == '<':\n            return 1 + num_l_brackets(brackets[1:])\n \
    \       else:\n            return num_l_brackets(brackets[1:])\n    def num_r_brackets(brackets:\
    \ str) -> int:\n        if brackets == '':\n            return 0\n        elif\
    \ brackets[0] == '>':\n            return 1 + num_r_brackets(brackets[1:])\n \
    \       else:\n            return num_r_brackets(brackets[1:])\n    if num_l_brackets(brackets)\
    \ == num_r_brackets(brackets):\n        return True\n    else:\n        return\
    \ False\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpufji_jkq.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmpufji_jkq.py\", line 65,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpufji_jkq.py\"\
    , line 56, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ brackets.count('<') == brackets.count('>')\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0zofedrr.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0zofedrr.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0zofedrr.py\"\
    , line 23, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    pairs\
    \ = 0\n    for ch in brackets:\n        if ch == '<':\n            pairs += 1\n\
    \        elif ch == '>':\n            pairs -= 1\n        if pairs < 0:\n    \
    \        return False\n    return pairs == 0\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    current_depth\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            current_depth\
    \ += 1\n        elif bracket == '>':\n            current_depth -= 1\n       \
    \ if current_depth < 0:\n            return False\n    return current_depth ==\
    \ 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if len(brackets)\
    \ == 0:\n        return True\n    elif brackets[0] == '>':\n        return False\n\
    \    elif len(brackets) == 1:\n        return False\n    else:\n        b = brackets[1:]\n\
    \        i = b.find('>')\n        if i == -1:\n            return False\n    \
    \    else:\n            return correct_bracketing(b[i+1:])\n        \ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp44f49f19.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp44f49f19.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp44f49f19.py\"\
    , line 30, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    opening_brackets\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            opening_brackets\
    \ += 1\n        else:\n            opening_brackets -= 1\n        if opening_brackets\
    \ < 0:\n            return False\n    return opening_brackets == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            count +=\
    \ 1\n        elif char == '>':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for ch in brackets:\n        if ch == '<':\n            count += 1\n\
    \        elif ch == '>':\n            count -= 1\n        if count < 0:\n    \
    \        return False\n    return count == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ brackets.count('<') == brackets.count('>')\n\n\n@multi\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzd1v_xlc.py\", line\
    \ 17, in <module>\n    @multi\nNameError: name 'multi' is not defined\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            count +=\
    \ 1\n        elif char == '>':\n            count -= 1\n            if count <\
    \ 0:\n                return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    right_brackets\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            right_brackets\
    \ += 1\n        elif char == '>':\n            right_brackets -= 1\n        if\
    \ right_brackets < 0:\n            return False\n    return right_brackets ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ brackets.count('<') == brackets.count('>')\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0zofedrr.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0zofedrr.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0zofedrr.py\"\
    , line 23, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    num_opening\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            num_opening\
    \ += 1\n        elif char == '>':\n            num_opening -= 1\n        if num_opening\
    \ < 0:\n            return False\n    return num_opening == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            count +=\
    \ 1\n        else:\n            count -= 1\n        if count < 0:\n          \
    \  return False\n    return count == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # checks\
    \ to see if the number of < and > are the same.\n    brackets_count = brackets.count('<')\n\
    \    if brackets_count != brackets.count('>'):\n        return False\n    # goes\
    \ through each bracket and checks if the > is before the next <\n    for i in\
    \ range(brackets_count):\n        # finds the first > after the first <\n    \
    \    if brackets.find('>', brackets.find('<')) < brackets.find('<', brackets.find('<')+1):\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5vtg4xar.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp5vtg4xar.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5vtg4xar.py\"\
    , line 29, in check\n    assert candidate('<><><<><>><>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    new_str\
    \ = brackets.replace('><', '')\n    return new_str == ''\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc25nnvf6.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpc25nnvf6.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpc25nnvf6.py\"\
    , line 19, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            count +=\
    \ 1\n        else:\n            count -= 1\n            if count < 0:\n      \
    \          return False\n    return count == 0\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    open_brackets\
    \ = []\n    for bracket in brackets:\n        if bracket == '<':\n           \
    \ open_brackets.append(bracket)\n        elif bracket == '>':\n            if\
    \ open_brackets:\n                open_brackets.pop()\n            else:\n   \
    \             return False\n    return len(open_brackets) == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            brackets_count\
    \ += 1\n        elif bracket == '>':\n            brackets_count -= 1\n      \
    \      if brackets_count < 0:\n                return False\n    return brackets_count\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # list\
    \ that contains the first bracket\n    list_brackets = []\n    # iterate through\
    \ the string, if the first bracket is an opening bracket,\n    # append it to\
    \ the list, else if the first bracket is a closing bracket\n    # check if the\
    \ list is empty and if the last bracket in the list is the\n    # opposite of\
    \ the closing bracket and remove it.\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            list_brackets.append(bracket)\n        elif bracket\
    \ == '>':\n            if len(list_brackets) == 0:\n                return False\n\
    \            elif list_brackets[-1] == '<':\n                list_brackets.pop()\n\
    \    # if the list is empty then there are correct brackets, else there are\n\
    \    # incorrect brackets\n    if len(list_brackets) == 0:\n        return True\n\
    \    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        else:\n            count -= 1\n        if count < 0:\n       \
    \     return False\n    return count == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if len(brackets)\
    \ % 2 != 0:\n        return False\n    bracket_stack = []\n    for symbol in brackets:\n\
    \        if symbol == '<':\n            bracket_stack.append(symbol)\n       \
    \ else:\n            if len(bracket_stack) == 0:\n                return False\n\
    \            bracket_stack.pop()\n    return len(bracket_stack) == 0\n\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ brackets.count('<') == brackets.count('>')\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0zofedrr.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0zofedrr.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0zofedrr.py\"\
    , line 23, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # no\
    \ opening bracket (base case)\n    if brackets == '':\n        return True\n \
    \   # no closing bracket (base case)\n    if brackets[0] == '>':\n        return\
    \ False\n    # recursive case\n    if brackets[0] == '<':\n        return correct_bracketing(brackets[1:])\n\
    \    # recursive case\n    if brackets[0] == '>':\n        # check if the bracketing\
    \ is correct in the rest of the string\n        rest_correct = correct_bracketing(brackets[1:])\n\
    \        # check if the closing bracket matches the opening bracket of the rest\n\
    \        # of the string\n        right_match = brackets[1] == '>'\n        return\
    \ rest_correct and right_match\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp49g9t2zu.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp49g9t2zu.py\", line 48,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp49g9t2zu.py\"\
    , line 34, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    balance\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            balance\
    \ += 1\n        elif bracket == '>':\n            balance -= 1\n        if balance\
    \ < 0:\n            return False\n    return balance == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # NOTE:\
    \ how many brackets have been opened but not closed? If we ever have\n    # to\
    \ close more brackets than we have opened, something's wrong.\n    opened = 0\n\
    \    for c in brackets:\n        if c == '<':\n            opened += 1\n     \
    \   elif c == '>':\n            opened -= 1\n            if opened < 0:\n    \
    \            return False\n    return opened == 0\n\ndef check(candidate):\n \
    \   assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n \
    \   assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    counter\
    \ = 0\n    for each in brackets:\n        if each == '<':\n            counter\
    \ += 1\n        elif each == '>':\n            counter -= 1\n            if counter\
    \ < 0:\n                return False\n    return counter == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ brackets.count('<') == brackets.count('>')\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0zofedrr.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0zofedrr.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0zofedrr.py\"\
    , line 23, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for b in brackets:\n        if b == '<':\n            count += 1\n\
    \        elif b == '>':\n            count -= 1\n        if count < 0:\n     \
    \       return False\n    return count == 0\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ brackets.count('<') == brackets.count('>')\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpes62fk9x.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpes62fk9x.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpes62fk9x.py\"\
    , line 22, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        else:\n            count -= 1\n            if count < 0:\n   \
    \             return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n\
    \        elif char == '>':\n            if stack == []:\n                return\
    \ False\n            else:\n                stack.pop()\n    return stack == []\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if '>'\
    \ not in brackets:\n        return False\n    x = 0\n    for char in brackets:\n\
    \        if char == '<':\n            x += 1\n        elif char == '>':\n    \
    \        x -= 1\n        if x < 0:\n            return False\n    return x ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    counter\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            counter\
    \ += 1\n        elif bracket == '>':\n            counter -= 1\n            if\
    \ counter < 0:\n                return False\n    return counter == 0\n\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # do\
    \ nothing if there is nothing inside the string\n    if len(brackets) == 0:\n\
    \        return True\n    # if the first character is not a \"<\", return False\n\
    \    if brackets[0] != '<':\n        return False\n    # if the last character\
    \ is not a \">\", return False\n    if brackets[-1] != '>':\n        return False\n\
    \    # checking if the brackets are correctly paired\n    count = 0\n    for ch\
    \ in brackets:\n        if ch == '<':\n            count += 1\n        else:\n\
    \            count -= 1\n        if count < 0:\n            return False\n   \
    \ # if the count is not 0, return False\n    if count != 0:\n        return False\n\
    \    # else return True\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    level\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            level\
    \ += 1\n        elif bracket == '>':\n            level -= 1\n        if level\
    \ < 0:\n            return False\n    return level == 0\n    # Alternatively,\
    \ we could use a stack, as below:\n    # stack = []\n    # for bracket in brackets:\n\
    \    #     if bracket == '<':\n    #         stack.append(bracket)\n    #    \
    \ elif bracket == '>':\n    #         if stack:\n    #             stack.pop()\n\
    \    #         else:\n    #             return False\n    # return not stack\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        else:\n            count -= 1\n        if count < 0:\n       \
    \     return False\n    return count == 0\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    num_open\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            num_open\
    \ += 1\n        elif char == '>':\n            num_open -= 1\n        if num_open\
    \ < 0:\n            return False\n    return num_open == 0\n\n\n@functools.lru_cache(maxsize=None)\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppfnntq0k.py\", line\
    \ 25, in <module>\n    @functools.lru_cache(maxsize=None)\nNameError: name 'functools'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    bracket_count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            bracket_count\
    \ += 1\n        elif bracket == '>':\n            bracket_count -= 1\n       \
    \ if bracket_count < 0:\n            return False\n    return bracket_count ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvatd36ej.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpvatd36ej.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpvatd36ej.py\"\
    , line 18, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    opening_brackets\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            opening_brackets\
    \ += 1\n        elif bracket == '>':\n            opening_brackets -= 1\n    \
    \    if opening_brackets < 0:\n            return False\n    return opening_brackets\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    bracket_count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            bracket_count\
    \ += 1\n        else:\n            bracket_count -= 1\n        if bracket_count\
    \ < 0:\n            return False\n    return bracket_count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    num_brackets\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            num_brackets\
    \ += 1\n        elif bracket == '>':\n            num_brackets -= 1\n        if\
    \ num_brackets < 0:\n            return False\n    return num_brackets == 0\n\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    left_brackets\
    \ = []\n    right_brackets = []\n    for bracket in brackets:\n        if bracket\
    \ == '<':\n            left_brackets.append(bracket)\n        elif bracket ==\
    \ '>':\n            right_brackets.append(bracket)\n    if len(left_brackets)\
    \ == len(right_brackets):\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptipa_x6q.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmptipa_x6q.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmptipa_x6q.py\"\
    , line 33, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # TODO:\
    \ replace this line with your code\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbseq7410.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbseq7410.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbseq7410.py\"\
    , line 19, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    assert\
    \ all(char in '<>' for char in brackets)\n    count = 0\n    for char in brackets:\n\
    \        if char == '<':\n            count += 1\n        else:\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if '>'\
    \ not in brackets:\n        return False\n    while '<>' in brackets:\n      \
    \  brackets = brackets.replace('<>', '')\n    return brackets == ''\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    counter\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            counter\
    \ += 1\n        elif bracket == '>':\n            counter -= 1\n        if counter\
    \ < 0:\n            return False\n    return counter == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if not\
    \ brackets:\n        return True\n    if brackets[0] == '>':\n        return False\n\
    \    if brackets[-1] == '<':\n        return False\n    return correct_bracketing(brackets[1:-1])\n\
    \    \n    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4yuylh0c.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp4yuylh0c.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp4yuylh0c.py\"\
    , line 25, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ len(brackets) == 0 or brackets.count('<') == brackets.count('>')\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbkjziuva.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpbkjziuva.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbkjziuva.py\"\
    , line 22, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if len(brackets)\
    \ % 2 != 0:\n        return False\n    x = 0\n    for i in brackets:\n       \
    \ if i == '<':\n            x += 1\n        elif i == '>':\n            x -= 1\n\
    \        if x < 0:\n            return False\n    return x == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ brackets.count('<') == brackets.count('>')\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0zofedrr.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0zofedrr.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0zofedrr.py\"\
    , line 23, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    num_left\
    \ = 0\n\n    for char in brackets:\n        if char == '<':\n            num_left\
    \ += 1\n        else:\n            num_left -= 1\n\n        if num_left < 0:\n\
    \            return False\n\n    return num_left == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    counter\
    \ = 0\n    for i in brackets:\n        if i == '<':\n            counter += 1\n\
    \        elif i == '>':\n            counter -= 1\n            if counter < 0:\n\
    \                return False\n    return counter == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if brackets\
    \ == '':\n        return True\n    elif not (brackets[0] == '<' or brackets[0]\
    \ == '>'):\n        return False\n    else:\n        if brackets[0] == '<':\n\
    \            return (correct_bracketing(brackets[1:]) and\n                  \
    \  '>' in brackets[1:])\n        else:\n            return (correct_bracketing(brackets[1:])\
    \ and\n                    '<' in brackets[1:])\n\n\ndef check(candidate):\n \
    \   assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n \
    \   assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0_50a3yd.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp0_50a3yd.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0_50a3yd.py\"\
    , line 28, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ (brackets.count('<') == brackets.count('>')) and \\\n           (brackets.find('>')\
    \ > brackets.find('<'))\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp82rxnnd0.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp82rxnnd0.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp82rxnnd0.py\"\
    , line 29, in check\n    assert candidate('<><><<><>><>><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ brackets.count('<') == brackets.count('>')\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpes62fk9x.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpes62fk9x.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpes62fk9x.py\"\
    , line 22, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # TODO:\
    \ Add docstring\n    \"\"\" Find the number of opening brackets by counting the\
    \ number of\n    < in the string.\n    >>> count_open_brackets('<><>')\n    2\n\
    \    >>> count_open_brackets('<><<><>')\n    4\n    \"\"\"\n    # TODO: Add docstring\n\
    \    num_open_brackets = brackets.count('<')\n    if num_open_brackets == 0:\n\
    \        return False\n    num_close_brackets = brackets.count('>')\n    if num_open_brackets\
    \ == num_close_brackets:\n        return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjmi3j71o.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpjmi3j71o.py\", line 47,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjmi3j71o.py\"\
    , line 38, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    bracket_count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            bracket_count\
    \ += 1\n        elif bracket == '>':\n            bracket_count -= 1\n       \
    \ if bracket_count < 0:\n            return False\n    return bracket_count ==\
    \ 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        else:\n            count -= 1\n            if count < 0:\n   \
    \             return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # assume\
    \ brackets is a string of \"<\" and \">\"\n    # return True if every opening\
    \ bracket has a corresponding closing bracket\n    left, right = 0, 0\n    for\
    \ char in brackets:\n        if char == '<':\n            left += 1\n        elif\
    \ char == '>':\n            right += 1\n        if right > left:\n           \
    \ return False\n    return left == right\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvatd36ej.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpvatd36ej.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpvatd36ej.py\"\
    , line 18, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    counter\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            counter\
    \ += 1\n        elif char == '>':\n            counter -= 1\n            if counter\
    \ < 0:\n                return False\n    return counter == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if len(brackets)\
    \ == 0:\n        return True\n    elif brackets[0] == '>':\n        return False\n\
    \    else:\n        return correct_bracketing(remove_first_last(brackets))\n\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcqhyihfh.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpcqhyihfh.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpcqhyihfh.py\"\
    , line 23, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpcqhyihfh.py\"\
    , line 19, in correct_bracketing\n    return correct_bracketing(remove_first_last(brackets))\n\
    NameError: name 'remove_first_last' is not defined\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for i in brackets:\n        if i == '<':\n            count += 1\n\
    \        else:\n            count -= 1\n        if count < 0:\n            return\
    \ False\n    return count == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    num_open\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            num_open\
    \ += 1\n        elif bracket == '>':\n            num_open -= 1\n        if num_open\
    \ < 0:\n            return False\n    return num_open == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ brackets.count('<') == brackets.count('>')\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0zofedrr.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0zofedrr.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0zofedrr.py\"\
    , line 23, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    state\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            state\
    \ += 1\n        elif bracket == '>':\n            state -= 1\n        if state\
    \ < 0:\n            return False\n    return state == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    bracket_counter\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            bracket_counter\
    \ += 1\n        elif bracket == '>':\n            bracket_counter -= 1\n     \
    \       if bracket_counter < 0:\n                return False\n    return bracket_counter\
    \ == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for ch in brackets:\n        if ch == '<':\n            count += 1\n\
    \        elif ch == '>':\n            count -= 1\n        if count < 0:\n    \
    \        return False\n    return count == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    total\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            total\
    \ += 1\n        elif bracket == '>':\n            total -= 1\n        if total\
    \ < 0:\n            return False\n    return total == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            count +=\
    \ 1\n        elif char == '>':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822861
