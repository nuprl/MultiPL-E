language: py
name: HumanEval_78_hex_key
results:
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = '2357BDB'\n    return\
    \ len([i for i in num if i in primes])\n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    def is_prime(n: int) -> bool:\n\
    \        if n > 1:\n            for i in range(2, n):\n                if n %\
    \ i == 0:\n                    return False\n            return True\n       \
    \ return False\n    result = 0\n    for i in num:\n        if int(i, 16) in [2,\
    \ 3, 5, 7, 11, 13]:\n            result += 1\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    return len([int(i, 16) for i in num if int(i, 16) in primes])\n\n\n\
    def check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num = int(num, 16)\n    return\
    \ len([el for el in primes(num) if el <= 15])\n\n\ndef check(candidate):\n   \
    \ assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkzpj1__y.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpkzpj1__y.py\", line 37,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpkzpj1__y.py\", line 29,\
    \ in check\n    assert candidate('AB') == 1\n  File \"/tmp/tmpkzpj1__y.py\", line\
    \ 25, in hex_key\n    return len([el for el in primes(num) if el <= 15])\nNameError:\
    \ name 'primes' is not defined\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    count = 0\n    num_set =\
    \ {'2', '3', '5', '7', 'B', 'D'}\n    if num in num_set:\n        count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpat1b4syo.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpat1b4syo.py\", line 40,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpat1b4syo.py\", line 32,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    prime_list = [2, 3, 5, 7,\
    \ 11, 13]\n    count = 0\n    for digit in num:\n        if digit.isalpha():\n\
    \            if ord(digit) - 55 in prime_list:\n                count += 1\n \
    \       elif int(digit) in prime_list:\n            count += 1\n    return count\n\
    \ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if num == '':\n        return\
    \ 0\n    primes = [2, 3, 5, 7, 11, 13]\n    hex_values = {'0': 0, '1': 1, '2':\
    \ 2, '3': 3, '4': 4, '5': 5, '6': 6,\n                  '7': 7, '8': 8, '9': 9,\
    \ 'A': 10, 'B': 11, 'C': 12, 'D': 13,\n                  'E': 14, 'F': 15}\n \
    \   return len([h for h in num if hex_values[h] in primes])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    temp = []\n    count = 0\n    hex_dict = {\n        '0': 0,\n     \
    \   '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n\
    \        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A':\
    \ 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n\
    \        'F': 15\n    }\n    for x in num:\n        if x in hex_dict:\n      \
    \      temp.append(hex_dict[x])\n    for i in temp:\n        if i in primes:\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    count = 0\n    for i in num:\n        if i in ['A', 'B', 'C', 'D',\
    \ 'E', 'F']:\n            i = primes[int(i, 16) - 10]\n        if int(i) in primes:\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2qkzyjrf.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp2qkzyjrf.py\", line 42,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp2qkzyjrf.py\", line 34,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return sum(1 for c in num\
    \ if c in '2357BD')\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num = str(num)\n    hex_values\
    \ = ['2', '3', '5', '7', 'B', 'D']\n    counter = 0\n    for h in hex_values:\n\
    \        if h in num:\n            counter += 1\n    return counter\n\nhex_key('1077E')\n\
    \ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu62gyb85.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpu62gyb85.py\", line 43,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpu62gyb85.py\", line 36,\
    \ in check\n    assert candidate('1077E') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    base16 = '0123456789ABCDEF'\n\
    \    count = 0\n    for i in num:\n        if i in base16[2:]:\n            count\
    \ += 1\n    return count\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe8gopsca.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpe8gopsca.py\", line 40,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpe8gopsca.py\", line 32,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return 0\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl2zr1g0v.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpl2zr1g0v.py\", line 36,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpl2zr1g0v.py\", line 28,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    # primes = [2, 3, 5, 7, 11,\
    \ 13]\n    primes = (2, 3, 5, 7, 11, 13)\n    return sum(1 for x in num if int(x,\
    \ 16) in primes)\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([n for n in num if n in primes])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    count = 0\n    for i in num:\n\
    \        if i in '2357BD':\n            count += 1\n    return count\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if num == \"\":\n       \
    \ return 0\n    else:\n        hex_prime = ['2', '3', '5', '7', 'B', 'D']\n  \
    \      return len([x for x in num if x in hex_prime])\n\nprint(hex_key('AB'))\n\
    print(hex_key('1077E'))\nprint(hex_key('ABED1A33'))\nprint(hex_key('123456789ABCDEF0'))\n\
    print(hex_key('2020'))\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    dec_num = int(num, 16)\n\
    \    if dec_num < 2:\n        return 0\n    divisor = 2\n    primes = 0\n    while\
    \ divisor <= dec_num:\n        if dec_num % divisor == 0:\n            primes\
    \ += 1\n            dec_num //= divisor\n        else:\n            divisor +=\
    \ 1\n    return primes\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1by7gjzg.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp1by7gjzg.py\", line 47,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp1by7gjzg.py\", line 39,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return sum(int(c, 16) in\
    \ {2, 3, 5, 7, 11, 13} for c in num)\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num = int(num, 16)\n    return\
    \ sum(is_prime(i) for i in num_to_digits(num))\n\n\ndef check(candidate):\n  \
    \  assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcs2xjkrd.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpcs2xjkrd.py\", line 37,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpcs2xjkrd.py\", line 29,\
    \ in check\n    assert candidate('AB') == 1\n  File \"/tmp/tmpcs2xjkrd.py\", line\
    \ 25, in hex_key\n    return sum(is_prime(i) for i in num_to_digits(num))\nNameError:\
    \ name 'num_to_digits' is not defined\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    count = 0\n    for el in\
    \ num:\n        if el in ['2', '3', '5', '7', 'B', 'D']:\n            count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    count = 0\n    for c in num:\n        if c in primes:\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    count = 0\n    for item in\
    \ num:\n        if int(item, 16) in (2, 3, 5, 7, 11, 13):\n            count +=\
    \ 1\n    return count\n\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    try:\n        primes = [2,\
    \ 3, 5, 7, 11, 13]\n        list_num = [i for i in num]\n        ctr = 0\n   \
    \     for i in list_num:\n            if int(i, 16) in primes:\n             \
    \   ctr += 1\n        return ctr\n    except ValueError:\n        return False\n\
    def check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return len([i for i in num\
    \ if i in ('2', '3', '5', '7', 'B', 'D')])\n\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqrmqc96_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpqrmqc96_.py\", line 36,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpqrmqc96_.py\", line 28,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num = list(map(lambda x:\
    \ int(x, 16), num))\n    return sum(1 for n in num if n in {2, 3, 5, 7, 11, 13})\n\
    \ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num_list = []\n    for i\
    \ in num:\n        if i in '2357BD':\n            num_list.append(i)\n    return\
    \ len(num_list)\n    \n    \ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    count = 0\n    for i in num:\n\
    \        if i in '2357BD':\n            count += 1\n    return count\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqrmqc96_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpqrmqc96_.py\", line 36,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpqrmqc96_.py\", line 28,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return len([x for x in num\
    \ if int(x, 16) in [2, 3, 5, 7, 11, 13]])\n\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num_dict = {\"0\": 0, \"\
    1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7,\n        \
    \        \"8\": 8, \"9\": 9, \"A\": 10, \"B\": 11, \"C\": 12, \"D\": 13, \"E\"\
    : 14,\n                \"F\": 15}\n    count = 0\n    for n in num:\n        if\
    \ num_dict[n] in [2, 3, 5, 7, 11, 13]:\n            count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hex_to_dec = {\n        '0':\
    \ 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n   \
    \     '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    counter = 0\n    for letter in\
    \ num:\n        if hex_to_dec[letter] in [2, 3, 5, 7, 11, 13]:\n            counter\
    \ += 1\n    return counter\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = {'A': 11, 'B': 13,\
    \ 'D': 17}\n    res = 0\n    for i in num:\n        if i in primes.keys():\n \
    \           res += 1\n        elif int(i) in [2, 3, 5, 7]:\n            res +=\
    \ 1\n    return res\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpswn_ynkx.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpswn_ynkx.py\", line 43,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpswn_ynkx.py\", line 35,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num = num.upper()\n    return\
    \ len([i for i in num if int(i, 16) in (2, 3, 5, 7, 11, 13)])\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    pass\n    # your code here\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lgo3cas.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp9lgo3cas.py\", line 37,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp9lgo3cas.py\", line 29,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return sum(n in '2357BD'\
    \ for n in num)\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hex_digits = {'0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9',\n                  'A', 'B', 'C', 'D', 'E',\
    \ 'F'}\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    num = set(list(num))\n\
    \    num = num.intersection(hex_digits)\n    return len(num.intersection(primes))\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphtmu7230.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmphtmu7230.py\", line 41,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmphtmu7230.py\", line 34,\
    \ in check\n    assert candidate('1077E') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    # for num in nums:\n    #\
    \     prime_list = []\n    #     for i in num:\n    #         if i in primes:\n\
    \    #             prime_list.append(i)\n    #     return len(prime_list)\n  \
    \  return len([i for i in num if i in primes])\n\n\ndef check(candidate):\n  \
    \  assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpngpei9x6.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpngpei9x6.py\", line 42,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpngpei9x6.py\", line 34,\
    \ in check\n    assert candidate('AB') == 1\n  File \"/tmp/tmpngpei9x6.py\", line\
    \ 30, in hex_key\n    return len([i for i in num if i in primes])\n  File \"/tmp/tmpngpei9x6.py\"\
    , line 30, in <listcomp>\n    return len([i for i in num if i in primes])\nNameError:\
    \ name 'primes' is not defined\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if num == '':\n        return\
    \ 0\n    primes = (2, 3, 5, 7, 11, 13)\n    hex_primes = 0\n    for n in num:\n\
    \        if int(n, 16) in primes:\n            hex_primes += 1\n    return hex_primes\n\
    \ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return len([x for x in num\
    \ if x in ['2', '3', '5', '7', 'B', 'D']])\n\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    dict_hex = {'0': 0, '1':\
    \ 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, \n                '7': 7, '8': 8,\
    \ '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, \n                'E': 14, 'F':\
    \ 15}\n    count = 0\n    for i in num:\n        if dict_hex[i] in [2, 3, 5, 7,\
    \ 11, 13]:\n            count += 1\n    return count\n    \n    \ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num = num.upper()\n    return\
    \ len([i for i in num if i in '2357BD'])\n\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hex_number = []\n    for\
    \ i in num:\n        # Hex digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D,\
    \ E, F.\n        if i.isnumeric() or i in \"ABCDEF\":\n            hex_number.append(i)\n\
    \    # Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    # So we have to determine\
    \ a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n\
    \    prime_digits = [2, 3, 5, 7, 11, 13]\n    prime_digits_16 = [\"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\"]\n    counter = 0\n    for i in hex_number:\n   \
    \     if i in prime_digits_16:\n            counter += 1\n    return counter\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    #return len([x for x in num\
    \ if int(x,16) in [2,3,5,7,11,13]])\n    #return sum(x in \"2357BD\" for x in\
    \ num)\n    return len([1 for x in num if int(x,16) in [2,3,5,7,11,13]])\n   \
    \ #return len(list(filter(lambda x: int(x,16) in [2,3,5,7,11,13], num)))\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    # get the number of primes\
    \ in decimal number\n    decimal_num = int(num, 16)\n    primes = 0\n    for i\
    \ in range(2, decimal_num):\n        if decimal_num % i == 0:\n            primes\
    \ += 1\n    return primes\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplx130xp1.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmplx130xp1.py\", line 42,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmplx130xp1.py\", line 34,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = set('2357BD')\n\
    \    return sum(char in primes for char in num)\n\ndef check(candidate):\n   \
    \ assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([i for i in num if i in primes])\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return 0 if not num else\
    \ sum(\n        [1 for i in num if i in '2357BD'])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if not num:\n        return\
    \ 0\n    hex_primes = '2357BD'\n    return sum(num[i] in hex_primes for i in range(len(num)))\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    prime_list = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    count = 0\n    for i in num:\n        if i in prime_list:\n\
    \            count += 1\n    return count\n    \n    \n    \n    \n    \n\nprint(hex_key('0123456789ABCDEF'))\n\
    def check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '6

    '
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return len([i for i in num\
    \ if int(i, 16) % 2 != 0 and \\\n                int(i, 16) % 3 != 0 and int(i,\
    \ 16) % 5 != 0 and \\\n                int(i, 16) % 7 != 0 and int(i, 16) % 11\
    \ != 0 and \\\n                int(i, 16) % 13 != 0])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7q6e8ske.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp7q6e8ske.py\", line 39,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp7q6e8ske.py\", line 31,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num = [int(x, 16) for x in\
    \ num]\n    primes = [2, 3, 5, 7, 11, 13]\n    return len([i for i in num if i\
    \ in primes])\n\nprint(hex_key('1077E'))\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return len([int(i, 16) for\
    \ i in num if int(i, 16) in (2, 3, 5, 7, 11, 13)])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    new_num = int(num, 16)\n\
    \    c = 0\n    for i in range(2, new_num + 1):\n        if new_num % i == 0:\n\
    \            c += 1\n    if c > 2:\n        return 0\n    else:\n        return\
    \ 1\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpycss6hrq.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpycss6hrq.py\", line 44,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpycss6hrq.py\", line 36,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    count = 0\n    num = str(num)\n\
    \    for i in range(len(num)):\n        if num[i] in ['B', 'D', '2', '3', '5',\
    \ '7']:\n            count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    try:\n        return sum(1\
    \ for x in num if int(x, 16) in {2, 3, 5, 7, 11, 13})\n    except ValueError:\n\
    \        return 0\n\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num = num.upper()\n    primes\
    \ = ['2', '3', '5', '7', 'B', 'D']\n    return len([x for x in num if x in primes])\n\
    \ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    Hex = {'0': 0, '1': 1, '2':\
    \ 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7,\n           '8': 8, '9': 9, 'A':\
    \ 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    keys = [2, 3, 5, 7, 11,\
    \ 13]\n    return sum(Hex[i] in keys for i in num)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num = num.upper()\n    counter\
    \ = 0\n    for i in num:\n        if i in '2357BD':\n            counter += 1\n\
    \    return counter\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return len([i for i in num\
    \ if int(i, 16) in (2, 3, 5, 7, 11, 13)])\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if len(num) == 0:\n     \
    \   return 0\n    lst = list(num)\n    s = set(['2', '3', '5', '7', 'B', 'D'])\n\
    \    return len([x for x in lst if x in s])\n\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    prime_digits = [i for i in\
    \ \"2357BD\"]\n    return sum(i in prime_digits for i in num)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = '2357BD'\n    count\
    \ = 0\n    for char in num:\n        if char in primes:\n            count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    d = {'2':2, '3':3, '5':5,\
    \ '7':7, 'B':11, 'D':13}\n    count = 0\n    for i in num:\n        if i in d:\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if num:\n        dict_num\
    \ = {'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n        count = 0\n\
    \        for char in num:\n            if char in dict_num:\n                if\
    \ is_prime(dict_num[char]):\n                    count += 1\n            else:\n\
    \                if is_prime(int(char)):\n                    count += 1\n   \
    \     return count\n    else:\n        return 0\n\n\ndef check(candidate):\n \
    \   assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq0uo44ke.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpq0uo44ke.py\", line 48,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpq0uo44ke.py\", line 40,\
    \ in check\n    assert candidate('AB') == 1\n  File \"/tmp/tmpq0uo44ke.py\", line\
    \ 29, in hex_key\n    if is_prime(dict_num[char]):\nNameError: name 'is_prime'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    s = \"ABCDEF\"\n    i = 1\n\
    \    count = 0\n    while i < len(num):\n        if num[i] == s[i]:\n        \
    \    count += 1\n            i += 1\n        else:\n            i += 1\n    return\
    \ count\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpreupxa8h.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpreupxa8h.py\", line 43,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpreupxa8h.py\", line 36,\
    \ in check\n    assert candidate('1077E') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if not num:\n        return\
    \ 0\n    num = list(num)\n    total = 0\n    for char in num:\n        if char\
    \ == '2' or char == '3' or char == '5' or char == '7' or char == 'B' or char ==\
    \ 'D':\n            total += 1\n    return total\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hex_dict = {'0': 0, '1':\
    \ 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7,\n                '8': 8,\
    \ '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    prime_num\
    \ = ['2', '3', '5', '7', 'B', 'D']\n    num = list(num)\n    count = 0\n    for\
    \ i in num:\n        if i in prime_num:\n            count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = '2357BDF'\n    count\
    \ = 0\n    for i in num:\n        if i in primes:\n            count += 1\n  \
    \  return count\n\ndef check(candidate):\n    assert candidate('AB') == 1\n  \
    \  assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n   \
    \ assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') == 6\n\
    \    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_z1e8fqr.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp_z1e8fqr.py\", line 40,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp_z1e8fqr.py\", line 36,\
    \ in check\n    assert candidate('123456789ABCDEF0') == 6\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    cnt = 0\n    prime_nums =\
    \ {2, 3, 5, 7, 11, 13}\n    for i in num:\n        int_i = int(i, 16)\n      \
    \  if int_i in prime_nums:\n            cnt += 1\n    return cnt\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hex_nums = {'2', '3', '5',\
    \ '7', 'B', 'D'}\n    return len([c for c in num if c in hex_nums])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num = num.upper()\n    s\
    \ = set(['2', '3', '5', '7', 'B', 'D'])\n    return len([n for n in num if n in\
    \ s])\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    base = 16\n    p_digits =\
    \ '2357BD'\n    p_digits_base = [int(char, base) for char in p_digits]\n    n_digits\
    \ = len(num)\n    return len([i for i in range(n_digits) if int(num[i], base)\
    \ in p_digits_base])\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = {'1', '3', '5',\
    \ '7', 'b', 'd'}\n    return len([prime for prime in num.lower() if prime in primes])\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4tbs87kg.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp4tbs87kg.py\", line 37,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp4tbs87kg.py\", line 30,\
    \ in check\n    assert candidate('1077E') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return sum(1 for k in num\
    \ if k in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hex_primes = set('2357bd')\n\
    \    return sum(digit in hex_primes for digit in num.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    primes_hex = [hex(prime)[2:] for prime in primes]\n    return sum(1\
    \ for digit in num if digit in primes_hex)\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3i5l5d7l.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp3i5l5d7l.py\", line 37,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp3i5l5d7l.py\", line 29,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hex_number = {'A': 11, 'B':\
    \ 12, 'C': 13, 'D': 14, 'E': 15, 'F': 16}\n    count = 0\n    for i in num:\n\
    \        if i in hex_number:\n            n = hex_number[i]\n        else:\n \
    \           n = int(i)\n        if prime(n):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxifs2qv3.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpxifs2qv3.py\", line 45,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpxifs2qv3.py\", line 37,\
    \ in check\n    assert candidate('AB') == 1\n  File \"/tmp/tmpxifs2qv3.py\", line\
    \ 31, in hex_key\n    if prime(n):\nNameError: name 'prime' is not defined. Did\
    \ you mean: 'print'?\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    # The second solution is\
    \ base on the first.\n    # return len([1 for n in '2357BDA' if n in num])\n \
    \   hex_number = '2357BDA'\n    count = 0\n    for i in num:\n        if i in\
    \ hex_number:\n            count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp73v2vcwl.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp73v2vcwl.py\", line 43,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp73v2vcwl.py\", line 35,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    counter = 0\n    for char in num:\n        if char in primes:\n\
    \            counter += 1\n    return counter\n\n\ndef check(candidate):\n   \
    \ assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = '2357BD'\n    total\
    \ = 0\n    for char in num:\n        if char in primes:\n            total +=\
    \ 1\n    return total\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    key = 0\n    hex_prime =\
    \ [2, 3, 5, 7, 11, 13]\n    for i in num:\n        if i.isdigit():\n         \
    \   if int(i) in hex_prime:\n                key += 1\n        else:\n       \
    \     if (int(i, 16) - 9) in hex_prime:\n                key += 1\n    return\
    \ key\n    \ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwnuq2zj_.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpwnuq2zj_.py\", line 44,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpwnuq2zj_.py\", line 37,\
    \ in check\n    assert candidate('1077E') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num = ''.join(num.split())\n\
    \    return sum(1 for n in num if n in '2357BD')\n\ndef check(candidate):\n  \
    \  assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if not num:\n        return\
    \ 0\n    return len([n for n in num if n in \"2357BD\"])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    key_lst = []\n    for i in\
    \ num:\n        if i in '2357BD':\n            key_lst.append(i)\n    return len(key_lst)\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    return len([i for i in num if int(i, 16) in primes])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    prime_digits = ['2', '3',\
    \ '5', '7', 'B', 'D']\n    return sum(int(dig in prime_digits) for dig in num)\n\
    hex_key('AB')\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return sum(i in '2357BD'\
    \ for i in num)\n\ndef check(candidate):\n    assert candidate('AB') == 1\n  \
    \  assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n   \
    \ assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') == 6\n\
    \    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num_str = ''.join(num.split())\n\
    \    num_str = ''.join(num_str.split('0x'))\n    primes = {'2', '3', '5', '7',\
    \ 'B', 'D'}\n    counter = 0\n    for x in num_str:\n        if x in primes:\n\
    \            counter += 1\n    return counter\n\n\ndef check(candidate):\n   \
    \ assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num_map = {\n        '0':\
    \ 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n   \
    \     '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    key = [2, 3, 5, 7, 11, 13]\n  \
    \  count = 0\n    for i in num:\n        if num_map[i] in key:\n            count\
    \ += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return len([x for x in num\
    \ if int(x, 16) in (2, 3, 5, 7, 11, 13)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hex_num = {\n        '0':\
    \ 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n   \
    \     '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    count = 0\n    for k, v in hex_num.items():\n\
    \        if v in (2, 3, 5, 7, 11, 13):\n            count += num.count(k)\n  \
    \  return count\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = \"2357BD\"\n   \
    \ count = 0\n    for d in num:\n        if d in primes:\n            count +=\
    \ 1\n    return count\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if num == \"\":\n       \
    \ return 0\n    return sum(\n        int(i, 16) in [2, 3, 5, 7, 11, 13]\n    \
    \    for i in num\n    )\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([x for x in list(num) if x in primes])\n\n\n\
    def check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    prime_hex = [2, 3, 5, 7,\
    \ 11, 13]\n    count = 0\n    for char in num:\n        if int(char, 16) in prime_hex:\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hex_primes = '2357BD'\n \
    \   count = 0\n    for d in num:\n        if d in hex_primes:\n            count\
    \ += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return sum([x in \"2357BD\"\
    \ for x in num])\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = set(['2', '3', '5',\
    \ '7', 'B', 'D'])\n    return len([p for p in num if p in primes])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hex_prime = {\"0\", \"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \n          \
    \       \"B\", \"C\", \"D\", \"E\", \"F\"}\n    prime_hex = {0, 1, 2, 3, 5, 7,\
    \ 11, 13}\n    set_num = set(list(num))\n    return len(set_num & hex_prime &\
    \ prime_hex)\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n   \
    \ assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert\
    \ candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert\
    \ candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n \
    \   check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyli57uzq.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpyli57uzq.py\", line 40,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpyli57uzq.py\", line 32,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hex_dict = {\n        '2':\
    \ 1,\n        '3': 1,\n        '5': 1,\n        '7': 1,\n        'B': 1,\n   \
    \     'D': 1,\n    }\n    count = 0\n    for value in num:\n        if value in\
    \ hex_dict:\n            count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return len([i for i in num\
    \ if int(i, 16) in [2, 3, 5, 7, 11, 13]])\n\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if not num:\n        return\
    \ 0\n    return len([1 for x in num if x in '2357BD'])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    key_list = []\n    for i\
    \ in num:\n        if i.isdigit():\n            key_list.append(int(i))\n    \
    \    else:\n            key_list.append(ord(i) - 55)\n    return len([i for i\
    \ in key_list if i in [2, 3, 5, 7, 11, 13]])\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    binary = bin(int(num, 16))[2:]\n\
    \    primes = [i for i in range(2, int(binary, 2)) if all(i % j != 0 for j in\
    \ range(2, i))]\n    return len([i for i in binary if str(i) in [str(x) for x\
    \ in primes]])\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n \
    \   assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n  \
    \  assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyibrx_c5.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpyibrx_c5.py\", line 38,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpyibrx_c5.py\", line 30,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    prime_numbers = {'2', '3',\
    \ '5', '7', 'B', 'D'}\n    return len([i for i in num if i in prime_numbers])\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if num:\n        l = list(num)\n\
    \        l1 = [i for i in l if i in '2357BD']\n        return len(l1)\n    else:\n\
    \        return 0\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hexadecimal = {'0': 0, '1':\
    \ 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9,\n       \
    \            'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    primenumbers\
    \ = {2, 3, 5, 7, 11, 13}\n    count = 0\n    for i in num:\n        if hexadecimal[i]\
    \ in primenumbers:\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num = num.upper()\n    count\
    \ = 0\n    primes = '2357BD'\n    for n in num:\n        if n in primes:\n   \
    \         count += 1\n    return count\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    a, b, c, d, e, f = 0, 1,\
    \ 2, 3, 4, 5\n    primes = [2, 3, 5, 7, 11, 13]\n    num = list(str(num))\n  \
    \  for i in range(len(num)):\n        if int(num[i], 16) in primes:\n        \
    \    if int(num[i], 16) == 10:\n                a += 1\n            elif int(num[i],\
    \ 16) == 11:\n                b += 1\n            elif int(num[i], 16) == 12:\n\
    \                c += 1\n            elif int(num[i], 16) == 13:\n           \
    \     d += 1\n            elif int(num[i], 16) == 14:\n                e += 1\n\
    \            elif int(num[i], 16) == 15:\n                f += 1\n    return (a+b+c+d+e+f)\n\
    \ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpldds_qfd.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpldds_qfd.py\", line 52,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpldds_qfd.py\", line 44,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    assert num != '', 'Input\
    \ cannot be empty'\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return len([i\
    \ for i in num if i in primes])\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    data = [2, 3, 5, 7, 11, 13]\n\
    \    count = 0\n    if num == '':\n        return 0\n    else:\n        for x\
    \ in num:\n            if int(x, 16) in data:\n                count += 1\n  \
    \      return count\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    key = {'2':2, '3':3, '5':5,\
    \ '7':7, 'B':11, 'D':13}\n    cnt = 0\n    for i in num:\n        if i in key:\n\
    \            cnt += 1\n    return cnt\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return len([int(i, 16) for\
    \ i in num if int(i, 16) in (2, 3, 5, 7, 11, 13)])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return sum(1 for x in num\
    \ if x in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([el for el in num if el in primes])\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = ('2', '3', '5',\
    \ '7', 'B', 'D')\n    return len([x for x in num if x in primes])\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return len([char for char\
    \ in num if char in '2357BD'])\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hex_primes = set('2357BDF')\n\
    \    res = 0\n    for i in num:\n        if i in hex_primes:\n            res\
    \ += 1\n    return res\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9qxqu4t_.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp9qxqu4t_.py\", line 41,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp9qxqu4t_.py\", line 37,\
    \ in check\n    assert candidate('123456789ABCDEF0') == 6\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    a = ['2', '3', '5', '7',\
    \ 'B', 'D']\n    count = 0\n    for i in num:\n        if i in a:\n          \
    \  count += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num = int(num, 16)\n    n\
    \ = 0\n    while num:\n        mod = num % 10\n        if mod in [2, 3, 5, 7,\
    \ 11, 13]:\n            n += 1\n        num //= 10\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv87baely.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpv87baely.py\", line 43,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpv87baely.py\", line 39,\
    \ in check\n    assert candidate('123456789ABCDEF0') == 6\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num_hex = {'0': 0, '1': 1,\
    \ '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B':\
    \ 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    sum = 0\n    for i in num:\n  \
    \      if num_hex[i] in [2, 3, 5, 7, 11, 13]:\n            sum += 1\n    return\
    \ sum\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = {'2', '3', '5',\
    \ '7', 'B', 'D'}\n    return len([c for c in num if c in primes])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    digits = ['0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n    primes\
    \ = ['2', '3', '5', '7', 'B', 'D']\n    return len([i for i in num if i in primes])\n\
    hex_key('AB')\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    count = 0\n    for i in num:\n\
    \        if i in '2357BD':\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    total = 0\n    for char in\
    \ num:\n        if char in '2357BD':\n            total += 1\n    return total\n\
    \ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    return len([hexadecimal for hexadecimal in num if int(hexadecimal,\
    \ 16) in primes])\n    \n    \ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = {'2', '3', '5',\
    \ '7', 'B', 'D'}\n    return len([c for c in num if c in primes])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return len([k for k in num\
    \ if k in '2357BD'])\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return len([i for i in num\
    \ if int(i,16) in (2,3,5,7,11,13)])\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([i for i in num if i in primes])\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    count = 0\n    dec = {'A':\
    \ 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    for i in num:\n      \
    \  # print(i)\n        if i in dec:\n            count += 1 if int(dec[i]) in\
    \ [2, 3, 5, 7, 11, 13] else 0\n        else:\n            count += 1 if int(i)\
    \ in [2, 3, 5, 7, 11, 13] else 0\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hex_nums = ['0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n    primes\
    \ = ['2', '3', '5', '7', 'B', 'D']\n    result = 0\n    for char in num:\n   \
    \     if char in primes:\n            result += 1\n    return result\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num = hex_to_dec(num)\n \
    \   return prime_numbers(num)\n    \n    \ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzr23fejw.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpzr23fejw.py\", line 37,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpzr23fejw.py\", line 29,\
    \ in check\n    assert candidate('AB') == 1\n  File \"/tmp/tmpzr23fejw.py\", line\
    \ 24, in hex_key\n    num = hex_to_dec(num)\nNameError: name 'hex_to_dec' is not\
    \ defined\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    count = 0\n    for char in num:\n        if char in primes:\n\
    \            count += 1\n    return count\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    return len([i for i in list(num) if int(i, 16) in primes])\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = '2357BDF'\n    return\
    \ sum(map(lambda x: x in primes, num))\n\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9uxrz_z_.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp9uxrz_z_.py\", line 37,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp9uxrz_z_.py\", line 33,\
    \ in check\n    assert candidate('123456789ABCDEF0') == 6\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hex_digits = set('2357BD')\n\
    \    return sum(1 for char in num if char in hex_digits)\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    c = 0\n    for i in num:\n\
    \        if i in '2357BD':\n            c += 1\n    return c\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return len([i for i in num\
    \ if int(i, 16) in [2, 3, 5, 7, 11, 13]])\n\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hexadecimal = ''.join(num.split())\n\
    \    count = 0\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    for i in hexadecimal:\n\
    \        if i in primes:\n            count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    # your code here\n    primes\
    \ = '2357BD'\n    return len([1 for x in num if x in primes])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return len([i for i in num\
    \ if int(i, 16) in (2, 3, 5, 7, 11, 13)])\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    total = 0\n    while num:\n\
    \        digit = int(num[-1], 16)\n        if is_prime(digit):\n            total\
    \ += 1\n        num = num[:-1]\n    return total\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprcpd346h.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmprcpd346h.py\", line 42,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmprcpd346h.py\", line 34,\
    \ in check\n    assert candidate('AB') == 1\n  File \"/tmp/tmprcpd346h.py\", line\
    \ 27, in hex_key\n    if is_prime(digit):\nNameError: name 'is_prime' is not defined\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num_dict = {\n        '2':\
    \ True, '3': True, '5': True, '7': True, 'B': True, 'D': True\n    }\n    hex_num\
    \ = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',\
    \ 'F']\n    cnt = 0\n    for n in num:\n        if n in hex_num:\n           \
    \ if n in num_dict:\n                cnt += 1\n    return cnt\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return 0 if not num else\
    \ (num.upper().count('2') + num.upper().count('3') + num.upper().count('5') +\
    \ num.upper().count('7') + num.upper().count('B') + num.upper().count('D'))\n\n\
    \ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    # Replace this for solution\n\
    \    from itertools import product\n    from string import ascii_uppercase\n \
    \   from time import time\n    from math import sqrt\n    start = time()\n   \
    \ if len(num) == 0:\n        return 0\n    else:\n        primes = []\n      \
    \  # hex_num = ''.join(num)\n        hex_num = num\n        hex_digit = [str(i)\
    \ for i in range(10)] + [i for i in ascii_uppercase[0:6]]\n        primes.append(2)\n\
    \        for i in range(3, int(sqrt(16)), 2):\n            if not any([i % k ==\
    \ 0 for k in range(2, int(sqrt(i)))]):\n                primes.append(i)\n   \
    \     # print(primes)\n        return len([i for i in hex_num if int(i, 16) in\
    \ primes])\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1d1xthqa.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmp1d1xthqa.py\", line 53,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp1d1xthqa.py\", line 45,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return len([1 for x in num\
    \ if int(x, 16) in [2, 3, 5, 7, 11, 13]])\n\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return len([i for i in num\
    \ if int(i, 16) in [2, 3, 5, 7, 11, 13]])\n\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return len([i for i in num\
    \ if i in '2357BD'])\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    def check_prime(n: int) ->\
    \ bool:\n        if n in [2, 3, 5, 7, 11, 13]:\n            return True\n    \
    \    return False\n    return sum(1 for i in num if check_prime(int(i, 16)))\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = '2357BD'\n    count\
    \ = 0\n    for i in num:\n        if i in primes:\n            count += 1\n  \
    \  return count\n\ndef check(candidate):\n    assert candidate('AB') == 1\n  \
    \  assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n   \
    \ assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') == 6\n\
    \    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    lst = list(num)\n    return len([x for x in lst if x in\
    \ primes])\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = {'2', '3', '5',\
    \ '7', 'B', 'D'}\n    return len([x for x in num if x in primes])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    count = 0\n    primes = '2357BD'\n\
    \    for n in num:\n        if n in primes:\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([x for x in num if x in primes])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    sum = 0\n    for i in num:\n        num = int(i, 16)\n        if num\
    \ in primes:\n            sum += 1\n    return sum\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    # check that input is string\n\
    \    assert isinstance(num, str), \"input must be string\"\n    # check that input\
    \ is not empty\n    assert len(num) > 0, \"input must not be empty\"\n    # dictionary\
    \ of prime digits\n    dict_of_primes = {'2': 0, '3': 0, '5': 0, '7': 0, 'B':\
    \ 0, 'D': 0}\n    # loop through string and populate dict\n    for digit in num:\n\
    \        if digit in dict_of_primes:\n            dict_of_primes[digit] += 1\n\
    \    # return sum of values in dict\n    return sum(dict_of_primes.values())\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    # your code here\n    primes\
    \ = '2357BD'\n    count = 0\n    for i in num:\n        if i in primes:\n    \
    \        count += 1\n    return count\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = \"2357BD\"\n   \
    \ num = num.upper()\n    return len([i for i in num if i in primes])\n\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = {'2', '3', '5',\
    \ '7', 'B', 'D'}\n    count = 0\n    for char in num:\n        if char in primes:\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    count = 0\n    for i in num:\n\
    \        if i == '2' or i == '3' or i == '5' or i == '7' or i == 'B' or i == 'D':\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return len([c for c in num\
    \ if int(c, 16) in [2, 3, 5, 7, 11, 13]])\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    key = {'A': '10', 'B': '11',\
    \ 'C': '12', 'D': '13', 'E': '14', 'F': '15'}\n    for k, v in key.items():\n\
    \        num = num.replace(k, v)\n    # print(num)\n    res = 0\n    for i in\
    \ num:\n        if i in '2357':\n            res += 1\n    return res\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzg3eegdt.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpzg3eegdt.py\", line 44,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpzg3eegdt.py\", line 36,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = '2357BD'\n    return\
    \ sum(char in primes for char in num)\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hex_primes = {\"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\"}\n    return len([x for x in num if x in hex_primes])\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    ans = 0\n    for i in list(num):\n\
    \        if i in ['2', '3', '5', '7', 'B', 'D']:\n            ans += 1\n    return\
    \ ans\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num = set(num)\n    primes\
    \ = '2357BD'\n    # total = 0\n    # for i in num:\n    #     if i in primes:\n\
    \    #         total += 1\n    # return total\n    return len(num.intersection(primes))\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphz1vsq8x.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmphz1vsq8x.py\", line 43,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmphz1vsq8x.py\", line 36,\
    \ in check\n    assert candidate('1077E') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    pass\n    \n    \ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmyvnvnki.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpmyvnvnki.py\", line 36,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpmyvnvnki.py\", line 28,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    a = int(num, 16)\n    c =\
    \ 0\n    while a:\n        if a % 2 == 0:\n            c += 1\n        a //= 2\n\
    \    return c\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp85jvg5lb.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp85jvg5lb.py\", line 41,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp85jvg5lb.py\", line 33,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return len([x for x in list(num)\
    \ if x in '2357BDF'])\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp88_4dctn.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp88_4dctn.py\", line 35,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp88_4dctn.py\", line 31,\
    \ in check\n    assert candidate('123456789ABCDEF0') == 6\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return sum(1 for char in\
    \ num if char in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hexadecimal = {'A': 10, 'B':\
    \ 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    if not num:\n        return 0\n\
    \    count = 0\n    for i in num:\n        if i in hexadecimal:\n            if\
    \ (hexadecimal[i] > 1) and (hexadecimal[i] <= 13):\n                count += 1\n\
    \        elif (int(i) > 1) and (int(i) <= 13):\n            count += 1\n    return\
    \ count\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxr8nmdy_.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpxr8nmdy_.py\", line 45,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpxr8nmdy_.py\", line 37,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    # \u9898\u76EE\u6761\u4EF6\
    \uFF1A\u53EA\u6709\u5341\u516D\u8FDB\u5236\u91CC\u9762\u7684\u6570\u5B57\u53EF\
    \u4EE5\u88AB\u8BA1\u7B97\n    hex_prime = {'0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    num_list = []\n    for i in\
    \ num:\n        if i in hex_prime:\n            num_list.append(i)\n    num_list\
    \ = [int(i, 16) for i in num_list]\n    # print(num_list)\n    count = 0\n   \
    \ for i in num_list:\n        if i > 1:\n            for j in range(2, i):\n \
    \               if i % j == 0:\n                    break\n            else:\n\
    \                count += 1\n    return count\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    res = 0\n    for i in num:\n\
    \        if i in ['2', '3', '5', '7', 'B', 'D']:\n            res += 1\n    return\
    \ res\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    dict_hex = {'0': 0, '1':\
    \ 1, '2': 2, '3': 3, '4': 4, '5': 5,\n                '6': 6, '7': 7, '8': 8,\
    \ '9': 9, 'A': 10, 'B': 11,\n                'C': 12, 'D': 13, 'E': 14, 'F': 15}\n\
    \    result = []\n    for i in num:\n        result.append(dict_hex[i])\n    return\
    \ len([i for i in result if i in [2, 3, 5, 7, 11, 13]])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    dec_map = {'A': 10, 'B':\
    \ 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    primes = [2, 3, 5, 7, 11, 13]\n\
    \    return sum(i in primes for i in [int(dec_map.get(x, x)) for x in num])\n\n\
    \ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return sum(1 for i in num\
    \ if int(i, 16) in PRIMES)\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_txjnudm.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp_txjnudm.py\", line 36,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp_txjnudm.py\", line 28,\
    \ in check\n    assert candidate('AB') == 1\n  File \"/tmp/tmp_txjnudm.py\", line\
    \ 24, in hex_key\n    return sum(1 for i in num if int(i, 16) in PRIMES)\n  File\
    \ \"/tmp/tmp_txjnudm.py\", line 24, in <genexpr>\n    return sum(1 for i in num\
    \ if int(i, 16) in PRIMES)\nNameError: name 'PRIMES' is not defined\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = [\"2\", \"3\", \"\
    5\", \"7\", \"B\", \"D\"]\n    count = 0\n    for letter in num:\n        if letter\
    \ in primes:\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return sum(1 for dig in num if dig in hex_primes)\n\n\n\
    def check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hex_num = {'0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    count\
    \ = 0\n    for num in hex_num:\n        if num == '2' or num == '3' or num ==\
    \ '5' or num == '7' or num == 'B' or num == 'D':\n            count += 1\n   \
    \ return count\nprint(hex_key('AB'))\nprint(hex_key('1077E'))\nprint(hex_key('ABED1A33'))\n\
    print(hex_key('123456789ABCDEF0'))\nprint(hex_key('2020'))\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1qjzvg0b.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp1qjzvg0b.py\", line 44,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp1qjzvg0b.py\", line 36,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: '6

    6

    6

    6

    6

    '
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num = num.upper()\n    hexa\
    \ = \"0123456789ABCDEF\"\n    count = 0\n    for i in num:\n        if i in hexa:\n\
    \            if int(i, 16) in (2, 3, 5, 7, 11, 13):\n                count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hex_list = {'0': 0, '1':\
    \ 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10,\
    \ 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    if not num:\n        return\
    \ 0\n    else:\n        return len([y for y in num if y in hex_list and is_prime(hex_list[y])])\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp51zyla_2.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp51zyla_2.py\", line 40,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp51zyla_2.py\", line 32,\
    \ in check\n    assert candidate('AB') == 1\n  File \"/tmp/tmp51zyla_2.py\", line\
    \ 28, in hex_key\n    return len([y for y in num if y in hex_list and is_prime(hex_list[y])])\n\
    \  File \"/tmp/tmp51zyla_2.py\", line 28, in <listcomp>\n    return len([y for\
    \ y in num if y in hex_list and is_prime(hex_list[y])])\nNameError: name 'is_prime'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return sum(1 for i in num\
    \ if i in '2357BD')\n\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num = int(num, 16)\n    count\
    \ = 0\n    for i in range(2, 16):\n        if is_prime(i):\n            count\
    \ += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_6kii22l.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp_6kii22l.py\", line 41,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp_6kii22l.py\", line 33,\
    \ in check\n    assert candidate('AB') == 1\n  File \"/tmp/tmp_6kii22l.py\", line\
    \ 27, in hex_key\n    if is_prime(i):\nNameError: name 'is_prime' is not defined\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    res = 0\n    primes = [2,\
    \ 3, 5, 7, 11, 13]\n    for i in num:\n        if int(i, 16) in primes:\n    \
    \        res += 1\n    return res\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = {2, 3, 5, 7, 11,\
    \ 13}\n    return sum(1 for x in num if int(x, 16) in primes)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if not num:\n        return\
    \ 0\n    primes = set(['2', '3', '5', '7', 'B', 'D'])\n    return len([x for x\
    \ in num if x in primes])\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    key = {'2':True, '3':True,\
    \ '5':True, '7':True, 'B':True, 'D':True}\n    return sum(key.get(x, False) for\
    \ x in num)\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = set('2357BD')\n\
    \    count = 0\n    for char in num:\n        if char in primes:\n           \
    \ count += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hex_digits = set('0123456789ABCDEF')\n\
    \    primes = {\n        '0': '0', '1': '1', '2': '2', '3': '3', '4': '4',\n \
    \       '5': '5', '6': '6', '7': '7', '8': '8', '9': '9',\n        'A': 'A', 'B':\
    \ 'B', 'C': 'C', 'D': 'D', 'E': 'E', 'F': 'F'\n    }\n    return len([digit for\
    \ digit in num if digit in primes])\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppei0os1q.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmppei0os1q.py\", line 42,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmppei0os1q.py\", line 34,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    counter = 0\n    hexadecimal = list(num)\n    for x in hexadecimal:\n\
    \        if int(x, 16) in primes:\n            counter += 1\n    return counter\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([i for i in num if i in primes])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    primes = {'2', '3', '5',\
    \ '7', 'B', 'D'}\n    return len([ch for ch in num if ch in primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return len([int(i, 16) for\
    \ i in num if int(i, 16) in [2, 3, 5, 7, 11, 13]])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    hex_digits = '0123456789ABCDEF'\n\
    \    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(ch in primes for\
    \ ch in num)\n    # return len([x for x in num if x in primes])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    return sum(1 for c in num\
    \ if c in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    lst = [digit for digit in\
    \ num if digit in \"2 3 5 7 B D\".split()]\n    return len(lst)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n\
    \    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n   \
    \ 6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    count = 0\n    if num ==\
    \ '':\n        return 0\n    for i in range(0, len(num)):\n        if num[i] in\
    \ [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]:\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
