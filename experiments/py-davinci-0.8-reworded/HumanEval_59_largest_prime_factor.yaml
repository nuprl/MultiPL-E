name: HumanEval_59_largest_prime_factor
language: py
prompt: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime\
  \ factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
  \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
  \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
  \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
  \ntest_check()\n"
completions: ["    largest_prime_factor = 2\n    while n % largest_prime_factor !=\
    \ 0:\n        largest_prime_factor += 1\n    return largest_prime_factor\n\n",
  "    assert n > 1 and not is_prime(n)\n    factor = find_largest_factor(n)\n   \
    \ if is_prime(factor):\n        return factor\n    else:\n        return largest_prime_factor(factor)\n\
    \n", "    p = 2\n    q = n\n    while p < q:\n        if is_prime(p) and q % p\
    \ == 0:\n            q = q // p\n        else:\n            p += 1\n    return\
    \ q\n\n", "    largest_factor = 0\n    for f in factorization(n):\n        if\
    \ is_prime(f):\n            largest_factor = f\n    return largest_factor\n\n",
  "    largest = 1\n    factor = 2\n    while factor < n:\n        if n % factor ==\
    \ 0:\n            largest = factor\n            while n % factor == 0:\n     \
    \           n = n // factor\n        factor += 1\n    return max(largest, n)\n\
    \n", "    for i in range(int(n ** 0.5), 1, -1):\n        if n % i == 0 and is_prime(i):\n\
    \            return i\n\n", "    prime = 2\n    while n != 1:\n        if n %\
    \ prime == 0:\n            n //= prime\n        else:\n            prime += 1\n\
    \    return prime\n\n", "    primes = prime_factors(n)\n    if primes:\n     \
    \   return max(primes)\n    return None\n", "    divisor = 2\n    while divisor\
    \ <= n:\n        if n % divisor == 0:\n            n = n // divisor\n        else:\n\
    \            divisor += 1\n    return divisor\n\n", "    largest_prime_factor\
    \ = 2\n    for i in range(3, round(n**0.5) + 1, 2):\n        if n % i == 0:\n\
    \            largest_prime_factor = i\n            while n % i == 0:\n       \
    \         n = n // i\n    if n != 1:\n        largest_prime_factor = n\n    return\
    \ largest_prime_factor\n\n", "    # Prime factorization -> list of primes\n  \
    \  primes = prime_factorization(n)\n    # Return the last item in the list\n \
    \   return primes[-1]\n\n", "    factor = 2\n    while factor ** 2 <= n:\n   \
    \     if n % factor == 0:\n            n = n // factor\n        else:\n      \
    \      factor += 1\n    return n\n\n", "    # Find the smallest factor, then keep\
    \ dividing by that factor until it's\n    # not a factor. Do that until the number\
    \ is prime. Return the last factor.\n    x = n\n    while x > 1:\n        f =\
    \ smallest_factor(x)\n        x = x // f\n    return f\n\n", "    for i in range(2,\
    \ n):\n        if is_prime(i) and n % i == 0:\n            return i\n", "    factor\
    \ = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n\
    \        else:\n            factor += 1\n    return factor\n\n", "    if is_prime(n):\n\
    \        return n\n    factor = 2\n    while factor <= math.sqrt(n):\n       \
    \ if n % factor == 0:\n            while n % factor == 0:\n                n =\
    \ n // factor\n            if is_prime(n):\n                return n\n       \
    \ factor += 1\n    return n\n\n", "    return _factor_largest_first(n)[0]\n\n",
  "    num = n\n    largest_prime = 0\n    i = 2\n    while i <= num:\n        if\
    \ is_prime(i) and num % i == 0:\n            largest_prime = i\n            num\
    \ = num // i\n        else:\n            i += 1\n    return largest_prime\n\n",
  "    if is_prime(n):\n        return n\n    else:\n        p = smallest_prime_factor(n)\n\
    \        return max(p, largest_prime_factor(n // p))\n\n", "    max_prime = 0\n\
    \    while n % 2 == 0:\n        max_prime = 2\n        n /= 2\n    factor = 3\n\
    \    while n > 1:\n        while n % factor == 0:\n            max_prime = factor\n\
    \            n /= factor\n        factor += 2\n    return max_prime\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
