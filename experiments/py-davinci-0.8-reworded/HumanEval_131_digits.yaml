name: HumanEval_131_digits
language: py
prompt: "def digits(n: int) -> int:\n    \"\"\"Given a positive integer n, return\
  \ the product of the odd digits.\n    Return 0 if all digits are even.\n    For\
  \ example:\n    >>> digits(1)\n    1\n    >>> digits(4)\n    0\n    >>> digits(235)\n\
  \    15\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(5) == 5\n    assert candidate(54)\
  \ == 5\n    assert candidate(120) == 1\n    assert candidate(5014) == 5\n    assert\
  \ candidate(98765) == 315\n    assert candidate(5576543) == 2625\n    assert candidate(2468)\
  \ == 0\n\ndef test_check():\n    check(digits)\n\ntest_check()\n"
completions: ["    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return\
    \ digits(n // 10)\n    else:\n        return n % 10 * digits(n // 10)\n\n", " \
    \   if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return digits(n\
    \ // 10)\n    else:\n        return n % 10 * digits(n // 10)\n\n", "    s = 1\n\
    \    while n > 0:\n        if n % 2 == 1:\n            s *= n % 10\n        n\
    \ //= 10\n    return s\n\n", "    if n == 0:\n        return 1\n    elif n % 2\
    \ == 0:\n        return digits(n // 10)\n    else:\n        return (n % 10) *\
    \ digits(n // 10)\n\n@enable_tracing", "    nums = []\n    for i in range(len(str(n))):\n\
    \        nums.append(int(str(n)[i]))\n    for i in range(len(nums)):\n       \
    \ if nums[i] % 2 == 0:\n            nums[i] = 0\n    new_nums = []\n    for i\
    \ in range(len(nums)):\n        if nums[i] != 0:\n            new_nums.append(nums[i])\n\
    \    if len(new_nums) == 0:\n        return 0\n    else:\n        return reduce(lambda\
    \ x, y: x * y, new_nums)\n\n", "    total = 1\n    for x in str(n):\n        if\
    \ int(x) % 2 == 1:\n            total *= int(x)\n    return total", "    assert\
    \ n > 0\n    s = str(n)\n    digit_list = []\n    for i in s:\n        if int(i)\
    \ % 2 != 0:\n            digit_list.append(int(i))\n    if len(digit_list) ==\
    \ 0:\n        return 0\n    else:\n        return reduce(lambda x, y: x * y, digit_list)\n\
    \nprint(digits(235))", "    if n < 0:\n        return 0\n    elif n == 0:\n  \
    \      return 0\n    elif n % 2 == 0:\n        return digits(n // 10)\n    else:\n\
    \        return n % 10 * digits(n // 10)\n\n", "    if n == 0:\n        return\
    \ 0\n    else:\n        last, rest = n % 10, n // 10\n        if last % 2 == 0:\n\
    \            return digits(rest)\n        else:\n            return last * digits(rest)\n\
    \n", "    result = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n\
    \            result *= int(digit)\n    return result\n", "    if n < 10:\n   \
    \     return n if n % 2 == 1 else 0\n    d, m = divmod(n, 10)\n    return digits(d)\
    \ * (m if m % 2 == 1 else 1)\n", "    if n == 0:\n        return 0\n    elif n%2\
    \ == 0:\n        return 0*digits(n//10)\n    else:\n        return n%10*digits(n//10)\n",
  "    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return 10 * digits(n\
    \ // 10)\n    else:\n        return n % 10 * digits(n // 10)\n", "    product\
    \ = 1\n    for i in str(n):\n        if int(i) % 2 != 0:\n            product\
    \ *= int(i)\n    return product\n\n", "    # YOUR CODE HERE\n    nums = list(str(n))\n\
    \    result = 1\n    for i in nums:\n        if int(i) % 2 != 0:\n           \
    \ result *= int(i)\n    return result\n\n", "    #if n == 0:\n    #    return\
    \ 0\n    #if n % 2 == 1:\n    #    return n % 10 * digits(n // 10)\n    #else:\n\
    \    #    return digits(n // 10)\n    if n == 0:\n        return 0\n    return\
    \ n % 10 * digits(n // 10) if n % 2 == 1 else digits(n // 10)\n", "    # if n\
    \ is even (5 % 2 == 1)\n    # multiply\n    if n < 10:\n        return n\n   \
    \ else:\n        if n % 2 == 1:\n            return n % 10 * digits(n // 10)\n\
    \        else:\n            return digits(n // 10)\n\n\n@memoize", "    if n <\
    \ 0:\n        raise ValueError(\"Expected a positive integer\")\n    total = 1\n\
    \    for c in str(n):\n        num = int(c)\n        if num % 2 == 1:\n      \
    \      total *= num\n    return total\n", "    if n == 0:\n        return 0\n\
    \    if n % 2 == 0:\n        return digits(n // 10)\n    return n % 10 * digits(n\
    \ // 10)\n\n", "    result = 1\n    while n > 0:\n        digit = n % 10\n   \
    \     if digit % 2 == 1:\n            result *= digit\n        n //= 10\n    return\
    \ result\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
