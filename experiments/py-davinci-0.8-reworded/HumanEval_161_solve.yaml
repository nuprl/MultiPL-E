name: HumanEval_161_solve
language: py
prompt: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if s[i]\
  \ is a letter, reverse its case from lower to upper or vise versa, \n    otherwise\
  \ keep it as it is.\n    If the string contains no letters, reverse the string.\n\
  \    The function should return the resulted string.\n    Examples\n    >>> solve('1234')\n\
  \    '4321'\n    >>> solve('ab')\n    'AB'\n    >>> solve('#a@C')\n    '#A@c'\n\
  \    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
  \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
  \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
  \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
  \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
completions: ["    if not s:\n        return ''\n    if not set(s) & set(string.ascii_letters):\n\
    \        return s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper()\
    \ for c in s)\n\n", "    if not s:\n        return s\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    reversed_string = \"\"\n    for c in s:\n        if c in letters:\n    \
    \        if c.isupper():\n                reversed_string += c.lower()\n     \
    \       else:\n                reversed_string += c.upper()\n        else:\n \
    \           reversed_string += c\n    return reversed_string[::-1]\n", "    return\
    \ ''.join(c.swapcase() if c.isalpha() else c for c in s[::-1])\n\n", "    letters\
    \ = set(string.ascii_letters)\n    if len(set(s) & letters) == 0:\n        return\
    \ s[::-1]\n    else:\n        return ''.join(\n            c.upper() if c.islower()\
    \ else c.lower() if c.isupper() else c\n            for c in s\n        )", " \
    \   import string\n    if string.ascii_letters in s:\n        return s.swapcase()\n\
    \    else:\n        return s[::-1]\n\n", "    if not any(l.isalpha() for l in\
    \ s):\n        return s[::-1]\n    else:\n        return ''.join(l.swapcase()\
    \ if l.isalpha() else l for l in s)\n\n", "    if not any(c.isalpha() for c in\
    \ s):\n        return s[::-1]\n    return ''.join(c.lower() if c.isupper() else\
    \ c.upper() for c in s)\n\n", "    # solution 1\n    # if not any(c.isalpha()\
    \ for c in s):\n    #     return s[::-1]\n    # else:\n    #     return ''.join(c.lower()\
    \ if c.isupper() else c.upper() for c in s)\n\n    # solution 2\n    is_letter\
    \ = any(c.isalpha() for c in s)\n    reversed_s = s[::-1]\n    if is_letter:\n\
    \        return ''.join(c.lower() if c.isupper() else c.upper() for c in reversed_s)\n\
    \    else:\n        return reversed_s\n\n", "    if not any(letter.isalpha() for\
    \ letter in s):\n        return s[::-1]\n    return \"\".join(letter.upper() if\
    \ letter.islower() else letter.lower() for letter in s)", "    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    else:\n        return ''.join([c.upper()\
    \ if c.islower() else c.lower() for c in s])\n", "    ans = ''\n    for c in s:\n\
    \        if c.isalpha():\n            ans += c.swapcase()\n        else:\n   \
    \         ans += c\n    return ans[::-1] if ans.isalpha() else ans\n\n", "   \
    \ if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join([c.upper()\
    \ if c.islower() else c.lower() for c in s])\n\n", "    letters = [ch for ch in\
    \ s if ch.isalpha()]\n    if not letters:\n        return s[::-1]\n    res = ''\n\
    \    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n  \
    \              res += ch.upper()\n            else:\n                res += ch.lower()\n\
    \        else:\n            res += ch\n    return res\n\n", "    if not any(char.isalpha()\
    \ for char in s):\n        return s[::-1]\n    else:\n        return \"\".join(\n\
    \            char.upper() if char.islower() else char.lower() for char in s\n\
    \        )\n\n", "    letters = [c for c in s if c.isalpha()]\n    if letters:\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n\n", "    pass\n\
    \n", "    #reverse the string\n    string_list = list(s)\n    string_list.reverse()\n\
    \    s = ''.join(string_list)\n    print(s)\n    new_string = ''\n    for c in\
    \ s:\n        if c.isalpha():\n            #reverse case\n            if c.islower():\n\
    \                new_string += c.upper()\n            else:\n                new_string\
    \ += c.lower()\n        else:\n            new_string += c\n    return new_string\n",
  "    return ''\n    ", "    if s.islower() or s.isupper():\n        return s[::-1]\n\
    \    else:\n        for i in range(len(s)):\n            if s[i].isalpha():\n\
    \                if s[i].islower():\n                    s = s[:i] + s[i].upper()\
    \ + s[i+1:]\n                else:\n                    s = s[:i] + s[i].lower()\
    \ + s[i+1:]\n        return s\n", "    pass\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
