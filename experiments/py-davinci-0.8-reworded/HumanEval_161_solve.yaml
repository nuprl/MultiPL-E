name: HumanEval_161_solve
language: py
prompt: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if s[i]\
  \ is a letter, reverse its case from lower to upper or vise versa, \n    otherwise\
  \ keep it as it is.\n    If the string contains no letters, reverse the string.\n\
  \    The function should return the resulted string.\n    Examples\n    >>> solve('1234')\n\
  \    '4321'\n    >>> solve('ab')\n    'AB'\n    >>> solve('#a@C')\n    '#A@c'\n\
  \    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
  \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
  \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
  \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
  \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
completions: ["    if not s:\n        return ''\n    if not set(s) & set(string.ascii_letters):\n\
    \        return s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper()\
    \ for c in s)\n\n", "    if not s:\n        return s\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    reversed_string = \"\"\n    for c in s:\n        if c in letters:\n    \
    \        if c.isupper():\n                reversed_string += c.lower()\n     \
    \       else:\n                reversed_string += c.upper()\n        else:\n \
    \           reversed_string += c\n    return reversed_string[::-1]\n", "    return\
    \ ''.join(c.swapcase() if c.isalpha() else c for c in s[::-1])\n\n", "    letters\
    \ = set(string.ascii_letters)\n    if len(set(s) & letters) == 0:\n        return\
    \ s[::-1]\n    else:\n        return ''.join(\n            c.upper() if c.islower()\
    \ else c.lower() if c.isupper() else c\n            for c in s\n        )", " \
    \   import string\n    if string.ascii_letters in s:\n        return s.swapcase()\n\
    \    else:\n        return s[::-1]\n\n", "    if not any(l.isalpha() for l in\
    \ s):\n        return s[::-1]\n    else:\n        return ''.join(l.swapcase()\
    \ if l.isalpha() else l for l in s)\n\n", "    if not any(c.isalpha() for c in\
    \ s):\n        return s[::-1]\n    return ''.join(c.lower() if c.isupper() else\
    \ c.upper() for c in s)\n\n", "    # solution 1\n    # if not any(c.isalpha()\
    \ for c in s):\n    #     return s[::-1]\n    # else:\n    #     return ''.join(c.lower()\
    \ if c.isupper() else c.upper() for c in s)\n\n    # solution 2\n    is_letter\
    \ = any(c.isalpha() for c in s)\n    reversed_s = s[::-1]\n    if is_letter:\n\
    \        return ''.join(c.lower() if c.isupper() else c.upper() for c in reversed_s)\n\
    \    else:\n        return reversed_s\n\n", "    if not any(letter.isalpha() for\
    \ letter in s):\n        return s[::-1]\n    return \"\".join(letter.upper() if\
    \ letter.islower() else letter.lower() for letter in s)", "    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    else:\n        return ''.join([c.upper()\
    \ if c.islower() else c.lower() for c in s])\n", "    ans = ''\n    for c in s:\n\
    \        if c.isalpha():\n            ans += c.swapcase()\n        else:\n   \
    \         ans += c\n    return ans[::-1] if ans.isalpha() else ans\n\n", "   \
    \ if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join([c.upper()\
    \ if c.islower() else c.lower() for c in s])\n\n", "    letters = [ch for ch in\
    \ s if ch.isalpha()]\n    if not letters:\n        return s[::-1]\n    res = ''\n\
    \    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n  \
    \              res += ch.upper()\n            else:\n                res += ch.lower()\n\
    \        else:\n            res += ch\n    return res\n\n", "    if not any(char.isalpha()\
    \ for char in s):\n        return s[::-1]\n    else:\n        return \"\".join(\n\
    \            char.upper() if char.islower() else char.lower() for char in s\n\
    \        )\n\n", "    letters = [c for c in s if c.isalpha()]\n    if letters:\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n\n", "    pass\n\
    \n", "    #reverse the string\n    string_list = list(s)\n    string_list.reverse()\n\
    \    s = ''.join(string_list)\n    print(s)\n    new_string = ''\n    for c in\
    \ s:\n        if c.isalpha():\n            #reverse case\n            if c.islower():\n\
    \                new_string += c.upper()\n            else:\n                new_string\
    \ += c.lower()\n        else:\n            new_string += c\n    return new_string\n",
  "    return ''\n    ", "    if s.islower() or s.isupper():\n        return s[::-1]\n\
    \    else:\n        for i in range(len(s)):\n            if s[i].isalpha():\n\
    \                if s[i].islower():\n                    s = s[:i] + s[i].upper()\
    \ + s[i+1:]\n                else:\n                    s = s[:i] + s[i].lower()\
    \ + s[i+1:]\n        return s\n", "    pass\n\n", "    s = list(s)\n    for i\
    \ in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].swapcase()\n\
    \    if not any(char.isalpha() for char in s):\n        s.reverse()\n    return\
    \ ''.join(s)\n\n", "    letters = []\n    for c in s:\n        if c.isalpha():\n\
    \            letters.append(c)\n    if not letters:\n        return s[::-1]\n\
    \    ans = ''\n    i = 0\n    for c in s:\n        if c.isalpha():\n         \
    \   ans += letters[i].upper() if c.islower() else letters[i].lower()\n       \
    \     i += 1\n        else:\n            ans += c\n    return ans\n", "    is_letters\
    \ = any(c.isalpha() for c in s)\n    return s[::-1].swapcase() if is_letters else\
    \ s[::-1]\n\n", "    # find all letters\n    letters = [i for i in s if i.isalpha()]\n\
    \    # if no letters, reverse the string\n    if not letters:\n        return\
    \ s[::-1]\n    # swap letters\n    res = \"\"\n    for i in s:\n        if i.isalpha():\n\
    \            res += i.swapcase()\n        else:\n            res += i\n    return\
    \ res\n\n", "    res = ''\n    for i in s:\n        if i.isalpha():\n        \
    \    res += i.swapcase()\n        else:\n            res += i\n    if not res.isalpha():\n\
    \        res = res[::-1]\n    return res\n    ", "    # check if there are no\
    \ letters in the string\n    if not re.search(r'[a-zA-Z]', s):\n        return\
    \ s[::-1]\n    lst = []\n    for c in s:\n        if c.isalpha():\n          \
    \  lst.append(c.swapcase())\n        else:\n            lst.append(c)\n    return\
    \ ''.join(lst)\n", "    if not s:\n        return \"\"\n    if s.isalpha():\n\
    \        s = \"\".join(x.lower() if x.isupper() else x.upper() for x in s)\n \
    \   else:\n        s = s[::-1]\n    return s\n", "    pass\n\n", "    # convert\
    \ the string to char array\n    chars = list(s)\n    # boolean flag if the string\
    \ contains any letter,\n    # if the flag is still false, then the string has\
    \ no letters, so we reverse it.\n    contains_letters = False\n    for i in range(len(chars)):\n\
    \        if chars[i].isalpha():\n            # the string contains a letter\n\
    \            contains_letters = True\n            # toggle letter case\n     \
    \       if chars[i].isupper():\n                chars[i] = chars[i].lower()\n\
    \            else:\n                chars[i] = chars[i].upper()\n    # if the\
    \ string has no letters, then reverse it.\n    if not contains_letters:\n    \
    \    chars.reverse()\n    return ''.join(chars)\n\n", "    if s == ''.join(sorted(s,\
    \ reverse=True)):\n        return s[::-1]\n    return ''.join(c.swapcase() if\
    \ c.isalpha() else c for c in s)\n\n", "    s = s[::-1]\n    i = 0\n    while\
    \ i < len(s):\n        if s[i].isalpha():\n            s = s[:i] + s[i].swapcase()\
    \ + s[i+1:]\n        i += 1\n    return s\n", "    if not any(char.isalpha() for\
    \ char in s):\n        s = s[::-1]\n    else:\n        tmp = ''\n        for char\
    \ in s:\n            if char.isalpha():\n                tmp += char.swapcase()\n\
    \            else:\n                tmp += char\n        s = tmp\n    return s\n",
  "    if any(char.isalpha() for char in s):\n        return s.swapcase()\n    else:\n\
    \        return s[::-1]\n\n", "    if len(s) < 2:\n        return s[::-1]\n  \
    \  for i in s:\n        if i.isalpha():\n            return s.swapcase()\n   \
    \ return s[::-1]\n", "    return s[::-1].swapcase() if len(set(s) - set(string.ascii_letters))\
    \ != len(s) else s[::-1]\n\n", "    # Your code here\n    if len(s) == 0:\n  \
    \      return s\n    if not any(i.isalpha() for i in s):\n        return s[::-1]\n\
    \    return ''.join(i.upper() if i.islower() else i.lower() for i in s)\n\n",
  "    lst = list(s)\n    for i in range(len(lst)):\n        if lst[i].isalpha():\n\
    \            lst[i] = lst[i].swapcase()\n    if any(char.isalpha() for char in\
    \ lst):\n        return ''.join(lst)\n    else:\n        return ''.join(lst[::-1])\n\
    \n", "    return s[::-1].swapcase()\n\n", "    return ''.join(s[::-1]) if not\
    \ any(i.isalpha() for i in s) else ''.join(i.lower() if i.isupper() else i.upper()\
    \ for i in s)\n", "    if any(c.isalpha() for c in s):\n        return s.swapcase()\n\
    \    else:\n        return s[::-1]\n\n", "    isletter = any(c.isalpha() for c\
    \ in s)\n    if isletter:\n        return s.swapcase()\n    else:\n        return\
    \ s[::-1]\n", "    if s.islower() or s.isupper():\n        return s[::-1]\n  \
    \  return ''.join(i.lower() if i.isupper() else i.upper() for i in s)\n\n", " \
    \   return ''.join(c.upper() if c.islower() else c.lower() for c in s[::-1]) if\
    \ any(c.isalpha() for c in s) else s[::-1]\n\n", "    length = len(s)\n    new_s\
    \ = ''\n    flag = False\n    for i in range(length):\n        if s[i].isalpha():\n\
    \            new_s += s[i].swapcase()\n            flag = True\n        else:\n\
    \            new_s += s[i]\n    if flag:\n        return new_s\n    else:\n  \
    \      return new_s[::-1]\n\n", "    if not any(c.isalpha() for c in s):\n   \
    \     return s[::-1]\n    res = []\n    for i in s:\n        if i.isalpha():\n\
    \            res.append(i.upper() if i.islower() else i.lower())\n        else:\n\
    \            res.append(i)\n    return ''.join(res)", "    if s == \"\":\n   \
    \     return s[::-1]\n    if not any(c.isalpha() for c in s):\n        return\
    \ s[::-1]\n    string = []\n    for i in s:\n        if i.isalpha():\n       \
    \     string.append(i.swapcase())\n        else:\n            string.append(i)\n\
    \    return \"\".join(string)\n\n", "    if s.isalpha():\n        return s.swapcase()\n\
    \    else:\n        return s[::-1]\n", "    # Your code here\n    new_s = ''\n\
    \    if not s.isalpha():\n        new_s = s[::-1]\n    else:\n        for char\
    \ in s:\n            if char.isalpha():\n                if char.islower():\n\
    \                    new_s += char.upper()\n                else:\n          \
    \          new_s += char.lower()\n            else:\n                new_s +=\
    \ char\n    return new_s\n\n", "    s = s[::-1]\n    if not s.isalpha():\n   \
    \     return s\n    else:\n        return s.swapcase()\n", "    return s[::-1].swapcase()\n\
    \n", "    if s.isalpha():\n        return s.swapcase()\n    return s[::-1]\n ",
  "    if not s.isalpha():\n        return s[::-1]\n    else:\n        lst = list(s)\n\
    \        for i in range(len(lst)):\n            if s[i].isalpha():\n         \
    \       if s[i].islower():\n                    lst[i] = s[i].upper()\n      \
    \          else:\n                    lst[i] = s[i].lower()\n        return ''.join(lst)\n\
    \n", "    pass\n\n", "    import string\n    from string import ascii_letters\n\
    \    if s.isupper() or s.islower():\n        return s[::-1]\n    res = \"\"\n\
    \    for c in s:\n        if c in ascii_letters:\n            res += c.swapcase()\n\
    \        else:\n            res += c\n    return res\n\n", "    pass\n", "   \
    \ t = ''\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n     \
    \       t += s[i].swapcase()\n        else:\n            t += s[i]\n        i\
    \ += 1\n    return t if t else s[::-1]\n", "    if not re.search(r'[a-zA-Z]',\
    \ s):\n        return s[::-1]\n    return ''.join(c.swapcase() if c.isalpha()\
    \ else c for c in s)\n", "    return s[::-1].swapcase()\n", "    char_changed\
    \ = False\n    for i in range(len(s)):\n        if s[i].isalpha():\n         \
    \   char_changed = True\n            if s[i].isupper():\n                s = s[:i]\
    \ + s[i].lower() + s[i+1:]\n            else:\n                s = s[:i] + s[i].upper()\
    \ + s[i+1:]\n    if not char_changed:\n        s = s[::-1]\n    return s\n\n",
  "    # check if there is any letters\n    check_letters = False\n    for character\
    \ in s:\n        if character.isalpha():\n            check_letters = True\n \
    \           break\n    if check_letters:\n        res = \"\"\n        for character\
    \ in s:\n            if character.isalpha():\n                if character.islower():\n\
    \                    res += character.upper()\n                else:\n       \
    \             res += character.lower()\n            else:\n                res\
    \ += character\n        return res\n    else:\n        return s[::-1]\n    # pass\n\
    \n", "    return s[::-1].swapcase()\n", "    # check if the string contains any\
    \ letters\n    letters = [letter for letter in s if letter.isalpha()]\n    if\
    \ not letters:\n        return s[::-1]\n    else:\n        new_s = \"\"\n    \
    \    for letter in s:\n            if letter.isalpha():\n                if letter.islower():\n\
    \                    new_s += letter.upper()\n                else:\n        \
    \            new_s += letter.lower()\n            else:\n                new_s\
    \ += letter\n        return new_s\n\n", "    if not any(c.isalpha() for c in s):\n\
    \        return s[::-1]\n    ans = [c.swapcase() if c.isalpha() else c for c in\
    \ s]\n    return ''.join(ans)\n\n", "    s = ''.join(list(reversed(s))) if s.isalpha()\
    \ else s\n    return ''.join([char.upper() if char.islower() else char.lower()\
    \ for char in s])\n\n", "    if any(c.isalpha() for c in s):\n        return s.swapcase()\n\
    \    else:\n        return s[::-1]\n", "    alpha = [char for char in s if char.isalpha()]\n\
    \    if not alpha:\n        return s[::-1]\n    else:\n        new_list = []\n\
    \        for i in s:\n            if i.isalpha():\n                if i.islower():\n\
    \                    new_list.append(i.upper())\n                else:\n     \
    \               new_list.append(i.lower())\n            else:\n              \
    \  new_list.append(i)\n        return ''.join(new_list)\n", "    if not s.isalpha():\n\
    \        s = s[::-1]\n    res = \"\"\n    for c in s:\n        if c.isalpha():\n\
    \            res += c.swapcase()\n        else:\n            res += c\n    return\
    \ res\n\n", "    if not s.isalpha():\n        return s[::-1]\n    return s.swapcase()\n\
    \n", "    new_s = []\n    for letter in s:\n        if letter.isalpha():\n   \
    \         new_s.append(letter.swapcase())\n        else:\n            new_s.append(letter)\n\
    \    if new_s[0].isalpha():\n        return ''.join(new_s)\n    else:\n      \
    \  return ''.join(new_s[::-1])\n", "    return ''\n\n", "    pass\n", "    if\
    \ not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n\
    \        new_s = \"\"\n        for char in s:\n            if char.isalpha():\n\
    \                new_s += char.swapcase()\n            else:\n               \
    \ new_s += char\n        return new_s\n\n", "    ans = \"\"\n    for c in s:\n\
    \        if 'a' <= c <= 'z':\n            ans += c.upper()\n        elif 'A' <=\
    \ c <= 'Z':\n            ans += c.lower()\n        else:\n            ans += c\n\
    \    if len(ans) == len(s):\n        return ans[::-1]\n    return ans\n\n", " \
    \   if not re.search('[a-zA-Z]', s):\n        return s[::-1]\n    res = []\n \
    \   for i in s:\n        if i.isalpha():\n            if i.islower():\n      \
    \          res.append(i.upper())\n            else:\n                res.append(i.lower())\n\
    \        else:\n            res.append(i)\n    return ''.join(res)\n", "    return\
    \ s[::-1].swapcase() if s.isalpha() else s[::-1]\n\n", "    for i in s:\n    \
    \    if i.isalpha():\n            if i.islower():\n                s = s.replace(i,\
    \ i.upper())\n            else:\n                s = s.replace(i, i.lower())\n\
    \    if s == s.upper() or s == s.lower():\n        return s[::-1]\n    return\
    \ s\n", "    s_rev = s[::-1]\n    if any(c.isalpha() for c in s):\n        return\
    \ s_rev.swapcase()\n    else:\n        return s_rev\n\n", "    s = s[::-1]\n \
    \   s = s.swapcase()\n    return s\n\n", "    return s[::-1].swapcase()\n", '    pass',
  "    if len(set(s) & set(string.ascii_letters)) == 0:\n        return s[::-1]\n\
    \    return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\n",
  "    s = s[::-1]\n    for i in range(len(s)):\n        if s[i].isalpha():\n    \
    \        s = s[:i] + s[i].swapcase() + s[i+1:]\n    return s\nsolve('#a@C')\n",
  "    return ''.join(i.upper() if i.islower() else i.lower() for i in s[::-1])\n",
  "    if not s:\n        return ''\n    s_new = ''\n    for char in s:\n        if\
    \ char.isalpha():\n            s_new += char.swapcase()\n        else:\n     \
    \       s_new += char\n    return s_new\n\n", "    l = []\n    for c in s:\n \
    \       l.append(c.swapcase())\n    if l[0].islower():\n        return ''.join(l)\n\
    \    else:\n        return ''.join(l[::-1])\n    #return s.swapcase()[::-1] if\
    \ s[0].islower() else s.swapcase()\n\n", "    import string\n    if len(s) ==\
    \ 0:\n        return s\n    else:\n        letters = string.ascii_letters\n  \
    \      out = [c.swapcase() if c in letters else c for c in s]\n        return\
    \ ''.join(out)\n", "    if s.lower() == s.upper():\n        return s[::-1]\n \
    \   return ''.join(map(lambda c: str.swapcase(c), s))\n    \n    ", "    l = [c\
    \ for c in s if c.isalpha()]\n    if l:\n        s = s.swapcase()\n    else:\n\
    \        s = s[::-1]\n    return s\n\n", "    # check if there is any letter\n\
    \    check = 0\n    for char in s:\n        if char.isalpha():\n            check\
    \ = 1\n            break\n    if check == 0:\n        return s[::-1]\n    else:\n\
    \        # if there is any letter we reverse it\n        new_str = ''\n      \
    \  for char in s:\n            if char.isalpha():\n                if char.islower():\n\
    \                    new_str += char.upper()\n                else:\n        \
    \            new_str += char.lower()\n            else:\n                new_str\
    \ += char\n        return new_str\n\n\n", "    if not s.isalpha():\n        return\
    \ s[::-1]\n    return ''.join(i.lower() if i.isupper() else i.upper() for i in\
    \ s)\n\n", "    return s[::-1].swapcase()\n\n", "    from string import ascii_letters\n\
    \    if set(s) & set(ascii_letters):\n        return s.swapcase()\n    else:\n\
    \        return s[::-1]\n\n", "    def letter(ch: str) -> bool:\n        return\
    \ ch.isalpha()\n    def swap(ch: str) -> str:\n        if ch.islower():\n    \
    \        return ch.upper()\n        else:\n            return ch.lower()\n   \
    \ if any(letter(ch) for ch in s):\n        res = [swap(ch) if letter(ch) else\
    \ ch for ch in s]\n    else:\n        res = list(reversed(s))\n    return ''.join(res)\n\
    \n", "    out = [x.swapcase() if x.isalpha() else x for x in s]\n    return ''.join(out)\
    \ if out else s[::-1]\n    # return s.swapcase() if s.isalpha() else s[::-1]\n\
    \n", "    if any(c.isalpha() for c in s):\n        return s.swapcase()\n    else:\n\
    \        return s[::-1]\n\n", "    r = ''\n    if s.isalpha():\n        for ch\
    \ in s:\n            if ch.islower():\n                r += ch.upper()\n     \
    \       else:\n                r += ch.lower()\n    else:\n        for ch in s:\n\
    \            r = ch + r\n    return r\n", "    if s.islower() or s.isupper():\n\
    \        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper()\
    \ else c.upper() for c in s)\n\n", "    return s[::-1].swapcase()\n\n", "    if\
    \ s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]\n\
    \n", "    if s.isalpha():\n        return s.swapcase()\n    return s[::-1]\n\n",
  "    letters = ''.join(list(filter(str.isalpha, s)))\n    if letters == '':\n  \
    \      return letters[::-1]\n    return ''.join(map(\n        lambda c: c.lower()\
    \ if c.isupper() else c.upper(),\n        s\n    ))\n", "    check = False\n \
    \   alpha = 'abcdefghijklmnopqrstuvwxyz'\n    letters = [c for c in s if c in\
    \ alpha]\n    if len(letters) == 0:\n        return s[::-1]\n    ans = []\n  \
    \  for c in s:\n        if c in alpha:\n            check = True\n           \
    \ if c.isupper():\n                ans.append(c.lower())\n            else:\n\
    \                ans.append(c.upper())\n        else:\n            ans.append(c)\n\
    \    if check:\n        return ''.join(ans)\n    else:\n        return s[::-1]\n\
    \n", "    # reverse the string\n    s = s[::-1]\n    # loop over each character\
    \ in the string\n    for index, char in enumerate(s):\n        # check if the\
    \ char is a letter\n        if char.isalpha():\n            # reverse its case\
    \ using the title method\n            s = s[:index] + char.title() + s[index +\
    \ 1:]\n    return s\n\n", "    S = list(s)\n    for i in range(len(S)):\n    \
    \    if S[i].isalpha():\n            S[i] = S[i].swapcase()\n    return ''.join(S)\
    \ if any(S[i].isalpha() for i in range(len(S))) else ''.join(S[::-1])", "    s\
    \ = s[::-1]\n    return s.swapcase()\n\n", "    if not any(char.isalpha() for\
    \ char in s):\n        return s[::-1]\n    new_str = ''\n    for char in s:\n\
    \        if char.isalpha():\n            new_str += char.swapcase()\n        else:\n\
    \            new_str += char\n    return new_str\n\n", "    final_string = ''\n\
    \    if s.isalpha():\n        for char in s:\n            if char.isupper():\n\
    \                final_string += char.lower()\n            else:\n           \
    \     final_string += char.upper()\n    else:\n        final_string = s[::-1]\n\
    \    return final_string\n\n", "    return ''.join(map(lambda ch: ch.upper() if\
    \ ch.islower() else ch.lower(), s)) if any(map(str.isalpha, s)) else s[::-1]\n\
    \n", "    res = []\n    for c in s:\n        if c.isalpha():\n            res.append(c.swapcase())\n\
    \        else:\n            res.append(c)\n    return \"\".join(res[::-1]) if\
    \ len(res) else s[::-1]\n\n", "    # Error handling\n    if s == '':\n       \
    \ raise Exception(\"You can't pass an empty string\")\n    # Check the length\
    \ of the string\n    if len(s) == 1:\n        if not s.isalpha():\n          \
    \  return s[::-1]\n        else:\n            return s.swapcase()\n    # Check\
    \ if the string contains no letters\n    if not s.isalpha():\n        return s[::-1]\n\
    \    # Swapcase\n    else:\n        return s.swapcase()\n\n", "    s = s[::-1]\n\
    \    return s\n \n", "    return s[::-1].swapcase()\n\n", "    if not s:\n   \
    \     return \"\"\n    if s.isalpha():\n        return s.swapcase()\n    else:\n\
    \        return s[::-1]\n", "    lst = list(s)\n    for i in range(len(lst)):\n\
    \        if lst[i].isalpha():\n            lst[i] = lst[i].swapcase()\n    return\
    \ ''.join(lst)\n\n", "    if not s:\n        return ''\n    return ''.join(chr(ord(c)\
    \ ^ 32) if c.isalpha() else c for c in s[::-1])", "    is_letter = False\n   \
    \ for c in s:\n        if c.isalpha():\n            is_letter = True\n       \
    \     break\n    if is_letter:\n        return s.swapcase()\n    else:\n     \
    \   return s[::-1]\n", "    if not s:\n        return s\n    letters = set(string.ascii_letters)\n\
    \    lst = []\n    for i in s:\n        if i in letters:\n            lst.append(i.swapcase())\n\
    \        else:\n            lst.append(i)\n    return ''.join(lst)\n\n", "   \
    \ return s[::-1].swapcase()\n\n", "    return s[::-1].swapcase()\n\n", "    letters\
    \ = [chr(i) for i in range(ord('a'), ord('z') + 1)]\n    letters += [chr(i) for\
    \ i in range(ord('A'), ord('Z') + 1)]\n    output = ''\n    for i in s:\n    \
    \    if i in letters:\n            output += i.swapcase()\n        else:\n   \
    \         output += i\n    if output == s:\n        return s[::-1]\n    return\
    \ output\n\n", "    return ''.join(c.swapcase() if c.isalpha() else c for c in\
    \ s)\n\n", "    return ''.join(\n        {\n            letter.lower(): letter.upper(),\n\
    \            letter.upper(): letter.lower(),\n            digit: digit\n     \
    \   }.get(letter, letter)\n        for letter in s\n    )[::-1]\n\n", "    if\
    \ not s:\n        return ''\n    return ''.join(c.upper() if c.islower() else\
    \ c.lower() for c in s[::-1])\n \n", "    n = len(s)\n    return s[::-1] if n\
    \ == 0 else \"\".join(\n        [l.upper() if l.islower() else l.lower() for l\
    \ in s]\n    )\n\n", "    if s == s.swapcase():\n        return s[::-1]\n    return\
    \ ''.join(letter.swapcase() if letter.isalpha() else letter for letter in s)\n\
    \n", "    if not has_letters(s):\n        return s[::-1]\n    else:\n        return\
    \ \"\".join(\n            letter.swapcase() if letter.isalpha() else letter for\
    \ letter in s\n        )\n\n", "    # res = ''\n    # for char in s:\n    #  \
    \   if not char.isalpha():\n    #         res += char\n    #     else:\n    #\
    \         if char.isupper():\n    #             res += char.lower()\n    #   \
    \      else:\n    #             res += char.upper()\n    # return res\n    return\
    \ s[::-1].swapcase()\n", "    r = [chr(i) if i in range(65, 91) else chr(i) for\
    \ i in range(97, 123)]\n    if not r:\n        return s[::-1]\n    else:\n   \
    \     t = [s[i] if s[i] not in r else chr(ord(s[i]) ^ 32) for i in range(len(s))]\n\
    \        return ''.join(t)\n\n", "    if not s.isalpha():\n        return s[::-1]\n\
    \    res = []\n    for ch in s:\n        if ch.isalpha():\n            res.append(ch.swapcase())\n\
    \        else:\n            res.append(ch)\n    return ''.join(res)\n\n", "  \
    \  if not s.isalpha():\n        s = s[::-1]\n    else:\n        s = s.swapcase()\n\
    \    return s\n", "    try:\n        num = s.split('.')[1]\n        return num[::-1]\n\
    \    except IndexError:\n        return s[::-1]", "    return s[::-1].swapcase()\n\
    \n", "    def swap(c: str) -> str:\n        return c.upper() if c.islower() else\
    \ c.lower()\n    return s[::-1] if not any(c.isalpha() for c in s) else \"\".join(swap(c)\
    \ if c.isalpha() else c for c in s)\n    #return s if not any(c.isalpha() for\
    \ c in s) else \"\".join(swap(c) if c.isalpha() else c for c in s[::-1])\n", " \
    \   s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n   \
    \         s[i] = s[i].swapcase()\n    if s[i].isalpha():\n        return ''.join(s)\n\
    \    else:\n        return ''.join(s[::-1])\n    \n    ", "    pass\n\n", "  \
    \  if not any(ch.isalpha() for ch in s):\n        return s[::-1]\n    return ''.join(ch.upper()\
    \ if ch.islower() else ch.lower() for ch in s)\n\n", "    if not s:\n        return\
    \ ''\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return\
    \ ''.join(c.upper() if c.islower() else c.lower() if c.isupper() else c for c\
    \ in s)", "    if not s:\n        return s\n    s = list(s)\n    for i in range(len(s)):\n\
    \        if s[i].isalpha():\n            s[i] = s[i].swapcase()\n    return ''.join(s)\n",
  "    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    res = ''\n\
    \    for c in s:\n        if c.isalpha():\n            res += c.swapcase()\n \
    \       else:\n            res += c\n    return res\n    # return ''.join(c.swapcase()\
    \ if c.isalpha() else c for c in s)\n", "    res = ''\n    if s.isalpha():\n \
    \       for i in s:\n            if i.islower():\n                res += i.upper()\n\
    \            else:\n                res += i.lower()\n    else:\n        for i\
    \ in range(len(s) - 1, -1, -1):\n            res += s[i]\n    return res\n\n",
  "    s = s[::-1]\n    for i in range(len(s)):\n        if s[i].isalpha():\n    \
    \        s = s[:i] + s[i].swapcase() + s[i+1:]\n    return s\n\n", "    if any(c.isalpha()\
    \ for c in s):\n        return s.swapcase()\n    else:\n        return s[::-1]\n\
    \n", "    temp = []\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\
    \    for c in s:\n        if c.isalpha():\n            temp.append(c.swapcase())\n\
    \        else:\n            temp.append(c)\n    return ''.join(temp)\n\n", " \
    \   if any(c.isalpha() for c in s):\n        return s.swapcase()\n    else:\n\
    \        return s[::-1]\n\n", "    if any(c.isalpha() for c in s):\n        return\
    \ s.swapcase()\n    else:\n        return s[::-1]\n", "    if not any(map(str.isalpha,\
    \ s)):\n        return s[::-1]\n    return ''.join(c.swapcase() if c.isalpha()\
    \ else c for c in s)\n\n\n", "    pass\n\n", "    if not s:\n        return s\n\
    \    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    r = ''\n\
    \    for i in s:\n        if i.isalpha():\n            r += i.swapcase()\n   \
    \     else:\n            r += i\n    return r\n", "    new_s = ''\n    is_letter\
    \ = False\n    for letter in s:\n        if not is_letter and letter.isalpha():\n\
    \            is_letter = True\n        if letter.isalpha():\n            new_s\
    \ += letter.swapcase()\n        else:\n            new_s += letter\n    if not\
    \ is_letter:\n        return s[::-1]\n    return new_s\n\n", "    if s.isalpha():\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n", "    st =\
    \ []\n    for i in s:\n        if i.isalpha():\n            st.append(i.swapcase())\n\
    \        else:\n            st.append(i)\n    if len(st) == 0:\n        return\
    \ s[::-1]\n    return ''.join(st)\n    \n    \n    \n    ", "    if re.search(r'[a-zA-Z]',\
    \ s):\n        return s.swapcase()\n    else:\n        return s[::-1]\n\n", " \
    \   has_letters = False\n    output = ''\n    for char in s:\n        if char.isalpha():\n\
    \            has_letters = True\n            if char.isupper():\n            \
    \    output += char.lower()\n            else:\n                output += char.upper()\n\
    \        else:\n            output += char\n    if not has_letters:\n        return\
    \ s[::-1]\n    return output\n\n", "    l = [i.swapcase() if i.isalpha() else\
    \ i for i in s]\n    l.reverse()\n    return ''.join(l)\n\n", "    if not any(l.isalpha()\
    \ for l in s):\n        return s[::-1]\n    else:\n        return ''.join(l.upper()\
    \ if l.islower() else l.lower() if l.isupper() else l for l in s)\n\n", "    if\
    \ not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n      \
    \  return ''.join([c.lower() if c.isupper() else c.upper() for c in s])\n", " \
    \   # your code here\n    if s.isalpha():\n        return s.swapcase()\n    else:\n\
    \        return s[::-1]\n\n", "    str_list = []\n    for i in s:\n        if\
    \ i.isalpha():\n            str_list.append(i.swapcase())\n        else:\n   \
    \         str_list.append(i)\n    if str_list:\n        return ''.join(str_list)\n\
    \    else:\n        return s[::-1]\n\nprint(solve('#a@C'))", "    if re.search('[a-zA-Z]',\
    \ s):\n        return s.swapcase()\n    else:\n        return s[::-1]\n\n", " \
    \   return s[::-1].swapcase()\n\n", "    if not s.islower() and not s.isupper():\n\
    \        return s[::-1]\n    rev = ''\n    for ch in s:\n        if ch.isalpha():\n\
    \            rev += ch.swapcase()\n        else:\n            rev += ch\n    return\
    \ rev\n", "    return s[::-1].swapcase()\n\n", "    if s.lower() == s:\n     \
    \   if s.islower():\n            return s.upper()\n        else:\n           \
    \ return s.lower()\n    else:\n        return s[::-1]\n\n", "    return s[::-1].swapcase()\n\
    \n", "    letters = set(string.ascii_letters)\n    return ''.join(\n        ch.upper()\
    \ if ch in letters else ch.lower()\n        for ch in s[::-1]\n    ) if letters\
    \ & set(s) else s[::-1]\n\n", "    for char in s:\n        if char.isalpha():\n\
    \            return s.swapcase()\n    return s[::-1]\n\n", "    if not s:\n  \
    \      return \"\"\n    if not s.isalpha():\n        return s[::-1]\n    return\
    \ \"\".join(letter.swapcase() for letter in s)\n    # return s.swapcase()[::-1]\
    \ if not s.isalpha() else s.swapcase()\n", "    return s[::-1].swapcase()\n  \
    \  \n    \n    ", "    if not s.isalpha():\n        return s[::-1]\n    new_s\
    \ = ''\n    for i in s:\n        if i.isalpha():\n            new_s += i.swapcase()\n\
    \        else:\n            new_s += i\n    return new_s\n\n", "    if len(s)\
    \ == 0:\n        return \"\"\n    for c in s:\n        if c.isalpha():\n     \
    \       return s[::-1]\n    r = ''\n    for c in s:\n        if c.isalpha():\n\
    \            r += c.upper() if c.islower() else c.lower()\n        else:\n   \
    \         r += c\n    return r\n", "    return (s[::-1].swapcase() if any(c.isalpha()\
    \ for c in s)\n            else s[::-1])\n\n", "    def rev_case(c: str) -> str:\n\
    \        if c.isalpha():\n            return c.swapcase()\n        return c\n\
    \    return ''.join(map(rev_case, reversed(s)))\n\n", "    pass\n", "    if s.isalpha():\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n\n", "    letters\
    \ = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    if len(set(s).intersection(letters))\
    \ == 0:\n        return s[::-1]\n    else:\n        return ''.join([i.upper()\
    \ if i.islower() else i.lower() for i in s])\n\n", "    if not s.islower() and\
    \ not s.isupper():\n        return s[::-1]\n    else:\n        return s.swapcase()\n",
  "    if not any(x.isalpha() for x in s):\n        return s[::-1]\n    else:\n  \
    \      return ''.join(map(reverse_case, s))\n", "    str_len = len(s)\n    s_new\
    \ = ''\n    for i in range(str_len):\n        if not s[i].isalpha():\n       \
    \     s_new += s[i]\n        else:\n            if s[i].islower():\n         \
    \       s_new += s[i].upper()\n            else:\n                s_new += s[i].lower()\n\
    \    return s_new[::-1]\n", "    return s[::-1].swapcase()\n", "    return s[::-1].swapcase()\
    \ if any(letter.isalpha() for letter in s) else s[::-1]\n\n", "    if 'a' <= s[0]\
    \ <= 'z':\n        return s[0].upper() + s[1:][::-1]\n    elif 'A' <= s[0] <=\
    \ 'Z':\n        return s[0].lower() + s[1:][::-1]\n    else:\n        return s[::-1]\n\
    \n", "    out = ''\n    for c in s:\n        if c.isalpha():\n            out\
    \ += c.upper() if c.islower() else c.lower()\n        else:\n            out +=\
    \ c\n    return out[::-1] if out else s[::-1]\n\n", "    return s[::-1].swapcase()\n",
  "    pass\n\n\n", "    if any(map(lambda x: x.isalpha(), s)):\n        # If any\
    \ of the chars in the string is a letter, we change their case.\n        return\
    \ ''.join(map(lambda x: x.swapcase(), s))\n    else:\n        # Otherwise, we\
    \ reverse the string.\n        return s[::-1]\n", "    letters = [c for c in s\
    \ if c.isalpha()]\n    if letters:\n        new_s = \"\".join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n    else:\n        new_s = s[::-1]\n    return new_s\n\
    \n", "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n\
    \            s[i] = s[i].swapcase()\n    return ''.join(s)\n", "    # YOUR CODE\
    \ HERE\n    if s.isalpha():\n        return s.swapcase()\n    else:\n        return\
    \ ''.join(reversed(s))", "    if s.isalpha():\n        return s.swapcase()\n \
    \   else:\n        return s[::-1]\n\n", "    if not isinstance(s, str):\n    \
    \    raise TypeError\n    if not s:\n        return s\n    return ''.join(i.upper()\
    \ if i.islower() else i.lower() for i in s) if any(map(str.isalpha, s)) else s[::-1]",
  "    b = ''\n    for l in s:\n        if l.isalpha():\n            if l.islower():\n\
    \                b += l.upper()\n            else:\n                b += l.lower()\n\
    \        else:\n            b += l\n    return b[::-1] if b == s else b\n\n",
  "    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)\n\n", "    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    res = ''\n    for c in s:\n      \
    \  if c.isalpha():\n            res += c.swapcase()\n        else:\n         \
    \   res += c\n    return res\n ", "    # your code here\n    return s[::-1]\n\n",
  '    return s[::-1].swapcase()', "    ret = []\n    for c in s:\n        if c.isalpha():\n\
    \            ret.append(c.swapcase())\n        else:\n            ret.append(c)\n\
    \    return ''.join(ret[::-1]) if ret else s[::-1]\n\n", "    # If the string\
    \ contains no letters, reverse the string.\n    if not s.isalpha():\n        return\
    \ s[::-1]\n    # if s[i] is a letter, reverse its case from lower to upper or\
    \ vise versa, \n    # otherwise keep it as it is.\n    return ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)", "    letters = [chr(i) for i in\
    \ range(ord('a'), ord('z') + 1)]\n    new_s = ''\n    flag = False\n    for i\
    \ in s:\n        if i in letters:\n            new_s += i.swapcase()\n       \
    \     flag = True\n        else:\n            new_s += i\n    if flag:\n     \
    \   return new_s\n    else:\n        return new_s[::-1]", "    return ''.join(\n\
    \        [chr(ord(c) - 32) if c.islower() else chr(ord(c) + 32)\n         if c.isupper()\
    \ else c for c in s][::-1])", "    return s[::-1].swapcase() if any(c.isalpha()\
    \ for c in s) else s[::-1]\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
