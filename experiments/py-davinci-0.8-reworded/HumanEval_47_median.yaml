name: HumanEval_47_median
language: py
prompt: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"\
  Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n\
  \    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
  \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
  \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7])\
  \ == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
completions: ["    sorted_l = sorted(l)\n    return (sorted_l[len(l) // 2] + sorted_l[len(l)\
    \ // 2 - 1]) / 2 if len(l) % 2 == 0 else sorted_l[len(l) // 2]\n", "    l.sort()\n\
    \    return l[len(l) // 2]\n", "    sorted_l = sorted(l)\n    if len(sorted_l)\
    \ % 2 == 1:\n        mid = len(sorted_l) // 2\n        return sorted_l[mid]\n\
    \    else:\n        mid_right = len(sorted_l) // 2\n        mid_left = mid_right\
    \ - 1\n        return (sorted_l[mid_right] + sorted_l[mid_left]) / 2\n\n", " \
    \   l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n\
    \        middle_right = l[len(l) // 2]\n        middle_left = l[len(l) // 2 -\
    \ 1]\n        return (middle_right + middle_left) / 2\n", "    if len(l) % 2 ==\
    \ 0:\n        mid = len(l) // 2\n        return sum(l[mid-1:mid+1]) / 2\n    else:\n\
    \        mid = len(l) // 2\n        return l[mid]\n\nimport doctest\ndoctest.testmod()",
  "    # sorting the list\n    l.sort()\n    half = len(l) // 2\n    if len(l) % 2\
    \ == 0: # if even length\n        return (l[half - 1] + l[half]) / 2\n    else:\n\
    \        return l[half]\n", "    l.sort()\n    m_index = len(l) // 2\n    if len(l)\
    \ % 2 == 0:\n        return (l[m_index] + l[m_index - 1]) / 2\n    else:\n   \
    \     return l[m_index]\n", "    l = sorted(l)\n    n = len(l)\n    if n % 2 ==\
    \ 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n\
    \ // 2]) / 2\n\n", "    if len(l) == 0:\n        raise ValueError('length of list\
    \ must be > 0')\n    sl = sorted(l)\n    if len(sl) % 2 == 1:\n        return\
    \ sl[len(sl) // 2]\n    else:\n        return sum(sl[len(sl) // 2: len(sl) //\
    \ 2 + 2]) / 2\n\nprint(median([3, 1, 2, 4, 5]))\nprint(median([-10, 4, 6, 1000,\
    \ 10, 20]))", "    l.sort() # Sorting in ascending order\n\n    if len(l) % 2\
    \ == 0:\n        # The list has even number of elements\n        # Average of\
    \ 2 middle elements gives median\n        return (l[int(len(l)/2) - 1] + l[int(len(l)/2)])\
    \ / 2\n    else:\n        # The list has odd number of elements\n        # Middle\
    \ element is the median\n        return l[int(len(l)/2)]\n", "    l = sorted(l)\n\
    \    n = len(l)\n    if n == 0:\n        raise TypeError(\"Cannot find median\
    \ of empty list\")\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n\
    \        return (l[n // 2 - 1] + l[n // 2]) / 2", "    n = len(l)\n    sorted_l\
    \ = sorted(l)\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n\
    \        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2\n", "    n = len(l)\n\
    \    l = sorted(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n\
    \        return (l[n // 2 - 1] + l[n // 2]) / 2", "    sort_l = sorted(l)\n  \
    \  half_len = len(sort_l) // 2\n    if len(sort_l) % 2 == 0:\n        return (sort_l[half_len]\
    \ + sort_l[half_len - 1]) / 2\n    else:\n        return sort_l[half_len]\n",
  "    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n\
    \        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "    n = len(l)\n\
    \    l.sort()\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n     \
    \   return (l[n // 2 - 1] + l[n // 2]) / 2\n", "    l = sorted(l)\n    length\
    \ = len(l)\n    if length % 2 == 0:\n        mid = length // 2\n        return\
    \ sum(l[mid-1:mid+1]) / 2\n    else:\n        mid = length // 2\n        return\
    \ l[mid]\n", "    s = sorted(l)\n    if len(s) % 2 == 1:\n        return s[len(s)\
    \ // 2]\n    else:\n        middle = len(s) // 2\n        return (s[middle - 1]\
    \ + s[middle]) / 2", "    n = len(l)\n    s = sorted(l)\n    return (sum(s[n//2-1:n//2+1])/2.0,\
    \ s[n//2])[n % 2] if n else None", "    s = sorted(l)\n    # Find middle index\n\
    \    mid_index = len(s) // 2\n    # If the number of elements is odd, return the\
    \ middle element.\n    if len(s) % 2 == 1:\n        return s[mid_index]\n    #\
    \ If the number of elements is even, return the mean of the two\n    # middle\
    \ elements.\n    else:\n        return (s[mid_index] + s[mid_index - 1]) / 2\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
