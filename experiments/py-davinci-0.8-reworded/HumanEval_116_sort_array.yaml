name: HumanEval_116_sort_array
language: py
prompt: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
  \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
  \ according to\n    number of ones in their binary representation in ascending order.\n\
  \    For similar number of ones, sort based on decimal value.\n\n    It must be\
  \ implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n    [1, 2, 3, 4,\
  \ 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4, -3, -2]\n    >>>\
  \ sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4,\
  \ 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  \
  \  assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
  \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4,\
  \ 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3,\
  \ 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
  \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
  \    check(sort_array)\n\ntest_check()\n"
completions: ["    # sorted based on decimal value\n    return sorted(arr)\n", " \
    \   return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    ones_cnt =\
    \ []\n    for num in arr:\n        if num == 0:\n            ones_cnt.append(0)\n\
    \        else:\n            ones_cnt.append(bin(num).count('1'))\n    # print(ones_cnt)\n\
    \    lst = sorted(zip(ones_cnt, arr), key=lambda x: (x[0], x[1]))\n    # print(lst)\n\
    \    return [el[1] for el in lst]\n\n", "    # sort by number of 1s in binary\
    \ rep\n    # if equal then by decimal value\n    def binary_ones(num):\n     \
    \   if num == 0:\n            return 0\n        return 1 + binary_ones(num & (num\
    \ - 1))\n\n    return sorted(arr, key=lambda num: (binary_ones(num), num))\n\n",
  "    arr.sort(key=lambda x: f\"{x:b}\")\n    return arr", "    arr.sort(key=lambda\
    \ x: (bin(x).count('1'), x))\n    return arr\n", "    binary_counts = {num: bin(num).count('1')\
    \ for num in arr}\n    return sorted(arr, key=lambda num: (binary_counts[num],\
    \ num))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "  \
    \  return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n", "    def bin_ones(n):\n\
    \        ones = sum(1 for x in bin(n)[2:] if x == '1')\n        return (ones,\
    \ n)\n    return [x[1] for x in sorted(map(bin_ones, arr))]\n", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x)[2:].count('1'), x))\n", "    def binary_ones(num):\n        s = bin(num)\n\
    \        return s.count('1')\n\n    return sorted(arr, key=lambda x: (binary_ones(x),\
    \ x))", "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr",
  "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n", "    return sorted(arr,\
    \ key=lambda k: (bin(k).count('1'), k))", "    # 1. solve the problem using a\
    \ helper function (separation of concerns)\n    # 2. sort the list by the number\
    \ of ones in their binary representation\n    # 3. if the number of ones are equal,\
    \ sort by their decimal value\n    return sorted(arr, key=lambda x: [bin(x).count('1'),\
    \ x])", "    return sorted(arr, key=lambda x: [bin(x).count('1'), x])", "    def\
    \ get_bin_ones(num):\n        bin_ones = 0\n        while num > 0:\n         \
    \   if num % 2 == 1:\n                bin_ones += 1\n            num //= 2\n \
    \       return bin_ones\n\n    return sorted(arr, key=lambda x: (get_bin_ones(x),\
    \ x))\n", "    dec = [bin(i).count('1') for i in arr]\n    return [x for _, x\
    \ in sorted(zip(dec, arr))]"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
