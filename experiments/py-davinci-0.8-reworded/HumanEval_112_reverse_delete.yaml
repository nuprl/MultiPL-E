name: HumanEval_112_reverse_delete
language: py
prompt: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
  \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
  \ all the characters in s that are equal to any character in c\n    then check if\
  \ the result string is palindrome.\n    A string is called palindrome if it reads\
  \ the same backward as forward.\n    You should return a tuple containing the result\
  \ string and True/False for the check.\n    Example\n    >>> reverse_delete('abcde',\
  \ 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef', 'b')\n    ('acdef',\
  \ False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc', True)\n    \"\
  \"\"\n"
tests: "def check(candidate):\n    assert candidate('abcde', 'ae') == ('bcd', False)\n\
  \    assert candidate('abcdef', 'b') == ('acdef', False)\n    assert candidate('abcdedcba',\
  \ 'ab') == ('cdedc', True)\n    assert candidate('dwik', 'w') == ('dik', False)\n\
  \    assert candidate('a', 'a') == ('', True)\n    assert candidate('abcdedcba',\
  \ '') == ('abcdedcba', True)\n    assert candidate('abcdedcba', 'v') == ('abcdedcba',\
  \ True)\n    assert candidate('vabba', 'v') == ('abba', True)\n    assert candidate('mamma',\
  \ 'mia') == ('', True)\n\ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
completions: ["    new_str = ''\n    for i in s:\n        if i not in c:\n       \
    \     new_str += i\n    new_str_reverse = new_str[::-1]\n    return (new_str,\
    \ new_str == new_str_reverse)\n    ", "    chars_to_remove = list(c)\n    s =\
    \ ''.join([letter for letter in s if letter not in chars_to_remove])\n    reverse_string\
    \ = s[::-1]\n    return (s, s == reverse_string)\n", "    re: str = ''\n    for\
    \ i in s:\n        if i not in c:\n            re += i\n    if re == re[::-1]:\n\
    \        return re, True\n    else:\n        return re, False\n\n\nprint(reverse_delete('abcdedcba',\
    \ 'ab'))", "    result = ''\n    for i in s:\n        if i not in c:\n       \
    \     result += i\n    return result, result == result[::-1]\n", '    pass', " \
    \   result = \"\".join(char for char in s if char not in c)\n    is_palindrome\
    \ = result == result[::-1]\n    return result, is_palindrome\n", "    import re\n\
    \    s = re.sub(r'[{}]'.format(c), '', s)\n    return s, s == s[::-1]\n", '    pass',
  "    for ch in c:\n        s = s.replace(ch, '')\n    return s, s == s[::-1]\n",
  "    res = ''\n    for i in s:\n        if i not in c:\n            res += i\n \
    \   return res, res == res[::-1]", "    result = ''.join(filter(lambda x: x not\
    \ in c, s))\n    return result, result == result[::-1]", "    # your code here\n\
    \    pass\n\n", "    for char in c:\n        s = s.replace(char, '')\n    return\
    \ s, s == s[::-1]\n", "    # your code here\n    new_s = s\n    for i in c:\n\
    \        new_s = new_s.replace(i, '')\n    is_palindrome = new_s == new_s[::-1]\n\
    \    return new_s, is_palindrome\n\n\n", "    new_s = s\n    for i in c:\n   \
    \     new_s = new_s.replace(i, '')\n    new_s_reverse = new_s[::-1]\n    if new_s\
    \ == new_s_reverse:\n        return new_s, True\n    else:\n        return new_s,\
    \ False", "    # your code here\n\n", "    res = \"\"\n    for i in s:\n     \
    \   if i not in c:\n            res += i\n    return res, res == res[::-1]\n",
  "    temp = [i for i in s if i not in c]\n    return ''.join(temp), temp == temp[::-1]\n\
    \ \n", "    # Your code here\n    # You can use the following pre-defined function:\n\
    \    #    reversed()\n    # which returns the reversed iterator\n    #\n    #\
    \ You can also use list.reverse()\n    # which reverses the list in-place\n\n\
    \    pass\n\n", "    # your code here\n    return ''\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
