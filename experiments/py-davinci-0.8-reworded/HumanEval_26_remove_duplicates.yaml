name: HumanEval_26_remove_duplicates
language: py
prompt: "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n\
  \    \"\"\" From a list of integers, remove all elements that occur more than once.\n\
  \    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
  \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
  \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1,\
  \ 4, 5]\n\ndef test_check():\n    check(remove_duplicates)\n\ntest_check()\n"
completions: ["    uniques = []\n    for number in numbers:\n        if number not\
    \ in uniques:\n            uniques.append(number)\n    return uniques\n\n", " \
    \   list_no_dup = []\n    for number in numbers:\n        if number not in list_no_dup:\n\
    \            list_no_dup.append(number)\n    return list_no_dup\n\n", "    res\
    \ = []\n    for num in numbers:\n        if num not in res:\n            res.append(num)\n\
    \    return res\n", "    if not numbers:\n        return numbers\n    result =\
    \ [numbers[0]]\n    for number in numbers[1:]:\n        if number not in result:\n\
    \            result.append(number)\n    return result\n\n", "    numbers.sort()\n\
    \    numbers = [i for i in numbers if numbers.count(i) == 1]\n    return numbers\n\
    \n", "    unique_list = []\n    for x in numbers:\n        if x not in unique_list:\n\
    \            unique_list.append(x)\n    return unique_list\n", "    unique_numbers\
    \ = []\n    for number in numbers:\n        if number not in unique_numbers:\n\
    \            unique_numbers.append(number)\n    return unique_numbers\n", "  \
    \  my_set = set()\n    my_list = []\n    for i in numbers:\n        if i not in\
    \ my_set:\n            my_set.add(i)\n            my_list.append(i)\n    return\
    \ my_list\n", "    # TODO: Complete me\n    # Hint: You can use a set to keep\
    \ track of elements you've seen\n", "    return list(dict.fromkeys(numbers))\n",
  "    res = []\n    for x in numbers:\n        if x not in res:\n            res.append(x)\n\
    \    return res\n", "    pass\n", "    return []\n", "    unique_numbers = []\n\
    \    for number in numbers:\n        if number not in unique_numbers:\n      \
    \      unique_numbers.append(number)\n    return unique_numbers\n\n", "    # TODO:\
    \ return list of integers from \"numbers\" that occur only once\n\n    # Hash\
    \ set is an easy way to remove duplicates\n    # Use array as hashset, because\
    \ sets are unordered\n    hash_set = [False] * (max(numbers) + 1)\n\n    result\
    \ = []\n    for n in numbers:\n        if not hash_set[n]:\n            result.append(n)\n\
    \            hash_set[n] = True\n\n    return result\n\n", "    unique_numbers\
    \ = []\n    for number in numbers:\n        if number not in unique_numbers:\n\
    \            unique_numbers.append(number)\n    return unique_numbers\n", "  \
    \  unique_list = []\n    for num in numbers:\n        if not num in unique_list:\n\
    \            unique_list.append(num)\n    return unique_list", "    return list(set(numbers))\n\
    \n", "    seen = set()\n    result = []\n    for num in numbers:\n        if num\
    \ not in seen:\n            seen.add(num)\n            result.append(num)\n  \
    \  return result\n", "    new_list = []\n    i = 0\n    while i < len(numbers):\n\
    \        if not numbers[i] in new_list:\n            new_list.append(numbers[i])\n\
    \        i += 1\n    return new_list\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
