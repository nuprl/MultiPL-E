name: HumanEval_93_encode
language: py
prompt: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that takes\
  \ a message, and encodes in such a \n    way that it swaps case of all letters,\
  \ replaces all vowels in \n    the message with the letter that appears 2 places\
  \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
  \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
  \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
  \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert\
  \ candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
  \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
  \    check(encode)\n\ntest_check()\n"
completions: ["    return ''.join(map(encode_char, message))\n\n", "    def encode_char(c:\
    \ str) -> str:\n        if not c.isalpha():\n            return c\n        else:\n\
    \            if c.islower():\n                return c.upper()\n            else:\n\
    \                return c.lower()\n    def encode_vowel(c: str) -> str:\n    \
    \    c = encode_char(c)\n        vowels = ['A', 'E', 'I', 'O', 'U']\n        if\
    \ c in vowels:\n            if c == 'U':\n                return 'A'\n       \
    \     else:\n                return vowels[vowels.index(c) + 2]\n        else:\n\
    \            return c\n    return ''.join(map(encode_vowel, message))\n", "  \
    \  pass\n", "    pass\n\n", "    pass\n", "    # TODO: Complete this function.\n\
    \    pass\n", "    def encode_char(c: str) -> str:\n        if c.isalpha():\n\
    \            return _next_char(c, 2)\n        return c\n    return \"\".join(map(encode_char,\
    \ message))\n", "    pass\n", "    new_message = []\n    for character in message:\n\
    \        if character in VOWELS:\n            new_message.append(VOWELS[(VOWELS.index(character)\
    \ + 2) % 10])\n        elif character in CONSONANTS:\n            new_message.append(CONSONANTS[(CONSONANTS.index(character)\
    \ + 2) % 21])\n        else:\n            new_message.append(character)\n    return\
    \ ''.join(new_message)\n", "    pass\n\n", "    pass\n    \n    ", "    return\
    \ \"\".join(map(lambda x: str(chr(ord(x) + 2)), message))\n", "    vowels = \"\
    aeiou\"\n    result = []\n    for char in message:\n        if char.isalpha():\n\
    \            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n\
    \                result.append(vowels[(index + 2) % 5].upper())\n            else:\n\
    \                result.append(char.swapcase())\n        else:\n            result.append(char)\n\
    \    return \"\".join(result)\n", "    encode_dict = {'A': 'C', 'E': 'G', 'I':\
    \ 'K', 'O': 'Q', 'U': 'W', 'Y': 'A',\n                   'a': 'c', 'e': 'g', 'i':\
    \ 'k', 'o': 'q', 'u': 'w', 'y': 'a'}\n    message = ''.join(encode_dict.get(c,\
    \ c) for c in message)\n    return message.swapcase()\n\n", "    encoded_message\
    \ = \"\"\n    vowels = \"aeiou\"\n    for char in message:\n        if char.isalpha():\n\
    \            char = char.lower()\n            if char in vowels:\n           \
    \     char = vowels[(vowels.index(char) + 2) % len(vowels)]\n            encoded_message\
    \ += char.upper()\n        else:\n            encoded_message += char\n    return\
    \ encoded_message\n\n", "    pass\n", "    pass\n\n", "    pass\n", "    # Create\
    \ a new string\n    new = \"\"\n    # Create a placeholder for vowels\n    vowels\
    \ = \"aeiou\"\n    # Loop through message\n    for letter in message:\n      \
    \  # If the letter is lowercase, swap to uppercase\n        if letter.islower():\n\
    \            new += letter.upper()\n        # If the letter is uppercase, swap\
    \ to lowercase\n        elif letter.isupper():\n            new += letter.lower()\n\
    \        # If the letter is a vowel, replace with the following letter\n     \
    \   elif letter in vowels:\n            index = vowels.index(letter)\n       \
    \     new += vowels[index + 2]\n        # Otherwise, just add the letter\n   \
    \     else:\n            new += letter\n    return new\n", "    message = message.swapcase()\n\
    \    message = message.replace('a', 'c')\n    message = message.replace('e', 'g')\n\
    \    message = message.replace('i', 'k')\n    message = message.replace('o', 'q')\n\
    \    message = message.replace('u', 'w')\n    return message\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
