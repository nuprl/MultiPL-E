name: HumanEval_71_triangle_area
language: py
prompt: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
  \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
  \ rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
  \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
  \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
  \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
  \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2,\
  \ 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7)\
  \ == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) ==\
  \ 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
  \ntest_check()\n"
completions: ["    pass\n\n", "    pass\n\n", "    if a + b > c and a + c > b and\
    \ b + c > a:\n        perimeter = (a + b + c) / 2\n        area = (perimeter *\
    \ (perimeter - a) * (perimeter - b) * (perimeter - c)) ** 0.5\n        return\
    \ round(area, 2)\n    else:\n        return -1\n\n", "    if (a + b > c) and (a\
    \ + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s *\
    \ (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n\
    \        return -1\n\n", "    pass\n\n", "    sides = sorted([a, b, c])\n    if\
    \ sides[0] + sides[1] <= sides[2]:\n        return -1\n    s = sum(sides) / 2\n\
    \    return round(sqrt(s * (s - sides[0]) * (s - sides[1]) * (s - sides[2])),\
    \ 2)\n\n", "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\
    \    # heron's formula\n    s = (a + b + c) / 2\n    return round(math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c)), 2)\n\n", "    if a + b > c and a + c > b and\
    \ b + c > a:\n        return 0.5 * math.sqrt((a + b + c) * (a + b - c) * (a +\
    \ c - b) * (b + c - a))\n    else:\n        return -1\n\n", "    p = (a + b +\
    \ c) / 2\n    area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    if area < 0:\n\
    \        return -1\n    return round(area, 2)\n\n", "    s = (a + b + c) / 2\n\
    \    if a + b > c and a + c > b and b + c > a:\n        return (s * (s - a) *\
    \ (s - b) * (s - c)) ** 0.5\n    else:\n        return -1\n\n", "    if (a + b\
    \ > c) and (a + c > b) and (b + c > a):\n        return round((a + b + c) / 2,\
    \ 2)\n    else:\n        return -1\n\n", "    # your code here\n    if((a+b)>c\
    \ and (a+c)>b and (b+c)>a):\n        s=(a+b+c)/2\n        area=(s*(s-a)*(s-b)*(s-c))**0.5\n\
    \        return round(area,2)\n    else:\n        return -1\n        \n \n", " \
    \   pass\n\n", "    pass\n\n", "    pass\n    if (c>=a+b) or (b>=a+c) or (a>=b+c):\n\
    \        return -1\n    else:\n        p = (a+b+c)/2\n        return round((p*(p-a)*(p-b)*(p-c))**0.5,2)\n\
    \        \n", "    if a + b > c and a + c > b and b + c > a:\n        p = (a +\
    \ b + c) / 2\n        s = math.sqrt(p * (p - a) * (p - b) * (p - c))\n       \
    \ return round(s, 2)\n    else:\n        return -1\n\n\n", "    pass\n    ", " \
    \   # if a <= 0 or b <= 0 or c <= 0:\n    #     return -1\n    # if a + b <= c\
    \ or a + c <= b or b + c <= a:\n    #     return -1\n    # p = (a + b + c) / 2\n\
    \    # return (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    return round(((a +\
    \ b + c) * (-a + b + c) * (a - b + c) * (a + b - c)) ** 0.5 / 4, 2) if a > 0 and\
    \ b > 0 and c > 0 and a + b > c and a + c > b and b + c > a else -1\n\n", "  \
    \  if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    p = (a +\
    \ b + c) / 2\n    return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n\
    \n", "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    p\
    \ = (a + b + c) / 2\n    area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n   \
    \ return round(area, 2)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
