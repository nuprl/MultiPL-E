name: HumanEval_61_correct_bracketing
language: py
prompt: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a\
  \ string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
  \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
  \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
  \    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
  \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
  \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
  \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
  \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
  \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
  \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
completions: ["    count = 0\n    for char in brackets:\n        if char == '(':\n\
    \            count += 1\n        elif char == ')':\n            count -= 1\n \
    \       if count < 0:\n            return False\n    return count == 0\n\n", " \
    \   return (brackets.count('(') == brackets.count(')')) and brackets.count('(')\
    \ + brackets.count(')') % 2 == 0\n", "    if ')' in brackets and not '(' in brackets:\n\
    \        return False\n    return not ')' in brackets\n", "    # TODO: fill in\
    \ your answer\n    return None\n\n", "    return brackets.count('(') == brackets.count(')')\n\
    \n", "    if '(' not in brackets:\n        return brackets == ''\n    elif ')'\
    \ not in brackets:\n        return False\n    elif brackets[0] == ')':\n     \
    \   return False\n    else:\n        if brackets[0] == '(':\n            return\
    \ correct_bracketing(brackets[1:])\n        else:\n            return correct_bracketing(brackets[1:])\n\
    \n", "    # use a counter to make sure the number of opening brackets\n    # is\
    \ always at least as large as the number of closing brackets\n    # so far.\n\
    \    num_opens = 0\n    for b in brackets:\n        if b == '(':\n           \
    \ num_opens += 1\n        elif b == ')':\n            num_opens -= 1\n       \
    \     if num_opens < 0:\n                return False\n    return num_opens ==\
    \ 0\n\n", "    bracket_count = 0\n    for i in brackets:\n        if i == '(':\n\
    \            bracket_count += 1\n        elif i == ')':\n            bracket_count\
    \ -= 1\n        if bracket_count < 0:\n            return False\n    return bracket_count\
    \ == 0\n\n", "    return count_matches(brackets, '()') == len(brackets) // 2\n\
    \n", "    # need to keep track of number of \"(\" we have seen\n    # and the\
    \ number of \")\" we have seen\n    # we have seen \"(\" if open_count > close_count\n\
    \    # we have seen \")\" if open_count < close_count\n    # if open_count ==\
    \ close_count, we have seen equal number of \"(\" and \")\"\n    # if open_count\
    \ > close_count, we have seen more \"(\" than \")\"\n    # if open_count < close_count,\
    \ we have seen more \")\" than \"(\"\n    open_count = 0\n    close_count = 0\n\
    \    for b in brackets:\n        if b == '(':\n            open_count += 1\n \
    \       elif b == ')':\n            close_count += 1\n        else:\n        \
    \    return False\n    return open_count == close_count\n\n", "    count = 0\n\
    \    for bracket in brackets:\n        if bracket == '(':\n            count +=\
    \ 1\n        elif bracket == ')':\n            count -= 1\n        if count <\
    \ 0:\n            return False\n    return count == 0\n\n", "    # accumulate\
    \ the number of opening brackets we have seen that have not\n    # yet been closed.\n\
    \    count = 0\n    for bracket in brackets:\n        if bracket == '(':\n   \
    \         count += 1\n        elif bracket == ')':\n            count -= 1\n \
    \       if count < 0:\n            return False\n    return count == 0\n\n", " \
    \   if len(brackets) == 0:\n        return True\n    else:\n        return brackets[0]\
    \ == '(' and brackets[-1] == ')' and correct_bracketing(brackets[1:-1])\n", " \
    \   if '(' not in brackets and ')' not in brackets:\n        return True\n   \
    \ elif brackets.count('(') == brackets.count(')'):\n        # At this point, count\
    \ of brackets is equal\n        if '(' not in brackets[1:] and ')' not in brackets[:-1]:\n\
    \            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\n", "    stack = []\n    for b in brackets:\n        if\
    \ b == '(':\n            stack.append(b)\n        else:\n            if len(stack)\
    \ == 0:\n                return False\n            stack.pop()\n    return len(stack)\
    \ == 0\n\n@doctest.testmod()", "    if brackets == \"\":\n        return True\n\
    \    else:\n        for i in range(len(brackets)):\n            if brackets[i]\
    \ == \"(\":\n                for j in range(i, len(brackets)):\n             \
    \       if brackets[j] == \")\":\n                        if correct_bracketing(brackets[1:j]\
    \ + brackets[j+1:]):\n                            return True\n              \
    \          else:\n                            return False\n                return\
    \ False\n        return False\n", "    if brackets == '':\n        return True\n\
    \    elif brackets[0] == ')':\n        return False\n    elif brackets[-1] ==\
    \ '(':\n        return False\n    else:\n        return correct_bracketing(brackets[1:-1])\n\
    \n", "    if brackets == \"\":\n        return True\n    elif brackets[0] == \"\
    )\" or brackets[-1] == \"(\":\n        return False\n    else:\n        left =\
    \ 0\n        right = 0\n        for b in brackets:\n            if b == \"(\"\
    :\n                left += 1\n            else:\n                right += 1\n\
    \            if right > left:\n                return False\n        return left\
    \ == right\n\n", "    count = 0\n    for bracket in brackets:\n        if bracket\
    \ == '(':\n            count += 1\n        elif bracket == ')':\n            count\
    \ -= 1\n            if count < 0:\n                return False\n    return count\
    \ == 0\n\n", "    count = 0\n    for char in brackets:\n        if char == '(':\n\
    \            count += 1\n        elif char == ')':\n            count -= 1\n \
    \       if count < 0:\n            return False\n    return count == 0\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
