name: HumanEval_149_sorted_list_sum
language: py
prompt: "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n\
  \    \"\"\"Write a function that accepts a list of strings as a parameter,\n   \
  \ deletes the strings that have odd lengths from it,\n    and returns the resulted\
  \ list with a sorted order,\n    The list is always a list of strings and never\
  \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
  \ list should be ascending by length of each word, and you\n    should return the\
  \ list sorted by that rule.\n    If two words have the same length, sort the list\
  \ alphabetically.\n    The function should return a list of strings in sorted order.\n\
  \    You may assume that all words will have the same length.\n    For example:\n\
  \    >>> list_sort(['aa', 'a', 'aaa'])\n    ['aa']\n    >>> list_sort(['ab', 'a',\
  \ 'aaa', 'cd'])\n    ['ab', 'cd']\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(['aa', 'a', 'aaa']) == ['aa']\n\
  \    assert candidate(['school', 'AI', 'asdf', 'b']) == ['AI', 'asdf', 'school']\n\
  \    assert candidate(['d', 'b', 'c', 'a']) == []\n    assert candidate(['d', 'dcba',\
  \ 'abcd', 'a']) == ['abcd', 'dcba']\n    assert candidate(['AI', 'ai', 'au']) ==\
  \ ['AI', 'ai', 'au']\n    assert candidate(['a', 'b', 'b', 'c', 'c', 'a']) == []\n\
  \    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == ['cc', 'dd', 'aaaa', 'bbbb']\n\
  \ndef test_check():\n    check(sorted_list_sum)\n\ntest_check()\n"
completions: ["    lst.sort(key=lambda x: len(x))\n    lst.sort(key=str.lower)\n \
    \   return lst\n\n", "    lst.sort(key=len)\n    for e in lst:\n        if len(e)\
    \ % 2 == 1:\n            lst.remove(e)\n    return lst\n", "    lst_new = []\n\
    \    lst_new = [x for x in lst if len(x) % 2 == 0]\n    lst_new.sort()\n    return\
    \ lst_new\n\n", "    # take a list\n    # delete even list\n    # iterate through\
    \ the list\n    # sort the list and return\n    return sorted(sorted(lst), key=len)\n\
    \nprint(sorted_list_sum(['aa', 'a', 'aaa']))\nprint(sorted_list_sum(['ab', 'a',\
    \ 'aaa', 'cd']))", "    # Sort the input in place\n    lst.sort()\n    # Create\
    \ a new list as result\n    result = []\n    # Iterate over original list\n  \
    \  for i in lst:\n        # Append words with even length\n        if len(i) %\
    \ 2 == 0:\n            result.append(i)\n    return result\n\n", "    return sorted(x\
    \ for x in lst if len(x) % 2 == 0)\n", "    # new_list = []\n    # for item in\
    \ lst:\n    #     if len(item) % 2 == 0:\n    #         new_list.append(item)\n\
    \    # new_list.sort()\n    # return new_list\n    return sorted([item for item\
    \ in lst if len(item) % 2 == 0])\n\nprint(sorted_list_sum(['aa', 'a', 'aaa']))\n\
    print(sorted_list_sum(['ab', 'a', 'aaa', 'cd']))", "    new_list = []\n    for\
    \ word in lst:\n        if len(word) % 2 == 0:\n            new_list.append(word)\n\
    \    new_list.sort()\n    return new_list\n\nprint(sorted_list_sum(['aa', 'a',\
    \ 'aaa']))\nprint(sorted_list_sum(['ab', 'a', 'aaa', 'cd']))", "    # getting\
    \ the lenght of each word\n    len_list = [len(i) for i in lst]\n    # getting\
    \ the index of each word in the list\n    index_list = [len_list.index(i) for\
    \ i in len_list]\n    # sort the index list\n    index_list.sort()\n    # create\
    \ an empty list to add the words in the correct order\n    new_list = []\n   \
    \ # for each index in the index list add the word in the new list\n    for i in\
    \ index_list:\n        new_list.append(lst[i])\n    # return a list of strings\
    \ in sorted order\n    return new_list\n\n", "    return sorted(lst, key=len)\n",
  "    return sorted(list(filter(lambda x: len(x) % 2 == 0, lst)))\n\n", "    remove_odd\
    \ = []\n    sorted_remaining = []\n    for string in lst:\n        if len(string)\
    \ % 2 == 0:\n            remove_odd.append(string)\n    sorted_remaining = sorted(remove_odd,\
    \ key=len)\n    return sorted_remaining\n", "    odd_lst = []\n    for word in\
    \ lst:\n        if len(word) % 2 == 0:\n            odd_lst.append(word)\n   \
    \ return sorted(odd_lst)", "    is_even = lambda x: len(x) % 2 == 0\n    even_words\
    \ = filter(is_even, lst)\n    alphabetical_sort = lambda x: x.sort()\n    even_words\
    \ = sorted(even_words, key=len)\n    even_words = sorted(even_words, key=alphabetical_sort)\n\
    \    return even_words\n", '    return [word for word in sorted(lst, key=lambda
    w: (len(w), w)) if len(word) % 2 == 0]', "    return [w for w in sorted(lst, key=len)\
    \ if len(w) % 2 == 0]\n", "    return sorted(list(filter(lambda w: len(w) % 2\
    \ == 0, lst)))\n", "    return sorted(list(filter(lambda x: len(x) % 2 == 0, lst)))\n",
  "    d = {}\n    for i in lst:\n        if len(i) % 2 == 0:\n            if len(i)\
    \ in d:\n                d[len(i)].append(i)\n            else:\n            \
    \    d[len(i)] = [i]\n    final = []\n    for k in sorted(d.keys()):\n       \
    \ final.extend(sorted(d[k]))\n    return final\n", "    return_list = []\n   \
    \ return_list_2 = []\n    for element in lst:\n        if len(element) % 2 ==\
    \ 0:\n            return_list.append(element)\n    for i in range(len(return_list)):\n\
    \        if i < len(return_list) - 1:\n            if len(return_list[i]) > len(return_list[i\
    \ + 1]):\n                temp = return_list[i]\n                return_list[i]\
    \ = return_list[i + 1]\n                return_list[i + 1] = temp\n    return_list_2.append(return_list[0])\n\
    \    return_list.remove(return_list[0])\n    while len(return_list) > 0:\n   \
    \     for i in range(len(return_list)):\n            if len(return_list[i]) ==\
    \ len(return_list_2[-1]):\n                for j in range(len(return_list_2)):\n\
    \                    if len(return_list[i]) == len(return_list_2[j]):\n      \
    \                  if return_list[i] < return_list_2[j]:\n                   \
    \         return_list_2.insert(j, return_list[i])\n                          \
    \  return_list.remove(return_list[i])\n                            break\n   \
    \                     elif j == len(return_list_2) - 1:\n                    \
    \        return_list_2.append(return_list[i])\n                            return_list.remove(return_list[i])\n\
    \            elif len(return_list[i]) < len(return_list_2[-1]):\n            \
    \    for j in range(len(return_list_2)):\n                    if len(return_list[i])\
    \ < len(return_list_2[j]):\n                        return_list_2.insert(j, return_list[i])\n\
    \                        return_list.remove(return_list[i])\n                \
    \        break\n                    elif j == len(return_list_2) - 1:\n      \
    \                  return_list_2.append(return_list[i])\n                    \
    \    return_list.remove(return_list[i])\n    return return_list"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
