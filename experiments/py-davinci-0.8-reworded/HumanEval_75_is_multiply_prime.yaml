name: HumanEval_75_is_multiply_prime
language: py
prompt: "def is_multiply_prime(a: int) -> bool:\n    \"\"\"Write a function that returns\
  \ true if the given number is the multiplication of 3 prime numbers\n    and false\
  \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
  \    True\n    30 = 2 * 3 * 5\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(5) == False\n    assert candidate(30)\
  \ == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n\
  \    assert candidate(125) == True\n    assert candidate(105) == True\n    assert\
  \ candidate(126) == False\n    assert candidate(729) == False\n    assert candidate(891)\
  \ == False\n    assert candidate(1001) == True\n\ndef test_check():\n    check(is_multiply_prime)\n\
  \ntest_check()\n"
completions: ["    for i in range(2, a):\n        for j in range(2, a):\n        \
    \    for k in range(2, a):\n                if i * j * k == a:\n             \
    \       return True\n    return False\n\n", "    prime_factor = get_prime_factor(a)\n\
    \    if len(prime_factor) == 3:\n        return True\n    else:\n        return\
    \ False\n", "    if a <= 0:\n        return False\n    for i in range(2, int(a\
    \ / 2) + 1):\n        if a % i == 0:\n            if is_prime(i):\n          \
    \      if is_prime(a // i):\n                    return True\n    return False\n\
    \n", "    n = 2\n    while n < a:\n        d = 2\n        while d < n:\n     \
    \       if n % d == 0:\n                break\n            d += 1\n        if\
    \ d == n:\n            while a % n == 0:\n                a = a / n\n        n\
    \ += 1\n    return a < 2", "    if a < 6:\n        return True\n    for b in range(2,\
    \ int(a/2)):\n        if a % b == 0:\n            for c in range(2, int(a/2)):\n\
    \                if (a/b) % c == 0:\n                    for d in range(2, int(a/2)):\n\
    \                        if (a/(b*c)) % d == 0:\n                            return\
    \ False\n                    return True\n    return False\n\n", "    primes =\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    for i in primes:\n        if a % i == 0:\n        \
    \    for j in primes:\n                if (a / i) % j == 0:\n                \
    \    for z in primes:\n                        if ((a / i) / j) % z == 0:\n  \
    \                          return True\n    return False\n\n", "    # Your code\
    \ here\n    def is_prime(a):\n        for i in range(2, a//2+1):\n           \
    \ if a % i == 0:\n                return False\n        return True\n    for i\
    \ in range(2, a//2+1):\n        if is_prime(i) and is_prime(a//i):\n         \
    \   for j in range(2, a//i//2+1):\n                if is_prime(j) and is_prime(a//i//j):\n\
    \                    return True\n    return False\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \"\"\"\n    if a == 2*3*5:\n        return True\n\
    \    elif a == 3*5*7:\n        return True\n    elif a == 2*3*7:\n        return\
    \ True\n    elif a == 2*5*7:\n        return True\n    elif a == 3*5*11:\n   \
    \     return True\n    elif a == 2*3*11:\n        return True\n    elif a == 2*5*11:\n\
    \        return True\n    elif a == 2*3*13:\n        return True\n    elif a ==\
    \ 3*5*13:\n        return True\n    elif a == 2*5*13:\n        return True\n \
    \   elif a == 2*3*17:\n        return True\n    elif a == 3*5*17:\n        return\
    \ True\n    elif a == 2*5*17:\n        return True\n    elif a == 2*3*19:\n  \
    \      return True\n    elif a == 3*5*19:\n        return True\n    elif a ==\
    \ 2*5*19:\n        return True\n    elif a == 2*3*23:\n        return True\n \
    \   elif a == 3*5*23:\n        return True\n    elif a == 2*5*23:\n        return\
    \ True\n    elif a == 2*3*29:\n        return True\n    elif a == 3*5*29:\n  \
    \      return True\n    elif a == 2*5*29:\n        return True\n    elif a ==\
    \ 2*3*31:\n        return", "    return True\n\n", "    for i in range(1, int(math.sqrt(a)\
    \ + 1)):\n        if a % i == 0:\n            if is_prime(i) and is_prime(a //\
    \ i):\n                b = a // i\n                for j in range(1, int(math.sqrt(b)\
    \ + 1)):\n                    if b % j == 0:\n                        if is_prime(j)\
    \ and is_prime(b // j):\n                            return True\n    return False\n",
  "    primes = get_primes(max(a, 100))\n    for i in range(len(primes)):\n      \
    \  for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n\
    \                if primes[i] * primes[j] * primes[k] == a:\n                \
    \    return True\n    return False\n\n", "    pass\n\n", "    if a < 0:\n    \
    \    raise ValueError(\"a must be greater than 0\")\n    if a == 1:\n        return\
    \ False\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for prime in primes:\n        if\
    \ a == prime:\n            return True\n        elif a % prime == 0:\n       \
    \     return False\n    return False\n\n", "    primes = generate_primes(a)\n\
    \    if not len(primes):\n        return False\n    for i in range(len(primes)):\n\
    \        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n\
    \                if primes[i] * primes[j] * primes[k] == a:\n                \
    \    return True\n    return False\n    # Your code here\n    # raise NotImplementedError\n\
    \n", "    if a <= 1:\n        return False\n    for i in range(2, a):\n      \
    \  if a % i == 0:\n            if is_prime(i):\n                if is_prime(a\
    \ // i):\n                    if is_prime(a // (a // i)):\n                  \
    \      return True\n            else:\n                continue\n    return False\n\
    \n", '    pass', "    flag = False\n    for i in range(2, a + 1):\n        if\
    \ (a % i == 0):\n            if (is_prime(i)):\n                a = a / i\n  \
    \              print(i)\n                flag = True\n        if (is_prime(a)):\n\
    \            print(int(a))\n            flag = True\n    return flag\n\n", " \
    \   if a < 2:\n        return False\n    for i in range(2, a):\n        if a %\
    \ i == 0:\n            j = a // i\n            for k in range(2, j):\n       \
    \         if j % k == 0:\n                    break\n            else:\n     \
    \           return True\n    return False\n\n", "    list_prime = []\n    for\
    \ i in range(2, a):\n        if is_prime(i):\n            list_prime.append(i)\n\
    \    result = False\n    for x in list_prime:\n        for y in list_prime:\n\
    \            for z in list_prime:\n                if x * y * z == a:\n      \
    \              result = True\n    return result\n\n", "    pass\n", "    for i\
    \ in range(2, a+1):\n        if a % i == 0:\n            if is_prime(i):\n   \
    \             if a // i > 1:\n                    for j in range(2, a//i+1):\n\
    \                        if (a // i) % j == 0:\n                            if\
    \ is_prime(j):\n                                if a // (i * j) > 1:\n       \
    \                             for k in range(2, a//(i * j)+1):\n             \
    \                           if (a // (i * j)) % k == 0:\n                    \
    \                        if is_prime(k):\n                                   \
    \             if i * j * k == a:\n                                           \
    \         return True\n    return False\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
