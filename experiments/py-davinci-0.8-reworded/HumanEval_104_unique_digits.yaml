name: HumanEval_104_unique_digits
language: py
prompt: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
  \    \"\"\"Given a list of positive integers x. return a sorted list of all \n \
  \   elements that hasn't any even digit.\n\n    Note: Returned list should be sorted\
  \ in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422,\
  \ 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n  \
  \  \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15,\
  \ 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
  \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\
  \ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
completions: ["    s=[]\n    for i in x:\n        temp=i\n        while temp:\n  \
    \          if temp%2==0:\n                s.append(i)\n                break\n\
    \            temp=temp//10\n    for i in s:\n        x.remove(i)\n    return sorted(x)\n",
  "    return [n for n in x if not any(int(k) % 2 == 0 for k in str(n))]\n", "   \
    \ return sorted([x[i] for i in range(len(x)) if any(map(lambda d: d in '13579',\
    \ str(x[i])))])\n", "    return [n for n in x if all(int(d) % 2 for d in str(n))]\n",
  "    no_even_digs = []\n    for num in x:\n        if num % 2 != 0:\n          \
    \  if any([dig % 2 == 0 for dig in [int(i) for i in str(num)]]):\n           \
    \     continue\n            else:\n                no_even_digs.append(num)\n\
    \    return sorted(no_even_digs)\n    ", '    pass', "    uniques = [n for n in\
    \ x if not any(d in \"02468\" for d in str(n))]\n    return sorted(uniques)",
  "    return [i for i in x if len([j for j in str(i) if int(j) % 2 == 0]) == 0]\n",
  "    even_digits = {'0', '2', '4', '6', '8'}\n    return sorted(list(filter(lambda\
    \ n: not any(digit in even_digits for digit in str(n)), x)))\n", "    return [i\
    \ for i in x if not any(str(i).count(d) for d in '02468')]\n\nprint(unique_digits([15,\
    \ 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422, 10]))", "    # TODO: Add\
    \ your code here.\n    cnt = 0\n    result = []\n    while cnt < len(x):\n   \
    \     if \"2\" not in str(x[cnt]) and \"4\" not in str(x[cnt]) and \"6\" not in\
    \ str(x[cnt]) and \"8\" not in str(x[cnt]):\n            result.append(x[cnt])\n\
    \        cnt += 1\n    return sorted(result)\n", "    set_x = set(x)\n    y =\
    \ []\n    for i in set_x:\n        if all(int(j) % 2 != 0 for j in str(i)):\n\
    \            y.append(i)\n    return sorted(y)", "    pass\n\n", "    return [i\
    \ for i in x if not any(str(i).count(str(d)) > 0 for d in [0, 2, 4, 6, 8])]\n",
  "    #return [i for i in x if all(int(char) % 2 == 1 for char in str(i))]\n    return\
    \ [i for i in x if all(char in \"13579\" for char in str(i))]\n", "    unique_list\
    \ = []\n    for elem in x:\n        is_unique = True\n        for num in str(elem):\n\
    \            if int(num) % 2 == 0:\n                is_unique = False\n      \
    \          break\n        if is_unique:\n            unique_list.append(elem)\n\
    \    return sorted(unique_list)", "    return sorted([i for i in x if (i % 2)\
    \ != 0])\n", "    # create a set of numbers without even digits\n    unique_digits\
    \ = {n for n in x if not has_even_digit(n)}\n    # return list of unique numbers\n\
    \    return sorted(unique_digits)\n", "    # List to store unique numbers\n  \
    \  unique_list = []\n    # Loop through all the elements\n    for num in x:\n\
    \        # Convert the number to string\n        num_str = str(num)\n        #\
    \ Check if even number is present in the string\n        if \"2\" not in num_str\
    \ and \"4\" not in num_str and \"6\" not in num_str and \"8\" not in num_str:\n\
    \            # If even number is not present add the number to the list\n    \
    \        unique_list.append(num)\n    # Sort the list and return it\n    return\
    \ sorted(unique_list)\n", "    return []\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
