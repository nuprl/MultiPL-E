name: HumanEval_16_count_distinct_characters
language: py
prompt: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string,\
  \ find out how many distinct characters (regardless of case) does it consist of\n\
  \    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
  \    4\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
  \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
  \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n \
  \   check(count_distinct_characters)\n\ntest_check()\n"
completions: ["    assert isinstance(string, str)\n    s = set()\n    for l in string:\n\
    \        s.add(l.lower())\n    return len(s)\n\n", "    return len(set(list(string.lower())))\n",
  "    return len(set(string.lower()))\n\n", "    return len(set(string.lower()))\n\
    \nprint(count_distinct_characters('Jerry'))\n\nprint(doctest.testmod())\n", " \
    \   unique_char_set = set()\n    for c in string:\n        unique_char_set.add(c.lower())\n\
    \    return len(unique_char_set)\n\n", "    letters = {}\n    for letter in string:\n\
    \        letter = letter.lower()\n        if letter not in letters:\n        \
    \    letters[letter] = 1\n    return len(letters)\n\n", "    return len(set(string.lower()))\n",
  "    string = string.lower()\n    seen = set()\n    for c in string:\n        seen.add(c)\n\
    \    return len(seen)\n\n", "    return len(set(list(string.lower())))\n\n", " \
    \   return len(set(string.lower()))\n\n", "    return len(set(string.lower()))\n\
    \n", "    return len(set(string.lower()))\n\n", "    count = 0\n    for i in string:\n\
    \        if i not in string[:count]:\n            count += 1\n    return count\n\
    \n", "    return len(set(string.lower()))\n\n", "    i = 0\n    for j in range(len(string)):\n\
    \        if string[i] != string[j]:\n            i += 1\n            string[i]\
    \ = string[j]\n    return i + 1\n\n", "    return len(set(string.lower()))\n\n",
  "    distinct_characters = set()\n    for character in string:\n        distinct_characters.add(character.lower())\n\
    \    return len(distinct_characters)\n\n", "    # TODO implement count_distinct_characters\n\
    \    return 0\n\n", "    return len(set(string.lower()))\n", "    return len(set(string.lower()))\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
