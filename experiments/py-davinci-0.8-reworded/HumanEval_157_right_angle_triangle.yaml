name: HumanEval_157_right_angle_triangle
language: py
prompt: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n \
  \   Given the lengths of the three sides of a triangle. Return True if the three\n\
  \    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle\
  \ is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n\
  \    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
  \ 2, 3)\n    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
  \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
  \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
  \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
  \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
  \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
  \    check(right_angle_triangle)\n\ntest_check()\n"
completions: ["    # YOUR CODE HERE\n    sides = [a, b, c]\n    hypotenuse = max(sides)\n\
    \    other_sides = [s for s in sides if s != hypotenuse]\n    return hypotenuse\
    \ ** 2 == other_sides[0] ** 2 + other_sides[1] ** 2\n\n", "    # Put your code\
    \ here\n    pass\n\n", "    return a**2 + b**2 == c**2\n\n", "    a, b, c = sorted([a,\
    \ b, c])\n    return a ** 2 + b ** 2 == c ** 2\n\n", "    return c**2 == a**2\
    \ + b**2\n\n", "    pass\n\n", "    # TODO: implement me\n    pass\n", "    a,\
    \ b, c = sorted([a, b, c])\n    return a ** 2 + b ** 2 == c ** 2\n\n", "    angle\
    \ = [a, b, c]\n    angle.sort()\n    if angle[0]**2 + angle[1]**2 == angle[2]**2:\n\
    \        return True\n    else:\n        return False\n\n", "    if a ** 2 + b\
    \ ** 2 == c ** 2:\n        return True\n    else:\n        return False\n\n",
  "    # TODO: use the triangle inequality theorem to implement this\n    if (a **\
    \ 2 + b ** 2 == c ** 2) or (a ** 2 + c ** 2 == b ** 2) or (c ** 2 + b ** 2 ==\
    \ a ** 2):\n        return True\n    else:\n        return False\n", "    # Write\
    \ your code here\n    c = max(a, b, c)\n    if a*a + b*b == c*c:\n        return\
    \ True\n    else:\n        return False\n", "    if a**2 + b**2 == c**2:\n   \
    \     return True\n    elif b**2 + c**2 == a**2:\n        return True\n    elif\
    \ a**2 + c**2 == b**2:\n        return True\n    else:\n        return False\n",
  "    if isinstance(a, (int, float)) and isinstance(b, (int, float)) and isinstance(c,\
    \ (int, float)):\n        return abs(a**2 + b**2 - c**2) < 1e-5 or abs(a**2 +\
    \ c**2 - b**2) < 1e-5 or abs(b**2 + c**2 - a**2) < 1e-5\n    else:\n        raise\
    \ TypeError(\"Input must be a number\")\n", "    if (a ** 2 + b ** 2 == c ** 2)\
    \ or (b ** 2 + c ** 2 == a ** 2) or (c ** 2 + a ** 2 == b ** 2):\n        return\
    \ True\n    else:\n        return False\n    # Solution from teacher\n    x, y,\
    \ z = sorted([a, b, c])\n    return x ** 2 + y ** 2 == z ** 2\n", "    if a ==\
    \ 0 or b == 0 or c == 0:\n        return False\n    else:\n        if (a*a + b*b\
    \ == c*c) or (a*a + c*c == b*b) or (b*b + c*c == a*a):\n            return True\n\
    \        else:\n            return False\n\n", "    pass\n", "    return (a *\
    \ a + b * b == c * c) or (a * a + c * c == b * b) or (c * c + b * b == a * a)\n",
  "    arr = [a, b, c]\n    arr.sort()\n    return (arr[0] ** 2) + (arr[1] ** 2) ==\
    \ (arr[2] ** 2)\n\n", "    return (a ** 2 + b ** 2 == c ** 2) or (a ** 2 + c **\
    \ 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
