name: HumanEval_56_correct_bracketing
language: py
prompt: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a\
  \ string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
  \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
  \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
  \    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
  \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
  \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
  \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
  \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
  \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
  \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
completions: ["    assert type(brackets) == str\n    assert all([bracket in ['<',\
    \ '>'] for bracket in brackets])\n    return brackets.count('<') == brackets.count('>')\n\
    \n", "    return brackets.count('<') == brackets.count('>')\n\n", "    num_left_brackets\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            num_left_brackets\
    \ += 1\n        elif bracket == '>':\n            num_left_brackets -= 1\n   \
    \     if num_left_brackets < 0:\n            return False\n    return num_left_brackets\
    \ == 0\n\n", "    return False\n\n", "    total = 0\n    for i in brackets:\n\
    \        if i == '<':\n            total += 1\n        elif i == '>':\n      \
    \      total -= 1\n            if total < 0:\n                return False\n \
    \   return total == 0\n\n", "    # store the number of opening brackets in count\n\
    \    count = 0\n    for c in brackets:\n        if c == '<':\n            count\
    \ += 1\n        else:\n            count -= 1\n        if count < 0:\n       \
    \     return False\n    return count == 0\n\n", "    brack_count = 0\n    for\
    \ i in brackets:\n        if i == '<':\n            brack_count += 1\n       \
    \ elif i == '>':\n            brack_count -= 1\n            if brack_count < 0:\n\
    \                return False\n    return brack_count == 0\n\n\n", "    counter\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            counter\
    \ += 1\n        elif char == '>':\n            counter -= 1\n        if counter\
    \ < 0:\n            return False\n    return counter == 0\n\n", "    number_of_open_brackets\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            number_of_open_brackets\
    \ += 1\n        else:\n            number_of_open_brackets -= 1\n        if number_of_open_brackets\
    \ < 0:\n            return False\n    return number_of_open_brackets == 0\n\n",
  "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n    \
    \        stack.append(bracket)\n        else:\n            if stack:\n       \
    \         stack.pop()\n            else:\n                return False\n    return\
    \ stack == []\n", "    counter = 0\n    for bracket in brackets:\n        if bracket\
    \ == '<':\n            counter += 1\n        elif bracket == '>':\n          \
    \  counter -= 1\n        if counter < 0:\n            return False\n    return\
    \ counter == 0\n\n", "    left_count = brackets.count('<')\n    right_count =\
    \ brackets.count('>')\n    return left_count == right_count\n\n", "    count =\
    \ 0\n    for char in brackets:\n        if char == '<':\n            count +=\
    \ 1\n        elif char == '>':\n            count -= 1\n            if count <\
    \ 0:\n                return False\n    return count == 0\n", "    count = 0\n\
    \    for i in brackets:\n        if i == '<':\n            count += 1\n      \
    \  elif i == '>':\n            count -= 1\n            if count < 0:\n       \
    \         return False\n    return count == 0\n\n", "    num_left = 0\n    for\
    \ bracket in brackets:\n        if bracket == '<':\n            num_left += 1\n\
    \        else:\n            num_left -= 1\n        if num_left < 0:\n        \
    \    return False\n    return num_left == 0\n\n", "    count = 0\n    for bracket\
    \ in brackets:\n        if bracket == '<':\n            count += 1\n        elif\
    \ bracket == '>':\n            count -= 1\n        if count < 0:\n           \
    \ return False\n    return count == 0\n\n", "    opening = closing = 0\n    for\
    \ i in brackets:\n        if i == '<':\n            opening += 1\n        else:\n\
    \            closing += 1\n        if closing > opening:\n            return False\n\
    \    return opening == closing\n\n", "    count = 0\n    for bracket in brackets:\n\
    \        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n\
    \            count -= 1\n        if count < 0:\n            return False\n   \
    \ return count == 0\n\n", "    count = 0\n    for bracket in brackets:\n     \
    \   if bracket == '<':\n            count += 1\n        elif bracket == '>':\n\
    \            count -= 1\n        if count < 0:\n            return False\n   \
    \ return count == 0\n\n", "    num_open = 0\n    for ch in brackets:\n       \
    \ if ch == '<':\n            num_open += 1\n        elif ch == '>':\n        \
    \    num_open -= 1\n            if num_open < 0:\n                return False\n\
    \    return num_open == 0\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
