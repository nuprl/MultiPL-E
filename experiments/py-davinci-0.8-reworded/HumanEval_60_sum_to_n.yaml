name: HumanEval_60_sum_to_n
language: py
prompt: "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums\
  \ numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n \
  \   5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n\
  \    1\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6)\
  \ == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert\
  \ candidate(100) == 5050\n\ndef test_check():\n    check(sum_to_n)\n\ntest_check()\n"
completions: ["    return n * (n + 1) // 2\n\n", "    if n == 1:\n        return 1\n\
    \    return n + sum_to_n(n - 1)\n", "    return n * (n + 1) // 2\n", "    return\
    \ n * (n + 1) // 2\n\n", "    total = 0\n    k = 1\n    while k <= n:\n      \
    \  total, k = total + k, k + 1\n    return total\n", "    res = 0\n    for i in\
    \ range(1, n + 1):\n        res += i\n    return res\n\n", "    if n == 1:\n \
    \       return 1\n    else:\n        return n + sum_to_n(n-1)\n", "    sum_of_numbers\
    \ = 0\n    for i in range(1, n + 1):\n        sum_of_numbers += i\n    return\
    \ sum_of_numbers\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1)\
    \ // 2\n\n", "    s = 0\n    for i in range(1, n+1):\n        s += i\n    return\
    \ s\n\n", "    return n * (n + 1) // 2\n", "    i = 1\n    total = 0\n    while\
    \ i <= n:\n        total += i\n        i += 1\n    return total\n", "    # s =\
    \ n*(n+1)/2\n    # return int(s)\n    # use a loop\n    total = 0\n    for num\
    \ in range(1, n+1):\n        total += num\n    return total\n    # use recursion\n\
    \    # if n == 1:\n    #     return 1\n    # else:\n    #     return n + sum_to_n(n-1)\n",
  "    return (n*(n+1))//2\n\n", "    if n <= 0:\n        return 0\n    return sum_to_n(n\
    \ - 1) + n\n", "    return (n * (n + 1)) // 2\n", "    return int(n * (n + 1)\
    \ / 2)\n\n", "    return n * (n + 1) // 2\n\n", "    return sum(range(1, n + 1))\n\
    \n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
