name: HumanEval_76_is_simple_power
language: py
prompt: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write\
  \ a function that returns true if a number x is a simple\n    power of n and false\
  \ in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n\
  \    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2, 2)\n    true\n\
  \    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3, 2)\n    false\n\
  \    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5, 3)\n    false\n\
  \    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
  \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3) ==\
  \ True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) == False\n\
  \    assert candidate(128, 4) == False\n    assert candidate(12, 6) == False\n \
  \   assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n\
  \    check(is_simple_power)\n\ntest_check()\n"
completions: ["    if x == 1:\n        return True\n    if n == 1:\n        return\
    \ False\n    # \u041F\u0440\u043E\u0432\u0435\u0440\u044F\u0435\u043C \u0434\u0435\
    \u043B\u0438\u0442\u0441\u044F \u043B\u0438 x \u043D\u0430 n \u0442\u0430\u043A\
    , \u0447\u0442\u043E \u043F\u043E\u043B\u0443\u0447\u0430\u0435\u0442\u0441\u044F\
    \ int\n    if x % n == 0:\n        # \u0415\u0441\u043B\u0438 \u0434\u0430, \u0442\
    \u043E \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u044F\u0435\u043C \u0432 \u043A\
    \u0430\u043A\u043E\u0439 \u0441\u0442\u0435\u043F\u0435\u043D\u0438 \u043D\u0443\
    \u0436\u043D\u043E \u0432\u043E\u0437\u0432\u0435\u0441\u0442\u0438 n, \u0447\u0442\
    \u043E\u0431\u044B \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C x\n      \
    \  a = round(math.log(x, n))\n        # \u041F\u0440\u043E\u0432\u0435\u0440\u044F\
    \u0435\u043C, \u0447\u0442\u043E \u0432 \u0441\u0442\u0435\u043F\u0435\u043D\u0438\
    \ a \u0447\u0438\u0441\u043B\u043E n \u043F\u043E\u043B\u0443\u0447\u0430\u0435\
    \u0442\u0441\u044F \u0440\u0430\u0432\u043D\u043E x\n        if n ** a == x:\n\
    \            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\n", "    # return power(n, int(round(log(x, n)))) == x\n\
    \    return x == n ** int(log(x, n))\n\n", "    n_log = math.log(x, n)\n    n_int\
    \ = int(n_log)\n    return n_log == n_int\n\n", "    pass\n\n", "    return (x\
    \ % n == 0) and (x // n ** int(log(x, n)) == 1)\n\n", "    return True if x %\
    \ n == 0 and int(math.log(x, n)) == math.log(x, n) else False\n\n", "    # pass\n\
    \n    if x==n**int(math.log(x,n)):\n        return True\n    else:\n        return\
    \ False\n", "    return x ** (1 / n) == round(x ** (1 / n))\n\n", "    if x ==\
    \ 1:\n        return True\n    for i in range(2, x):\n        if x % i == 0:\n\
    \            return False\n    return True\n\n", "    base = x ** (1/n)\n    if\
    \ base % 1 == 0:\n        return True\n    else:\n        return False\n\n", " \
    \   if x == 1:\n        return True\n    else:\n        for i in range(2, n +\
    \ 1):\n            if x == n ** i:\n                return True\n        return\
    \ False\n\n", "    return x in [n ** i for i in range(0, x)]\n\n", "    while\
    \ x % n == 0:\n        x /= n\n    return x == 1\n\n", "    return x == n ** int(log(x,\
    \ n))\n\n\n@task(name=\"Check is point in circle\")", "    if x <= 0 or n <= 0:\n\
    \        return False\n    elif x == 1:\n        return True\n    else:\n    \
    \    return x == n ** int(round(math.log(x, n)))\n\n", "    if x == 0:\n     \
    \   return False\n    else:\n        while x > 1:\n            if x % n != 0:\n\
    \                return False\n            x /= n\n        return True\n\n", " \
    \   return x == n ** int(log(x, n))\n\n", "    return x == n ** round(math.log(x,\
    \ n))\n\n", "    if x == 0 or n == 0:\n        return True\n    if x == 1:\n \
    \       return True\n    if n == 1:\n        return False\n    if x == n:\n  \
    \      return True\n    if n > x:\n        return False\n    for i in range(1,\
    \ x):\n        if n ** i == x:\n            return True\n    return False\n\n",
  "    # your code here\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
