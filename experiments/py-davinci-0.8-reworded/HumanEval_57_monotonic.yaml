name: HumanEval_57_monotonic
language: py
prompt: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\"\
  \"Return True is list elements are monotonically increasing or decreasing.\n   \
  \ >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n  \
  \  False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
  \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
  \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0])\
  \ == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
  \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
  \    check(monotonic)\n\ntest_check()\n"
completions: ["    if l == sorted(l) or l == sorted(l, reverse=True):\n        return\
    \ True\n    return False\n", '    return all(l[i] <= l[i+1] for i in range(len(l)-1))
    or all(l[i] >= l[i+1] for i in range(len(l)-1))', "    if len(l) <= 1:\n     \
    \   return True\n    else:\n        return monotonic_helper(l, 0, len(l) - 1)\n",
  "    return l == sorted(l) or l == sorted(l, reverse=True)\n", "    if not l:\n\
    \        return True\n    start = l[0]\n    for i in range(1, len(l)):\n     \
    \   if l[i] < start:\n            start = l[i]\n        elif l[i] > start:\n \
    \           break\n    else:\n        return True\n    start = l[0]\n    for i\
    \ in range(1, len(l)):\n        if l[i] > start:\n            start = l[i]\n \
    \       elif l[i] < start:\n            break\n    else:\n        return True\n\
    \    return False\n", "    if l[0] < l[-1]:\n        return all(x < y for x, y\
    \ in zip(l, l[1:]))\n    elif l[0] > l[-1]:\n        return all(x > y for x, y\
    \ in zip(l, l[1:]))\n    else:\n        return True", "    if len(l) <= 1:\n \
    \       return True\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n", "    if len(l) < 2:\n     \
    \   return True\n    else:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n", "    return all(l[i] <=\
    \ l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n",
  "    increasing = decreasing = True\n    for i in range(len(l) - 1):\n        if\
    \ l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n\
    \            decreasing = False\n    return increasing or decreasing", "    if\
    \ l[0] > l[1]:\n        return decreasing(l)\n    else:\n        return increasing(l)\n\
    \    ", "    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >=\
    \ l[i+1] for i in range(len(l)-1))\n", "    check = 1\n    if l[0] < l[1]:\n \
    \       check = -1\n    for i in range(len(l) - 1):\n        if l[i] * check <\
    \ l[i + 1] * check:\n            return False\n    return True\n", "    if len(l)\
    \ == 1:\n        return True\n    if l[0] < l[1]:\n        mode = 0 # incr\n \
    \   elif l[0] > l[1]:\n        mode = 1 # decr\n    else:\n        mode = 2 #\
    \ equal\n    for i in range(len(l) - 1):\n        if mode == 0:\n            if\
    \ l[i] > l[i + 1]:\n                return False\n        elif mode == 1:\n  \
    \          if l[i] < l[i + 1]:\n                return False\n        else:\n\
    \            if l[i] < l[i + 1]:\n                mode = 0\n            elif l[i]\
    \ > l[i + 1]:\n                mode = 1\n    return True\n", "    if l == []:\n\
    \        return True\n    else:\n        inc = l[1] > l[0]\n        for i in range(1,\
    \ len(l)):\n            if inc and l[i] < l[i-1]:\n                return False\n\
    \            elif not inc and l[i] > l[i-1]:\n                return False\n \
    \       return True", "    if len(l) < 2:\n        return True\n    up = l[0]\
    \ <= l[1]\n    for i in range(2, len(l)):\n        if up and l[i - 1] > l[i]:\n\
    \            return False\n        if not up and l[i - 1] < l[i]:\n          \
    \  return False\n    return True\n", "    increasing = decreasing = True\n   \
    \ for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing\
    \ = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return\
    \ increasing or decreasing\n", "    direction = 0\n    for i in range(len(l) -\
    \ 1):\n        current = direction\n        # If current == direction, then no\
    \ change\n        # if current == -1 and direction == 0, direction = -1\n    \
    \    # if current == 1 and direction == 0, direction = 1\n        # if current\
    \ == -1 and direction == 1, return False\n        # if current == 1 and direction\
    \ == -1, return False\n        if l[i] < l[i + 1]:\n            direction = 1\n\
    \        elif l[i] > l[i + 1]:\n            direction = -1\n        if direction\
    \ != current and current != 0:\n            return False\n    return True\n",
  "    if len(l) < 2:\n        return True\n    m = l[0] - l[1]\n    for i in range(len(l)\
    \ - 1):\n        if (l[i] - l[i + 1]) * m < 0:\n            return False\n   \
    \ return True", "    if len(l) <= 1:\n        return True\n    if l[0] > l[1]:\n\
    \        return increasing(l)\n    else:\n        return decreasing(l)\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
