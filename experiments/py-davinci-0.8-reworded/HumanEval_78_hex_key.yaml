name: HumanEval_78_hex_key
language: py
prompt: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a\
  \ function that receives \n    a hexadecimal number as a string and counts the number\
  \ of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural\
  \ number \n    greater than 1 that is not a product of two smaller natural numbers).\n\
  \    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n  \
  \  Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a\
  \ number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal\
  \ 13).\n    Note: you may assume the input is always correct or empty string, \n\
  \    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n\
  \    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n  \
  \  >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\
  \"\"\n"
tests: "def check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
  \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n\
  \    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
  \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
completions: ["    primes = '2357BDB'\n    return len([i for i in num if i in primes])\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    def is_prime(n: int)\
    \ -> bool:\n        if n > 1:\n            for i in range(2, n):\n           \
    \     if n % i == 0:\n                    return False\n            return True\n\
    \        return False\n    result = 0\n    for i in num:\n        if int(i, 16)\
    \ in [2, 3, 5, 7, 11, 13]:\n            result += 1\n    return result\n\n", " \
    \   primes = [2, 3, 5, 7, 11, 13]\n    return len([int(i, 16) for i in num if\
    \ int(i, 16) in primes])\n\n", "    num = int(num, 16)\n    return len([el for\
    \ el in primes(num) if el <= 15])\n\n", "    count = 0\n    num_set = {'2', '3',\
    \ '5', '7', 'B', 'D'}\n    if num in num_set:\n        count += 1\n    return\
    \ count\n\n", "    prime_list = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for digit\
    \ in num:\n        if digit.isalpha():\n            if ord(digit) - 55 in prime_list:\n\
    \                count += 1\n        elif int(digit) in prime_list:\n        \
    \    count += 1\n    return count\n", "    if num == '':\n        return 0\n \
    \   primes = [2, 3, 5, 7, 11, 13]\n    hex_values = {'0': 0, '1': 1, '2': 2, '3':\
    \ 3, '4': 4, '5': 5, '6': 6,\n                  '7': 7, '8': 8, '9': 9, 'A': 10,\
    \ 'B': 11, 'C': 12, 'D': 13,\n                  'E': 14, 'F': 15}\n    return\
    \ len([h for h in num if hex_values[h] in primes])\n\n", "    primes = [2, 3,\
    \ 5, 7, 11, 13]\n    temp = []\n    count = 0\n    hex_dict = {\n        '0':\
    \ 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n   \
    \     '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for x in num:\n        if x in\
    \ hex_dict:\n            temp.append(hex_dict[x])\n    for i in temp:\n      \
    \  if i in primes:\n            count += 1\n    return count\n", "    primes =\
    \ [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in num:\n        if i in ['A',\
    \ 'B', 'C', 'D', 'E', 'F']:\n            i = primes[int(i, 16) - 10]\n       \
    \ if int(i) in primes:\n            count += 1\n    return count\n", "    return\
    \ sum(1 for c in num if c in '2357BD')\n", "    num = str(num)\n    hex_values\
    \ = ['2', '3', '5', '7', 'B', 'D']\n    counter = 0\n    for h in hex_values:\n\
    \        if h in num:\n            counter += 1\n    return counter\n\nhex_key('1077E')\n",
  "    base16 = '0123456789ABCDEF'\n    count = 0\n    for i in num:\n        if i\
    \ in base16[2:]:\n            count += 1\n    return count\n", "    return 0\n\
    \n", "    # primes = [2, 3, 5, 7, 11, 13]\n    primes = (2, 3, 5, 7, 11, 13)\n\
    \    return sum(1 for x in num if int(x, 16) in primes)\n\n", "    primes = ['2',\
    \ '3', '5', '7', 'B', 'D']\n    return len([n for n in num if n in primes])\n\n",
  "    count = 0\n    for i in num:\n        if i in '2357BD':\n            count\
    \ += 1\n    return count\n\n", "    if num == \"\":\n        return 0\n    else:\n\
    \        hex_prime = ['2', '3', '5', '7', 'B', 'D']\n        return len([x for\
    \ x in num if x in hex_prime])\n\nprint(hex_key('AB'))\nprint(hex_key('1077E'))\n\
    print(hex_key('ABED1A33'))\nprint(hex_key('123456789ABCDEF0'))\nprint(hex_key('2020'))",
  "    dec_num = int(num, 16)\n    if dec_num < 2:\n        return 0\n    divisor\
    \ = 2\n    primes = 0\n    while divisor <= dec_num:\n        if dec_num % divisor\
    \ == 0:\n            primes += 1\n            dec_num //= divisor\n        else:\n\
    \            divisor += 1\n    return primes\n\n", "    return sum(int(c, 16)\
    \ in {2, 3, 5, 7, 11, 13} for c in num)\n\n", "    num = int(num, 16)\n    return\
    \ sum(is_prime(i) for i in num_to_digits(num))\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
