name: HumanEval_120_maximum
language: py
prompt: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
  \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
  \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
  \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n \
  \   >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
  \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the array\
  \ will be in the range of [1, 1000].\n        2. The elements in the array will\
  \ be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
  \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
  \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
  \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2,\
  \ 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3,\
  \ 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1,\
  \ 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert\
  \ candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243,\
  \ -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\ntest_check()\n"
completions: ["    if not arr:\n        return []\n    if len(arr) == 1:\n       \
    \ return arr\n    if k >= len(arr):\n        return sorted(arr, reverse=True)\n\
    \    heap = Heap(k)\n    heap.add_key(arr[0])\n    for i in range(1, len(arr)):\n\
    \        if arr[i] > heap.peek():\n            heap.pop()\n            heap.add_key(arr[i])\n\
    \    return sorted(heap.heap, reverse=True)\n", "    heap = []\n    for x in arr:\n\
    \        heapq.heappush(heap, x)\n        if len(heap) > k:\n            heapq.heappop(heap)\n\
    \    return sorted(heap, reverse=True)\n", "    # solve problem using a max heap\n\
    \    # a max heap is a binary tree that has the largest element as the root node,\n\
    \    # and each child of the node is smaller than the parent\n    # an easy way\
    \ to visualize this is by thinking of a family tree where the \n    # oldest person\
    \ is at the root node\n    max_heap = MaxHeap()\n    for num in arr:\n       \
    \ max_heap.insert(num)\n    \n    result = []\n    for _ in range(k):\n      \
    \  result.append(max_heap.pop())\n    return result\n\n", "    def get_max(arr:\
    \ List[int], k: int) -> List[int]:\n        \"\"\"\n        Returns the maximum\
    \ k numbers in the given array\n        \"\"\"\n        if k == 0:\n         \
    \   return []\n        elif k == 1:\n            return [max(arr)]\n        else:\n\
    \            max_num = max(arr)\n            arr.remove(max_num)\n           \
    \ return [max_num] + get_max(arr, k - 1)\n\n    return sorted(get_max(arr, k))\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    if not arr:\n        return []\n    elif len(arr) == 1:\n        return arr\n\
    \    # convert the list to a heap\n    heapq.heapify(arr)\n    # remove k-1 items\
    \ from the heap\n    for _ in range(k-1):\n        heapq.heappop(arr)\n    # return\
    \ the sorted list of maxes\n    return sorted(arr, reverse=True)\n", "    return\
    \ sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    heap = []\n    minheap = Heap(heap, min)\n    for n in arr:\n        if len(heap)\
    \ < k:\n            minheap.insert(n)\n        elif n > heap[0]:\n           \
    \ minheap.pop()\n            minheap.insert(n)\n    return sorted(heap, reverse=True)",
  "    if k == 0:\n        return []\n    if k == len(arr):\n        return sorted(arr)\n\
    \    heap = []\n    heapq.heapify(heap)\n    # min heap\n    for i in range(k):\n\
    \        heapq.heappush(heap, -arr[i])\n    for i in range(k, len(arr)):\n   \
    \     if -arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ -arr[i])\n    return sorted([-x for x in heap])", "    max_nums = sorted(arr,\
    \ reverse=True)[:k]\n    return max_nums\n", "    k_element = arr[:k]\n    for\
    \ idx in range(k, len(arr)):\n        for j in range(k):\n            if arr[idx]\
    \ > k_element[j]:\n                k_element[j] = arr[idx]\n                break\n\
    \    return sorted(k_element)\n", "    if k == 0:\n        return []\n    elif\
    \ k == len(arr):\n        return sorted(arr)\n    else:\n        max_val = max(arr)\n\
    \        max_idx = arr.index(max_val)\n        return [max_val] + maximum(arr[:max_idx]\
    \ + arr[max_idx+1:], k-1)", "    arr.sort()\n    return arr[-k:]\n", "    heap\
    \ = []\n    for i in range(k):\n        heapq.heappush(heap, arr[i])\n    for\
    \ i in range(k, len(arr)):\n        heapq.heappushpop(heap, arr[i])\n    return\
    \ heapq.nlargest(k, heap)\n", "    arr.sort()\n    return arr[-k:]\n\n", "   \
    \ max_heap = []\n    for el in arr:\n        heapq.heappush(max_heap, -el)\n \
    \       if len(max_heap) > k:\n            heapq.heappop(max_heap)\n    return\
    \ [-el for el in heapq.nlargest(k, max_heap)]\n", "    res = []\n    for i in\
    \ range(k):\n        max_val = -float('inf')\n        idx = -1\n        for j\
    \ in range(len(arr)):\n            if arr[j] > max_val:\n                max_val\
    \ = arr[j]\n                idx = j\n        res.append(max_val)\n        arr.pop(idx)\n\
    \    return res\n", "    arr.sort()\n    return arr[len(arr)-k:]\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
