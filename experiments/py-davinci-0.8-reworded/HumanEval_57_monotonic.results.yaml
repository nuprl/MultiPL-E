language: py
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l\
    \ == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in\
    \ range(len(l)-1))\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    else:\n        return monotonic_helper(l, 0,\
    \ len(l) - 1)\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) ==\
    \ True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp75nw6qel.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp75nw6qel.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp75nw6qel.py\", line 18,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp75nw6qel.py\"\
    , line 15, in monotonic\n    return monotonic_helper(l, 0, len(l) - 1)\nNameError:\
    \ name 'monotonic_helper' is not defined\n"
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ l == sorted(l) or l == sorted(l, reverse=True)\n\ndef check(candidate):\n  \
    \  assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not\
    \ l:\n        return True\n    start = l[0]\n    for i in range(1, len(l)):\n\
    \        if l[i] < start:\n            start = l[i]\n        elif l[i] > start:\n\
    \            break\n    else:\n        return True\n    start = l[0]\n    for\
    \ i in range(1, len(l)):\n        if l[i] > start:\n            start = l[i]\n\
    \        elif l[i] < start:\n            break\n    else:\n        return True\n\
    \    return False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l[0]\
    \ < l[-1]:\n        return all(x < y for x, y in zip(l, l[1:]))\n    elif l[0]\
    \ > l[-1]:\n        return all(x > y for x, y in zip(l, l[1:]))\n    else:\n \
    \       return True\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe5rzdive.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpe5rzdive.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpe5rzdive.py\", line 23,\
    \ in check\n    assert candidate([4, 1, 1, 0]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    else:\n        return all(l[i] <= l[i+1] for\
    \ i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in\
    \ range(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increasing\
    \ = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i\
    \ + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n       \
    \     decreasing = False\n    return increasing or decreasing\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l[0]\
    \ > l[1]:\n        return decreasing(l)\n    else:\n        return increasing(l)\n\
    \    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n  \
    \  assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10])\
    \ == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lonsvr_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp9lonsvr_.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp9lonsvr_.py\", line 18,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp9lonsvr_.py\"\
    , line 15, in monotonic\n    return increasing(l)\nNameError: name 'increasing'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in\
    \ range(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    check\
    \ = 1\n    if l[0] < l[1]:\n        check = -1\n    for i in range(len(l) - 1):\n\
    \        if l[i] * check < l[i + 1] * check:\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ == 1:\n        return True\n    if l[0] < l[1]:\n        mode = 0 # incr\n \
    \   elif l[0] > l[1]:\n        mode = 1 # decr\n    else:\n        mode = 2 #\
    \ equal\n    for i in range(len(l) - 1):\n        if mode == 0:\n            if\
    \ l[i] > l[i + 1]:\n                return False\n        elif mode == 1:\n  \
    \          if l[i] < l[i + 1]:\n                return False\n        else:\n\
    \            if l[i] < l[i + 1]:\n                mode = 0\n            elif l[i]\
    \ > l[i + 1]:\n                mode = 1\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l\
    \ == []:\n        return True\n    else:\n        inc = l[1] > l[0]\n        for\
    \ i in range(1, len(l)):\n            if inc and l[i] < l[i-1]:\n            \
    \    return False\n            elif not inc and l[i] > l[i-1]:\n             \
    \   return False\n        return True\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    up = l[0] <= l[1]\n    for i in range(2, len(l)):\n\
    \        if up and l[i - 1] > l[i]:\n            return False\n        if not\
    \ up and l[i - 1] < l[i]:\n            return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increasing\
    \ = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i\
    \ + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n       \
    \     decreasing = False\n    return increasing or decreasing\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    direction\
    \ = 0\n    for i in range(len(l) - 1):\n        current = direction\n        #\
    \ If current == direction, then no change\n        # if current == -1 and direction\
    \ == 0, direction = -1\n        # if current == 1 and direction == 0, direction\
    \ = 1\n        # if current == -1 and direction == 1, return False\n        #\
    \ if current == 1 and direction == -1, return False\n        if l[i] < l[i + 1]:\n\
    \            direction = 1\n        elif l[i] > l[i + 1]:\n            direction\
    \ = -1\n        if direction != current and current != 0:\n            return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    m = l[0] - l[1]\n    for i in range(len(l) -\
    \ 1):\n        if (l[i] - l[i + 1]) * m < 0:\n            return False\n    return\
    \ True\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n \
    \   assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10])\
    \ == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    if l[0] > l[1]:\n        return increasing(l)\n\
    \    else:\n        return decreasing(l)\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp25zy7f__.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp25zy7f__.py\", line 30,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp25zy7f__.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp25zy7f__.py\"\
    , line 17, in monotonic\n    return decreasing(l)\nNameError: name 'decreasing'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ (all(l[i] <= l[i+1] for i in range(len(l)-1)) or\n            all(l[i] >= l[i+1]\
    \ for i in range(len(l)-1)))\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # if\
    \ len(l) < 2:\n    #     return True\n    # if l[0] > l[1]:\n    #     is_ascending\
    \ = False\n    # else:\n    #     is_ascending = True\n    # for i in range(len(l)\
    \ - 1):\n    #     if is_ascending:\n    #         if l[i] > l[i + 1]:\n    #\
    \             return False\n    #     else:\n    #         if l[i] < l[i + 1]:\n\
    \    #             return False\n    # return True\n    for i in range(len(l)\
    \ - 1):\n        if l[i] > l[i + 1]:\n            if any(l[i] < l[j] for j in\
    \ range(i + 1, len(l))):\n                return False\n        else:\n      \
    \      if any(l[i] > l[j] for j in range(i + 1, len(l))):\n                return\
    \ False\n    return True\ndef check(candidate):\n    assert candidate([1, 2, 4,\
    \ 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxk1ij1g8.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpxk1ij1g8.py\", line 45,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpxk1ij1g8.py\", line 37,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l\
    \ == []:\n        return True\n    # Create direction variable to store if previous\
    \ elements was increasing or\n    # decreasing.\n    direction = 0\n    for i\
    \ in range(1, len(l)):\n        # If we haven't seen increasing or decreasing\
    \ yet, set direction\n        # variable to 1 or -1.\n        if direction ==\
    \ 0:\n            if l[i] > l[i - 1]:\n                direction = 1\n       \
    \     elif l[i] < l[i - 1]:\n                direction = -1\n        else:\n \
    \           # Check if current element is increasing or decreasing when compared\n\
    \            # to previous element.\n            if direction == 1 and l[i] <\
    \ l[i - 1]:\n                return False\n            elif direction == -1 and\
    \ l[i] > l[i - 1]:\n                return False\n    return True\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    direction\
    \ = 0\n    for i in range(len(l) - 1):\n        if not direction:\n          \
    \  if l[i] > l[i + 1]:\n                direction = -1\n            elif l[i]\
    \ < l[i + 1]:\n                direction = 1\n        elif direction == 1 and\
    \ l[i] > l[i + 1]:\n            return False\n        elif direction == -1 and\
    \ l[i] < l[i + 1]:\n            return False\n    return True\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    n = len(l)\n\
    \    if n == 1:\n        return True\n    for i in range(n-1):\n        if l[i]\
    \ < l[i+1]:\n            break\n    if i == n-2:\n        return True\n    for\
    \ i in range(n-1):\n        if l[i] > l[i+1]:\n            break\n    if i ==\
    \ n-2:\n        return True\n    return False\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ sorted(l) == l or sorted(l, reverse=True) == l\n\ndef check(candidate):\n  \
    \  assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # One\
    \ liner\n    # return all(map(lambda x, y: x <= y, l, l[1:])) or all(map(lambda\
    \ x, y: x >= y, l, l[1:]))\n\n    # More readable\n    if len(l) <= 1:\n     \
    \   return True\n    else:\n        first = l[0]\n        count = 0\n        for\
    \ i in range(1, len(l)):\n            if l[i] >= first:\n                count\
    \ += 1\n                first = l[i]\n            else:\n                break\n\
    \        if count == len(l) - 1:\n            return True\n        else:\n   \
    \         first = l[0]\n            count = 0\n            for i in range(1, len(l)):\n\
    \                if l[i] <= first:\n                    count += 1\n         \
    \           first = l[i]\n                else:\n                    break\n \
    \           if count == len(l) - 1:\n                return True\n           \
    \ else:\n                return False\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    elif l[0] > l[1]:\n        return all(l[i] >=\
    \ l[i+1] for i in range(len(l)-1))\n    else:\n        return all(l[i] <= l[i+1]\
    \ for i in range(len(l)-1))\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    direction\
    \ = None\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n     \
    \       if direction is None:\n                direction = True\n            elif\
    \ direction is False:\n                return False\n        elif l[i] > l[i +\
    \ 1]:\n            if direction is None:\n                direction = False\n\
    \            elif direction is True:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in\
    \ range(len(l)-1))\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    elif l[0] < l[1]:\n        return all(x < y for\
    \ x, y in zip(l, l[1:]))\n    elif l[0] > l[1]:\n        return all(x > y for\
    \ x, y in zip(l, l[1:]))\n    else:\n        return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ilrb7zt.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp_ilrb7zt.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp_ilrb7zt.py\", line 26,\
    \ in check\n    assert candidate([4, 1, 1, 0]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    i, j\
    \ = 0, 1\n    while j < len(l):\n        if l[i] <= l[j]:\n            i += 1\n\
    \            j += 1\n        else:\n            break\n    if j == len(l):\n \
    \       return True\n    else:\n        i, j = 0, 1\n        while j < len(l):\n\
    \            if l[i] >= l[j]:\n                i += 1\n                j += 1\n\
    \            else:\n                break\n        if j == len(l):\n         \
    \   return True\n        else:\n            return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in\
    \ range(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    inc = l[0] <= l[1]\n    for i in range(1, len(l)\
    \ - 1):\n        if inc and l[i] > l[i + 1]:\n            return False\n     \
    \   if not inc and l[i] < l[i + 1]:\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    if l[0] > l[1]:\n        return all(l[i] >=\
    \ l[i+1] for i in range(len(l)-1))\n    else:\n        return all(l[i] <= l[i+1]\
    \ for i in range(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    direction\
    \ = 0\n    for i in range(len(l) - 1):\n        if l[i] == l[i + 1]:\n       \
    \     continue\n        if direction == 0:\n            direction = l[i] < l[i\
    \ + 1]\n        if direction != (l[i] < l[i + 1]):\n            return False\n\
    \    return True\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) ==\
    \ True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    if l[0] < l[1]:\n        order = 1\n    elif\
    \ l[0] > l[1]:\n        order = -1\n    else:\n        return monotonic(l[1:])\n\
    \    for i in range(1, len(l) - 1):\n        if order == 1 and l[i] > l[i + 1]:\n\
    \            return False\n        elif order == -1 and l[i] < l[i + 1]:\n   \
    \         return False\n    return True\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ (all(l[i] <= l[i+1] for i in range(len(l)-1)) or\n            all(l[i] >= l[i+1]\
    \ for i in range(len(l)-1)))\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in\
    \ range(len(l)-1))\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnp5b4rz8.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpnp5b4rz8.py\", line 25,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpnp5b4rz8.py\", line 19,\
    \ in check\n    assert candidate([4, 1, 1, 0]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    direction\
    \ = 0\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n        \
    \    if direction == -1:\n                return False\n            direction\
    \ = 1\n        elif l[i] > l[i + 1]:\n            if direction == 1:\n       \
    \         return False\n            direction = -1\n    return True\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ (all(l[i] <= l[i+1] for i in range(len(l)-1)) or\n            all(l[i] >= l[i+1]\
    \ for i in range(len(l)-1)))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    direction = l[1] - l[0]\n    if direction ==\
    \ 0:\n        return monotonic(l[1:])\n    return all(a * direction <= b * direction\
    \ for a, b in zip(l, l[1:]))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ sorted(l) == l or sorted(l, reverse=True) == l\n\ndef check(candidate):\n  \
    \  assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Flag\
    \ to identify if first element is greater or smaller than the second\n    flag\
    \ = 0\n\n    # Use flag to determine if a number is bigger than its previous\n\
    \    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            if\
    \ flag == 1:\n                return False\n            else:\n              \
    \  flag = -1\n        elif l[i] > l[i + 1]:\n            if flag == -1:\n    \
    \            return False\n            else:\n                flag = 1\n     \
    \   else:\n            pass\n\n    return True\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Check\
    \ if the list is increasing\n    if l[-1] >= l[0]:\n        for i in range(len(l)\
    \ - 1):\n            if l[i] > l[i + 1]:\n                return False\n    #\
    \ Check if the list is decreasing\n    elif l[-1] <= l[0]:\n        for i in range(len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    elif l[0] < l[1]:\n        for i in range(1,\
    \ len(l) - 1):\n            if l[i] > l[i + 1]:\n                return False\n\
    \    else:\n        for i in range(1, len(l) - 1):\n            if l[i] < l[i\
    \ + 1]:\n                return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ == 1:\n        return True\n    elif l[0] < l[1]:\n        return monotonic_increasing(l)\n\
    \    elif l[0] > l[1]:\n        return monotonic_decreasing(l)\n    else:\n  \
    \      return monotonic(l[1:])\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp02vith5.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpp02vith5.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpp02vith5.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpp02vith5.py\"\
    , line 15, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    # direction of increase\n    inc = l[1] - l[0]\n\
    \    for i in range(1, len(l)):\n        if i == len(l) - 1:\n            break\n\
    \        if inc > 0:\n            # decreasing\n            if l[i + 1] - l[i]\
    \ < 0:\n                return False\n        elif inc < 0:\n            # increasing\n\
    \            if l[i + 1] - l[i] > 0:\n                return False\n        else:\n\
    \            inc = l[i + 1] - l[i]\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    direction = l[1] - l[0]\n    for index in range(2,\
    \ len(l)):\n        if direction == 0:\n            direction = l[index] - l[index\
    \ - 1]\n            continue\n        elif direction > 0:\n            if l[index]\
    \ - l[index - 1] < 0:\n                return False\n        else:\n         \
    \   if l[index] - l[index - 1] > 0:\n                return False\n    return\
    \ True\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n \
    \   assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10])\
    \ == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 3:\n        return True\n    if l[0] > l[1]:\n        return monotonic_dec(l)\n\
    \    else:\n        return monotonic_inc(l)\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8copfp8n.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp8copfp8n.py\", line 30,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp8copfp8n.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp8copfp8n.py\"\
    , line 17, in monotonic\n    return monotonic_inc(l)\nNameError: name 'monotonic_inc'\
    \ is not defined. Did you mean: 'monotonic'?\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increasing\
    \ = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i\
    \ + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n       \
    \     decreasing = False\n    return increasing or decreasing\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    direction\
    \ = l[1] - l[0]\n    for i in range(2, len(l)):\n        if direction == 0:\n\
    \            direction = l[i] - l[i - 1]\n            continue\n        if breaks_direction(direction,\
    \ l[i - 1], l[i]):\n            return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo8kgs80y.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo8kgs80y.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpo8kgs80y.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpo8kgs80y.py\"\
    , line 17, in monotonic\n    if breaks_direction(direction, l[i - 1], l[i]):\n\
    NameError: name 'breaks_direction' is not defined\n"
  stdout: ''
  timestamp: 1659823472
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    if l[0] < l[1]:\n        return is_increasing(l)\n\
    \    else:\n        return is_decreasing(l)\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr4lo8_5q.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpr4lo8_5q.py\", line 30,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpr4lo8_5q.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpr4lo8_5q.py\"\
    , line 15, in monotonic\n    return is_increasing(l)\nNameError: name 'is_increasing'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ == 1:\n        return True\n    elif l[0] < l[1]:\n        for i in range(1,\
    \ len(l) - 1):\n            if l[i] > l[i + 1]:\n                return False\n\
    \        return True\n    elif l[0] > l[1]:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n     \
    \   return True\n    else:\n        return monotonic(l[1:])\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increase\
    \ = False\n    decrease = False\n    for i in range(len(l) - 1):\n        if l[i\
    \ + 1] > l[i]:\n            increase = True\n        elif l[i + 1] < l[i]:\n \
    \           decrease = True\n        if increase and decrease:\n            return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    is_increasing\
    \ = True\n    is_decreasing = True\n    for i in range(1, len(l)):\n        if\
    \ l[i] < l[i - 1]:\n            is_increasing = False\n        if l[i] > l[i -\
    \ 1]:\n            is_decreasing = False\n    return is_increasing or is_decreasing\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in\
    \ range(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l\
    \ == []:\n        return True\n    increment = True\n    decrement = True\n  \
    \  last = l[0]\n    for i in l[1:]:\n        if i > last:\n            decrement\
    \ = False\n        elif i < last:\n            increment = False\n        last\
    \ = i\n    return increment or decrement\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    direction\
    \ = l[1] - l[0]\n    for i in range(2, len(l)):\n        diff = l[i] - l[i - 1]\n\
    \        if direction and diff * direction < 0:\n            return False\n  \
    \      if not direction:\n            direction = diff\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in\
    \ range(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    elif l[0] < l[1]:\n        for i in range(len(l)\
    \ - 1):\n            if l[i] > l[i + 1]:\n                return False\n    else:\n\
    \        for i in range(len(l) - 1):\n            if l[i] < l[i + 1]:\n      \
    \          return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc =\
    \ dec = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n \
    \           inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n\
    \    return inc or dec\ndef check(candidate):\n    assert candidate([1, 2, 4,\
    \ 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc =\
    \ True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n       \
    \     inc = False\n            break\n    if inc:\n        return True\n    dec\
    \ = True\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n     \
    \       dec = False\n            break\n    if dec:\n        return True\n   \
    \ return False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) ==\
    \ True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ == 1:\n        return True\n    elif l[0] < l[1]:\n        for i in range(len(l)\
    \ - 1):\n            if l[i] > l[i + 1]:\n                return False\n     \
    \   return True\n    elif l[0] > l[1]:\n        for i in range(len(l) - 1):\n\
    \            if l[i] < l[i + 1]:\n                return False\n        return\
    \ True\n    else:\n        return False\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp__a747hv.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp__a747hv.py\", line 37,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp__a747hv.py\", line 34,\
    \ in check\n    assert candidate([9, 9, 9, 9]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    incr\
    \ = all(l[i] <= l[i+1] for i in range(len(l)-1))\n    decr = all(l[i] >= l[i+1]\
    \ for i in range(len(l)-1))\n    return incr or decr\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    i = 0\n\
    \    while i < len(l) - 1:\n        if l[i] < l[i + 1]:\n            while i <\
    \ len(l) - 1:\n                if l[i] > l[i + 1]:\n                    return\
    \ False\n                i += 1\n        else:\n            while i < len(l) -\
    \ 1:\n                if l[i] < l[i + 1]:\n                    return False\n\
    \                i += 1\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # O(n)\n\
    \    if len(l) <= 1:\n        return True\n    cmp = l[1] - l[0]\n    for i in\
    \ range(2, len(l)):\n        if (l[i] - l[i-1]) * cmp < 0:\n            return\
    \ False\n    return True\ndef check(candidate):\n    assert candidate([1, 2, 4,\
    \ 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i\
    \ in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            for j in range(i\
    \ + 1, len(l) - 1):\n                if l[j] > l[j + 1]:\n                   \
    \ return False\n        else:\n            for j in range(i + 1, len(l) - 1):\n\
    \                if l[j] < l[j + 1]:\n                    return False\n    return\
    \ True\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n \
    \   assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10])\
    \ == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(a >= b for a, b in zip(l, l[1:])) or all(a <= b for a, b in zip(l, l[1:]))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 3:\n        return True\n    elif l[0] < l[1]:\n        f = all\n    else:\n\
    \        f = any\n    return f(l[i] <= l[i+1] for i in range(len(l)-1))\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpew4nne29.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpew4nne29.py\", line 30,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpew4nne29.py\", line 23,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increasing\
    \ = [i for i in range(len(l) - 1) if l[i] <= l[i + 1]]\n    decreasing = [i for\
    \ i in range(len(l) - 1) if l[i] >= l[i + 1]]\n    return len(increasing) == len(l)\
    \ - 1 or len(decreasing) == len(l) - 1\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ == 1:\n        return True\n    # first, check if list is increasing\n    is_increasing\
    \ = True\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n        \
    \    is_increasing = False\n            break\n    if is_increasing:\n       \
    \ return True\n    # if it's not increasing, it's decreasing\n    for i in range(1,\
    \ len(l)):\n        if l[i] > l[i-1]:\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increase\
    \ = True\n    decrease = True\n    for i in range(len(l) - 1):\n        if l[i]\
    \ > l[i + 1]:\n            increase = False\n        if l[i] < l[i + 1]:\n   \
    \         decrease = False\n    return increase or decrease\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in\
    \ range(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # set\
    \ is_increasing to True (1) if each element is >= to the previous element\n  \
    \  # set is_decreasing to True (1) if each element is <= to the previous element\n\
    \    # if neither are True (1), the list is not monotonic.\n    is_increasing\
    \ = all(x >= y for x, y in zip(l, l[1:]))\n    is_decreasing = all(x <= y for\
    \ x, y in zip(l, l[1:]))\n    return is_increasing or is_decreasing\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i\
    \ in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return all(l[i]\
    \ >= l[i + 1] for i in range(len(l) - 1))\n        elif l[i] < l[i + 1]:\n   \
    \         return all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    is_increasing\
    \ = all(l[i] <= l[i+1] for i in range(len(l)-1))\n    is_decreasing = all(l[i]\
    \ >= l[i+1] for i in range(len(l)-1))\n    return is_increasing or is_decreasing\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ == 1:\n        return True\n    elif l[0] < l[1]:\n        for i in range(1,\
    \ len(l) - 1):\n            if l[i] > l[i + 1]:\n                return False\n\
    \    else:\n        for i in range(1, len(l) - 1):\n            if l[i] < l[i\
    \ + 1]:\n                return False\n    return True\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ l == sorted(l) or l == sorted(l, reverse=True)\n\ndef check(candidate):\n  \
    \  assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    low_to_high\
    \ = True\n    high_to_low = True\n    if len(l) <= 1:\n        return True\n \
    \   for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            low_to_high\
    \ = False\n        if l[i] < l[i + 1]:\n            high_to_low = False\n    return\
    \ low_to_high or high_to_low\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # typecheck\n\
    \    if not l:\n        return False\n    if isinstance(l[0], int):\n        for\
    \ i in l:\n            if not isinstance(i, int):\n                return False\n\
    \    else:\n        for i in l:\n            if not isinstance(i, type(l[0])):\n\
    \                return False\n    # compare first element with second\n    if\
    \ l[0] < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i\
    \ + 1]:\n                return False\n    else:\n        for i in range(len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increasing\
    \ = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i\
    \ + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n       \
    \     decreasing = False\n    return increasing or decreasing\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    dir_up\
    \ = l[0] <= l[1]\n    for i in range(1, len(l) - 1):\n        if dir_up:\n   \
    \         if l[i] > l[i + 1]:\n                return False\n        else:\n \
    \           if l[i] < l[i + 1]:\n                return False\n    return True\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    else:\n        return (l[0] < l[1] and monotonic(l[1:]))\
    \ or (l[0] > l[1] and monotonic(l[1:]))\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplg8fca34.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmplg8fca34.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmplg8fca34.py\", line 19,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ l == sorted(l) or l == sorted(l, reverse=True)\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1)) or all(l[i] <= l[i+1] for i in\
    \ range(len(l)-1))\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    n = 1\n\
    \    while n < len(l):\n        if (l[n] - l[n-1]) * (l[1] - l[0]) < 0:\n    \
    \        return False\n        n += 1\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    d = l[1] - l[0]\n    for i in range(1, len(l)):\n\
    \        if d * (l[i] - l[i-1]) < 0:\n            return False\n    return True\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    else:\n        dir = l[1] - l[0]\n        if\
    \ dir > 0:\n            for i in range(1, len(l)):\n                if (l[i] -\
    \ l[i-1]) < 0:\n                    return False\n            return True\n  \
    \      elif dir < 0:\n            for i in range(1, len(l)):\n               \
    \ if (l[i] - l[i-1]) > 0:\n                    return False\n            return\
    \ True\n        else:\n            return monotonic(l[1:])\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    inc, dec = True, True\n    for i in range(1,\
    \ len(l)):\n        if l[i] < l[i-1]:\n            inc = False\n        if l[i]\
    \ > l[i-1]:\n            dec = False\n    return inc or dec\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    is_increasing\
    \ = all(l[i] <= l[i+1] for i in range(len(l)-1))\n    is_decreasing = all(l[i]\
    \ >= l[i+1] for i in range(len(l)-1))\n    return is_increasing or is_decreasing\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in\
    \ range(len(l)-1))\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Check\
    \ if the list has 0 or 1 element\n    if len(l) <= 1:\n        return True\n \
    \   # Check if the first element is greater or less than the second\n    # If\
    \ so, then check if the subsequent pairs are also increasing or decreasing\n \
    \   else:\n        if l[0] > l[1]:\n            compare = lambda a, b: a >= b\n\
    \        else:\n            compare = lambda a, b: a <= b\n        for i in range(len(l)\
    \ - 1):\n            if not compare(l[i], l[i + 1]):\n                return False\n\
    \        return True\n\ndef check(candidate):\n    assert candidate([1, 2, 4,\
    \ 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in\
    \ range(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    sort\
    \ = lambda l: sorted(l) == l\n    rev_sort = lambda l: sorted(l, reverse=True)\
    \ == l\n    return sort(l) or rev_sort(l)\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # If\
    \ a list is monotonically increasing, then running it through reversed\n    #\
    \ produces a monotonically decreasing list, and vice versa.\n    return all(a\
    \ >= b for a, b in zip(l, l[1:])) or all(a <= b for a, b in zip(l, l[1:]))\n\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    if l[0] <= l[1]:\n        return is_mono_increasing(l)\n\
    \    return is_mono_decreasing(l)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph9rp9ltt.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmph9rp9ltt.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmph9rp9ltt.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmph9rp9ltt.py\"\
    , line 15, in monotonic\n    return is_mono_increasing(l)\nNameError: name 'is_mono_increasing'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    # len(l) >= 2\n    if l[0] <= l[1]:\n       \
    \ for i in range(1, len(l) - 1):\n            if l[i] > l[i + 1]:\n          \
    \      return False\n    else:\n        for i in range(1, len(l) - 1):\n     \
    \       if l[i] < l[i + 1]:\n                return False\n    return True\n\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increasing\
    \ = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i\
    \ + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n       \
    \     decreasing = False\n    return increasing or decreasing\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l\
    \ == sorted(l):\n        return True\n    elif l == sorted(l, reverse=True):\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    direction\
    \ = 0\n    for i in range(len(l) - 1):\n        if l[i] == l[i + 1]:\n       \
    \     continue\n        if direction == 0:\n            direction = l[i] - l[i\
    \ + 1]\n        elif direction < 0:\n            if l[i] - l[i + 1] > 0:\n   \
    \             return False\n        elif direction > 0:\n            if l[i] -\
    \ l[i + 1] < 0:\n                return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ == 1:\n        return True\n    else:\n        return (l[0] < l[1] and monotonic(l[1:]))\
    \ or (l[0] > l[1] and monotonic(l[1:]))\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp80j6x8vu.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp80j6x8vu.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp80j6x8vu.py\", line 19,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    direction\
    \ = None\n    for first, second in zip(l, l[1:]):\n        if first == second:\n\
    \            continue\n        if direction is None:\n            direction =\
    \ first < second\n        elif first < second != direction:\n            return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpck0t1ph9.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpck0t1ph9.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpck0t1ph9.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ == 1:\n        return True\n    if l[0] < l[1]:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] > l[i + 1]:\n                return False\n    else:\n\
    \        for i in range(1, len(l) - 1):\n            if l[i] < l[i + 1]:\n   \
    \             return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in\
    \ range(len(l)-1))\n\nimport doctest\ndoctest.testmod()\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in\
    \ range(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in\
    \ range(len(l)-1))\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    return all(l[i] >= l[i-1] for i in range(1,\
    \ len(l))) or all(l[i] <= l[i-1] for i in range(1, len(l)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[0] < l[1]:\n        direction = 'inc'\n\
    \    elif l[0] > l[1]:\n        direction = 'dec'\n    else:\n        direction\
    \ = 'eq'\n    for i in range(2, len(l)):\n        if direction == 'inc':\n   \
    \         if l[i] < l[i-1]:\n                return False\n        elif direction\
    \ == 'dec':\n            if l[i] > l[i-1]:\n                return False\n   \
    \     else:\n            if l[i] != l[i-1]:\n                if l[i] < l[i-1]:\n\
    \                    direction = 'dec'\n                else:\n              \
    \      direction = 'inc'\n    return True\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # return\
    \ _monotonic_pure(l)\n    return _monotonic_py(l)\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi87nphfe.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpi87nphfe.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpi87nphfe.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpi87nphfe.py\"\
    , line 13, in monotonic\n    return _monotonic_py(l)\nNameError: name '_monotonic_py'\
    \ is not defined. Did you mean: 'monotonic'?\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ (all(l[i] <= l[i+1] for i in range(len(l)-1)) or\n            all(l[i] >= l[i+1]\
    \ for i in range(len(l)-1)))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in\
    \ range(len(l)-1))\n\nprint(monotonic([1, 2, 4, 20]))\nprint(monotonic([1, 20,\
    \ 4, 10]))\nprint(monotonic([4, 1, 0, -10]))\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: 'True

    False

    True

    '
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ l == sorted(l) or l == sorted(l, reverse=True)\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    check = 1 if l[1] > l[0] else -1\n    for i\
    \ in range(len(l) - 1):\n        if l[i+1] == l[i]:\n            continue\n  \
    \      if l[i+1] - l[i] == check or l[i+1] - l[i] == 0:\n            continue\n\
    \        if l[i+1] - l[i] == -check:\n            return False\n        else:\n\
    \            return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgq5jpynh.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgq5jpynh.py\", line 37,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpgq5jpynh.py\", line 27,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def is_decreasing(l:\
    \ List[int]) -> bool:\n        for i in range(1, len(l)):\n            if l[i]\
    \ > l[i - 1]:\n                return False\n        return True\n\n    return\
    \ is_decreasing(l) or is_decreasing(l[::-1])\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    ascending = l[0] <= l[1]\n    for i in range(1,\
    \ len(l) - 1):\n        if ascending:\n            if l[i] > l[i + 1]:\n     \
    \           return False\n        else:\n            if l[i] < l[i + 1]:\n   \
    \             return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 3:\n        return True\n    dec = inc = True\n    for i in range(1, len(l)):\n\
    \        if l[i] < l[i-1]:\n            inc = False\n        if l[i] > l[i-1]:\n\
    \            dec = False\n    return dec or inc\n\ndef check(candidate):\n   \
    \ assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    direction\
    \ = 0\n    for index in range(len(l) - 1):\n        if l[index] < l[index + 1]:\n\
    \            if direction == -1:\n                return False\n            direction\
    \ = 1\n        elif l[index] > l[index + 1]:\n            if direction == 1:\n\
    \                return False\n            direction = -1\n    return True\n\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in\
    \ range(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i, j = 0, 1\n    diff = l[i] - l[j]\n    if diff\
    \ < 0:\n        while j < len(l) - 1:\n            i += 1\n            j += 1\n\
    \            if l[i] - l[j] > 0:\n                return False\n    elif diff\
    \ > 0:\n        while j < len(l) - 1:\n            i += 1\n            j += 1\n\
    \            if l[i] - l[j] < 0:\n                return False\n    else:\n  \
    \      while j < len(l) - 1:\n            i += 1\n            j += 1\n       \
    \     if l[i] - l[j] != 0:\n                return False\n    return True\n\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    diff\
    \ = [l[i] - l[i-1] for i in range(1, len(l))]\n    if all(num > 0 for num in diff)\
    \ or all(num < 0 for num in diff):\n        return True\n    return False\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwxhcnpb5.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwxhcnpb5.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpwxhcnpb5.py\", line 21,\
    \ in check\n    assert candidate([4, 1, 1, 0]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ (all(x<=y for x, y in zip(l, l[1:])) or\n            all(x>=y for x, y in zip(l,\
    \ l[1:])))\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    if l[0] < l[1]:\n        for i in range(len(l)\
    \ - 1):\n            if l[i] > l[i + 1]:\n                return False\n    else:\n\
    \        for i in range(len(l) - 1):\n            if l[i] < l[i + 1]:\n      \
    \          return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    new_l\
    \ = l[:]\n    increasing = new_l == sorted(new_l)\n    decreasing = new_l == sorted(new_l,\
    \ reverse=True)\n    return increasing or decreasing\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Find\
    \ highest increase followed by highest decrease\n    # where 'for' loops iterate\
    \ over indexes and 'while' loops iterate over values.\n    # Highest increase\
    \ followed by highest decrease.\n    i = 0\n    for i in range(len(l) - 1):\n\
    \        if l[i] > l[i + 1]:\n            break\n    j = len(l) - 1\n    while\
    \ j > i:\n        if l[j] > l[j - 1]:\n            return False\n        j -=\
    \ 1\n    return True\n\ndef check(candidate):\n    assert candidate([1, 2, 4,\
    \ 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnec5yt73.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnec5yt73.py\", line 37,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpnec5yt73.py\", line 27,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc,\
    \ dec = True, True\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n\
    \            inc = False\n        if l[i] > l[i-1]:\n            dec = False\n\
    \    return inc or dec\ndef check(candidate):\n    assert candidate([1, 2, 4,\
    \ 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ (all(l[i] <= l[i+1] for i in range(len(l)-1)) or\n            all(l[i] >= l[i+1]\
    \ for i in range(len(l)-1)))\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increasing\
    \ = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] < l[i\
    \ + 1]:\n            decreasing = False\n        elif l[i] > l[i + 1]:\n     \
    \       increasing = False\n    return increasing or decreasing\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Base\
    \ case: if len(l) < 2, it is monotonic\n    if len(l) < 2:\n        return True\n\
    \    else:\n        # Incrementing\n        if l[0] < l[1]:\n            if l[1]\
    \ < l[2]:\n                return monotonic(l[1:])\n            else:\n      \
    \          return False\n        # Decrementing\n        elif l[0] > l[1]:\n \
    \           if l[1] > l[2]:\n                return monotonic(l[1:])\n       \
    \     else:\n                return False\n        # Neither incrementing nor\
    \ decrementing\n        else:\n            return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptbnt_4je.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmptbnt_4je.py\", line 43,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmptbnt_4je.py\", line 33,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmptbnt_4je.py\"\
    , line 19, in monotonic\n    return monotonic(l[1:])\n  File \"/tmp/tmptbnt_4je.py\"\
    , line 19, in monotonic\n    return monotonic(l[1:])\n  File \"/tmp/tmptbnt_4je.py\"\
    , line 18, in monotonic\n    if l[1] < l[2]:\nIndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    mon = l[0] <= l[1]\n    for i in range(len(l)\
    \ - 1):\n        if mon and l[i] > l[i + 1]:\n            return False\n     \
    \   if not mon and l[i] < l[i + 1]:\n            return False\n    return True\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    is_monotonic\
    \ = True\n    direction = 0\n    for i in range(len(l) - 1):\n        if l[i]\
    \ < l[i + 1]:\n            if direction > 0:\n                is_monotonic = False\n\
    \                break\n            else:\n                direction = 1\n   \
    \     elif l[i] > l[i + 1]:\n            if direction < 0:\n                is_monotonic\
    \ = False\n                break\n            else:\n                direction\
    \ = -1\n    return is_monotonic\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr0shbaa9.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr0shbaa9.py\", line 39,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpr0shbaa9.py\", line 29,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    direction = l[1] - l[0]\n    for i in range(2,\
    \ len(l)):\n        if direction == 0:\n            direction = l[i] - l[i - 1]\n\
    \            continue\n        elif direction > 0:\n            if l[i] - l[i\
    \ - 1] < 0:\n                return False\n        else:\n            if l[i]\
    \ - l[i - 1] > 0:\n                return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ (all(l[i] <= l[i+1] for i in range(len(l)-1)) or\n            all(l[i] >= l[i+1]\
    \ for i in range(len(l)-1)))\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    incr = l[0] <= l[1]\n    decr = l[0] >= l[1]\n\
    \    for i in range(1, len(l) - 1):\n        if incr and l[i] > l[i + 1]:\n  \
    \          return False\n        if decr and l[i] < l[i + 1]:\n            return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    i = 1\n\
    \    while i < len(l) and l[i] >= l[i - 1]:\n        i += 1\n    while i < len(l)\
    \ and l[i] <= l[i - 1]:\n        i += 1\n    return i == len(l)\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 3:\n        return True\n    if l[0] < l[1]:\n        for a, b in zip(l, l[1:]):\n\
    \            if a > b:\n                return False\n    else:\n        for a,\
    \ b in zip(l, l[1:]):\n            if a < b:\n                return False\n \
    \   return True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ == 1:\n        return True\n    direction = l[1] - l[0]\n    for i in range(1,\
    \ len(l) - 1):\n        if direction == 0:\n            direction = l[i + 1] -\
    \ l[i]\n            continue\n        if break_direction(direction, l[i], l[i\
    \ + 1]):\n            return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeshklqxt.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpeshklqxt.py\", line 34,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpeshklqxt.py\", line 24,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpeshklqxt.py\"\
    , line 19, in monotonic\n    if break_direction(direction, l[i], l[i + 1]):\n\
    NameError: name 'break_direction' is not defined\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    if l[0] < l[1]:\n        return all(l[i] <=\
    \ l[i+1] for i in range(len(l)-1))\n    elif l[0] > l[1]:\n        return all(l[i]\
    \ >= l[i+1] for i in range(len(l)-1))\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    increasing = l[0] < l[1]\n    for i in range(1,\
    \ len(l) - 1):\n        if increasing:\n            if l[i] > l[i + 1]:\n    \
    \            return False\n        else:\n            if l[i] < l[i + 1]:\n  \
    \              return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    diff = l[1] - l[0]\n    for i in range(1, len(l)\
    \ - 1):\n        if diff * (l[i + 1] - l[i]) < 0:\n            return False\n\
    \    return True\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) ==\
    \ True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    for i in range(len(l) - 1):\n        dif = l[i\
    \ + 1] - l[i]\n        if dif == 0:\n            continue\n        for j in range(i\
    \ + 1, len(l) - 1):\n            if (l[j + 1] - l[j]) / dif < 0:\n           \
    \     return False\n        return True\n    return True\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ sorted(l) == l or sorted(l, reverse=True) == l\n\ndef check(candidate):\n  \
    \  assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l\
    \ == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    direction = l[1] - l[0]\n    for i in range(2,\
    \ len(l)):\n        if direction == 0:\n            direction = l[i] - l[i - 1]\n\
    \            continue\n        if breaks_direction(direction, l[i - 1], l[i]):\n\
    \            return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaxdo8mkt.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpaxdo8mkt.py\", line 34,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpaxdo8mkt.py\", line 24,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpaxdo8mkt.py\"\
    , line 19, in monotonic\n    if breaks_direction(direction, l[i - 1], l[i]):\n\
    NameError: name 'breaks_direction' is not defined\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    lis =\
    \ sorted(l)\n    lds = sorted(l, reverse=True)\n    return l == lis or l == lds\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Two\
    \ lists, one with positive and one with negative difference between\n    # consecutive\
    \ elements.\n    diff_pos = [l[i] - l[i-1] for i in range(1, len(l)) if l[i] -\
    \ l[i-1] > 0]\n    diff_neg = [l[i] - l[i-1] for i in range(1, len(l)) if l[i]\
    \ - l[i-1] < 0]\n    return True if len(diff_pos) == 0 or len(diff_neg) == 0 else\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def all_equal(l:\
    \ List[int]) -> bool:\n        return all(e == l[0] for e in l)\n    if all_equal(l):\n\
    \        return True\n    inc = l[0] < l[1]\n    if inc:\n        return all(e\
    \ < f for e, f in zip(l, l[1:]))\n    else:\n        return all(e > f for e, f\
    \ in zip(l, l[1:]))\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7jgbywvn.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp7jgbywvn.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp7jgbywvn.py\", line 26,\
    \ in check\n    assert candidate([4, 1, 1, 0]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l\
    \ == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return\
    \ False\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    elif l[0] < l[1]:\n        return all(i < j\
    \ for i, j in zip(l, l[1:]))\n    else:\n        return all(i > j for i, j in\
    \ zip(l, l[1:]))\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) ==\
    \ True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxul_byey.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxul_byey.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpxul_byey.py\", line 23,\
    \ in check\n    assert candidate([4, 1, 1, 0]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    else:\n        acc = True\n        for i in\
    \ range(1, len(l)):\n            if l[i] >= l[i-1]:\n                acc = acc\
    \ and True\n            else:\n                acc = acc and False\n        return\
    \ acc or monotonic(l[::-1])\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbdi19_5s.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpbdi19_5s.py\", line 34,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpbdi19_5s.py\", line 26,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\n  File \"/tmp/tmpbdi19_5s.py\"\
    , line 21, in monotonic\n    return acc or monotonic(l[::-1])\n  File \"/tmp/tmpbdi19_5s.py\"\
    , line 21, in monotonic\n    return acc or monotonic(l[::-1])\n  File \"/tmp/tmpbdi19_5s.py\"\
    , line 21, in monotonic\n    return acc or monotonic(l[::-1])\n  [Previous line\
    \ repeated 993 more times]\n  File \"/tmp/tmpbdi19_5s.py\", line 12, in monotonic\n\
    \    if len(l) <= 1:\nRecursionError: maximum recursion depth exceeded while calling\
    \ a Python object\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increasing\
    \ = False\n    decreasing = False\n    for index in range(1, len(l)):\n      \
    \  if l[index] > l[index - 1]:\n            increasing = True\n        elif l[index]\
    \ < l[index - 1]:\n            decreasing = True\n        if increasing and decreasing:\n\
    \            return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ (all(l[i] <= l[i+1] for i in range(len(l)-1)) or\n            all(l[i] >= l[i+1]\
    \ for i in range(len(l)-1)))\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n \
    \   assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10])\
    \ == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i\
    \ in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            for j in range(i,\
    \ len(l) - 1):\n                if l[j] < l[j + 1]:\n                    return\
    \ False\n            return True\n        elif l[i] < l[i + 1]:\n            for\
    \ j in range(i, len(l) - 1):\n                if l[j] > l[j + 1]:\n          \
    \          return False\n            return True\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Method\
    \ 1:\n    # compare with index-1 and then index+1\n    # for i in range(1, len(l)\
    \ - 1):\n    #     if l[i] > l[i - 1] and l[i] > l[i + 1]:\n    #         return\
    \ False\n    #     elif l[i] < l[i - 1] and l[i] < l[i + 1]:\n    #         return\
    \ False\n    # return True\n\n    # Method 2:\n    # Compare with index-1\n  \
    \  # for i in range(1, len(l)):\n    #     if l[i] < l[i - 1]:\n    #        \
    \ dec = True\n    #     elif l[i] > l[i - 1]:\n    #         inc = True\n    #\
    \     if dec and inc:\n    #         return False\n    # return True\n\n    #\
    \ Method 3:\n    # time - O(n)\n    # space - O(1)\n    if len(l) <= 2:\n    \
    \    return True\n    inc = dec = True\n    for i in range(1, len(l)):\n     \
    \   if l[i] < l[i - 1]:\n            inc = False\n        elif l[i] > l[i - 1]:\n\
    \            dec = False\n        if not inc and not dec:\n            return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    d = l[1] - l[0]\n    if d == 0:\n        return\
    \ monotonic(l[1:])\n    return all(d*(b-a) >= 0 for a, b in zip(l, l[1:]))\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # check\
    \ increasing vs decreasing\n    if l[-1] - l[0] > 0:\n        # check increasing\n\
    \        for x in range(len(l) - 1):\n            if l[x] > l[x + 1]:\n      \
    \          return False\n    else:\n        # check decreasing\n        for x\
    \ in range(len(l) - 1):\n            if l[x] < l[x + 1]:\n                return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    return all(l[i-1] < l[i] for i in range(1, len(l)))\
    \ or all(l[i-1] > l[i] for i in range(1, len(l)))\ndef check(candidate):\n   \
    \ assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfzl67foc.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpfzl67foc.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpfzl67foc.py\", line 20,\
    \ in check\n    assert candidate([4, 1, 1, 0]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not\
    \ l:\n        return True\n    increasing = None\n    for i in range(len(l) -\
    \ 1):\n        if increasing is None:\n            if l[i] < l[i + 1]:\n     \
    \           increasing = True\n            elif l[i] > l[i + 1]:\n           \
    \     increasing = False\n        elif increasing:\n            if l[i] > l[i\
    \ + 1]:\n                return False\n        else:\n            if l[i] < l[i\
    \ + 1]:\n                return False\n    return True\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increase\
    \ = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n     \
    \       increase = False\n            break\n    if increase:\n        return\
    \ True\n    decrease = True\n    for i in range(len(l) - 1):\n        if l[i]\
    \ < l[i + 1]:\n            decrease = False\n            break\n    if decrease:\n\
    \        return True\n    return False\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    # Track if it is currently increasing or decreasing\n\
    \    # Tracker starts as None because we don't yet know\n    tracker = None\n\
    \    for i in range(len(l) - 1):\n        # If it is the first element, we don't\
    \ know if it is increasing or\n        # decreasing, so we set it\n        if\
    \ tracker is None:\n            if l[i] < l[i + 1]:\n                tracker =\
    \ \"increasing\"\n            elif l[i] > l[i + 1]:\n                tracker =\
    \ \"decreasing\"\n        else:\n            # If it is neither increasing or\
    \ decreasing, return False\n            if (tracker == \"increasing\" and l[i]\
    \ > l[i + 1]) or (tracker == \"decreasing\" and l[i] < l[i + 1]):\n          \
    \      return False\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    elif l[0] <= l[1]:\n        return monotonic_helper(l,\
    \ lambda l, i: l[i] <= l[i+1])\n    else:\n        return monotonic_helper(l,\
    \ lambda l, i: l[i] >= l[i+1])\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyz7zih5j.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpyz7zih5j.py\", line 30,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpyz7zih5j.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpyz7zih5j.py\"\
    , line 15, in monotonic\n    return monotonic_helper(l, lambda l, i: l[i] <= l[i+1])\n\
    NameError: name 'monotonic_helper' is not defined\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in\
    \ range(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    if l[0] > l[1]:\n        l = l[::-1]\n    for\
    \ i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n\
    \    return True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    mode\
    \ = 0\n    for i in range(len(l) - 1):\n        if mode == 0:\n            if\
    \ l[i] < l[i + 1]:\n                mode = 1\n            elif l[i] > l[i + 1]:\n\
    \                mode = -1\n        elif mode == 1:\n            if l[i] > l[i\
    \ + 1]:\n                return False\n        elif mode == -1:\n            if\
    \ l[i] < l[i + 1]:\n                return False\n    return True\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(a <= b for a, b in zip(l, l[1:])) or all(a >= b for a, b in zip(l, l[1:]))\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # is_increasing\
    \ = l[0] < l[1]\n    # for i in range(1, len(l) - 1):\n    #     if is_increasing\
    \ and l[i] > l[i + 1]:\n    #         return False\n    #     elif not is_increasing\
    \ and l[i] < l[i + 1]:\n    #         return False\n    # return True\n\n    return\
    \ all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for\
    \ i in range(len(l) - 1))\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    if l[0] < l[1]:\n        mon = 'inc'\n    elif\
    \ l[0] > l[1]:\n        mon = 'dec'\n    else:\n        return True\n    for i\
    \ in range(1, len(l) - 1):\n        if l[i] < l[i + 1] and mon == 'dec':\n   \
    \         return False\n        elif l[i] > l[i + 1] and mon == 'inc':\n     \
    \       return False\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[0] < l[1]:\n        for i in range(len(l)\
    \ - 1):\n            if l[i] > l[i + 1]:\n                return False\n    elif\
    \ l[0] > l[1]:\n        for i in range(len(l) - 1):\n            if l[i] < l[i\
    \ + 1]:\n                return False\n    return True\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823472
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    diff = l[1] - l[0]\n    for i in range(2, len(l)):\n\
    \        if l[i] - l[i-1] != diff:\n            return False\n    return True\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk6bzrm1u.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpk6bzrm1u.py\", line 30,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpk6bzrm1u.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[0] > l[1]:\n        return all(a >= b for\
    \ a, b in zip(l, l[1:]))\n    else:\n        return all(a <= b for a, b in zip(l,\
    \ l[1:]))\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in\
    \ range(len(l)-1))\n\nprint(monotonic([1, 2, 4, 20]))\nprint(monotonic([1, 20,\
    \ 4, 10]))\nprint(monotonic([4, 1, 0, -10]))\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: 'True

    False

    True

    '
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    inc, dec = True, True\n    for idx in range(1,\
    \ len(l)):\n        inc &= l[idx] >= l[idx - 1]\n        dec &= l[idx] <= l[idx\
    \ - 1]\n    return inc or dec\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # compare\
    \ the first two elements to determine whether the sequence is\n    # increasing\
    \ or decreasing\n    if l[0] < l[1]:\n        # increasing\n        for i in range(len(l)\
    \ - 1):\n            if l[i] > l[i + 1]:\n                return False\n    else:\n\
    \        # decreasing\n        for i in range(len(l) - 1):\n            if l[i]\
    \ < l[i + 1]:\n                return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ (all(l[i] <= l[i+1] for i in range(len(l)-1)) or \n            all(l[i] >= l[i+1]\
    \ for i in range(len(l)-1)))\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    monotonic\
    \ = True\n    increasing = l[0] <= l[1]\n    for i in range(1, len(l) - 1):\n\
    \        if increasing and l[i] > l[i + 1]:\n            monotonic = False\n \
    \           break\n        elif not increasing and l[i] < l[i + 1]:\n        \
    \    monotonic = False\n            break\n    return monotonic\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    prev = l[0]\n    for curr in l[1:]:\n       \
    \ if curr > prev:\n            pos_increase = True\n            break\n      \
    \  elif curr < prev:\n            pos_increase = False\n            break\n  \
    \      prev = curr\n    else:\n        return True\n\n    prev = l[0]\n    for\
    \ curr in l[1:]:\n        if pos_increase:\n            if curr < prev:\n    \
    \            return False\n        else:\n            if curr > prev:\n      \
    \          return False\n        prev = curr\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    elif l[0] < l[1]:\n        return all(x<y for\
    \ x, y in zip(l, l[1:]))\n    elif l[0] > l[1]:\n        return all(x>y for x,\
    \ y in zip(l, l[1:]))\n    else:\n        return monotonic(l[1:])\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk70wiq5j.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpk70wiq5j.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpk70wiq5j.py\", line 25,\
    \ in check\n    assert candidate([4, 1, 1, 0]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # list\
    \ is monotonic if it is monotonic increasing or monotonic decreasing\n    return\
    \ monotonic_increasing(l) or monotonic_decreasing(l)\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkvo3jb81.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpkvo3jb81.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpkvo3jb81.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpkvo3jb81.py\"\
    , line 13, in monotonic\n    return monotonic_increasing(l) or monotonic_decreasing(l)\n\
    NameError: name 'monotonic_increasing' is not defined\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(l[i] < l[i+1] for i in range(len(l)-1)) or all(l[i] > l[i+1] for i in range(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcw8jg_3y.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcw8jg_3y.py\", line 25,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpcw8jg_3y.py\", line 19,\
    \ in check\n    assert candidate([4, 1, 1, 0]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    order = l[1] - l[0]\n    if order == 0:\n  \
    \      # 0 order is not monotonic\n        return False\n    if order > 0:\n \
    \       for i in range(1, len(l) - 1):\n            if l[i + 1] - l[i] < 0:\n\
    \                return False\n    if order < 0:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i + 1] - l[i] > 0:\n                return False\n \
    \   return True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy1wz39zg.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpy1wz39zg.py\", line 39,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpy1wz39zg.py\", line 36,\
    \ in check\n    assert candidate([9, 9, 9, 9]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ l == sorted(l) or l == sorted(l, reverse=True)\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    if l[0] < l[1]:\n        for i in range(len(l)\
    \ - 1):\n            if l[i] > l[i + 1]:\n                return False\n    else:\n\
    \        for i in range(len(l) - 1):\n            if l[i] < l[i + 1]:\n      \
    \          return False\n    return True\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc =\
    \ True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n       \
    \     inc = False\n            break\n    if inc:\n        return True\n    inc\
    \ = True\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n     \
    \       inc = False\n            break\n    if inc:\n        return True\n   \
    \ return False\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) ==\
    \ True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    i = 1\n    while i < len(l) and l[i] == l[i\
    \ - 1]:\n        i += 1\n    if i == len(l):\n        return True\n    inc = l[i]\
    \ > l[i - 1]\n    for j in range(i + 1, len(l)):\n        if inc and l[j] < l[j\
    \ - 1]:\n            return False\n        if not inc and l[j] > l[j - 1]:\n \
    \           return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    first = l[0]\n    second = l[1]\n    monotonic_increasing\
    \ = first < second\n    monotonic_decreasing = first > second\n    for i in range(1,\
    \ len(l)):\n        if monotonic_increasing:\n            if not l[i] >= l[i -\
    \ 1]:\n                return False\n        elif monotonic_decreasing:\n    \
    \        if not l[i] <= l[i - 1]:\n                return False\n        else:\n\
    \            if l[i] > l[i - 1]:\n                monotonic_increasing = True\n\
    \            elif l[i] < l[i - 1]:\n                monotonic_decreasing = True\n\
    \    return True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ == 1:\n        return True\n    dir = 0\n    for i in range(len(l) - 1):\n \
    \       if l[i + 1] == l[i]:\n            continue\n        if dir == 0:\n   \
    \         dir = l[i + 1] - l[i]\n        elif dir > 0:\n            if l[i + 1]\
    \ < l[i]:\n                return False\n        else:\n            if l[i + 1]\
    \ > l[i]:\n                return False\n    return True\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    direction\
    \ = l[0] - l[1]\n    for i in range(1, len(l) - 1):\n        if (l[i] - l[i +\
    \ 1]) * direction < 0:\n            return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l\
    \ == sorted(l):\n        return True\n    elif l == sorted(l, reverse=True):\n\
    \        return True\n    else:\n        return False\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ <= 1:\n        return True\n    direction = None\n    for i in range(len(l)\
    \ - 1):\n        if l[i] == l[i + 1]:\n            continue\n        if direction\
    \ is None:\n            direction = l[i] < l[i + 1]\n        if direction != (l[i]\
    \ < l[i + 1]):\n            return False\n    return True\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    d = l[1] - l[0]\n    for i in range(1, len(l)):\n\
    \        if (l[i] - l[i-1]) * d < 0:\n            return False\n    return True\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    is_increasing\
    \ = all(a <= b for a, b in zip(l, l[1:]))\n    is_decreasing = all(a >= b for\
    \ a, b in zip(l, l[1:]))\n    return is_increasing or is_decreasing\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
- exit_code: 0
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Check\
    \ if list increases\n    # If not, check if list decreases\n    return all(l[i]\
    \ <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823473
