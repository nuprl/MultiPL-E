name: HumanEval_101_words_string
language: py
prompt: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    \"\
  \"\"\n    You will be given a string of words separated by commas or spaces. Your\
  \ task is\n    to split the string into words and return an array of the words.\n\
  \    \n    For example:\n    >>> words_string('Hi, my name is John')\n    ['Hi',\
  \ 'my', 'name', 'is', 'John']\n    >>> words_string('One, two, three, four, five,\
  \ six')\n    ['One', 'two', 'three', 'four', 'five', 'six']\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi',\
  \ 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five,\
  \ six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
  \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
  \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
  \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
  \ test_check():\n    check(words_string)\n\ntest_check()\n"
completions: ['    return [word for word in s.split()]', "    pass\n\n", "    return\
    \ [word for word in s.split()]\n", "    words = s.split(',')\n    words = [w.strip()\
    \ for w in words]\n    return words\n", "    pass\n", "    return s.split(\",\"\
    )\n", "    wordlist = s.split(\",\")\n    for word in wordlist:\n        word\
    \ = word.split()\n    return wordlist\n", "    return s.split(', ') if ',' in\
    \ s else s.split()\n", "    return s.split()\n", "    return re.split(',? +',\
    \ s)\n", "    return s.split()\n", "    return s.split()\n", "    return s.split()\n\
    \nprint(words_string('Hi, my name is John'))\nprint(words_string('One, two, three,\
    \ four, five, six'))\n", "    return s.split()\n", '    return [s.strip() for
    s in s.split()]', "    words = s.split()\n    return words\n", "    # Write your\
    \ code here\n    return s.split()\n", "    return re.split(' |,', s)", "    return\
    \ re.split(r'[, ]+', s)", "    return list(filter(lambda x: x != \"\", s.split(\"\
    \ \")))\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
