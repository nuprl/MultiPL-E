name: HumanEval_18_how_many_times
language: py
prompt: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
  \ how many times a given substring can be found in the original string. Count overlaping\
  \ cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa',\
  \ 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx',\
  \ 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john\
  \ doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
completions: ["    return sum(1 for i in range(len(string)) if string.startswith(substring,\
    \ i))\n\nprint(how_many_times('aaaa', 'aa'))", "    assert isinstance(string,\
    \ str)\n    assert isinstance(substring, str)\n    return sum(string[i:].startswith(substring)\
    \ for i in range(len(string)))\n\n", "    if not string or not substring:\n  \
    \      return 0\n    else:\n        return string.count(substring)\n", "    if\
    \ len(substring) == 0:\n        return 0\n    count = 0\n    offset = 0\n    while\
    \ True:\n        found = string.find(substring, offset)\n        if found == -1:\n\
    \            break\n        count += 1\n        offset = found + 1\n    return\
    \ count\n\n", "    counter = 0\n    offset = 0\n    while offset < len(string):\n\
    \        match = string.find(substring, offset)\n        if match >= 0:\n    \
    \        counter += 1\n            offset = match + 1\n        else:\n       \
    \     break\n    return counter\n\n", "    if not substring:\n        return 0\n\
    \    times = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)]\
    \ == substring:\n            times += 1\n    return times\n\n", "    return len([s\
    \ for s in finditer(substring, string)])\n\n", "    if substring not in string:\n\
    \        return 0\n    index = 0\n    count = 0\n    while index < len(string):\n\
    \        if string[index: index + len(substring)] == substring:\n            count\
    \ += 1\n            index += len(substring)\n        else:\n            index\
    \ += 1\n    return count\n\n", "    return (\n        len(string) -\n        len(string.replace(substring,\
    \ ''))\n    ) // len(substring)\n \n ", "    return (len(string) - len(string.replace(substring,\
    \ ''))) // len(substring)\n\n", "    counter = 0\n    if substring not in string:\n\
    \        return counter\n    for i in range(len(string)):\n        for j in range(i\
    \ + 1, len(string) + 1):\n            if substring == string[i:j]:\n         \
    \       counter += 1\n    return counter\n\n", "    # TODO: return number of occurrences\n\
    \    count = 0\n    length = len(substring)\n    for i in range(len(string)):\n\
    \        if string[i:i+length] == substring:\n            count+=1\n    return\
    \ count", "    count: int = 0\n    lower_bound: int = 0\n    upper_bound: int\
    \ = len(substring)\n    while True:\n        index: int = string.find(substring,\
    \ lower_bound, upper_bound)\n        if index == -1:\n            break\n    \
    \    else:\n            count += 1\n            lower_bound = index + 1\n    \
    \        upper_bound = len(string)\n    return count\n\n", "    return sum(1 for\
    \ _ in re.finditer(substring, string))\n", "    length = len(substring)\n    count\
    \ = 0\n    index = 0\n    while index < len(string):\n        index = string.find(substring,\
    \ index)\n        if index == -1:\n            break\n        count += 1\n   \
    \     index += length\n    return count\n\n", "    return string.count(substring)\n",
  "    times = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)]\
    \ == substring:\n            times += 1\n    return times\n\n", "    overlaps\
    \ = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)]\
    \ == substring:\n            overlaps += 1\n    return overlaps\n\n", "    return\
    \ sum(string[i:i + len(substring)] == substring for i in range(len(string)))\n\
    \n", "    count = start = 0\n    while True:\n        start = string.find(substring,\
    \ start) + 1\n        if start > 0:\n            count += 1\n        else:\n \
    \           return count\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
