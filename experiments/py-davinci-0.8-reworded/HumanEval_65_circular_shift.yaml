name: HumanEval_65_circular_shift
language: py
prompt: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
  \ the digits of the integer x, shift the digits right by shift\n    and return the\
  \ result as a string.\n    If shift > number of digits, return digits reversed.\n\
  \    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n\
  \    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
  \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) ==\
  \ '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
  \ntest_check()\n"
completions: ["    digits = str(x)\n    shift = shift % len(digits)\n    if shift\
    \ == 0:\n        return digits\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n", "    s = str(x)\n    s = s[shift % len(s):] + s[:shift % len(s)]\n    return\
    \ s\n\n", "    str_x = str(x)\n    if shift > len(str_x):\n        return str_x[::-1]\n\
    \    return str_x[shift:] + str_x[:shift]\n\n", "    x_str = str(x)\n    shift\
    \ %= len(x_str)\n    shifted = x_str[-shift:] + x_str[:-shift]\n    return shifted\n\
    \n", "    temp = list(str(x))\n    if shift > len(temp):\n        return ''.join(reversed(temp))\n\
    \    else:\n        return ''.join(temp[-shift:] + temp[:-shift])\n\n", "    digits\
    \ = [int(d) for d in str(x)]\n    shift = shift % len(digits)\n    return \"\"\
    .join(str(d) for d in digits[-shift:] + digits[:-shift])\n\n", "    num = str(x)\n\
    \    return num[-shift:] + num[:-shift]\n\n", "    digits = str(x)\n    shift\
    \ = shift % len(digits)\n    return digits[-shift:] + digits[:-shift]\n\n", " \
    \   digits = str(x)\n    if shift < len(digits):\n        return digits[-shift:]\
    \ + digits[:-shift]\n    return digits[::-1]\n\n", "    x_str = str(x)\n    if\
    \ shift > len(x_str):\n        return x_str[::-1]\n    return x_str[-shift:] +\
    \ x_str[:-shift]\n\n", "    s = str(x)\n    if shift > len(s):\n        return\
    \ s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]\n\n", "    # Convert\
    \ the integer to a string\n    x_str = str(x)\n    # Slice to shift digits\n \
    \   x_str = x_str[-shift:] + x_str[:-shift]\n    return x_str\n\n", "    digits\
    \ = list(str(x))\n    digits = digits[-shift:] + digits[:-shift]\n    return ''.join(digits)\n\
    \n", "    x_str = str(x)\n    if shift == 0:\n        return x_str\n    elif shift\
    \ >= len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:]\
    \ + x_str[:-shift]\n\n", "    x_str = str(x)\n    return x_str[-shift:] + x_str[:-shift]\n",
  "    digits = str(x)\n    if shift >= len(digits):\n        return digits[::-1]\n\
    \    return digits[-shift:] + digits[:-shift]\n\n", "    return str(x)[-shift:]\
    \ + str(x)[:-shift]\n\n", "    s = str(x)\n    n = len(s)\n    if shift > n:\n\
    \        return s[::-1]\n    shift %= n\n    return s[n - shift:] + s[:n - shift]\n\
    \n", "    d = str(x)\n    if shift >= len(d):\n        d = d[::-1]\n    else:\n\
    \        d = d[shift:] + d[:shift]\n    return d\n\n", "    x_str = str(x)\n \
    \   rotations = shift % len(x_str)\n    if rotations == 0:\n        return x_str\n\
    \    return x_str[-rotations:] + x_str[:-rotations]\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
