language: swift
name: HumanEval_152_compare
results:
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<game.count {\n        if\
    \ game[i] == guess[i] {\n            result.append(0)\n        } else {\n    \
    \        result.append(abs(game[i] - guess[i]))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824784
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    while gameIndex < game.count\
    \ && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += game[gameIndex]\n            guessScore += guess[guessIndex]\n\
    \            gameIndex += 1\n            guessIndex += 1\n        } else if game[gameIndex]\
    \ > guess[guessIndex] {\n            gameScore += abs(game[gameIndex] - guess[guessIndex])\n\
    \            gameIndex += 1\n        } else {\n            guessScore += abs(guess[guessIndex]\
    \ - game[gameIndex])\n            guessIndex += 1\n        }\n    }\n    if gameIndex\
    \ == game.count {\n        result.append(0)\n    } else {\n        result.append(abs(guessScore\
    \ - gameScore))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp0wtgvqhu/tmp0wtgvqhu.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b128bf96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b128bc8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b128bc8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b128bc8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wtgvqhu                        0x0000561fb45896a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b128c182460 __libc_start_main +
    245

    6    tmp0wtgvqhu                        0x0000561fb4589219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for index in 0..<guess.count {\n\
    \        if game[index] == guess[index] {\n            result.append(0)\n    \
    \    } else {\n            result.append(abs(game[index] - guess[index]))\n  \
    \      }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    while gameIndex < game.count\
    \ && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessScore += 1\n            gameIndex\
    \ += 1\n            guessIndex += 1\n        } else if game[gameIndex] < guess[guessIndex]\
    \ {\n            gameScore += 1\n            gameIndex += 1\n        } else {\n\
    \            guessScore += 1\n            guessIndex += 1\n        }\n    }\n\
    \    if gameIndex == game.count {\n        result.append(0)\n    } else {\n  \
    \      result.append(abs(guessScore - gameScore))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp0n52nall/tmp0n52nall.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89f90fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89f8df2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89f8df2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89f8df17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0n52nall                        0x000055f5775d16a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b89f92e7460 __libc_start_main +
    245

    6    tmp0n52nall                        0x000055f5775d1219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    \n   \
    \ for i in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp97m_9yw3.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659824891
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var score = 0\n    var guess = 0\n  \
    \  var game = 0\n    var gameScore = 0\n    var gameGuess = 0\n    var gameGuessScore\
    \ = 0\n    var gameGuessGuess = 0\n    var gameGuessGuessScore = 0\n    var gameGuessGuessGuess\
    \ = 0\n    var gameGuessGuessGuessScore = 0\n    var gameGuessGuessGuessGuess\
    \ = 0\n    var gameGuessGuessGuessGuessScore = 0\n    var gameGuessGuessGuessGuessGuess\
    \ = 0\n    var gameGuessGuessGuessGuessGuessScore = 0\n    var gameGuessGuessGuessGuessGuessGuess\
    \ = 0\n    var gameGuessGuessGuessGuessGuessGuessScore = 0\n    var gameGuessGuessGuessGuessGuessGuessGuess\
    \ = 0\n    var gameGuessGuessGuessGuessGuessGuessScore = 0\n    var gameGuessGuessGuessGuessGuessGuessGuess\
    \ = 0\n    var gameGuessGuessGuessGuessGuessGuessScore = 0\n    var gameGuessGuessGuessGuessGuessGuessGuess\
    \ = 0\n    var gameGuessGuessGuessGuessGuessGuessGuessScore = 0\n    var gameGuessGuessGuessGuessGuessGuessGuessGuess\
    \ = 0\n    var gameGuessGuessGuessGuessGuessGuessGuessScore = 0\n    var gameGuessGuessGuessGuessGuessGuessGuessGuess\
    \ = 0\n    var gameGuessGuessGuessGuessGuessGuessGuessScore = 0\n    var gameGuessGuessGuessGuessGuessGuessGuessGuess\
    \ = 0\n    var gameGuessGuessGuessGuessGuessGuessGuessScore = 0\n    var gameGuessGuessGuessGuessGuessGuessGuessGuessGuess\
    \ = 0\n    var gameGuessGuessGuessGuessGuessGuessGuessGuessScore = 0\n    var\
    \ gameGuessGuessGuessGuessGuessGuessGuessGuessGuess = 0\n    var gameGuessGuessGuessGuessGuessGuessGuessGuessScore\
    \ = 0\n    var gameGuessGuessGuessGuessGuessGuessGuessGuessGuessGuess = 0\n  \
    \  var gameGuessGuessGuessGuessGuessGuessGuess\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxeazexiq.swift:33:9: error: invalid redeclaration of 'gameGuessGuessGuessGuessGuessGuessScore'\n\
    \    var gameGuessGuessGuessGuessGuessGuessScore = 0\n        ^\n/tmp/tmpxeazexiq.swift:31:9:\
    \ note: 'gameGuessGuessGuessGuessGuessGuessScore' previously declared here\n \
    \   var gameGuessGuessGuessGuessGuessGuessScore = 0\n        ^\n/tmp/tmpxeazexiq.swift:34:9:\
    \ error: invalid redeclaration of 'gameGuessGuessGuessGuessGuessGuessGuess'\n\
    \    var gameGuessGuessGuessGuessGuessGuessGuess = 0\n        ^\n/tmp/tmpxeazexiq.swift:32:9:\
    \ note: 'gameGuessGuessGuessGuessGuessGuessGuess' previously declared here\n \
    \   var gameGuessGuessGuessGuessGuessGuessGuess = 0\n        ^\n/tmp/tmpxeazexiq.swift:35:9:\
    \ error: invalid redeclaration of 'gameGuessGuessGuessGuessGuessGuessScore'\n\
    \    var gameGuessGuessGuessGuessGuessGuessScore = 0\n        ^\n/tmp/tmpxeazexiq.swift:31:9:\
    \ note: 'gameGuessGuessGuessGuessGuessGuessScore' previously declared here\n \
    \   var gameGuessGuessGuessGuessGuessGuessScore = 0\n        ^\n/tmp/tmpxeazexiq.swift:36:9:\
    \ error: invalid redeclaration of 'gameGuessGuessGuessGuessGuessGuessGuess'\n\
    \    var gameGuessGuessGuessGuessGuessGuessGuess = 0\n        ^\n/tmp/tmpxeazexiq.swift:32:9:\
    \ note: 'gameGuessGuessGuessGuessGuessGuessGuess' previously declared here\n \
    \   var gameGuessGuessGuessGuessGuessGuessGuess = 0\n        ^\n/tmp/tmpxeazexiq.swift:39:9:\
    \ error: invalid redeclaration of 'gameGuessGuessGuessGuessGuessGuessGuessScore'\n\
    \    var gameGuessGuessGuessGuessGuessGuessGuessScore = 0\n        ^\n/tmp/tmpxeazexiq.swift:37:9:\
    \ note: 'gameGuessGuessGuessGuessGuessGuessGuessScore' previously declared here\n\
    \    var gameGuessGuessGuessGuessGuessGuessGuessScore = 0\n        ^\n/tmp/tmpxeazexiq.swift:40:9:\
    \ error: invalid redeclaration of 'gameGuessGuessGuessGuessGuessGuessGuessGuess'\n\
    \    var gameGuessGuessGuessGuessGuessGuessGuessGuess = 0\n        ^\n/tmp/tmpxeazexiq.swift:38:9:\
    \ note: 'gameGuessGuessGuessGuessGuessGuessGuessGuess' previously declared here\n\
    \    var gameGuessGuessGuessGuessGuessGuessGuessGuess = 0\n        ^\n/tmp/tmpxeazexiq.swift:41:9:\
    \ error"
  stdout: ''
  timestamp: 1659824891
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp97m_9yw3.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659824891
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[guessIndex] =\
    \ 0\n            gameIndex += 1\n            guessIndex += 1\n        } else if\
    \ game[gameIndex] > guess[guessIndex] {\n            result[guessIndex] = game[gameIndex]\
    \ - guess[guessIndex]\n            gameIndex += 1\n        } else {\n        \
    \    result[guessIndex] = guess[guessIndex] - game[gameIndex]\n            guessIndex\
    \ += 1\n        }\n    }\n    while gameIndex < game.count {\n        result[guessIndex]\
    \ = game[gameIndex] - guess[guessIndex]\n        gameIndex += 1\n        guessIndex\
    \ += 1\n    }\n    while guessIndex < guess.count {\n        result[guessIndex]\
    \ = guess[guessIndex] - game[gameIndex]\n        guessIndex += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1bf0cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1bedc6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab1bedc6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab1bedc613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab1bedc5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab1bebc57ec <unavailable> + 186348

    6    tmp9hx1hfxu                        0x00005569021dcc74 <unavailable> + 7284

    7    tmp9hx1hfxu                        0x00005569021dc4b3 <unavailable> + 5299

    8    libc.so.6                          0x00002ab1bf2bb460 __libc_start_main +
    245

    9    tmp9hx1hfxu                        0x00005569021dc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result.append(0)\n \
    \           gameIndex += 1\n            guessIndex += 1\n        } else if game[gameIndex]\
    \ > guess[guessIndex] {\n            result.append(abs(game[gameIndex] - guess[guessIndex]))\n\
    \            gameIndex += 1\n        } else {\n            result.append(abs(guess[guessIndex]\
    \ - game[gameIndex]))\n            guessIndex += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpenv_mr3q/tmpenv_mr3q.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdab94ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdab641b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdab641988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdab6407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpenv_mr3q                        0x000055d738c9d6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002abdabb36460 __libc_start_main +
    245

    6    tmpenv_mr3q                        0x000055d738c9d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<guess.count {\n        let\
    \ diff = abs(game[i] - guess[i])\n        if game[i] == guess[i] {\n         \
    \   result.append(0)\n        } else {\n            result.append(diff)\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    \n   \
    \ for i in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    var k =\
    \ 0\n    while i < game.count && j < guess.count {\n        if game[i] == guess[j]\
    \ {\n            result[k] = game[i] - guess[j]\n            i += 1\n        \
    \    j += 1\n            k += 1\n        } else if game[i] > guess[j] {\n    \
    \        i += 1\n        } else {\n            j += 1\n        }\n    }\n    while\
    \ i < game.count {\n        result[k] = game[i] - guess[j]\n        i += 1\n \
    \       j += 1\n        k += 1\n    }\n    while j < guess.count {\n        result[k]\
    \ = guess[j] - game[i]\n        i += 1\n        j += 1\n        k += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b55e6a6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55e6764561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b55e6764286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b55e676413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b55e6763bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b55e65637ec <unavailable> + 186348

    6    tmpnzfvqwxy                        0x000055e64d83dcfd <unavailable> + 7421

    7    tmpnzfvqwxy                        0x000055e64d83d4b3 <unavailable> + 5299

    8    libc.so.6                          0x00002b55e6c59460 __libc_start_main +
    245

    9    tmpnzfvqwxy                        0x000055e64d83d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[guessIndex] =\
    \ 0\n            gameIndex += 1\n            guessIndex += 1\n        } else if\
    \ game[gameIndex] > guess[guessIndex] {\n            result[guessIndex] = game[gameIndex]\
    \ - guess[guessIndex]\n            gameIndex += 1\n        } else {\n        \
    \    result[guessIndex] = guess[guessIndex] - game[gameIndex]\n            guessIndex\
    \ += 1\n        }\n    }\n    while gameIndex < game.count {\n        result[guessIndex]\
    \ = game[gameIndex] - guess[guessIndex]\n        gameIndex += 1\n        guessIndex\
    \ += 1\n    }\n    while guessIndex < guess.count {\n        result[guessIndex]\
    \ = guess[guessIndex] - game[gameIndex]\n        guessIndex += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1bf0cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1bedc6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab1bedc6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab1bedc613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab1bedc5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab1bebc57ec <unavailable> + 186348

    6    tmp9hx1hfxu                        0x00005569021dcc74 <unavailable> + 7284

    7    tmp9hx1hfxu                        0x00005569021dc4b3 <unavailable> + 5299

    8    libc.so.6                          0x00002ab1bf2bb460 __libc_start_main +
    245

    9    tmp9hx1hfxu                        0x00005569021dc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    var gameScore = 0\n    var guessScore = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmphq3s3eyb.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659824891
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            gameScore += game[gameIndex]\n\
    \            guessScore += guess[guessIndex]\n            gameIndex += 1\n   \
    \         guessIndex += 1\n            result[gameScoreDiffIndex] = gameScore\
    \ - guessScore\n            gameScoreDiffIndex += 1\n            gameScore = 0\n\
    \            guessScore = 0\n        } else {\n            gameScore += abs(game[gameIndex]\
    \ - guess[guessIndex])\n            guessScore += abs(game[gameIndex] - guess[guessIndex])\n\
    \            gameIndex += 1\n            guessIndex += 1\n            gameScoreDiff\
    \ = gameScore - guessScore\n            guessScoreDiff = abs(game[gameIndex] -\
    \ guess[guessIndex])\n            gameScoreDiffIndex += 1\n            guessScoreDiffIndex\
    \ += 1\n        }\n    }\n    while gameIndex < game.count {\n        result[gameScoreDiffIndex]\
    \ = gameScore - guess[guessIndex]\n        gameScoreDiffIndex += 1\n        gameIndex\
    \ += 1\n        gameScore = 0\n    }\n    while guessIndex < guess.count {\n \
    \       result[guessScoreDiffIndex] = abs(game[gameIndex] - guess[guessIndex])\n\
    \        guessScoreDiffIndex += 1\n        guessIndex += 1\n        guessScore\
    \ = 0\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9926ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9923d4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9923d4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9923d413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9923d3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9921d37ec <unavailable> + 186348

    6    tmpung7vdgz                        0x0000565212583edf <unavailable> + 7903

    7    tmpung7vdgz                        0x0000565212583593 <unavailable> + 5523

    8    libc.so.6                          0x00002ab9928c9460 __libc_start_main +
    245

    9    tmpung7vdgz                        0x0000565212583209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<game.count {\n        let\
    \ score = game[i]\n        let guess = guess[i]\n        let diff = abs(guess\
    \ - score)\n        result.append(diff)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var index = 0\n    while index < game.count\
    \ {\n        if game[index] == guess[index] {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[index] - guess[index]))\n\
    \        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    \n   \
    \ for i in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var index = 0\n    while index < game.count\
    \ {\n        if game[index] == guess[index] {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[index] - guess[index]))\n\
    \        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for i in 0..<game.count {\n   \
    \     if game[i] == guess[i] {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(game[i] - guess[i]))\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for i in 0..<game.count {\n   \
    \     let diff = abs(guess[i] - game[i])\n        result.append(diff)\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result.append(0)\n \
    \           gameIndex += 1\n            guessIndex += 1\n        } else if game[gameIndex]\
    \ > guess[guessIndex] {\n            result.append(abs(game[gameIndex] - guess[guessIndex]))\n\
    \            gameIndex += 1\n        } else {\n            result.append(abs(guess[guessIndex]\
    \ - game[gameIndex]))\n            guessIndex += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpenv_mr3q/tmpenv_mr3q.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdab94ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdab641b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdab641988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdab6407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpenv_mr3q                        0x000055d738c9d6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002abdabb36460 __libc_start_main +
    245

    6    tmpenv_mr3q                        0x000055d738c9d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScoreDiff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpprtpxoxc.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScoreDiff\n        ^\n"
  stdout: ''
  timestamp: 1659824891
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            gameScore += 1\n   \
    \         guessScore += 1\n            gameIndex += 1\n            guessIndex\
    \ += 1\n            result[gameScoreDiffIndex] = gameScore\n            result[guessScoreDiffIndex]\
    \ = guessScore\n            gameScoreDiff = gameScore - gameScore\n          \
    \  guessScoreDiff = guessScore - guessScore\n            gameScoreDiffIndex =\
    \ gameScoreDiffIndex + 1\n            guessScoreDiffIndex = guessScoreDiffIndex\
    \ + 1\n        } else {\n            if gameScore > guessScore {\n           \
    \     gameScore -= 1\n                gameIndex += 1\n                gameScoreDiff\
    \ = gameScore - gameScore\n                gameScoreDiffIndex = gameScoreDiffIndex\
    \ + 1\n            } else {\n                guessScore -= 1\n               \
    \ guessIndex += 1\n                guessScoreDiff = guessScore - guessScore\n\
    \                guessScoreDiffIndex = guessScoreDiffIndex + 1\n            }\n\
    \        }\n    }\n    while gameIndex < game.count {\n        result[gameScoreDiffIndex]\
    \ = gameScore\n        gameScore -= 1\n        gameIndex += 1\n        gameScoreDiff\
    \ = gameScore - gameScore\n        gameScoreDiffIndex = gameScoreDiffIndex + 1\n\
    \    }\n    while guessIndex < guess.count {\n        result[guessScoreDiffIndex]\
    \ = guessScore\n        guessScore -= 1\n        guessIndex += 1\n        guessScoreDiff\
    \ = guessScore - guessScore\n        guessScoreDiffIndex = guessScoreDiffIndex\
    \ + 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b7198ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b71685561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2b71685286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2b7168513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2b71684bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2b714847ec <unavailable> + 186348

    6    tmp1_v9x397                        0x0000557ab54ead98 <unavailable> + 7576

    7    tmp1_v9x397                        0x0000557ab54ea4b3 <unavailable> + 5299

    8    libc.so.6                          0x00002b2b71b7a460 __libc_start_main +
    245

    9    tmp1_v9x397                        0x0000557ab54ea129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    var gameScore = 0\n    var guessScore = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmphq3s3eyb.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659824891
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result.append(0)\n \
    \           gameIndex += 1\n            guessIndex += 1\n        } else if game[gameIndex]\
    \ > guess[guessIndex] {\n            result.append(abs(game[gameIndex] - guess[guessIndex]))\n\
    \            gameIndex += 1\n        } else {\n            result.append(abs(guess[guessIndex]\
    \ - game[gameIndex]))\n            guessIndex += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpenv_mr3q/tmpenv_mr3q.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdab94ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdab641b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdab641988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdab6407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpenv_mr3q                        0x000055d738c9d6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002abdabb36460 __libc_start_main +
    245

    6    tmpenv_mr3q                        0x000055d738c9d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<game.count {\n        if\
    \ game[i] == guess[i] {\n            result.append(0)\n        } else {\n    \
    \        result.append(abs(game[i] - guess[i]))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824784
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<game.count {\n        if\
    \ game[i] == guess[i] {\n            result.append(0)\n        } else {\n    \
    \        result.append(abs(game[i] - guess[i]))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824784
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var index = 0\n    while index < game.count\
    \ {\n        if game[index] == guess[index] {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[index] - guess[index]))\n\
    \        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<game.count {\n        if\
    \ game[i] == guess[i] {\n            result.append(0)\n        } else {\n    \
    \        result.append(abs(game[i] - guess[i]))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824784
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var score = 0\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            score += game[i]\n        }\
    \ else {\n            result.append(abs(game[i] - guess[i]))\n        }\n    }\n\
    \    if score == 0 {\n        result.append(0)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp0oj1ct_a/tmp0oj1ct_a.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa56825c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa5651cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa5651c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa5651b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oj1ct_a                        0x000055d3cada8824 <unavailable> + 6180

    5    libc.so.6                          0x00002baa56a11460 __libc_start_main +
    245

    6    tmp0oj1ct_a                        0x000055d3cada8399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[gameIndex] =\
    \ 0\n            gameIndex += 1\n            guessIndex += 1\n        } else if\
    \ game[gameIndex] > guess[guessIndex] {\n            result[gameIndex] = game[gameIndex]\
    \ - guess[guessIndex]\n            gameIndex += 1\n        } else {\n        \
    \    result[gameIndex] = guess[guessIndex] - game[gameIndex]\n            guessIndex\
    \ += 1\n        }\n    }\n    while gameIndex < game.count {\n        result[gameIndex]\
    \ = game[gameIndex] - guess[guessIndex]\n        gameIndex += 1\n        guessIndex\
    \ += 1\n    }\n    while guessIndex < guess.count {\n        result[guessIndex]\
    \ = guess[guessIndex] - game[gameIndex]\n        guessIndex += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b091d51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b091d213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b091d213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b091d21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b091d212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b091d0127ec <unavailable> + 186348

    6    tmpe47bv2bq                        0x0000563b2dc24c74 <unavailable> + 7284

    7    tmpe47bv2bq                        0x0000563b2dc244b3 <unavailable> + 5299

    8    libc.so.6                          0x00002b091d708460 __libc_start_main +
    245

    9    tmpe47bv2bq                        0x0000563b2dc24129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<guess.count {\n        let\
    \ guess = guess[i]\n        let score = game[i]\n        let diff = abs(guess\
    \ - score)\n        result.append(diff)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i\
    \ < game.count && j < guess.count {\n        if game[i] == guess[j] {\n      \
    \      result.append(0)\n            i += 1\n            j += 1\n        } else\
    \ if game[i] > guess[j] {\n            result.append(abs(game[i] - guess[j]))\n\
    \            i += 1\n        } else {\n            result.append(abs(guess[j]\
    \ - game[i]))\n            j += 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmppbctvcj2/tmppbctvcj2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c206e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c203ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c203dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c203dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbctvcj2                        0x000055d3c035c6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b6c208d2460 __libc_start_main +
    245

    6    tmppbctvcj2                        0x000055d3c035c219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result.append(0)\n \
    \           gameIndex += 1\n            guessIndex += 1\n        } else if game[gameIndex]\
    \ > guess[guessIndex] {\n            result.append(abs(game[gameIndex] - guess[guessIndex]))\n\
    \            gameIndex += 1\n        } else {\n            result.append(abs(guess[guessIndex]\
    \ - game[gameIndex]))\n            guessIndex += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpenv_mr3q/tmpenv_mr3q.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdab94ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdab641b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdab641988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdab6407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpenv_mr3q                        0x000055d738c9d6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002abdabb36460 __libc_start_main +
    245

    6    tmpenv_mr3q                        0x000055d738c9d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    for index in 0..<guess.count {\n        gameScore += game[index]\n\
    \        guessScore += guess[index]\n    }\n    if gameScore == guessScore {\n\
    \        for index in 0..<guess.count {\n            result[index] = 0\n     \
    \   }\n    } else {\n        for index in 0..<guess.count {\n            result[index]\
    \ = abs(guessScore - gameScore)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f92fb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f92cac561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8f92cac286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8f92cac13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8f92cabbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8f92aab7ec <unavailable> + 186348

    6    tmpt5p18mo8                        0x0000556fe748a2b0 <unavailable> + 8880

    7    tmpt5p18mo8                        0x0000556fe7489723 <unavailable> + 5923

    8    libc.so.6                          0x00002b8f931a1460 __libc_start_main +
    245

    9    tmpt5p18mo8                        0x0000556fe7489399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = game[0]\n    var guessScore\
    \ = guess[0]\n    var gameIndex = 0\n    var guessIndex = 0\n    while gameIndex\
    \ < game.count && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += game[gameIndex]\n            guessScore += guess[guessIndex]\n\
    \            gameIndex += 1\n            guessIndex += 1\n        } else {\n \
    \           if gameScore < guessScore {\n                result.append(0)\n  \
    \          } else {\n                result.append(abs(guessScore - gameScore))\n\
    \            }\n            gameScore = game[gameIndex]\n            guessScore\
    \ = guess[guessIndex]\n            gameIndex += 1\n            guessIndex += 1\n\
    \        }\n    }\n    if gameIndex < game.count {\n        result.append(abs(guessScore\
    \ - gameScore))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpy9dz6dvr/tmpy9dz6dvr.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcfd52bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcfd222b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcfd222988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcfd2217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy9dz6dvr                        0x00005603d24786a4 <unavailable> + 5796

    5    libc.so.6                          0x00002adcfd717460 __libc_start_main +
    245

    6    tmpy9dz6dvr                        0x00005603d2478219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<guess.count {\n        let\
    \ diff = abs(guess[i] - game[i])\n        if diff == 0 {\n            result.append(0)\n\
    \        } else {\n            result.append(diff)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    while i < game.count {\n\
    \        if game[i] == guess[i] {\n            result.append(0)\n        } else\
    \ {\n            result.append(abs(game[i] - guess[i]))\n        }\n        i\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result.append(0)\n \
    \           gameIndex += 1\n            guessIndex += 1\n        } else if game[gameIndex]\
    \ > guess[guessIndex] {\n            result.append(game[gameIndex] - guess[guessIndex])\n\
    \            gameIndex += 1\n        } else {\n            result.append(abs(game[gameIndex]\
    \ - guess[guessIndex]))\n            guessIndex += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpgfkmx7nb/tmpgfkmx7nb.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080e9b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080e6adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080e6ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080e6ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgfkmx7nb                        0x000055fa1dbd06a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b080eba2460 __libc_start_main +
    245

    6    tmpgfkmx7nb                        0x000055fa1dbd0219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = game[0]\n    var guessScore\
    \ = guess[0]\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff\
    \ = gameScore - guessScore\n    var guessScoreDiff = guessScore - gameScore\n\
    \    var gameScoreDiffAbs = abs(gameScoreDiff)\n    var guessScoreDiffAbs = abs(guessScoreDiff)\n\
    \    while gameIndex < game.count && guessIndex < guess.count {\n        if game[gameIndex]\
    \ == guess[guessIndex] {\n            result.append(0)\n            gameIndex\
    \ += 1\n            guessIndex += 1\n        } else if game[gameIndex] < guess[guessIndex]\
    \ {\n            result.append(gameScoreDiffAbs)\n            gameIndex += 1\n\
    \        } else {\n            result.append(guessScoreDiffAbs)\n            guessIndex\
    \ += 1\n        }\n    }\n    while gameIndex < game.count {\n        result.append(gameScoreDiffAbs)\n\
    \        gameIndex += 1\n    }\n    while guessIndex < guess.count {\n       \
    \ result.append(guessScoreDiffAbs)\n        guessIndex += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp_n_2xvw1/tmp_n_2xvw1.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b094dae7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b094d7deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b094d7de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b094d7dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_n_2xvw1                        0x000055ceef2e46a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b094dcd3460 __libc_start_main +
    245

    6    tmp_n_2xvw1                        0x000055ceef2e4219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    \n   \
    \ for i in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    var i\
    \ = 0\n    for j in 0..<game.count {\n        if game[j] == guess[j] {\n     \
    \       result[i] = 0\n        } else {\n            result[i] = abs(game[j] -\
    \ guess[j])\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    while gameIndex < game.count\
    \ && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessIndex += 1\n            gameIndex\
    \ += 1\n        } else {\n            gameIndex += 1\n        }\n    }\n    if\
    \ gameIndex == game.count {\n        result.append(0)\n    } else {\n        result.append(abs(guessScore\
    \ - gameScore))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpszwli6f5/tmpszwli6f5.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fcd416c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fcd10db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fcd10d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fcd10c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpszwli6f5                        0x0000556bb673e6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b5fcd602460 __libc_start_main +
    245

    6    tmpszwli6f5                        0x0000556bb673e219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for i in 0..<game.count {\n   \
    \     if game[i] == guess[i] {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(game[i] - guess[i]))\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for i in 0..<game.count {\n   \
    \     let diff = abs(guess[i] - game[i])\n        result.append(diff)\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var score = 0\n    var index = 0\n  \
    \  while index < game.count {\n        if game[index] == guess[index] {\n    \
    \        score += game[index]\n            result.append(score)\n            index\
    \ += 1\n        } else {\n            score += abs(game[index] - guess[index])\n\
    \            result.append(score)\n            index += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpvpgjmcto/tmpvpgjmcto.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3f96d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3f93cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3f93ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3f93c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvpgjmcto                        0x0000562191c996a4 <unavailable> + 5796

    5    libc.so.6                          0x00002ae3f98bf460 __libc_start_main +
    245

    6    tmpvpgjmcto                        0x0000562191c99219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i\
    \ < game.count && j < guess.count {\n        if game[i] == guess[j] {\n      \
    \      result.append(0)\n            i += 1\n            j += 1\n        } else\
    \ if game[i] > guess[j] {\n            result.append(abs(game[i] - guess[j]))\n\
    \            i += 1\n        } else {\n            result.append(abs(guess[j]\
    \ - game[i]))\n            j += 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmppbctvcj2/tmppbctvcj2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c206e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c203ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c203dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c203dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbctvcj2                        0x000055d3c035c6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b6c208d2460 __libc_start_main +
    245

    6    tmppbctvcj2                        0x000055d3c035c219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for index in 0..<guess.count {\n\
    \        if game[index] == guess[index] {\n            result.append(0)\n    \
    \    } else {\n            result.append(abs(game[index] - guess[index]))\n  \
    \      }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    \n   \
    \ for i in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for index in 0..<guess.count {\n\
    \        let guess = guess[index]\n        let score = game[index]\n        \n\
    \        if guess == score {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(guess - score))\n        }\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    var gameScore = 0\n    var guessScore = 0\n    while gameIndex < game.count\
    \ && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessIndex += 1\n        } else {\n\
    \            gameIndex += 1\n            guessIndex += 1\n            result.append(abs(guessScore\
    \ - gameScore))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp66lkr_yn/tmp66lkr_yn.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8d5943c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8d563ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8d563a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8d56397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp66lkr_yn                        0x00005642ecbc76a4 <unavailable> + 5796

    5    libc.so.6                          0x00002af8d5b2f460 __libc_start_main +
    245

    6    tmp66lkr_yn                        0x00005642ecbc7219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = [0]\n    for i in 0..<game.count {\n      \
    \  if game[i] == guess[i] {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(game[i] - guess[i]))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpu3jl3uy_/tmpu3jl3uy_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b293fb95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b293f88cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b293f88c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b293f88b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu3jl3uy_                        0x00005581b94d77d4 <unavailable> + 6100

    5    libc.so.6                          0x00002b293fd81460 __libc_start_main +
    245

    6    tmpu3jl3uy_                        0x00005581b94d7349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    for _ in 0..<game.count {\n        gameScore += game[game.count-1]\n\
    \    }\n    for _ in 0..<guess.count {\n        guessScore += guess[guess.count-1]\n\
    \    }\n    if gameScore == guessScore {\n        result = [Int]()\n    } else\
    \ {\n        result = [Int](count: guess.count, repeatedValue: 0)\n        for\
    \ _ in 0..<guess.count {\n            result[guess.count-1] = abs(gameScore -\
    \ guessScore)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgy3vagtt.swift:27:18: error: no exact matches in call to initializer\
    \ \n        result = [Int](count: guess.count, repeatedValue: 0)\n           \
    \      ^\n/tmp/tmpgy3vagtt.swift:27:18: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n        result = [Int](count: guess.count,\
    \ repeatedValue: 0)\n                 ^\n/tmp/tmpgy3vagtt.swift:27:18: note: candidate\
    \ has partially matching parameter list (repeating: Int, count: Int)\n       \
    \ result = [Int](count: guess.count, repeatedValue: 0)\n                 ^\n"
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    while gameIndex < game.count\
    \ && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += game[gameIndex]\n            guessScore += guess[guessIndex]\n\
    \            gameIndex += 1\n            guessIndex += 1\n        } else if game[gameIndex]\
    \ > guess[guessIndex] {\n            gameScore += game[gameIndex] - guess[guessIndex]\n\
    \            gameIndex += 1\n        } else {\n            guessScore += abs(game[gameIndex]\
    \ - guess[guessIndex])\n            guessIndex += 1\n        }\n    }\n    if\
    \ gameIndex == game.count {\n        result.append(0)\n    } else {\n        result.append(abs(guessScore\
    \ - gameScore))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpt6fe5npg/tmpt6fe5npg.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb3dab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb3d7a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb3d7a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb3d7a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt6fe5npg                        0x000055ca5422a6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002abb3dc9e460 __libc_start_main +
    245

    6    tmpt6fe5npg                        0x000055ca5422a219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for index in 0..<guess.count {\n    \
    \    let difference = abs(game[index] - guess[index])\n        result.append(difference)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var score = 0\n    var guess = 0\n  \
    \  var game = 0\n    var gameScore = 0\n    var gameGuess = 0\n    var gameGuesses\
    \ = 0\n    var gameScoreDiff = 0\n    var gameGuesseDiff = 0\n    var gameScoreDiff2\
    \ = 0\n    var gameGuesseDiff2 = 0\n    var gameScoreDiff3 = 0\n    var gameGuesseDiff3\
    \ = 0\n    var gameScoreDiff4 = 0\n    var gameGuesseDiff4 = 0\n    var gameScoreDiff5\
    \ = 0\n    var gameGuesseDiff5 = 0\n    var gameScoreDiff6 = 0\n    var gameGuesseDiff6\
    \ = 0\n    var gameScoreDiff7 = 0\n    var gameGuesseDiff7 = 0\n    var gameScoreDiff8\
    \ = 0\n    var gameGuesseDiff8 = 0\n    var gameScoreDiff9 = 0\n    var gameGuesseDiff9\
    \ = 0\n    var gameScoreDiff10 = 0\n    var gameGuesseDiff10 = 0\n    var gameScoreDiff11\
    \ = 0\n    var gameGuesseDiff11 = 0\n    var gameScoreDiff12 = 0\n    var gameGuesseDiff12\
    \ = 0\n    var gameScoreDiff13 = 0\n    var gameGuesseDiff13 = 0\n    var gameScoreDiff14\
    \ = 0\n    var gameGuesseDiff14 = 0\n    var gameScoreDiff15 = 0\n    var gameGuesseDiff15\
    \ = 0\n    var gameScoreDiff16 = 0\n    var gameGuesseDiff16 = 0\n    var gameScoreDiff17\
    \ = 0\n    var gameGuesseDiff17 = 0\n    var gameScoreDiff18 = 0\n    var gameGuesseDiff18\
    \ = 0\n    var gameScoreDiff19 = 0\n    var gameGuesseDiff19 = 0\n    var gameScoreDiff20\
    \ = 0\n    var gameGuesseDiff20 = 0\n    var gameScoreDiff21 = 0\n    var gameGuesseDiff21\
    \ = 0\n    var gameScoreDiff22 = 0\n    var gameGuesseDiff22 = 0\n    var gameScoreDiff23\
    \ = 0\n    var gameGuesseDiff23 = 0\n    var gameScoreDiff24 = 0\n    var gameGuesseDiff24\
    \ = 0\n    var gameScoreDiff25 = 0\n    var gameGuesseDiff25 = 0\n    var gameScoreDiff26\
    \ = 0\n    var gameGuesseDiff26 = 0\n    var gameScoreDiff27 = 0\n    var gameGuesseDiff27\
    \ = 0\n    var gameScoreDiff28 = 0\n    var gameGuesseDiff28 = 0\n    var gameScoreDiff29\
    \ = 0\n    var gameGuesseDiff29 = 0\n    var gameScoreDiff30 = 0\n    var gameGuesseDiff\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp211s3lru.swift:81:9: error: type annotation missing in pattern\n\
    \    var gameGuesseDiff\n        ^\n"
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp97m_9yw3.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659824891
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp97m_9yw3.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659824891
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = game[0]\n    var guessScore\
    \ = guess[0]\n    var gameGuess = game[0]\n    var guessGuess = guess[0]\n   \
    \ var gameDiff = game[0]\n    var guessDiff = guess[0]\n    var gameDiffCount\
    \ = 1\n    var guessDiffCount = 1\n    var gameDiffCountMax = game[0]\n    var\
    \ guessDiffCountMax = guess[0]\n    var gameDiffCountMin = game[0]\n    var guessDiffCountMin\
    \ = guess[0]\n    var gameDiffCountMaxIndex = game[0]\n    var guessDiffCountMaxIndex\
    \ = guess[0]\n    var gameDiffCountMinIndex = game[0]\n    var guessDiffCountMinIndex\
    \ = game[0]\n    var gameDiffCountMaxIndex2 = game[0]\n    var guessDiffCountMaxIndex2\
    \ = guess[0]\n    var gameDiffCountMinIndex2 = game[0]\n    var guessDiffCountMinIndex2\
    \ = guess[0]\n    var gameDiffCountMaxIndex3 = game[0]\n    var guessDiffCountMaxIndex3\
    \ = guess[0]\n    var gameDiffCountMinIndex3 = game[0]\n    var guessDiffCountMinIndex3\
    \ = guess[0]\n    var gameDiffCountMaxIndex4 = game[0]\n    var guessDiffCountMaxIndex4\
    \ = guess[0]\n    var gameDiffCountMinIndex4 = game[0]\n    var guessDiffCountMinIndex4\
    \ = guess[0]\n    var gameDiffCountMaxIndex5 = game[0]\n    var guessDiffCountMaxIndex5\
    \ = guess[0]\n    var gameDiffCountMinIndex5 = game[0]\n    var guessDiffCountMinIndex5\
    \ = guess[0]\n    var gameDiffCountMaxIndex6 = game[0]\n    var guessDiffCountMaxIndex6\
    \ = guess[0]\n    var gameDiffCountMinIndex6 = game[0]\n    var guessDiffCountMinIndex6\
    \ = guess[0]\n    var gameDiffCountMaxIndex7 = game[0]\n    var guessDiffCountMaxIndex7\
    \ = guess[0]\n    var gameDiffCountMinIndex7 = game[0]\n    var guessDiffCountMinIndex7\
    \ = guess[0]\n    var gameDiffCountMaxIndex8 = game[0]\n    var guessDiffCountMaxIndex8\
    \ = guess[0]\n    var gameDiffCountMinIndex8 = game[0]\n    var guessDiffCountMinIndex8\
    \ = guess[0]\n    var gameDiffCountMaxIndex9 = game[0]\n    var guessDiffCountMaxIndex9\
    \ = guess[0]\n    var gameDiffCountMinIndex9 = game[0]\n    var guessDiffCountMinIndex9\
    \ = guess[0]\n    var gameDiffCountMaxIndex10 = game[0]\n    var guessDiffCountMaxIndex10\
    \ = guess[0]\n    var gameDiffCountMinIndex10 = game[0]\n    var guessDiffCountMinIndex10\
    \ = guess[0]\n    var gameDiffCountMaxIndex11 = game[0]\n    var guessDiffCountMaxIndex11\
    \ = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5,\
    \ 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmppr0k5vhx.swift:69:35: error: expected initial value after '='\n\
    \    var guessDiffCountMaxIndex11 = \n                                  ^\n"
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    var gameScore = 0\n    var guessScore = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffDiff = 0\n    var guessScoreDiffDiff\
    \ = 0\n    var gameScoreDiffDiffDiff = 0\n    var guessScoreDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guessScoreDiffDiffDiffDiff = 0\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n    var guess\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpiqwm_8sj.swift:28:9: error: invalid redeclaration of 'gameScoreDiffDiffDiffDiff'\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n        ^\n/tmp/tmpiqwm_8sj.swift:26:9:\
    \ note: 'gameScoreDiffDiffDiffDiff' previously declared here\n    var gameScoreDiffDiffDiffDiff\
    \ = 0\n        ^\n/tmp/tmpiqwm_8sj.swift:29:9: error: invalid redeclaration of\
    \ 'guessScoreDiffDiffDiffDiff'\n    var guessScoreDiffDiffDiffDiff = 0\n     \
    \   ^\n/tmp/tmpiqwm_8sj.swift:27:9: note: 'guessScoreDiffDiffDiffDiff' previously\
    \ declared here\n    var guessScoreDiffDiffDiffDiff = 0\n        ^\n/tmp/tmpiqwm_8sj.swift:30:9:\
    \ error: invalid redeclaration of 'gameScoreDiffDiffDiffDiff'\n    var gameScoreDiffDiffDiffDiff\
    \ = 0\n        ^\n/tmp/tmpiqwm_8sj.swift:26:9: note: 'gameScoreDiffDiffDiffDiff'\
    \ previously declared here\n    var gameScoreDiffDiffDiffDiff = 0\n        ^\n\
    /tmp/tmpiqwm_8sj.swift:31:9: error: invalid redeclaration of 'guessScoreDiffDiffDiffDiff'\n\
    \    var guessScoreDiffDiffDiffDiff = 0\n        ^\n/tmp/tmpiqwm_8sj.swift:27:9:\
    \ note: 'guessScoreDiffDiffDiffDiff' previously declared here\n    var guessScoreDiffDiffDiffDiff\
    \ = 0\n        ^\n/tmp/tmpiqwm_8sj.swift:32:9: error: invalid redeclaration of\
    \ 'gameScoreDiffDiffDiffDiff'\n    var gameScoreDiffDiffDiffDiff = 0\n       \
    \ ^\n/tmp/tmpiqwm_8sj.swift:26:9: note: 'gameScoreDiffDiffDiffDiff' previously\
    \ declared here\n    var gameScoreDiffDiffDiffDiff = 0\n        ^\n/tmp/tmpiqwm_8sj.swift:33:9:\
    \ error: invalid redeclaration of 'guessScoreDiffDiffDiffDiff'\n    var guessScoreDiffDiffDiffDiff\
    \ = 0\n        ^\n/tmp/tmpiqwm_8sj.swift:27:9: note: 'guessScoreDiffDiffDiffDiff'\
    \ previously declared here\n    var guessScoreDiffDiffDiffDiff = 0\n        ^\n\
    /tmp/tmpiqwm_8sj.swift:34:9: error: invalid redeclaration of 'gameScoreDiffDiffDiffDiff'\n\
    \    var gameScoreDiffDiffDiffDiff = 0\n        ^\n/tmp/tmpiqwm_8sj.swift:26:9:\
    \ note: 'gameScoreDiffDiffDiffDiff' previously declared here\n    var gameScoreDiffDiffDiffDiff\
    \ = 0\n        ^\n/tmp/tmpiqwm_8sj.swift:35:9: error: invalid redeclaration of\
    \ 'guessScoreDiffDiffDiffDiff'\n    var guessScoreDiffDiffDiffDiff "
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i\
    \ < game.count && j < guess.count {\n        if game[i] == guess[j] {\n      \
    \      result.append(0)\n            i += 1\n            j += 1\n        } else\
    \ if game[i] > guess[j] {\n            result.append(abs(game[i] - guess[j]))\n\
    \            i += 1\n        } else {\n            result.append(abs(guess[j]\
    \ - game[i]))\n            j += 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmppbctvcj2/tmppbctvcj2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c206e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c203ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c203dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c203dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbctvcj2                        0x000055d3c035c6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b6c208d2460 __libc_start_main +
    245

    6    tmppbctvcj2                        0x000055d3c035c219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for i in 0..<game.count {\n   \
    \     if game[i] == guess[i] {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(game[i] - guess[i]))\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = game[0]\n    var guessScore\
    \ = guess[0]\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff\
    \ = gameScore - guessScore\n    var guessScoreDiff = guessScore - gameScore\n\
    \    while gameIndex < game.count && guessIndex < guess.count {\n        if game[gameIndex]\
    \ == guess[guessIndex] {\n            result[result.count] = gameScoreDiff\n \
    \           gameIndex += 1\n            guessIndex += 1\n        } else {\n  \
    \          result[result.count] = abs(guessScoreDiff - gameScoreDiff)\n      \
    \      gameIndex += 1\n            guessIndex += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dfa7e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dfa4d8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2dfa4d8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2dfa4d813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2dfa4d7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2dfa2d77ec <unavailable> + 186348

    6    tmpwxktuhw4                        0x0000561385f48e30 <unavailable> + 7728

    7    tmpwxktuhw4                        0x0000561385f48593 <unavailable> + 5523

    8    libc.so.6                          0x00002b2dfa9cd460 __libc_start_main +
    245

    9    tmpwxktuhw4                        0x0000561385f48209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    while gameIndex < game.count\
    \ && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessScore += 1\n            gameIndex\
    \ += 1\n            guessIndex += 1\n        } else if game[gameIndex] > guess[guessIndex]\
    \ {\n            gameScore += 1\n            gameIndex += 1\n        } else {\n\
    \            guessScore += 1\n            guessIndex += 1\n        }\n    }\n\
    \    if gameIndex == game.count {\n        result.append(0)\n    } else {\n  \
    \      result.append(abs(guessScore - gameScore))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpa6ko2czx/tmpa6ko2czx.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add68461c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add68158b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add68158988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add681577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa6ko2czx                        0x000056534697f6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002add6864d460 __libc_start_main +
    245

    6    tmpa6ko2czx                        0x000056534697f219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = -1\n    var guessIndex\
    \ = -1\n    var gameScore = 0\n    var guessScore = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp6rrtku_y.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    while gameIndex < game.count\
    \ && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessScore += 1\n            gameIndex\
    \ += 1\n            guessIndex += 1\n        } else if game[gameIndex] > guess[guessIndex]\
    \ {\n            gameScore += 1\n            gameIndex += 1\n        } else {\n\
    \            guessScore += 1\n            guessIndex += 1\n        }\n    }\n\
    \    if gameIndex == game.count {\n        result.append(0)\n    } else {\n  \
    \      result.append(abs(guessScore - gameScore))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpa6ko2czx/tmpa6ko2czx.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add68461c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add68158b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add68158988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add681577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa6ko2czx                        0x000056534697f6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002add6864d460 __libc_start_main +
    245

    6    tmpa6ko2czx                        0x000056534697f219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for i in 0..<game.count {\n   \
    \     if game[i] == guess[i] {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(game[i] - guess[i]))\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    for i in 0..<game.count {\n        gameScore += game[i]\n        guessScore\
    \ += guess[i]\n    }\n    for i in 0..<guess.count {\n        let diff = abs(guessScore\
    \ - gameScore)\n        result.append(diff > 0 ? diff : 0)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpyqdnnlq8/tmpyqdnnlq8.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6ce450c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6ce147b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6ce147988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6ce1467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyqdnnlq8                        0x000055870497d824 <unavailable> + 6180

    5    libc.so.6                          0x00002ab6ce63c460 __libc_start_main +
    245

    6    tmpyqdnnlq8                        0x000055870497d399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[gameIndex] =\
    \ 0\n            gameIndex += 1\n            guessIndex += 1\n        } else if\
    \ game[gameIndex] > guess[guessIndex] {\n            result[gameIndex] = game[gameIndex]\
    \ - guess[guessIndex]\n            gameIndex += 1\n        } else {\n        \
    \    result[gameIndex] = guess[guessIndex] - game[gameIndex]\n            guessIndex\
    \ += 1\n        }\n    }\n    while gameIndex < game.count {\n        result[gameIndex]\
    \ = game[gameIndex] - guess[guessIndex]\n        gameIndex += 1\n        guessIndex\
    \ += 1\n    }\n    while guessIndex < guess.count {\n        result[guessIndex]\
    \ = guess[guessIndex] - game[gameIndex]\n        guessIndex += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b091d51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b091d213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b091d213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b091d21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b091d212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b091d0127ec <unavailable> + 186348

    6    tmpe47bv2bq                        0x0000563b2dc24c74 <unavailable> + 7284

    7    tmpe47bv2bq                        0x0000563b2dc244b3 <unavailable> + 5299

    8    libc.so.6                          0x00002b091d708460 __libc_start_main +
    245

    9    tmpe47bv2bq                        0x0000563b2dc24129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<game.count {\n        let\
    \ diff = abs(guess[i] - game[i])\n        result.append(diff > 0 ? diff : 0)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result.append(0)\n \
    \           gameIndex += 1\n            guessIndex += 1\n        } else if game[gameIndex]\
    \ > guess[guessIndex] {\n            result.append(game[gameIndex] - guess[guessIndex])\n\
    \            gameIndex += 1\n        } else {\n            result.append(abs(game[gameIndex]\
    \ - guess[guessIndex]))\n            guessIndex += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpgfkmx7nb/tmpgfkmx7nb.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080e9b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080e6adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080e6ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080e6ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgfkmx7nb                        0x000055fa1dbd06a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b080eba2460 __libc_start_main +
    245

    6    tmpgfkmx7nb                        0x000055fa1dbd0219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for i in 0..<game.count {\n   \
    \     if game[i] == guess[i] {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(game[i] - guess[i]))\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var scores = [Int]()\n    var guesses\
    \ = [Int]()\n    var gameScores = [Int]()\n    var guessesScores = [Int]()\n \
    \   var gameScore = 0\n    var guessesScore = 0\n    var gameScoreIndex = 0\n\
    \    var guessesScoreIndex = 0\n    var gameScoreIndex2 = 0\n    var guessesScoreIndex2\
    \ = 0\n    var gameScoreIndex3 = 0\n    var guessesScoreIndex3 = 0\n    var gameScoreIndex4\
    \ = 0\n    var guessesScoreIndex4 = 0\n    var gameScoreIndex5 = 0\n    var guessesScoreIndex5\
    \ = 0\n    var gameScoreIndex6 = 0\n    var guessesScoreIndex6 = 0\n    var gameScoreIndex7\
    \ = 0\n    var guessesScoreIndex7 = 0\n    var gameScoreIndex8 = 0\n    var guessesScoreIndex8\
    \ = 0\n    var gameScoreIndex9 = 0\n    var guessesScoreIndex9 = 0\n    var gameScoreIndex10\
    \ = 0\n    var guessesScoreIndex10 = 0\n    var gameScoreIndex11 = 0\n    var\
    \ guessesScoreIndex11 = 0\n    var gameScoreIndex12 = 0\n    var guessesScoreIndex12\
    \ = 0\n    var gameScoreIndex13 = 0\n    var guessesScoreIndex13 = 0\n    var\
    \ gameScoreIndex14 = 0\n    var guessesScoreIndex14 = 0\n    var gameScoreIndex15\
    \ = 0\n    var guessesScoreIndex15 = 0\n    var gameScoreIndex16 = 0\n    var\
    \ guessesScoreIndex16 = 0\n    var gameScoreIndex17 = 0\n    var guessesScoreIndex17\
    \ = 0\n    var gameScoreIndex18 = 0\n    var guessesScoreIndex18 = 0\n    var\
    \ gameScoreIndex19 = 0\n    var guessesScoreIndex19 = 0\n    var gameScoreIndex20\
    \ = 0\n    var guessesScoreIndex20 = 0\n    var gameScoreIndex21 = 0\n    var\
    \ guessesScoreIndex21 = 0\n    var gameScoreIndex22 = 0\n    var guessesScoreIndex22\
    \ = 0\n    var gameScoreIndex23 = 0\n    var guessesScoreIndex23 = 0\n    var\
    \ gameScoreIndex24 = 0\n    var guessesScoreIndex24 = 0\n    var gameScoreIndex25\
    \ = 0\n    var guessesScoreIndex25 = 0\n    var gameScoreIndex26 = 0\n    var\
    \ guessesScoreIndex26 = 0\n    var gameScoreIndex27 = 0\n    var guessesScoreIndex27\
    \ = 0\n    var gameScoreIndex28 = 0\n    var guessesScoreIndex28 = 0\n    var\
    \ gameScoreIndex29 = 0\n    var guessesScoreIndex29 = 0\n    var gameScoreIndex30\
    \ = 0\n    var guessesScoreIndex30 = 0\n    var gameScoreIndex31 = 0\n    var\
    \ guessesScoreIndex31 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2ryskawn.swift:15:9: warning: initialization of variable 'result'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var result = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmp2ryskawn.swift:16:9:\
    \ warning: initialization of variable 'scores' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var scores = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmp2ryskawn.swift:17:9: warning: initialization of variable 'guesses'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guesses = [Int]()\n    ~~~~^~~~~~~\n    _\n/tmp/tmp2ryskawn.swift:18:9:\
    \ warning: initialization of variable 'gameScores' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameScores = [Int]()\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmp2ryskawn.swift:19:9: warning: initialization of variable 'guessesScores'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessesScores = [Int]()\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmp2ryskawn.swift:20:9:\
    \ warning: initialization of variable 'gameScore' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameScore = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmp2ryskawn.swift:21:9: warning: initialization of variable 'guessesScore'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessesScore = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp2ryskawn.swift:22:9:\
    \ warning: initialization of variable 'gameScoreIndex' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gameScoreIndex = 0\n\
    \    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmp2ryskawn.swift:23:9: warning: initialization\
    \ of variable 'guessesScoreIndex' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var guessesScoreIndex = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp2ryskawn.swift:24:9: warning: initialization of variable 'gameScoreIndex2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gameScoreIndex2 = 0\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/"
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    while gameIndex < game.count\
    \ && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessScore += 1\n            gameIndex\
    \ += 1\n            guessIndex += 1\n        } else if game[gameIndex] > guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessIndex += 1\n        } else {\n\
    \            gameIndex += 1\n            guessScore += 1\n        }\n    }\n \
    \   if gameIndex == game.count {\n        result.append(0)\n    } else {\n   \
    \     result.append(abs(guessScore - gameScore))\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp9cp16yqh/tmp9cp16yqh.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6eb8e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6eb5d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6eb5d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6eb5d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9cp16yqh                        0x000055a813c676a4 <unavailable> + 5796

    5    libc.so.6                          0x00002ab6ebacc460 __libc_start_main +
    245

    6    tmp9cp16yqh                        0x000055a813c67219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<guess.count {\n        let\
    \ diff = abs(guess[i] - game[i])\n        result.append(diff)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    for i in 0..<game.count {\n        gameScore += game[i]\n        guessScore\
    \ += guess[i]\n    }\n    for i in 0..<guess.count {\n        if gameScore > guessScore\
    \ {\n            result.append(0)\n        } else {\n            result.append(abs(gameScore\
    \ - guessScore))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmptfmjj3oa/tmptfmjj3oa.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6a515bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6a4e52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6a4e52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6a4e517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptfmjj3oa                        0x00005644fd8af824 <unavailable> + 6180

    5    libc.so.6                          0x00002af6a5347460 __libc_start_main +
    245

    6    tmptfmjj3oa                        0x00005644fd8af399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    while gameIndex < game.count\
    \ && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += game[gameIndex]\n            guessScore += guess[guessIndex]\n\
    \            gameIndex += 1\n            guessIndex += 1\n        } else {\n \
    \           if gameScore > guessScore {\n                result.append(gameScore\
    \ - guessScore)\n                gameScore = game[gameIndex]\n               \
    \ gameIndex += 1\n            } else {\n                result.append(guessScore\
    \ - gameScore)\n                guessScore = guess[guessIndex]\n             \
    \   guessIndex += 1\n            }\n        }\n    }\n    if gameIndex < game.count\
    \ {\n        result.append(gameScore - guessScore)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpt1u4zlwz/tmpt1u4zlwz.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7facbedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fac8e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fac8e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fac8e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt1u4zlwz                        0x000055830ae2f5b4 <unavailable> + 5556

    5    libc.so.6                          0x00002b7facdd9460 __libc_start_main +
    245

    6    tmpt1u4zlwz                        0x000055830ae2f129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var scores = [Int]()\n    var guesses\
    \ = [Int]()\n    var gameScore = 0\n    var guessesScore = 0\n    var gameGuess\
    \ = 0\n    var guessesGuess = 0\n    var gameDiff = 0\n    var guessesDiff = 0\n\
    \    var gameDiffIndex = 0\n    var guessesDiffIndex = 0\n    var gameDiffIndex2\
    \ = 0\n    var guessesDiffIndex2 = 0\n    var gameDiffIndex3 = 0\n    var guessesDiffIndex3\
    \ = 0\n    var gameDiffIndex4 = 0\n    var guessesDiffIndex4 = 0\n    var gameDiffIndex5\
    \ = 0\n    var guessesDiffIndex5 = 0\n    var gameDiffIndex6 = 0\n    var guessesDiffIndex6\
    \ = 0\n    var gameDiffIndex7 = 0\n    var guessesDiffIndex7 = 0\n    var gameDiffIndex8\
    \ = 0\n    var guessesDiffIndex8 = 0\n    var gameDiffIndex9 = 0\n    var guessesDiffIndex9\
    \ = 0\n    var gameDiffIndex10 = 0\n    var guessesDiffIndex10 = 0\n    var gameDiffIndex11\
    \ = 0\n    var guessesDiffIndex11 = 0\n    var gameDiffIndex12 = 0\n    var guessesDiffIndex12\
    \ = 0\n    var gameDiffIndex13 = 0\n    var guessesDiffIndex13 = 0\n    var gameDiffIndex14\
    \ = 0\n    var guessesDiffIndex14 = 0\n    var gameDiffIndex15 = 0\n    var guessesDiffIndex15\
    \ = 0\n    var gameDiffIndex16 = 0\n    var guessesDiffIndex16 = 0\n    var gameDiffIndex17\
    \ = 0\n    var guessesDiffIndex17 = 0\n    var gameDiffIndex18 = 0\n    var guessesDiffIndex18\
    \ = 0\n    var gameDiffIndex19 = 0\n    var guessesDiffIndex19 = 0\n    var gameDiffIndex20\
    \ = 0\n    var guessesDiffIndex20 = 0\n    var gameDiffIndex21 = 0\n    var guessesDiffIndex21\
    \ = 0\n    var gameDiffIndex22 = 0\n    var guessesDiffIndex22 = 0\n    var gameDiffIndex23\
    \ = 0\n    var guessesDiffIndex23 = 0\n    var gameDiffIndex24 = 0\n    var guessesDiffIndex24\
    \ = 0\n    var gameDiffIndex25 = 0\n    var guessesDiffIndex25 = 0\n    var gameDiffIndex26\
    \ = 0\n    var guessesDiffIndex26 = 0\n    var gameDiffIndex27 = 0\n    var guessesDiffIndex27\
    \ = 0\n    var gameDiffIndex28 = 0\n    var guessesDiffIndex28 = 0\n    var gameDiffIndex29\
    \ = 0\n    var guessesDiffIndex29 = 0\n    var gameDiffIndex30 = 0\n    var guessesDiffIndex30\
    \ = 0\n    var gameDiffIndex31 = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpobpglizq.swift:15:9: warning: initialization of variable 'result'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var result = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpobpglizq.swift:16:9:\
    \ warning: initialization of variable 'scores' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var scores = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmpobpglizq.swift:17:9: warning: initialization of variable 'guesses'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guesses = [Int]()\n    ~~~~^~~~~~~\n    _\n/tmp/tmpobpglizq.swift:18:9:\
    \ warning: initialization of variable 'gameScore' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameScore = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpobpglizq.swift:19:9: warning: initialization of variable 'guessesScore'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessesScore = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpobpglizq.swift:20:9:\
    \ warning: initialization of variable 'gameGuess' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameGuess = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpobpglizq.swift:21:9: warning: initialization of variable 'guessesGuess'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessesGuess = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpobpglizq.swift:22:9:\
    \ warning: initialization of variable 'gameDiff' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameDiff = 0\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpobpglizq.swift:23:9: warning: initialization of variable 'guessesDiff'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessesDiff = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpobpglizq.swift:24:9:\
    \ warning: initialization of variable 'gameDiffIndex' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gameDiffIndex = 0\n\
    \    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpobpglizq.swift:25:9: warning: initialization\
    \ of varia"
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result.append(0)\n \
    \           gameIndex += 1\n            guessIndex += 1\n        } else if game[gameIndex]\
    \ > guess[guessIndex] {\n            result.append(abs(game[gameIndex] - guess[guessIndex]))\n\
    \            gameIndex += 1\n        } else {\n            result.append(abs(guess[guessIndex]\
    \ - game[gameIndex]))\n            guessIndex += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpenv_mr3q/tmpenv_mr3q.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdab94ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdab641b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdab641988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdab6407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpenv_mr3q                        0x000055d738c9d6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002abdabb36460 __libc_start_main +
    245

    6    tmpenv_mr3q                        0x000055d738c9d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for i in 0..<game.count {\n   \
    \     if game[i] == guess[i] {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(game[i] - guess[i]))\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i\
    \ < game.count && j < guess.count {\n        if game[i] == guess[j] {\n      \
    \      result.append(0)\n            i += 1\n            j += 1\n        } else\
    \ if game[i] > guess[j] {\n            result.append(abs(game[i] - guess[j]))\n\
    \            i += 1\n        } else {\n            result.append(abs(guess[j]\
    \ - game[i]))\n            j += 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmppbctvcj2/tmppbctvcj2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c206e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c203ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c203dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c203dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbctvcj2                        0x000055d3c035c6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b6c208d2460 __libc_start_main +
    245

    6    tmppbctvcj2                        0x000055d3c035c219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = game[0]\n    var guessScore\
    \ = guess[0]\n    for index in 0..<game.count {\n        if gameScore == guessScore\
    \ {\n            result.append(0)\n        } else {\n            result.append(abs(guessScore\
    \ - gameScore))\n        }\n        gameScore = game[index]\n        guessScore\
    \ = guess[index]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpk34wy5jf/tmpk34wy5jf.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b827dd02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b827d9f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b827d9f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b827d9f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk34wy5jf                        0x000056193299c824 <unavailable> + 6180

    5    libc.so.6                          0x00002b827deee460 __libc_start_main +
    245

    6    tmpk34wy5jf                        0x000056193299c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = game[0]\n    var guessScore\
    \ = guess[0]\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff\
    \ = gameScore - guessScore\n    var guessScoreDiff = guessScore - gameScore\n\
    \    while gameIndex < game.count && guessIndex < guess.count {\n        if game[gameIndex]\
    \ == guess[guessIndex] {\n            result.append(0)\n            gameIndex\
    \ += 1\n            guessIndex += 1\n        } else if game[gameIndex] > guess[guessIndex]\
    \ {\n            gameScore += game[gameIndex] - guess[guessIndex]\n          \
    \  gameIndex += 1\n        } else if game[gameIndex] < guess[guessIndex] {\n \
    \           guessScore += guess[guessIndex] - game[gameIndex]\n            guessIndex\
    \ += 1\n        } else {\n            gameIndex += 1\n            guessIndex +=\
    \ 1\n        }\n    }\n    if gameIndex == game.count {\n        result.append(0)\n\
    \    }\n    if guessIndex == guess.count {\n        result.append(0)\n    }\n\
    \    if gameScoreDiff != 0 {\n        result.append(gameScoreDiff)\n    }\n  \
    \  if guessScoreDiff != 0 {\n        result.append(guessScoreDiff)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp95n0humf/tmp95n0humf.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af569742c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af569439b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af569439988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5694387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp95n0humf                        0x000055db500a75b4 <unavailable> + 5556

    5    libc.so.6                          0x00002af56992e460 __libc_start_main +
    245

    6    tmp95n0humf                        0x000055db500a7129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for index in 0..<guess.count {\n    \
    \    let score = game[index]\n        let guess = guess[index]\n        result[index]\
    \ = abs(guess - score)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b266ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b263f6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2b263f6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2b263f613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2b263f5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2b261f57ec <unavailable> + 186348

    6    tmp2bg_urda                        0x0000564ec2efdfa2 <unavailable> + 8098

    7    tmp2bg_urda                        0x0000564ec2efd723 <unavailable> + 5923

    8    libc.so.6                          0x00002b2b268eb460 __libc_start_main +
    245

    9    tmp2bg_urda                        0x0000564ec2efd399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<game.count {\n        if\
    \ game[i] == guess[i] {\n            result.append(0)\n        } else {\n    \
    \        result.append(abs(game[i] - guess[i]))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824784
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<guess.count {\n        let\
    \ diff = abs(guess[i] - game[i])\n        result.append(diff > 0 ? diff : 0)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp97m_9yw3.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659824891
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var scores = [Int]()\n    var guesses\
    \ = [Int]()\n    for i in 0..<game.count {\n        scores[i] = game[i]\n    \
    \    guesses[i] = guess[i]\n    }\n    for i in 0..<game.count {\n        if guesses[i]\
    \ == scores[i] {\n            result.append(0)\n        } else {\n           \
    \ result.append(abs(guesses[i] - scores[i]))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acf1c0fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf1bdf3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acf1bdf3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acf1bdf313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acf1bdf2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002acf1bbf27ec <unavailable> + 186348

    6    tmpxsvh1csz                        0x00005591371fbfc0 <unavailable> + 8128

    7    tmpxsvh1csz                        0x00005591371fb783 <unavailable> + 6019

    8    libc.so.6                          0x00002acf1c2e8460 __libc_start_main +
    245

    9    tmpxsvh1csz                        0x00005591371fb3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    \n   \
    \ for i in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var scores = [Int]()\n    var guesses\
    \ = [Int]()\n    for i in 0..<game.count {\n        scores[i] = game[i]\n    \
    \    guesses[i] = guess[i]\n    }\n    for i in 0..<game.count {\n        if guesses[i]\
    \ != scores[i] {\n            result.append(abs(guesses[i] - scores[i]))\n   \
    \     } else {\n            result.append(0)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aac9fe79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac9fb70561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aac9fb70286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aac9fb7013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aac9fb6fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aac9f96f7ec <unavailable> + 186348

    6    tmpy81n39pk                        0x000056209c3e7fc0 <unavailable> + 8128

    7    tmpy81n39pk                        0x000056209c3e7783 <unavailable> + 6019

    8    libc.so.6                          0x00002aaca0065460 __libc_start_main +
    245

    9    tmpy81n39pk                        0x000056209c3e73f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    for index in 0..<game.count {\n        gameScore += game[index]\n \
    \       guessScore += guess[index]\n    }\n    if gameScore == guessScore {\n\
    \        for index in 0..<game.count {\n            result[index] = 0\n      \
    \  }\n    } else {\n        for index in 0..<game.count {\n            result[index]\
    \ = abs(gameScore - guessScore)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad52d828c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad52d51f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad52d51f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad52d51f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad52d51ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad52d31e7ec <unavailable> + 186348

    6    tmpbvaz4zy_                        0x000055f46598e2b0 <unavailable> + 8880

    7    tmpbvaz4zy_                        0x000055f46598d723 <unavailable> + 5923

    8    libc.so.6                          0x00002ad52da14460 __libc_start_main +
    245

    9    tmpbvaz4zy_                        0x000055f46598d399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for i in 0..<game.count {\n   \
    \     if game[i] == guess[i] {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(game[i] - guess[i]))\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result.append(0)\n \
    \           gameIndex += 1\n            guessIndex += 1\n        } else if game[gameIndex]\
    \ > guess[guessIndex] {\n            result.append(game[gameIndex] - guess[guessIndex])\n\
    \            gameIndex += 1\n        } else {\n            result.append(abs(game[gameIndex]\
    \ - guess[guessIndex]))\n            gameIndex += 1\n            guessIndex +=\
    \ 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpdsb47gqx/tmpdsb47gqx.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bd0820c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bd0517b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bd0517988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bd05167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdsb47gqx                        0x000055b264c16654 <unavailable> + 5716

    5    libc.so.6                          0x00002b4bd0a0c460 __libc_start_main +
    245

    6    tmpdsb47gqx                        0x000055b264c161c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    var i\
    \ = 0\n    for _ in 0..<game.count {\n        if guess[i] != game[i] {\n     \
    \       result[i] = abs(guess[i] - game[i])\n        } else {\n            result[i]\
    \ = 0\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var index = 0\n    while index < game.count\
    \ {\n        if game[index] == guess[index] {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[index] - guess[index]))\n\
    \        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    while i < game.count {\n\
    \        if game[i] == guess[i] {\n            result.append(0)\n        } else\
    \ {\n            result.append(abs(game[i] - guess[i]))\n        }\n        i\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<game.count {\n        if\
    \ game[i] == guess[i] {\n            result.append(0)\n        } else {\n    \
    \        result.append(abs(game[i] - guess[i]))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824784
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[result.count-1]\
    \ = 0\n            gameIndex += 1\n            guessIndex += 1\n        } else\
    \ if game[gameIndex] > guess[guessIndex] {\n            result[result.count-1]\
    \ = game[gameIndex] - guess[guessIndex]\n            gameIndex += 1\n        }\
    \ else {\n            result[result.count-1] = guess[guessIndex] - game[gameIndex]\n\
    \            guessIndex += 1\n        }\n    }\n    if gameIndex == game.count\
    \ {\n        result[result.count-1] = 0\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b64d448dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64d4184561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b64d4184286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b64d418413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b64d4183bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b64d3f837ec <unavailable> + 186348

    6    tmp3433j1v7                        0x000055d64edb5cba <unavailable> + 7354

    7    tmp3433j1v7                        0x000055d64edb54b3 <unavailable> + 5299

    8    libc.so.6                          0x00002b64d4679460 __libc_start_main +
    245

    9    tmp3433j1v7                        0x000055d64edb5129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    var gameScore\
    \ = 0\n    var guessScore = 0\n    for i in 0..<game.count {\n        gameScore\
    \ += game[i]\n        guessScore += guess[i]\n    }\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(guessScore - gameScore)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpvq1ulhng/tmpvq1ulhng.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e0fcd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e0f9c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e0f9c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e0f9c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvq1ulhng                        0x000055eac5038834 <unavailable> + 6196

    5    libc.so.6                          0x00002b0e0febc460 __libc_start_main +
    245

    6    tmpvq1ulhng                        0x000055eac50383a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var score = 0\n    var guess = 0\n  \
    \  var game = 0\n    var i = 0\n    var j = 0\n    for _ in 0..<game.count {\n\
    \        game = game[i]\n        guess = guess[j]\n        if game == guess {\n\
    \            result.append(0)\n            score += 0\n        } else {\n    \
    \        result.append(abs(guess - game))\n            score += abs(guess - game)\n\
    \        }\n        i += 1\n        j += 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmph3r3owc4.swift:21:23: error: value of type 'Int' has no member\
    \ 'count'\n    for _ in 0..<game.count {\n                 ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = [0]\n    for i in 0..<game.count {\n      \
    \  if game[i] == guess[i] {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(game[i] - guess[i]))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpu3jl3uy_/tmpu3jl3uy_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b293fb95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b293f88cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b293f88c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b293f88b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu3jl3uy_                        0x00005581b94d77d4 <unavailable> + 6100

    5    libc.so.6                          0x00002b293fd81460 __libc_start_main +
    245

    6    tmpu3jl3uy_                        0x00005581b94d7349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    var i\
    \ = 0\n    for j in 0..<game.count {\n        if game[j] == guess[j] {\n     \
    \       result[i] = 0\n        } else {\n            result[i] = abs(game[j] -\
    \ guess[j])\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var score = 0\n    var guess = 0\n  \
    \  var game = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    for _ in 0..<game.count\
    \ {\n        game = game[i]\n        guess = guess[j]\n        if game == guess\
    \ {\n            score += game\n            result.append(score)\n           \
    \ i += 1\n            j += 1\n        }\n        else {\n            score +=\
    \ abs(game - guess)\n            result.append(score)\n            i += 1\n  \
    \          j += 1\n        }\n    }\n    for _ in 0..<guess.count {\n        game\
    \ = game[i]\n        guess = guess[k]\n        if game == guess {\n          \
    \  score += game\n            result.append(score)\n            i += 1\n     \
    \       k += 1\n        }\n        else {\n            score += abs(game - guess)\n\
    \            result.append(score)\n            i += 1\n            k += 1\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpx97ente1.swift:22:23: error: value of type 'Int' has no member\
    \ 'count'\n    for _ in 0..<game.count {\n                 ~~~~ ^~~~~\n/tmp/tmpx97ente1.swift:38:24:\
    \ error: value of type 'Int' has no member 'count'\n    for _ in 0..<guess.count\
    \ {\n                 ~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    while gameIndex < game.count\
    \ && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessScore += 1\n            gameIndex\
    \ += 1\n            guessIndex += 1\n        } else if game[gameIndex] > guess[guessIndex]\
    \ {\n            gameScore += abs(game[gameIndex] - guess[guessIndex])\n     \
    \       gameIndex += 1\n        } else {\n            guessScore += abs(guess[guessIndex]\
    \ - game[gameIndex])\n            guessIndex += 1\n        }\n    }\n    if gameIndex\
    \ == game.count {\n        result.append(0)\n    } else {\n        result.append(abs(guessScore\
    \ - gameScore))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmptlk9e4cb/tmptlk9e4cb.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec32e10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec32b07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec32b07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec32b067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlk9e4cb                        0x000055c14af1f6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002aec32ffc460 __libc_start_main +
    245

    6    tmptlk9e4cb                        0x000055c14af1f219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<game.count {\n        if\
    \ game[i] == guess[i] {\n            result.append(0)\n        } else {\n    \
    \        result.append(abs(game[i] - guess[i]))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824784
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<guess.count {\n      \
    \  let diff = abs(guess[i] - game[i])\n        result.append(diff > 0 ? diff :\
    \ -diff)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp97m_9yw3.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659824891
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    var scores\
    \ = [Int](repeating: 0, count: game.count)\n    \n    for i in 0..<game.count\
    \ {\n        scores[i] = abs(game[i] - guess[i])\n    }\n    \n    for i in 0..<game.count\
    \ {\n        if scores[i] > 0 {\n            result[i] = scores[i]\n        }\
    \ else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            gameScore += 1\n   \
    \         guessScore += 1\n            gameIndex += 1\n            guessIndex\
    \ += 1\n            result[gameScoreDiffIndex] = gameScore\n            gameScoreDiffIndex\
    \ += 1\n        } else {\n            gameScore += abs(game[gameIndex] - guess[guessIndex])\n\
    \            guessScore += abs(game[gameIndex] - guess[guessIndex])\n        \
    \    gameIndex += 1\n            guessIndex += 1\n            gameScoreDiff +=\
    \ gameScore\n            guessScoreDiff += guessScore\n            gameScoreDiffIndex\
    \ += 1\n            guessScoreDiffIndex += 1\n        }\n    }\n    if gameIndex\
    \ < game.count {\n        result[gameScoreDiffIndex] = gameScore - game[gameIndex]\n\
    \    }\n    if guessIndex < guess.count {\n        result[guessScoreDiffIndex]\
    \ = guessScore - guess[guessIndex]\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af721ad2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7217c9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af7217c9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af7217c913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af7217c8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af7215c87ec <unavailable> + 186348

    6    tmp6brt9lic                        0x000055a300c52e78 <unavailable> + 7800

    7    tmp6brt9lic                        0x000055a300c52593 <unavailable> + 5523

    8    libc.so.6                          0x00002af721cbe460 __libc_start_main +
    245

    9    tmp6brt9lic                        0x000055a300c52209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    for index in 0..<guess.count {\n        gameScore += game[index]\n\
    \        guessScore += guess[index]\n    }\n    for index in 0..<guess.count {\n\
    \        let difference = abs(guessScore - gameScore)\n        result.append(difference)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpa19_ovy2/tmpa19_ovy2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8cec81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8ce978b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8ce978988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8ce9777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa19_ovy2                        0x0000561ca9284824 <unavailable> + 6180

    5    libc.so.6                          0x00002ae8cee6d460 __libc_start_main +
    245

    6    tmpa19_ovy2                        0x0000561ca9284399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = game.count\n    var guessIndex\
    \ = guess.count\n    while gameIndex != 0 || guessIndex != 0 {\n        if gameIndex\
    \ == 0 {\n            result.append(0)\n            gameIndex--\n            guessIndex--\n\
    \        } else if guessIndex == 0 {\n            result.append(0)\n         \
    \   guessIndex--\n            gameIndex--\n        } else if game[gameIndex-1]\
    \ == guess[guessIndex-1] {\n            result.append(0)\n            gameIndex--\n\
    \            guessIndex--\n        } else {\n            result.append(abs(game[gameIndex-1]\
    \ - guess[guessIndex-1]))\n            gameIndex--\n            guessIndex--\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfwy66cqc.swift:21:22: error: cannot find operator '--' in scope;\
    \ did you mean '-= 1'?\n            gameIndex--\n                     ^~\n/tmp/tmpfwy66cqc.swift:22:23:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  guessIndex--\n                      ^~\n/tmp/tmpfwy66cqc.swift:25:23: error:\
    \ cannot find operator '--' in scope; did you mean '-= 1'?\n            guessIndex--\n\
    \                      ^~\n/tmp/tmpfwy66cqc.swift:26:22: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            gameIndex--\n             \
    \        ^~\n/tmp/tmpfwy66cqc.swift:29:22: error: cannot find operator '--' in\
    \ scope; did you mean '-= 1'?\n            gameIndex--\n                     ^~\n\
    /tmp/tmpfwy66cqc.swift:30:23: error: cannot find operator '--' in scope; did you\
    \ mean '-= 1'?\n            guessIndex--\n                      ^~\n/tmp/tmpfwy66cqc.swift:33:22:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  gameIndex--\n                     ^~\n/tmp/tmpfwy66cqc.swift:34:23: error:\
    \ cannot find operator '--' in scope; did you mean '-= 1'?\n            guessIndex--\n\
    \                      ^~\n"
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var index = 0\n    while index < game.count\
    \ {\n        if game[index] == guess[index] {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[index] - guess[index]))\n\
    \        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    while i < game.count {\n\
    \        if game[i] == guess[i] {\n            result.append(0)\n        } else\
    \ {\n            result.append(abs(game[i] - guess[i]))\n        }\n        i\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<guess.count {\n      \
    \  if game[i] == guess[i] {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(game[i] - guess[i]))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824893
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = [0]\n    var index = 0\n    var gameIndex =\
    \ 0\n    var guessIndex = 0\n    while index < game.count {\n        if game[gameIndex]\
    \ == guess[guessIndex] {\n            result[index] = 0\n            gameIndex\
    \ += 1\n            guessIndex += 1\n        } else {\n            result[index]\
    \ = abs(game[gameIndex] - guess[guessIndex])\n            gameIndex += 1\n   \
    \         guessIndex += 1\n        }\n        index += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c24eebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c24be2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7c24be2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7c24be213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7c24be1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7c249e17ec <unavailable> + 186348

    6    tmp0r33ei0m                        0x00005610690c3cbf <unavailable> + 7359

    7    tmp0r33ei0m                        0x00005610690c3543 <unavailable> + 5443

    8    libc.so.6                          0x00002b7c250d7460 __libc_start_main +
    245

    9    tmp0r33ei0m                        0x00005610690c31b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659824893
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[gameIndex] =\
    \ 0\n            gameIndex += 1\n            guessIndex += 1\n        } else if\
    \ game[gameIndex] > guess[guessIndex] {\n            result[gameIndex] = game[gameIndex]\
    \ - guess[guessIndex]\n            gameIndex += 1\n        } else {\n        \
    \    result[gameIndex] = guess[guessIndex] - game[gameIndex]\n            guessIndex\
    \ += 1\n        }\n    }\n    while gameIndex < game.count {\n        result[gameIndex]\
    \ = game[gameIndex] - guess[guessIndex]\n        gameIndex += 1\n        guessIndex\
    \ += 1\n    }\n    while guessIndex < guess.count {\n        result[gameIndex]\
    \ = guess[guessIndex] - game[gameIndex]\n        guessIndex += 1\n        gameIndex\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b63509c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63506ba561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b63506ba286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b63506ba13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b63506b9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b63504b97ec <unavailable> + 186348

    6    tmpih0aqqg5                        0x000056188578cc1f <unavailable> + 7199

    7    tmpih0aqqg5                        0x000056188578c453 <unavailable> + 5203

    8    libc.so.6                          0x00002b6350baf460 __libc_start_main +
    245

    9    tmpih0aqqg5                        0x000056188578c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824893
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<game.count {\n        if\
    \ game[i] == guess[i] {\n            result.append(0)\n        } else {\n    \
    \        result.append(abs(game[i] - guess[i]))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824784
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var scores = [Int]()\n    var guesses\
    \ = [Int]()\n    \n    for i in 0..<game.count {\n        guesses.append(guess[i])\n\
    \        scores.append(game[i])\n    }\n    \n    for i in 0..<guesses.count {\n\
    \        let guess = guesses[i]\n        let score = scores[i]\n        \n   \
    \     if guess == score {\n            result.append(0)\n        } else {\n  \
    \          result.append(abs(guess - score))\n        }\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824893
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = game.reduce(0){$0 + $1}\n\
    \    var guessScore = guess.reduce(0){$0 + $1}\n    var gameDiff = gameScore -\
    \ guessScore\n    var guessDiff = guessScore - gameScore\n    var gameDiffAbs\
    \ = abs(gameDiff)\n    var guessDiffAbs = abs(guessDiff)\n    if gameDiff == 0\
    \ {\n        result.append(0)\n    } else {\n        result.append(gameDiffAbs)\n\
    \    }\n    if guessDiff == 0 {\n        result.append(0)\n    } else {\n    \
    \    result.append(guessDiffAbs)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpr64bgsmq/tmpr64bgsmq.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab811056c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab810d4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab810d4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab810d4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr64bgsmq                        0x00005623664f8674 <unavailable> + 5748

    5    libc.so.6                          0x00002ab811242460 __libc_start_main +
    245

    6    tmpr64bgsmq                        0x00005623664f81e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824893
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var scores = [Int]()\n    var guesses\
    \ = [Int]()\n    var gameScore = 0\n    var guessesScore = 0\n    var gameGuess\
    \ = 0\n    var guessesGuess = 0\n    var gameScoreDiff = 0\n    var guessesScoreDiff\
    \ = 0\n    var gameGuessDiff = 0\n    var guessesGuessDiff = 0\n    var gameScoreDiff2\
    \ = 0\n    var guessesScoreDiff2 = 0\n    var gameGuessDiff2 = 0\n    var guessesGuessDiff2\
    \ = 0\n    var gameScoreDiff3 = 0\n    var guessesScoreDiff3 = 0\n    var gameGuessDiff3\
    \ = 0\n    var guessesGuessDiff3 = 0\n    var gameScoreDiff4 = 0\n    var guessesScoreDiff4\
    \ = 0\n    var gameGuessDiff4 = 0\n    var guessesGuessDiff4 = 0\n    var gameScoreDiff5\
    \ = 0\n    var guessesScoreDiff5 = 0\n    var gameGuessDiff5 = 0\n    var guessesGuessDiff5\
    \ = 0\n    var gameScoreDiff6 = 0\n    var guessesScoreDiff6 = 0\n    var gameGuessDiff6\
    \ = 0\n    var guessesGuessDiff6 = 0\n    var gameScoreDiff7 = 0\n    var guessesScoreDiff7\
    \ = 0\n    var gameGuessDiff7 = 0\n    var guessesGuessDiff7 = 0\n    var gameScoreDiff8\
    \ = 0\n    var guessesScoreDiff8 = 0\n    var gameGuessDiff8 = 0\n    var guessesGuessDiff8\
    \ = 0\n    var gameScoreDiff9 = 0\n    var guessesScoreDiff9 = 0\n    var gameGuessDiff9\
    \ = 0\n    var guessesGuessDiff9 = 0\n    var gameScoreDiff10 = 0\n    var guessesScoreDiff10\
    \ = 0\n    var gameGuessDiff10 = 0\n    var guessesGuessDiff10 = 0\n    var gameScoreDiff11\
    \ = 0\n    var guessesScoreDiff11 = 0\n    var gameGuessDiff11 = 0\n    var guessesGuessDiff11\
    \ = 0\n    var gameScoreDiff12 = 0\n    var guessesScoreDiff12 = 0\n    var gameGuessDiff12\
    \ = 0\n    var guessesGuessDiff12 = 0\n    var gameScoreDiff13 = 0\n    var guessesScoreDiff13\
    \ = 0\n    var gameGuessDiff13 = 0\n    var guessesGuessDiff13 = 0\n    var gameScoreDiff14\
    \ = 0\n    var guessesScoreDiff14 = 0\n    var gameGuessDiff14 = 0\n    var guessesGuessDiff14\
    \ = 0\n    var gameScoreDiff15 = 0\n    var guessesScoreDiff15 = 0\n    var gameGuessDiff15\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2, 3,\
    \ 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpuj3a3iu1.swift:15:9: warning: initialization of variable 'result'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var result = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpuj3a3iu1.swift:16:9:\
    \ warning: initialization of variable 'scores' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var scores = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmpuj3a3iu1.swift:17:9: warning: initialization of variable 'guesses'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guesses = [Int]()\n    ~~~~^~~~~~~\n    _\n/tmp/tmpuj3a3iu1.swift:18:9:\
    \ warning: initialization of variable 'gameScore' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameScore = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpuj3a3iu1.swift:19:9: warning: initialization of variable 'guessesScore'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessesScore = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpuj3a3iu1.swift:20:9:\
    \ warning: initialization of variable 'gameGuess' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameGuess = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpuj3a3iu1.swift:21:9: warning: initialization of variable 'guessesGuess'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessesGuess = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpuj3a3iu1.swift:22:9:\
    \ warning: initialization of variable 'gameScoreDiff' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gameScoreDiff = 0\n\
    \    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpuj3a3iu1.swift:23:9: warning: initialization\
    \ of variable 'guessesScoreDiff' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var guessesScoreDiff = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpuj3a3iu1.swift:24:9: warning: initialization of variable 'gameGuessDiff'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gameGuessDiff = 0\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpuj3a3iu1.swift:25:9:\
    \ wa"
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    while i < game.count {\n\
    \        if game[i] == guess[i] {\n            result.append(0)\n        } else\
    \ {\n            result.append(abs(game[i] - guess[i]))\n        }\n        i\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[result.count-1]\
    \ = 0\n            gameIndex += 1\n            guessIndex += 1\n        } else\
    \ if game[gameIndex] > guess[guessIndex] {\n            result[result.count-1]\
    \ = game[gameIndex] - guess[guessIndex]\n            gameIndex += 1\n        }\
    \ else {\n            result[result.count-1] = guess[guessIndex] - game[gameIndex]\n\
    \            guessIndex += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b207da57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b207d74e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b207d74e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b207d74e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b207d74dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b207d54d7ec <unavailable> + 186348

    6    tmpkbeus330                        0x0000559badffacba <unavailable> + 7354

    7    tmpkbeus330                        0x0000559badffa4b3 <unavailable> + 5299

    8    libc.so.6                          0x00002b207dc43460 __libc_start_main +
    245

    9    tmpkbeus330                        0x0000559badffa129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824893
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    while gameIndex < game.count\
    \ && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessScore += 1\n            gameIndex\
    \ += 1\n            guessIndex += 1\n        } else if game[gameIndex] > guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessIndex += 1\n        } else {\n\
    \            gameIndex += 1\n            guessIndex += 1\n        }\n    }\n \
    \   if gameIndex == game.count {\n        result.append(0)\n    } else {\n   \
    \     result.append(abs(guessScore - gameScore))\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmptznrypso/tmptznrypso.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e43f70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e43c67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e43c67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e43c667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptznrypso                        0x000055b5fc18e6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b4e4415c460 __libc_start_main +
    245

    6    tmptznrypso                        0x000055b5fc18e219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824893
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    while gameIndex < game.count\
    \ && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessScore += 1\n            gameIndex\
    \ += 1\n            guessIndex += 1\n        } else if game[gameIndex] > guess[guessIndex]\
    \ {\n            gameScore += abs(game[gameIndex] - guess[guessIndex])\n     \
    \       gameIndex += 1\n        } else {\n            guessScore += abs(guess[guessIndex]\
    \ - game[gameIndex])\n            guessIndex += 1\n        }\n    }\n    if gameIndex\
    \ == game.count {\n        result.append(0)\n    } else {\n        result.append(abs(gameScore\
    \ - guessScore))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp8kth89lj/tmp8kth89lj.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a16bcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a168c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a168c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a168c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kth89lj                        0x000055c370eb76a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b6a16db6460 __libc_start_main +
    245

    6    tmp8kth89lj                        0x000055c370eb7219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824893
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for i in 0..<game.count {\n   \
    \     if game[i] == guess[i] {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(game[i] - guess[i]))\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    for index in 0..<game.count {\n        gameScore += game[index]\n \
    \       guessScore += guess[index]\n    }\n    for index in 0..<guess.count {\n\
    \        let diff = abs(guessScore - gameScore)\n        result.append(diff >\
    \ 0 ? diff : 0)\n        gameScore += game[index]\n        guessScore += guess[index]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpkdsbz21y/tmpkdsbz21y.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b266ac72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b266a969b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b266a969988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b266a9687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkdsbz21y                        0x000055e942dab824 <unavailable> + 6180

    5    libc.so.6                          0x00002b266ae5e460 __libc_start_main +
    245

    6    tmpkdsbz21y                        0x000055e942dab399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824893
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var scores = [Int]()\n    var guesses\
    \ = [Int]()\n    \n    for i in 0..<game.count {\n        scores[i] = game[i]\n\
    \        guesses[i] = guess[i]\n    }\n    \n    for i in 0..<game.count {\n \
    \       if guesses[i] == scores[i] {\n            result.append(0)\n        }\
    \ else {\n            result.append(abs(guesses[i] - scores[i]))\n        }\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b92865f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92862ed561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b92862ed286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b92862ed13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b92862ecbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b92860ec7ec <unavailable> + 186348

    6    tmpp_5oy8g4                        0x000055691e683fc0 <unavailable> + 8128

    7    tmpp_5oy8g4                        0x000055691e683783 <unavailable> + 6019

    8    libc.so.6                          0x00002b92867e2460 __libc_start_main +
    245

    9    tmpp_5oy8g4                        0x000055691e6833f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824893
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for index in 0..<guess.count {\n    \
    \    let score = game[index]\n        let guess = guess[index]\n        let difference\
    \ = abs(guess - score)\n        result.append(difference)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824893
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var scores = [Int]()\n    var guesses\
    \ = [Int]()\n    \n    for i in 0..<game.count {\n        guesses.append(guess[i])\n\
    \        scores.append(game[i])\n    }\n    \n    for i in 0..<guesses.count {\n\
    \        if guesses[i] == scores[i] {\n            result.append(0)\n        }\
    \ else {\n            result.append(abs(guesses[i] - scores[i]))\n        }\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824893
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for index in 0..<guess.count {\n    \
    \    let difference = abs(game[index] - guess[index])\n        result.append(difference)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    \n   \
    \ for i in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameLength = 0\n\
    \    var guessLength = 0\n    var gameSum = 0\n    var guessSum = 0\n    var gameDiff\
    \ = 0\n    var guessDiff = 0\n    var gameDiffCount = 0\n    var guessDiffCount\
    \ = 0\n    var gameDiffSum = 0\n    var guessDiffSum = 0\n    var gameDiffCountSum\
    \ = 0\n    var guessDiffCountSum = 0\n    var gameDiffSumCount = 0\n    var guessDiffSumCount\
    \ = 0\n    var gameDiffCountSumCount = 0\n    var guessDiffCountSumCount = 0\n\
    \    var gameDiffSumCountSum = 0\n    var guessDiffSumCountSum = 0\n    var gameDiffCountSumCountSum\
    \ = 0\n    var guessDiffCountSumCountSum = 0\n    var gameDiffSumCountSumCount\
    \ = 0\n    var guessDiffSumCountSumCount = 0\n    var gameDiffCountSumCountSum\
    \ = 0\n    var guessDiffCountSumCountSum = 0\n    var gameDiffSumCountSumCountSum\
    \ = 0\n    var guessDiffSumCountSumCountSum = 0\n    var gameDiffCountSumCountSumCount\
    \ = 0\n    var guessDiffSumCountSumCountSum = 0\n    var gameDiffCountSumCountSumCountSum\
    \ = 0\n    var guessDiffSumCountSumCountSumCount = 0\n    var gameDiffSumCountSumCountSumCountSum\
    \ = 0\n    var guessDiffSumCountSumCountSumCountSum = 0\n    var gameDiffCountSumCountSumCountSumCount\
    \ = 0\n    var guessDiffSumCountSumCountSumCountSum = 0\n    var gameDiffCountSumCountSumCountSumCountSum\
    \ = 0\n    var guessDiffSumCountSumCountSumCountSumCount = 0\n    var gameDiffSumCountSumCountSumCountSumCountSum\
    \ = 0\n    var guessDiffSumCountSumCountSumCountSumCountSum = 0\n    var gameDiffCountSumCountSumCountSumCountSumCountSum\
    \ = 0\n    var guessDiffSumCountSumCountSumCountSumCountSumCount = 0\n    var\
    \ gameDiffSumCountSumCountSumCountSumCountSumCountSum = 0\n    var guessDiffSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0\n    var gameDiffCountSumCountSumCountSumCountSumCountSumCount = 0\n   \
    \ var guessDiffSumCountSumCountSumCountSumCountSumCountSum = 0\n    var gameDiffCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0\n    var guessDiffSumCountSumCountSumCountSumCountSumCountSum = 0\n    var\
    \ gameDiffCountSumCountSumCountSumCountSumCountSumCountSum = 0\n    var guessDiffSumCountSumCountSumCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp17jfsiab.swift:42:9: error: invalid redeclaration of 'gameDiffCountSumCountSum'\n\
    \    var gameDiffCountSumCountSum = 0\n        ^\n/tmp/tmp17jfsiab.swift:38:9:\
    \ note: 'gameDiffCountSumCountSum' previously declared here\n    var gameDiffCountSumCountSum\
    \ = 0\n        ^\n/tmp/tmp17jfsiab.swift:43:9: error: invalid redeclaration of\
    \ 'guessDiffCountSumCountSum'\n    var guessDiffCountSumCountSum = 0\n       \
    \ ^\n/tmp/tmp17jfsiab.swift:39:9: note: 'guessDiffCountSumCountSum' previously\
    \ declared here\n    var guessDiffCountSumCountSum = 0\n        ^\n/tmp/tmp17jfsiab.swift:47:9:\
    \ error: invalid redeclaration of 'guessDiffSumCountSumCountSum'\n    var guessDiffSumCountSumCountSum\
    \ = 0\n        ^\n/tmp/tmp17jfsiab.swift:45:9: note: 'guessDiffSumCountSumCountSum'\
    \ previously declared here\n    var guessDiffSumCountSumCountSum = 0\n       \
    \ ^\n/tmp/tmp17jfsiab.swift:53:9: error: invalid redeclaration of 'guessDiffSumCountSumCountSumCountSum'\n\
    \    var guessDiffSumCountSumCountSumCountSum = 0\n        ^\n/tmp/tmp17jfsiab.swift:51:9:\
    \ note: 'guessDiffSumCountSumCountSumCountSum' previously declared here\n    var\
    \ guessDiffSumCountSumCountSumCountSum = 0\n        ^\n/tmp/tmp17jfsiab.swift:63:9:\
    \ error: invalid redeclaration of 'guessDiffSumCountSumCountSumCountSumCountSumCountSum'\n\
    \    var guessDiffSumCountSumCountSumCountSumCountSumCountSum = 0\n        ^\n\
    /tmp/tmp17jfsiab.swift:61:9: note: 'guessDiffSumCountSumCountSumCountSumCountSumCountSum'\
    \ previously declared here\n    var guessDiffSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0\n        ^\n/tmp/tmp17jfsiab.swift:65:9: error: invalid redeclaration of\
    \ 'guessDiffSumCountSumCountSumCountSumCountSumCountSum'\n    var guessDiffSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0\n        ^\n/tmp/tmp17jfsiab.swift:61:9: note: 'guessDiffSumCountSumCountSumCountSumCountSumCountSum'\
    \ previously declared here\n    var guessDiffSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0\n        ^\n/tmp/tmp17jfsiab.swift:66:9: error: invalid redeclaration of\
    \ 'gameDiffCountSumCountSumCountSumCountSumCountSumCountSum'\n    var gameDiffCountS"
  stdout: ''
  timestamp: 1659824893
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var index = 0\n    while index < game.count\
    \ {\n        if game[index] == guess[index] {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[index] - guess[index]))\n\
    \        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i\
    \ < game.count && j < guess.count {\n        if game[i] == guess[j] {\n      \
    \      result.append(0)\n            i += 1\n            j += 1\n        } else\
    \ if game[i] > guess[j] {\n            result.append(abs(game[i] - guess[j]))\n\
    \            i += 1\n        } else {\n            result.append(abs(guess[j]\
    \ - game[i]))\n            j += 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmppbctvcj2/tmppbctvcj2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c206e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c203ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c203dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c203dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbctvcj2                        0x000055d3c035c6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b6c208d2460 __libc_start_main +
    245

    6    tmppbctvcj2                        0x000055d3c035c219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    var i\
    \ = 0\n    for j in 0..<game.count {\n        if game[j] == guess[j] {\n     \
    \       result[i] = 0\n        } else {\n            result[i] = abs(game[j] -\
    \ guess[j])\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    var scores\
    \ = [Int](repeating: 0, count: game.count)\n    var guesses = [Int](repeating:\
    \ 0, count: game.count)\n    \n    for i in 0..<game.count {\n        scores[i]\
    \ = game[i]\n        guesses[i] = guess[i]\n    }\n    \n    for i in 0..<game.count\
    \ {\n        if scores[i] == guesses[i] {\n            result[i] = 0\n       \
    \ } else {\n            result[i] = abs(scores[i] - guesses[i])\n        }\n \
    \   }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824893
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScoreDiff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpprtpxoxc.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScoreDiff\n        ^\n"
  stdout: ''
  timestamp: 1659824891
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[result.count-1]\
    \ = gameIndex - guessIndex\n            gameIndex += 1\n            guessIndex\
    \ += 1\n        } else {\n            result[result.count-1] = abs(game[gameIndex]\
    \ - guess[guessIndex])\n            gameIndex += 1\n            guessIndex +=\
    \ 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ffed03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ffe9fa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1ffe9fa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1ffe9fa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1ffe9f9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1ffe7f97ec <unavailable> + 186348

    6    tmp162x9798                        0x000055608a4cedb4 <unavailable> + 7604

    7    tmp162x9798                        0x000055608a4ce593 <unavailable> + 5523

    8    libc.so.6                          0x00002b1ffeeef460 __libc_start_main +
    245

    9    tmp162x9798                        0x000055608a4ce209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824893
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    var i\
    \ = 0\n    for _ in 0..<game.count {\n        if game[i] == guess[i] {\n     \
    \       result[i] = 0\n        } else {\n            result[i] = abs(game[i] -\
    \ guess[i])\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824893
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    var i\
    \ = 0\n    while i < game.count {\n        if game[i] == guess[i] {\n        \
    \    result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824893
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    for i in 0..<game.count {\n        gameScore += game[i]\n        guessScore\
    \ += guess[i]\n    }\n    for i in 0..<guess.count {\n        let diff = abs(guessScore\
    \ - gameScore)\n        result.append(diff)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpbhnx5kod/tmpbhnx5kod.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b144711ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1446e15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1446e15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1446e147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhnx5kod                        0x00005598bcc97824 <unavailable> + 6180

    5    libc.so.6                          0x00002b144730a460 __libc_start_main +
    245

    6    tmpbhnx5kod                        0x00005598bcc97399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824893
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[gameIndex] =\
    \ 0\n            gameIndex += 1\n            guessIndex += 1\n        } else if\
    \ game[gameIndex] > guess[guessIndex] {\n            result[gameIndex] = game[gameIndex]\
    \ - guess[guessIndex]\n            gameIndex += 1\n        } else {\n        \
    \    result[gameIndex] = guess[guessIndex] - game[gameIndex]\n            guessIndex\
    \ += 1\n        }\n    }\n    while gameIndex < game.count {\n        result[gameIndex]\
    \ = game[gameIndex] - guess[guessIndex]\n        gameIndex += 1\n        guessIndex\
    \ += 1\n    }\n    while guessIndex < guess.count {\n        result[guessIndex]\
    \ = guess[guessIndex] - game[gameIndex]\n        guessIndex += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b091d51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b091d213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b091d213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b091d21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b091d212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b091d0127ec <unavailable> + 186348

    6    tmpe47bv2bq                        0x0000563b2dc24c74 <unavailable> + 7284

    7    tmpe47bv2bq                        0x0000563b2dc244b3 <unavailable> + 5299

    8    libc.so.6                          0x00002b091d708460 __libc_start_main +
    245

    9    tmpe47bv2bq                        0x0000563b2dc24129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var scores = [Int]()\n    var guesses\
    \ = [Int]()\n    var gameScore = 0\n    var guessScore = 0\n    var gameGuess\
    \ = 0\n    var guessGuess = 0\n    var gameScoreDiff = 0\n    var guessScoreDiff\
    \ = 0\n    var gameGuessDiff = 0\n    var guessGuessDiff = 0\n    var gameScoreDiffIndex\
    \ = 0\n    var guessScoreDiffIndex = 0\n    var gameGuessDiffIndex = 0\n    var\
    \ guessGuessDiffIndex = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2\
    \ = 0\n    var gameGuessDiffIndex2 = 0\n    var guessGuessDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameGuessDiffIndex3\
    \ = 0\n    var guessGuessDiffIndex3 = 0\n    var gameScoreDiffIndex4 = 0\n   \
    \ var guessScoreDiffIndex4 = 0\n    var gameGuessDiffIndex4 = 0\n    var guessGuessDiffIndex4\
    \ = 0\n    var gameScoreDiffIndex5 = 0\n    var guessScoreDiffIndex5 = 0\n   \
    \ var gameGuessDiffIndex5 = 0\n    var guessGuessDiffIndex5 = 0\n    var gameScoreDiffIndex6\
    \ = 0\n    var guessScoreDiffIndex6 = 0\n    var gameGuessDiffIndex6 = 0\n   \
    \ var guessGuessDiffIndex6 = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7\
    \ = 0\n    var gameGuessDiffIndex7 = 0\n    var guessGuessDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameGuessDiffIndex8\
    \ = 0\n    var guessGuessDiffIndex8 = 0\n    var gameScoreDiffIndex9 = 0\n   \
    \ var guessScoreDiffIndex9 = 0\n    var gameGuessDiffIndex9 = 0\n    var guessGuessDiffIndex9\
    \ = 0\n    var gameScoreDiffIndex10 = 0\n    var guessScoreDiffIndex10 = 0\n \
    \   var gameGuessDiffIndex10 = 0\n    var guessGuessDiffIndex10 = 0\n    var gameScoreDiffIndex11\
    \ = 0\n    var guessScoreDiffIndex11 = 0\n    var gameGuessDiffIndex11 = 0\n \
    \   var guessGuessDiffIndex11 = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12\
    \ = 0\n    var gameGuessDiffIndex12 = 0\n    var guessGuessDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameGuessDiffIndex13\
    \ = 0\n    var guessGuessDiffIndex13 = 0\n    var gameScoreDiff\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbu100ifl.swift:78:9: error: type annotation missing in pattern\n\
    \    var gameScoreDiff\n        ^\n"
  stdout: ''
  timestamp: 1659824893
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i\
    \ < game.count && j < guess.count {\n        if game[i] == guess[j] {\n      \
    \      result.append(0)\n            i += 1\n            j += 1\n        } else\
    \ if game[i] > guess[j] {\n            result.append(abs(game[i] - guess[j]))\n\
    \            i += 1\n        } else {\n            result.append(abs(guess[j]\
    \ - game[i]))\n            j += 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmppbctvcj2/tmppbctvcj2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c206e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c203ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c203dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c203dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbctvcj2                        0x000055d3c035c6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b6c208d2460 __libc_start_main +
    245

    6    tmppbctvcj2                        0x000055d3c035c219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  gameScore += game[gameIndex]\n        guessScore += guess[guessIndex]\n   \
    \     if gameScore > guessScore {\n            gameScoreDiff = gameScore - guessScore\n\
    \            gameScoreDiffIndex = gameIndex\n            gameScore = guessScore\n\
    \            guessScoreDiff = guessScore - gameScore\n            guessScoreDiffIndex\
    \ = guessIndex\n            guessScore = gameScore\n            guessIndex = gameIndex\n\
    \            gameIndex = guessIndex\n        } else if gameScore < guessScore\
    \ {\n            gameScoreDiff = guessScore - gameScore\n            gameScoreDiffIndex\
    \ = guessIndex\n            gameScore = guessScore\n            guessScoreDiff\
    \ = gameScore - guessScore\n            guessScoreDiffIndex = gameIndex\n    \
    \        guessScore = gameScore\n            guessIndex = gameIndex\n        \
    \    gameIndex = guessIndex\n        } else {\n            gameScoreDiff = 0\n\
    \            gameScoreDiffIndex = guessIndex\n            gameScore = guessScore\n\
    \            guessScoreDiff = guessScore - gameScore\n            guessScoreDiffIndex\
    \ = gameIndex\n            guessScore = gameScore\n            guessIndex = gameIndex\n\
    \            gameIndex = guessIndex\n        }\n        result.append(gameScoreDiff)\n\
    \        result.append(guessScoreDiff)\n        gameIndex += 1\n        guessIndex\
    \ += 1\n    }\n    while gameIndex < game.count {\n        result.append(gameScore\
    \ - guessScore)\n        gameIndex += 1\n    }\n    while guessIndex < guess.count\
    \ {\n        result.append(guessScore - gameScore)\n        guessIndex += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpzyx1pqb4/tmpzyx1pqb4.swift:84: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32c0509c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32c0200b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32c0200988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32c01ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyx1pqb4                        0x00005589aa0c65b4 <unavailable> + 5556

    5    libc.so.6                          0x00002b32c06f5460 __libc_start_main +
    245

    6    tmpzyx1pqb4                        0x00005589aa0c6129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824893
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    while i < game.count {\n\
    \        if game[i] == guess[i] {\n            result.append(0)\n        } else\
    \ {\n            result.append(abs(game[i] - guess[i]))\n        }\n        i\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var scores = [Int]()\n    var guesses\
    \ = [Int]()\n    var gameScores = [Int]()\n    var guessesScores = [Int]()\n \
    \   var gameGuesses = [Int]()\n    var guessesGuesses = [Int]()\n    var gameScore\
    \ = 0\n    var guessesScore = 0\n    var gameGuess = 0\n    var guessesGuess =\
    \ 0\n    var gameScoreDiff = 0\n    var guessesScoreDiff = 0\n    var gameGuessDiff\
    \ = 0\n    var guessesGuessDiff = 0\n    var gameScoreDiffSum = 0\n    var guessesScoreDiffSum\
    \ = 0\n    var gameGuessDiffSum = 0\n    var guessesGuessDiffSum = 0\n    var\
    \ gameScoreDiffSum2 = 0\n    var guessesScoreDiffSum2 = 0\n    var gameGuessDiffSum2\
    \ = 0\n    var guessesGuessDiffSum2 = 0\n    var gameScoreDiffSum3 = 0\n    var\
    \ guessesScoreDiffSum3 = 0\n    var gameGuessDiffSum3 = 0\n    var guessesGuessDiffSum3\
    \ = 0\n    var gameScoreDiffSum4 = 0\n    var guessesScoreDiffSum4 = 0\n    var\
    \ gameGuessDiffSum4 = 0\n    var guessesGuessDiffSum4 = 0\n    var gameScoreDiffSum5\
    \ = 0\n    var guessesScoreDiffSum5 = 0\n    var gameGuessDiffSum5 = 0\n    var\
    \ guessesGuessDiffSum5 = 0\n    var gameScoreDiffSum6 = 0\n    var guessesScoreDiffSum6\
    \ = 0\n    var gameGuessDiffSum6 = 0\n    var guessesGuessDiffSum6 = 0\n    var\
    \ gameScoreDiffSum7 = 0\n    var guessesScoreDiffSum7 = 0\n    var gameGuessDiffSum7\
    \ = 0\n    var guessesGuessDiffSum7 = 0\n    var gameScoreDiffSum8 = 0\n    var\
    \ guessesScoreDiffSum8 = 0\n    var gameGuessDiffSum8 = 0\n    var guessesGuessDiffSum8\
    \ = 0\n    var gameScoreDiffSum9 = 0\n    var guessesScoreDiffSum9 = 0\n    var\
    \ gameGuessDiffSum9 = 0\n    var guessesGuessDiffSum9 = 0\n    var gameScoreDiffSum10\
    \ = 0\n    var guessesScoreDiffSum10 = 0\n    var gameGuessDiffSum10 = 0\n   \
    \ var guessesGuessDiffSum10 = 0\n    var gameScoreDiffSum11 = 0\n    var guessesScoreDiffSum11\
    \ = 0\n    var gameGuessDiffSum11 = 0\n    var guessesGuessDiffSum11 = 0\n   \
    \ var gameScoreDiffSum12 = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpqydefnvj.swift:15:9: warning: initialization of variable 'result'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var result = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpqydefnvj.swift:16:9:\
    \ warning: initialization of variable 'scores' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var scores = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmpqydefnvj.swift:17:9: warning: initialization of variable 'guesses'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guesses = [Int]()\n    ~~~~^~~~~~~\n    _\n/tmp/tmpqydefnvj.swift:18:9:\
    \ warning: initialization of variable 'gameScores' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameScores = [Int]()\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmpqydefnvj.swift:19:9: warning: initialization of variable 'guessesScores'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessesScores = [Int]()\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpqydefnvj.swift:20:9:\
    \ warning: initialization of variable 'gameGuesses' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameGuesses = [Int]()\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpqydefnvj.swift:21:9: warning: initialization of variable 'guessesGuesses'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessesGuesses = [Int]()\n    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmpqydefnvj.swift:22:9:\
    \ warning: initialization of variable 'gameScore' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameScore = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpqydefnvj.swift:23:9: warning: initialization of variable 'guessesScore'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessesScore = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpqydefnvj.swift:24:9:\
    \ warning: initialization of variable 'gameGuess' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameGuess = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpqydefnvj.swift:25"
  stdout: ''
  timestamp: 1659824893
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result.append(0)\n \
    \           gameIndex += 1\n            guessIndex += 1\n        } else if game[gameIndex]\
    \ > guess[guessIndex] {\n            result.append(abs(game[gameIndex] - guess[guessIndex]))\n\
    \            gameIndex += 1\n        } else {\n            result.append(abs(guess[guessIndex]\
    \ - game[gameIndex]))\n            guessIndex += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpenv_mr3q/tmpenv_mr3q.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdab94ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdab641b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdab641988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdab6407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpenv_mr3q                        0x000055d738c9d6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002abdabb36460 __libc_start_main +
    245

    6    tmpenv_mr3q                        0x000055d738c9d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    var k =\
    \ 0\n    while i < game.count && j < guess.count {\n        if game[i] == guess[j]\
    \ {\n            result.append(0)\n            i += 1\n            j += 1\n  \
    \      } else if game[i] > guess[j] {\n            result.append(abs(game[i] -\
    \ guess[j]))\n            i += 1\n        } else {\n            result.append(abs(guess[j]\
    \ - game[i]))\n            j += 1\n        }\n    }\n    while i < game.count\
    \ {\n        result.append(0)\n        i += 1\n    }\n    while j < guess.count\
    \ {\n        result.append(0)\n        j += 1\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpoqxcggf8/tmpoqxcggf8.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34b18d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34b15cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34b15cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34b15cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoqxcggf8                        0x00005592091c26a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b34b1ac2460 __libc_start_main +
    245

    6    tmpoqxcggf8                        0x00005592091c2219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824893
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = [0]\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[guessIndex] +=\
    \ 1\n            gameIndex += 1\n            guessIndex += 1\n        } else if\
    \ game[gameIndex] < guess[guessIndex] {\n            result[guessIndex] += 1\n\
    \            guessIndex += 1\n        } else {\n            result[gameIndex]\
    \ += 1\n            gameIndex += 1\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4aaad27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4aaaa1e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4aaaa1e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4aaaa1e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4aaaa1dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4aaa81d7ec <unavailable> + 186348

    6    tmpf_lmf14f                        0x0000562bc1b8ac2e <unavailable> + 7214

    7    tmpf_lmf14f                        0x0000562bc1b8a453 <unavailable> + 5203

    8    libc.so.6                          0x00002b4aaaf13460 __libc_start_main +
    245

    9    tmpf_lmf14f                        0x0000562bc1b8a0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824893
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    \n   \
    \ for i in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[guessIndex] =\
    \ 0\n            gameIndex += 1\n            guessIndex += 1\n        } else if\
    \ game[gameIndex] > guess[guessIndex] {\n            result[guessIndex] = game[gameIndex]\
    \ - guess[guessIndex]\n            gameIndex += 1\n        } else {\n        \
    \    result[guessIndex] = guess[guessIndex] - game[gameIndex]\n            guessIndex\
    \ += 1\n        }\n    }\n    while gameIndex < game.count {\n        result[guessIndex]\
    \ = game[gameIndex] - guess[guessIndex]\n        gameIndex += 1\n        guessIndex\
    \ += 1\n    }\n    while guessIndex < guess.count {\n        result[guessIndex]\
    \ = guess[guessIndex] - game[gameIndex]\n        guessIndex += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1bf0cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1bedc6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab1bedc6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab1bedc613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab1bedc5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab1bebc57ec <unavailable> + 186348

    6    tmp9hx1hfxu                        0x00005569021dcc74 <unavailable> + 7284

    7    tmp9hx1hfxu                        0x00005569021dc4b3 <unavailable> + 5299

    8    libc.so.6                          0x00002ab1bf2bb460 __libc_start_main +
    245

    9    tmp9hx1hfxu                        0x00005569021dc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    for index in 0..<guess.count {\n        gameScore += game[index]\n\
    \        guessScore += guess[index]\n    }\n    for index in 0..<guess.count {\n\
    \        result[index] = abs(guessScore - gameScore)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b97fe270c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97fdf67561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b97fdf67286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b97fdf6713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b97fdf66bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b97fdd667ec <unavailable> + 186348

    6    tmp2yebawvt                        0x000056266014f134 <unavailable> + 8500

    7    tmp2yebawvt                        0x000056266014e723 <unavailable> + 5923

    8    libc.so.6                          0x00002b97fe45c460 __libc_start_main +
    245

    9    tmp2yebawvt                        0x000056266014e399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824893
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[result.count-1]\
    \ = 0\n            gameIndex += 1\n            guessIndex += 1\n        } else\
    \ if game[gameIndex] > guess[guessIndex] {\n            result[result.count-1]\
    \ = game[gameIndex] - guess[guessIndex]\n            gameIndex += 1\n        }\
    \ else {\n            result[result.count-1] = guess[guessIndex] - game[gameIndex]\n\
    \            guessIndex += 1\n        }\n    }\n    while gameIndex < game.count\
    \ {\n        result[result.count-1] = game[gameIndex] - guess[guessIndex]\n  \
    \      gameIndex += 1\n        guessIndex += 1\n    }\n    while guessIndex <\
    \ guess.count {\n        result[result.count-1] = guess[guessIndex] - game[gameIndex]\n\
    \        guessIndex += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae9099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae8d90561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaae8d90286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaae8d9013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaae8d8fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaae8b917ec <unavailable> + 186348

    6    tmp2xmiu5q0                        0x000056480909ccc6 <unavailable> + 7366

    7    tmp2xmiu5q0                        0x000056480909c4b3 <unavailable> + 5299

    8    libc.so.6                          0x00002aaae9285460 __libc_start_main +
    245

    9    tmp2xmiu5q0                        0x000056480909c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824893
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var index = 0\n    while index < game.count\
    \ {\n        if game[index] == guess[index] {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[index] - guess[index]))\n\
    \        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<game.count {\n        if\
    \ game[i] == guess[i] {\n            result.append(0)\n        } else {\n    \
    \        result.append(abs(game[i] - guess[i]))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824784
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var index = 0\n    while index < game.count\
    \ {\n        if game[index] == guess[index] {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[index] - guess[index]))\n\
    \        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var index = 0\n    while index < game.count\
    \ {\n        if game[index] == guess[index] {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[index] - guess[index]))\n\
    \        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    var index\
    \ = 0\n    while index < game.count {\n        if game[index] == guess[index]\
    \ {\n            result[index] = 0\n        } else {\n            result[index]\
    \ = abs(game[index] - guess[index])\n        }\n        index += 1\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824893
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var score = 0\n    var guess = 0\n  \
    \  var game = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n\
    \    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n \
    \   var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n  \
    \  var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n   \
    \ var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var\
    \ g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l\
    \ = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q =\
    \ 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n\
    \    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n \
    \   var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n  \
    \  var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n   \
    \ var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var\
    \ q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v\
    \ = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a =\
    \ 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n\
    \    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n \
    \   var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n  \
    \  var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n   \
    \ var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var\
    \ a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f\
    \ = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k =\
    \ 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n\
    \    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n \
    \   var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n  \
    \  var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpoytmpn9h.swift:45:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpoytmpn9h.swift:19:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpoytmpn9h.swift:46:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpoytmpn9h.swift:20:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpoytmpn9h.swift:47:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpoytmpn9h.swift:21:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpoytmpn9h.swift:48:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpoytmpn9h.swift:22:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpoytmpn9h.swift:49:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpoytmpn9h.swift:23:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpoytmpn9h.swift:50:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpoytmpn9h.swift:24:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpoytmpn9h.swift:51:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpoytmpn9h.swift:25:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpoytmpn9h.swift:52:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpoytmpn9h.swift:26:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpoytmpn9h.swift:53:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpoytmpn9h.swift:27:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpoytmpn9h.swift:54:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpoytmpn9h.swift:28:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpoytmpn9h.swift:55:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpoytmpn9h.swift:29:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpoytmpn9h.swift:56:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpoytm"
  stdout: ''
  timestamp: 1659824893
