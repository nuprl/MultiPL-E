language: swift
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var largestPrimeFactor = 1\n    for i := 2; i <= n / 2; i += 1 {\n  \
    \      if n % i == 0 {\n            largestPrimeFactor = i\n            largest\
    \ = i\n        }\n    }\n    return largestPrimeFactor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpptclpcou.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n / 2; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpptclpcou.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n / 2; i +=\
    \ 1 {\n           ^\n/tmp/tmpptclpcou.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n / 2; i += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    }\n\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    var i: Int = 0\n    var j: Int = 0\n\n    for i = 2; i <= n / 2;\
    \ i += 1 {\n        if n % i == 0 {\n            for j = i; j <= n / i; j += 1\
    \ {\n                if n % j == 0 {\n                    break\n            \
    \    }\n            }\n            if j > max_factor {\n                max_factor\
    \ = j\n                max_factor_index = i\n            }\n        }\n    }\n\
    \n    return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmplxm5zt1f.swift:17:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= n / 2; i += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplxm5zt1f.swift:19:13: error: C-style for statement has been removed in\
    \ Swift 3\n            for j = i; j <= n / i; j += 1 {\n            ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = 2 // start at 2, since 2 is the smallest\
    \ factor of n\n    var maxFactorIsPrime = true // start at true, since 2 is the\
    \ smallest factor of n\n    for factor in 2...n {\n        if n % factor == 0\
    \ {\n            if !maxFactorIsPrime {\n                maxFactor = factor\n\
    \                maxFactorIsPrime = true\n            } else {\n             \
    \   // factor was already found as factor of n\n                // and was not\
    \ prime\n                maxFactorIsPrime = false\n            }\n        }\n\
    \    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmp915qhxji/tmp915qhxji.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7ab96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7ab664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7ab664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7ab6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp915qhxji                        0x0000561957d4d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae7abb59460 __libc_start_main +
    245

    6    tmp915qhxji                        0x0000561957d4cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = 2 // start at 2 since 2 > sqrt(n)\
    \ and will never be a factor\n    for factor in 2..Int(sqrt(Double(n))) { // loop\
    \ from 2 to sqrt(n)\n        if n % factor == 0 {\n            maxFactor = factor\n\
    \            break\n        }\n    }\n    return maxFactor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp9s09khta.swift:12:20: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for factor in 2..Int(sqrt(Double(n))) { // loop from\
    \ 2 to sqrt(n)\n                   ^~\n                   ...\n/tmp/tmp9s09khta.swift:12:26:\
    \ error: cannot find 'sqrt' in scope\n    for factor in 2..Int(sqrt(Double(n)))\
    \ { // loop from 2 to sqrt(n)\n                         ^~~~\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let limit = sqrt(Double(n))\n\
    \    var factor = 2\n    var prime = 1\n    while factor <= limit {\n        if\
    \ n % factor == 0 {\n            prime = factor\n            break\n        }\n\
    \        factor += 1\n    }\n    return prime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpj9bipcbp.swift:8:17: error: cannot find 'sqrt' in scope\n    let\
    \ limit = sqrt(Double(n))\n                ^~~~\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    if n == 2 {\n        return 2\n    }\n    if n ==\
    \ 3 {\n        return 3\n    }\n    if n % 2 == 0 {\n        return largest_prime_factor(n:\
    \ n / 2)\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int =\
    \ 0\n    var i: Int\n    for i = 5; i <= sqrt(n); i += 2 {\n        if n % i ==\
    \ 0 {\n            if max_factor < i {\n                max_factor = i\n     \
    \           max_factor_index = i\n            }\n        }\n    }\n    return\
    \ max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp46_7b3ly.swift:23:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 5; i <= sqrt(n); i += 2 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var factor: Int = 0\n\n\
    \    for i = 2; i <= n / 2; i += 1 {\n        factor = i\n        for j = i; j\
    \ < n; j += 1 {\n            if n % j == 0 {\n                factor = 0\n   \
    \             break\n            }\n            factor += 1\n        }\n     \
    \   if factor > max_factor {\n            max_factor = factor\n            max_factor_index\
    \ = i\n        }\n    }\n\n    return max_factor_index\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp1fhe3f6g.swift:18:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= n / 2; i += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1fhe3f6g.swift:20:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for j = i; j < n; j += 1 {\n        ^   ~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let primes = prime_factors(n)\n\
    \    return primes.reduce(max) { $0 > $1 ? $0 : $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp0_0q0v8a.swift:8:18: error: cannot find 'prime_factors' in scope\n\
    \    let primes = prime_factors(n)\n                 ^~~~~~~~~~~~~\n/tmp/tmp0_0q0v8a.swift:9:26:\
    \ error: generic parameter 'T' could not be inferred\n    return primes.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }\n                         ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let mut i = 2\n\
    \    let mut largest = 1\n    while i <= n {\n        if n % i == 0 {\n      \
    \      largest = i\n        }\n        i += 2\n    }\n    return largest\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpw70hlezg.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 2\n\
    \            ^\n/tmp/tmpw70hlezg.swift:8:13: note: join the identifiers together\n\
    \    let mut i = 2\n        ~~~~^\n        muti\n/tmp/tmpw70hlezg.swift:8:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 2\n   \
    \     ~~~~^\n        mutI\n/tmp/tmpw70hlezg.swift:9:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut largest = 1\n            ^\n/tmp/tmpw70hlezg.swift:9:13: note: join\
    \ the identifiers together\n    let mut largest = 1\n        ~~~~^~~~~~~\n   \
    \     mutlargest\n/tmp/tmpw70hlezg.swift:9:13: note: join the identifiers together\
    \ with camel-case\n    let mut largest = 1\n        ~~~~^~~~~~~\n        mutLargest\n\
    /tmp/tmpw70hlezg.swift:9:9: error: invalid redeclaration of 'mut'\n    let mut\
    \ largest = 1\n        ^\n/tmp/tmpw70hlezg.swift:8:9: note: 'mut' previously declared\
    \ here\n    let mut i = 2\n        ^\n/tmp/tmpw70hlezg.swift:10:11: error: cannot\
    \ find 'i' in scope\n    while i <= n {\n          ^\n/tmp/tmpw70hlezg.swift:11:16:\
    \ error: cannot find 'i' in scope\n        if n % i == 0 {\n               ^\n\
    /tmp/tmpw70hlezg.swift:12:13: error: cannot find 'largest' in scope\n        \
    \    largest = i\n            ^~~~~~~\n/tmp/tmpw70hlezg.swift:12:23: error: cannot\
    \ find 'i' in scope\n            largest = i\n                      ^\n/tmp/tmpw70hlezg.swift:14:9:\
    \ error: cannot find 'i' in scope\n        i += 2\n        ^\n/tmp/tmpw70hlezg.swift:16:12:\
    \ error: cannot find 'largest' in scope\n    return largest\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    var i: Int = 0\n    for i = 2; i <= n / 2; i += 1 {\n        if\
    \ n % i == 0 {\n            if max_factor < i {\n                max_factor =\
    \ i\n                max_factor_index = i\n            }\n        }\n    }\n \
    \   return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpz9n0bz7c.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= n / 2; i += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactor = factor\n\
    \            maxFactorFound = true\n        }\n    }\n    return maxFactor\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpe1vd6v2d/tmpe1vd6v2d.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0cdcd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0cd9ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0cd9ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0cd9cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe1vd6v2d                        0x000055d1e2ebc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ab0cdec3460 __libc_start_main +
    245

    6    tmpe1vd6v2d                        0x000055d1e2ebbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let limit = Int(sqrt(Double(n)))\n\
    \    var factor: Int = 0\n    for _ in 0..<limit {\n        if n % 2 == 0 {\n\
    \            factor = 2\n            break\n        }\n        if n % 3 == 0 {\n\
    \            factor = 3\n            break\n        }\n        n /= 2\n    }\n\
    \    return factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpyh21rhda.swift:8:21: error: cannot find 'sqrt' in scope\n    let\
    \ limit = Int(sqrt(Double(n)))\n                    ^~~~\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let maxFactor\
    \ = Int(sqrt(Double(n)))\n    var factor = 1\n    for factor in 2..<maxFactor\
    \ {\n        if n % factor == 0 {\n            break\n        }\n    }\n    return\
    \ factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpot0kctk5.swift:8:25: error: cannot find 'sqrt' in scope\n    let\
    \ maxFactor = Int(sqrt(Double(n)))\n                        ^~~~\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n\n    for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n      \
    \      if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpigu81mdd.swift:15:12: error: expected type\n    for i := 2; i <=\
    \ n/2; i++ {\n           ^\n            <#type#>\n/tmp/tmpigu81mdd.swift:15:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n/2; i++ {\n\
    \           ^\n/tmp/tmpigu81mdd.swift:15:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n/2; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var max_factor = 1\n    var max_factor_index =\
    \ 0\n\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if\
    \ max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpeck7vqp5.swift:15:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpeck7vqp5.swift:15:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpeck7vqp5.swift:15:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    }\n    var maxFactor = Int(2)\n    var maxFactorFound =\
    \ false\n    var factor = 2\n    for factor <= n {\n        if n % factor == 0\
    \ {\n            if maxFactorFound {\n                return factor\n        \
    \    }\n            maxFactorFound = true\n            maxFactor = factor\n  \
    \      }\n        factor++\n    }\n    return maxFactor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpkli8g8bj.swift:14:16: error: expected 'in' after for-each pattern\n\
    \    for factor <= n {\n               ^\n/tmp/tmpkli8g8bj.swift:14:16: error:\
    \ unary operator cannot be separated from its operand\n    for factor <= n {\n\
    \               ^ ~\n                 \n/tmp/tmpkli8g8bj.swift:14:16: error: '<='\
    \ is not a prefix unary operator\n    for factor <= n {\n               ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    var maxFactorFoundInt = Int()\n    for factor in 2...n {\n        if n %\
    \ factor == 0 {\n            if maxFactorFoundInt == 0 {\n                maxFactorFoundInt\
    \ = factor\n                maxFactorFound = true\n            } else {\n    \
    \            if maxFactorFoundInt != factor {\n                    maxFactorFound\
    \ = false\n                }\n            }\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactorFoundInt\n    } else {\n        return n\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpoew2kp0_/tmpoew2kp0_.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3beb5f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3beb2e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3beb2e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3beb2e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoew2kp0_                        0x000055b5ea399335 <unavailable> + 4917

    5    libc.so.6                          0x00002b3beb7de460 __libc_start_main +
    245

    6    tmpoew2kp0_                        0x000055b5ea398fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var prime = 1\n    for number in 2...n {\n        if number % prime ==\
    \ 0 {\n            largest = number\n            prime = 1\n        } else {\n\
    \            prime *= number\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp2tj0rbnb/tmp2tj0rbnb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae303077c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae302d6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae302d6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae302d6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2tj0rbnb                        0x000055b1e350d335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae303263460 __libc_start_main +
    245

    6    tmp2tj0rbnb                        0x000055b1e350cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    var factor = 2\n    while !maxFactorFound {\n        if n % factor == 0 {\n\
    \            maxFactorFound = true\n            maxFactor = factor\n        }\n\
    \        factor++\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpygmzikfu.swift:19:15: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        factor++\n              ^~\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var largest = 1\n    var largestPrimeFactor = 1\n\
    \    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if largest\
    \ < i {\n                largest = i\n            }\n            if largestPrimeFactor\
    \ < i {\n                largestPrimeFactor = i\n            }\n        }\n  \
    \  }\n    return largestPrimeFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp5p2v0oxy.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp5p2v0oxy.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp5p2v0oxy.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpe1nmiydd.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpe1nmiydd.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpe1nmiydd.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var maxFactor: Int = 0\n    var maxFactorFound:\
    \ Bool = false\n    var i: Int = 0\n    var j: Int = 0\n\n    for i = 2; i <=\
    \ n / 2; i += 1 {\n        if n % i == 0 {\n            if maxFactorFound {\n\
    \                maxFactorFound = false\n            } else {\n              \
    \  maxFactor = i\n                maxFactorFound = true\n            }\n     \
    \   }\n    }\n\n    if maxFactorFound {\n        return maxFactor\n    } else\
    \ {\n        return n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpzw_w3bhx.swift:17:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= n / 2; i += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    var max_factor_value: Int = 0\n    for i := 2; i <= n; i++ {\n\
    \        if n % i == 0 {\n            if max_factor_value < i {\n            \
    \    max_factor_value = i\n                max_factor_index = i\n            }\n\
    \            if max_factor_value == i {\n                max_factor_index += 1\n\
    \            }\n        }\n    }\n    return max_factor_value\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpklko0oct.swift:14:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpklko0oct.swift:14:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpklko0oct.swift:14:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ factors(n)\n    return factors.count > 0 ? factors.max : 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmprqkercnw.swift:8:19: error: use of local variable 'factors' before\
    \ its declaration\n    let factors = factors(n)\n                  ^\n/tmp/tmprqkercnw.swift:8:9:\
    \ note: 'factors' declared here\n    let factors = factors(n)\n        ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = 2 // largest prime factor of n\n\
    \    var maxFactorFound = true // whether maxFactor is prime\n    var isPrime\
    \ = true\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n           \
    \ isPrime = false\n            break\n        }\n    }\n    if isPrime {\n   \
    \     return n\n    }\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n\
    \            if maxFactorFound {\n                maxFactor = i\n            }\
    \ else {\n                maxFactorFound = true\n            }\n        }\n  \
    \  }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpc6zgjgvo.swift:14:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpc6zgjgvo.swift:14:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpc6zgjgvo.swift:14:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n/tmp/tmpc6zgjgvo.swift:23:12:\
    \ error: expected type\n    for i := 2; i <= n; i++ {\n           ^\n        \
    \    <#type#>\n/tmp/tmpc6zgjgvo.swift:23:12: error: expected 'in' after for-each\
    \ pattern\n    for i := 2; i <= n; i++ {\n           ^\n/tmp/tmpc6zgjgvo.swift:23:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int\
    \ = 0\n    var i: Int = 0\n    var j: Int = 0\n    var p: Int = 0\n    var q:\
    \ Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var\
    \ u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n   \
    \ var y: Int = 0\n    var z: Int = 0\n    var w: Int = 0\n    var a: Int = 0\n\
    \    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int =\
    \ 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int\
    \ = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m:\
    \ Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var\
    \ q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n   \
    \ var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n\
    \    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int =\
    \ 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int\
    \ = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j:\
    \ Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var\
    \ n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n   \
    \ var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n\
    \    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int =\
    \ 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int\
    \ = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g:\
    \ Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var\
    \ k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n   \
    \ var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n\
    \    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int =\
    \ 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int\
    \ = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d:\
    \ Int = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp97g4djk_.swift:22:9: error: invalid redeclaration of 'w'\n    var\
    \ w: Int = 0\n        ^\n/tmp/tmp97g4djk_.swift:18:9: note: 'w' previously declared\
    \ here\n    var w: Int = 0\n        ^\n/tmp/tmp97g4djk_.swift:31:9: error: invalid\
    \ redeclaration of 'i'\n    var i: Int = 0\n        ^\n/tmp/tmp97g4djk_.swift:9:9:\
    \ note: 'i' previously declared here\n    var i: Int = 0\n        ^\n/tmp/tmp97g4djk_.swift:32:9:\
    \ error: invalid redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmp97g4djk_.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmp97g4djk_.swift:35:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp97g4djk_.swift:13:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmp97g4djk_.swift:36:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp97g4djk_.swift:14:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp97g4djk_.swift:38:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp97g4djk_.swift:11:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp97g4djk_.swift:39:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp97g4djk_.swift:12:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp97g4djk_.swift:42:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmp97g4djk_.swift:15:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmp97g4djk_.swift:43:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmp97g4djk_.swift:16:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n        ^\n/tmp/tmp97g4djk_.swift:44:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int = 0\n        ^\n/tmp/tmp97g4djk_.swift:17:9:\
    \ note: 'v' previously declared here\n    var v: Int = 0\n        ^\n/tmp/tmp97g4djk_.swift:45:9:\
    \ error: invalid redeclaration of 'w'\n    var w: Int = 0\n        ^\n/tmp/tmp97g4djk_.swift:18:9:\
    \ note: 'w' previously declared here\n    var w: Int = 0\n  "
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    if n == 2 {\n        return 2\n    }\n    if n ==\
    \ 3 {\n        return 3\n    }\n    if n % 2 == 0 {\n        return largest_prime_factor(n:\
    \ n / 2)\n    }\n    if n % 3 == 0 {\n        return largest_prime_factor(n: n\
    \ / 3)\n    }\n    var max_factor: Int\n    var max_factor_index: Int\n    for\
    \ max_factor_index in 2...n {\n        if n % max_factor_index == 0 {\n      \
    \      continue\n        }\n        if max_factor_index * max_factor_index > n\
    \ {\n            break\n        }\n        max_factor = max_factor_index\n   \
    \ }\n    return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpvvdc52p0.swift:24:9: warning: variable 'max_factor_index' was never\
    \ used; consider replacing with '_' or removing it\n    var max_factor_index:\
    \ Int\n        ^~~~~~~~~~~~~~~~\n        _\n/tmp/tmpvvdc52p0.swift:34:12: error:\
    \ variable 'max_factor' used before being initialized\n    return max_factor\n\
    \           ^\n/tmp/tmpvvdc52p0.swift:23:9: note: variable defined here\n    var\
    \ max_factor: Int\n        ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound == false {\n           \
    \     maxFactor = factor\n                maxFactorFound = true\n            }\
    \ else {\n                if maxFactor < factor {\n                    maxFactor\
    \ = factor\n                }\n            }\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpnlx1mvuu/tmpnlx1mvuu.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a53a3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a53734b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a53734988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a537337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnlx1mvuu                        0x000056104d6af335 <unavailable> + 4917

    5    libc.so.6                          0x00002b1a53c29460 __libc_start_main +
    245

    6    tmpnlx1mvuu                        0x000056104d6aefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var factor = 2\n    var i = 1\n    while i <= n {\n        if n % i ==\
    \ 0 {\n            largest = factor\n            factor = 1\n        } else {\n\
    \            factor++\n        }\n        i += 1\n    }\n    return largest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpcc97pdum.swift:16:19: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            factor++\n                  ^~\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpsllmwb63.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpsllmwb63.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                break\n\
    \            } else {\n                maxFactorFound = true\n               \
    \ maxFactor = factor\n            }\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpx3_2ohyq/tmpx3_2ohyq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60218e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60215dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60215da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60215d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx3_2ohyq                        0x0000561df28b5335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6021acf460 __libc_start_main +
    245

    6    tmpx3_2ohyq                        0x0000561df28b4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var factor = 2\n    while n > 1 {\n        if n % factor == 0 {\n   \
    \         largest = factor\n        }\n        n /= factor\n        factor +=\
    \ 1\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp1s752fzp.swift:14:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= factor\n        ~ ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int\
    \ = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var p:\
    \ Int = 0\n    var q: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var\
    \ t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n   \
    \ var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n\
    \    var n: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int =\
    \ 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int\
    \ = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var m:\
    \ Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var\
    \ n: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n   \
    \ var t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var m: Int =\
    \ 0\n    var n: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int\
    \ = 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t:\
    \ Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var\
    \ m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n   \
    \ var n: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n\
    \    var t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var m: Int\
    \ = 0\n    var n: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var n:\
    \ Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var\
    \ t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n   \
    \ var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n\
    \    var n: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int =\
    \ 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int\
    \ = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var m:\
    \ Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var\
    \ n: Int = 0\n    var t: Int = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpyd9as5x0.swift:17:9: error: invalid redeclaration of 'm'\n    var\
    \ m: Int = 0\n        ^\n/tmp/tmpyd9as5x0.swift:14:9: note: 'm' previously declared\
    \ here\n    var m: Int = 0\n        ^\n/tmp/tmpyd9as5x0.swift:18:9: error: invalid\
    \ redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmpyd9as5x0.swift:15:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmpyd9as5x0.swift:19:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmpyd9as5x0.swift:16:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmpyd9as5x0.swift:20:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpyd9as5x0.swift:14:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpyd9as5x0.swift:21:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmpyd9as5x0.swift:15:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmpyd9as5x0.swift:22:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmpyd9as5x0.swift:16:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmpyd9as5x0.swift:23:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpyd9as5x0.swift:14:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpyd9as5x0.swift:24:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmpyd9as5x0.swift:15:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmpyd9as5x0.swift:25:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmpyd9as5x0.swift:16:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmpyd9as5x0.swift:26:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpyd9as5x0.swift:14:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpyd9as5x0.swift:27:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmpyd9as5x0.swift:15:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n "
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    var i: Int = 0\n    for i = 2; i <= n / 2; i += 1 {\n        if\
    \ n % i == 0 {\n            if max_factor < i {\n                max_factor =\
    \ i\n                max_factor_index = i\n            }\n        }\n    }\n \
    \   return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpz9n0bz7c.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= n / 2; i += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    if maxFactorFound {\n        return maxFactor\n\
    \    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpd1axbmib/tmpd1axbmib.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cd3785c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cd347cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cd347c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cd347b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd1axbmib                        0x000055d937cff3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b6cd3971460 __libc_start_main +
    245

    6    tmpd1axbmib                        0x000055d937cfefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largestPrimeFactor\
    \ = Int(1)\n    var largestPrimeFactorIsPrime = true\n    for factor in 2...n\
    \ {\n        if n % factor == 0 {\n            if largestPrimeFactorIsPrime {\n\
    \                largestPrimeFactor = factor\n            }\n            else\
    \ {\n                largestPrimeFactorIsPrime = false\n            }\n      \
    \  }\n    }\n    return largestPrimeFactor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpsplunvnm/tmpsplunvnm.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b219b473c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b219b16ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b219b16a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b219b1697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsplunvnm                        0x000055b047ea6335 <unavailable> + 4917

    5    libc.so.6                          0x00002b219b65f460 __libc_start_main +
    245

    6    tmpsplunvnm                        0x000055b047ea5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var largest = 1\n    var largestPrimeFactor = 1\n\
    \    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            largest =\
    \ i\n            largestPrimeFactor = i\n        }\n    }\n    return largestPrimeFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpcj6mfbte.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpcj6mfbte.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpcj6mfbte.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largestPrimeFactor\
    \ = Int(1)\n    var largestPrimeFactorIsPrime = true\n    for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if factor * factor > n {\n\
    \                largestPrimeFactor = factor\n                largestPrimeFactorIsPrime\
    \ = false\n            } else {\n                if factor > largestPrimeFactor\
    \ {\n                    largestPrimeFactor = factor\n                    largestPrimeFactorIsPrime\
    \ = true\n                }\n            }\n        }\n    }\n    if largestPrimeFactorIsPrime\
    \ {\n        return largestPrimeFactor\n    } else {\n        return n\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpphp8f8tn.swift:10:20: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n     \
    \              ^~\n                   ...\n/tmp/tmpphp8f8tn.swift:10:26: error:\
    \ cannot find 'sqrt' in scope\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n\
    \                         ^~~~\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var factor = 2\n    for _ in 0..<n {\n        if n % factor == 0 {\n\
    \            largest = factor\n        }\n        factor += 1\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpj8ghkwmx/tmpj8ghkwmx.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e09f42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e09c39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e09c39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e09c387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj8ghkwmx                        0x0000556c9a8ea335 <unavailable> + 4917

    5    libc.so.6                          0x00002b0e0a12e460 __libc_start_main +
    245

    6    tmpj8ghkwmx                        0x0000556c9a8e9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var largest = 1\n    var largestPrimeFactor = 1\n\
    \    for i := 2; i <= n / 2; i += 1 {\n        if n % i == 0 {\n            largestPrimeFactor\
    \ = i\n            if largest < largestPrimeFactor {\n                largest\
    \ = largestPrimeFactor\n            }\n        }\n    }\n    return largest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp0izdodkc.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n / 2; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp0izdodkc.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n / 2; i +=\
    \ 1 {\n           ^\n/tmp/tmp0izdodkc.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n / 2; i += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpltli3tit/tmpltli3tit.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac41ba58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac41b74fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac41b74f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac41b74e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltli3tit                        0x000055c0b35053b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac41bc44460 __libc_start_main +
    245

    6    tmpltli3tit                        0x000055c0b3504fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            } else {\n                maxFactorFound = true\n      \
    \          maxFactor = factor\n            }\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    } else {\n        return n\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpp8il15x8/tmpp8il15x8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0a3e77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0a3b6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0a3b6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0a3b6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8il15x8                        0x00005650038853b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae0a4063460 __libc_start_main +
    245

    6    tmpp8il15x8                        0x0000565003884fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var divisor = 2\n    while divisor <= n {\n        if n % divisor ==\
    \ 0 {\n            largest = divisor\n        }\n        divisor += 1\n    }\n\
    \    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmp896mpj3v/tmp896mpj3v.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc246cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc243c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc243c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc243c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp896mpj3v                        0x000055cbc9171245 <unavailable> + 4677

    5    libc.so.6                          0x00002acc248ba460 __libc_start_main +
    245

    6    tmp896mpj3v                        0x000055cbc9170ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    if n ==\
    \ 3 {\n        return 2\n    }\n    if n % 2 == 0 {\n        return largest_prime_factor(n:\
    \ n / 2)\n    }\n    if n % 3 == 0 {\n        return largest_prime_factor(n: n\
    \ / 3)\n    }\n    var max: Int = 0\n    var i: Int = 0\n    for i = 2; i <= Int(sqrt(Double(n)));\
    \ i++ {\n        if n % i == 0 {\n            if max < i {\n                max\
    \ = i\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmps61x851n.swift:25:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= Int(sqrt(Double(n))); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let primes = prime_factors(n)\n\
    \    return primes.reduce(max) { $0 > $1 ? $0 : $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp0_0q0v8a.swift:8:18: error: cannot find 'prime_factors' in scope\n\
    \    let primes = prime_factors(n)\n                 ^~~~~~~~~~~~~\n/tmp/tmp0_0q0v8a.swift:9:26:\
    \ error: generic parameter 'T' could not be inferred\n    return primes.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }\n                         ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = 2 // largest prime factor of n\n\
    \    var maxFactorIsPrime = true // whether maxFactor is prime\n    for factor\
    \ in 2...n {\n        if n % factor == 0 {\n            if !maxFactorIsPrime {\n\
    \                maxFactor = factor\n                maxFactorIsPrime = true\n\
    \            } else {\n                if factor > maxFactor {\n             \
    \       maxFactor = factor\n                }\n            }\n        }\n    }\n\
    \    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmp2mq8_gb9/tmp2mq8_gb9.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae351b07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3517feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3517fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3517fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2mq8_gb9                        0x0000557ccd222335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae351cf3460 __libc_start_main +
    245

    6    tmp2mq8_gb9                        0x0000557ccd221fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpsllmwb63.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpsllmwb63.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let mut i = 2\n\
    \    let mut largest = i\n    while i <= n {\n        if n % i == 0 {\n      \
    \      largest = i\n        }\n        i += 2\n    }\n    return largest\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpw96l27jr.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 2\n\
    \            ^\n/tmp/tmpw96l27jr.swift:8:13: note: join the identifiers together\n\
    \    let mut i = 2\n        ~~~~^\n        muti\n/tmp/tmpw96l27jr.swift:8:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 2\n   \
    \     ~~~~^\n        mutI\n/tmp/tmpw96l27jr.swift:9:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut largest = i\n            ^\n/tmp/tmpw96l27jr.swift:9:13: note: join\
    \ the identifiers together\n    let mut largest = i\n        ~~~~^~~~~~~\n   \
    \     mutlargest\n/tmp/tmpw96l27jr.swift:9:13: note: join the identifiers together\
    \ with camel-case\n    let mut largest = i\n        ~~~~^~~~~~~\n        mutLargest\n\
    /tmp/tmpw96l27jr.swift:9:23: error: cannot find 'i' in scope\n    let mut largest\
    \ = i\n                      ^\n/tmp/tmpw96l27jr.swift:10:11: error: cannot find\
    \ 'i' in scope\n    while i <= n {\n          ^\n/tmp/tmpw96l27jr.swift:11:16:\
    \ error: cannot find 'i' in scope\n        if n % i == 0 {\n               ^\n\
    /tmp/tmpw96l27jr.swift:12:13: error: cannot find 'largest' in scope\n        \
    \    largest = i\n            ^~~~~~~\n/tmp/tmpw96l27jr.swift:12:23: error: cannot\
    \ find 'i' in scope\n            largest = i\n                      ^\n/tmp/tmpw96l27jr.swift:14:9:\
    \ error: cannot find 'i' in scope\n        i += 2\n        ^\n/tmp/tmpw96l27jr.swift:16:12:\
    \ error: cannot find 'largest' in scope\n    return largest\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let mut largest_prime_factor\
    \ = n;\n    let mut i = 2;\n    while i * i <= largest_prime_factor {\n      \
    \  if n % i == 0 {\n            largest_prime_factor = i;\n        }\n       \
    \ i += 1;\n    }\n    return largest_prime_factor;\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp_7jb6uqu.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut largest_prime_factor\
    \ = n;\n            ^\n/tmp/tmp_7jb6uqu.swift:8:13: note: join the identifiers\
    \ together\n    let mut largest_prime_factor = n;\n        ~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \        mutlargest_prime_factor\n/tmp/tmp_7jb6uqu.swift:8:13: note: join the\
    \ identifiers together with camel-case\n    let mut largest_prime_factor = n;\n\
    \        ~~~~^~~~~~~~~~~~~~~~~~~~\n        mutLargest_prime_factor\n/tmp/tmp_7jb6uqu.swift:9:13:\
    \ error: found an unexpected second identifier in constant declaration; is there\
    \ an accidental break?\n    let mut i = 2;\n            ^\n/tmp/tmp_7jb6uqu.swift:9:13:\
    \ note: join the identifiers together\n    let mut i = 2;\n        ~~~~^\n   \
    \     muti\n/tmp/tmp_7jb6uqu.swift:9:13: note: join the identifiers together with\
    \ camel-case\n    let mut i = 2;\n        ~~~~^\n        mutI\n/tmp/tmp_7jb6uqu.swift:9:9:\
    \ error: invalid redeclaration of 'mut'\n    let mut i = 2;\n        ^\n/tmp/tmp_7jb6uqu.swift:8:9:\
    \ note: 'mut' previously declared here\n    let mut largest_prime_factor = n;\n\
    \        ^\n/tmp/tmp_7jb6uqu.swift:10:11: error: cannot find 'i' in scope\n  \
    \  while i * i <= largest_prime_factor {\n          ^\n/tmp/tmp_7jb6uqu.swift:10:15:\
    \ error: cannot find 'i' in scope\n    while i * i <= largest_prime_factor {\n\
    \              ^\n/tmp/tmp_7jb6uqu.swift:10:20: error: cannot convert value of\
    \ type '(Int) -> Int' to expected argument type 'Duration'\n    while i * i <=\
    \ largest_prime_factor {\n                   ^\n/tmp/tmp_7jb6uqu.swift:11:16:\
    \ error: cannot find 'i' in scope\n        if n % i == 0 {\n               ^\n\
    /tmp/tmp_7jb6uqu.swift:12:36: error: cannot find 'i' in scope\n            largest_prime_factor\
    \ = i;\n                                   ^\n/tmp/tmp_7jb6uqu.swift:12:13: error:\
    \ cannot assign to value: 'largest_prime_factor' is a function\n            largest_prime_factor\
    \ = i;\n            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_7jb6uqu.swift:14:9: error:\
    \ cannot find 'i' in scope\n        i += 1;\n    "
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    let largest = factors.max()\n    return largest\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpzzjmslvk.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpz4a_l67g.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpz4a_l67g.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpz4a_l67g.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n / 2; i += 1 {\n        if n % i == 0 {\n   \
    \         if max_factor < i {\n                max_factor = i\n              \
    \  max_factor_index = i\n            }\n        }\n    }\n    return max_factor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmptyqeprwf.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n / 2; i += 1 {\n           ^\n            <#type#>\n/tmp/tmptyqeprwf.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n / 2; i +=\
    \ 1 {\n           ^\n/tmp/tmptyqeprwf.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n / 2; i += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpsllmwb63.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpsllmwb63.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = 2 // start at 2 since 2 is the largest\
    \ factor\n    var maxFactorIndex = 1 // start at 1 since 1 is the largest factor\n\
    \    var factorIndex = 1\n    for factorIndex < n {\n        if n % factorIndex\
    \ == 0 {\n            if factorIndex > maxFactorIndex {\n                maxFactorIndex\
    \ = factorIndex\n                maxFactor = factorIndex\n            }\n    \
    \    }\n        factorIndex += 1\n    }\n    return maxFactor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpjb7rta87.swift:14:21: error: expected 'in' after for-each pattern\n\
    \    for factorIndex < n {\n                    ^\n/tmp/tmpjb7rta87.swift:14:21:\
    \ error: unary operator cannot be separated from its operand\n    for factorIndex\
    \ < n {\n                    ^~\n                     \n/tmp/tmpjb7rta87.swift:14:21:\
    \ error: '<' is not a prefix unary operator\n    for factorIndex < n {\n     \
    \               ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    if maxFactorFound {\n        return maxFactor\n\
    \    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpd1axbmib/tmpd1axbmib.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cd3785c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cd347cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cd347c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cd347b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd1axbmib                        0x000055d937cff3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b6cd3971460 __libc_start_main +
    245

    6    tmpd1axbmib                        0x000055d937cfefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let mut i = 2\n\
    \    let mut largest = 1\n    while i <= n {\n        if n % i == 0 {\n      \
    \      largest = i\n        }\n        i += 2\n    }\n    return largest\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpw70hlezg.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 2\n\
    \            ^\n/tmp/tmpw70hlezg.swift:8:13: note: join the identifiers together\n\
    \    let mut i = 2\n        ~~~~^\n        muti\n/tmp/tmpw70hlezg.swift:8:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 2\n   \
    \     ~~~~^\n        mutI\n/tmp/tmpw70hlezg.swift:9:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut largest = 1\n            ^\n/tmp/tmpw70hlezg.swift:9:13: note: join\
    \ the identifiers together\n    let mut largest = 1\n        ~~~~^~~~~~~\n   \
    \     mutlargest\n/tmp/tmpw70hlezg.swift:9:13: note: join the identifiers together\
    \ with camel-case\n    let mut largest = 1\n        ~~~~^~~~~~~\n        mutLargest\n\
    /tmp/tmpw70hlezg.swift:9:9: error: invalid redeclaration of 'mut'\n    let mut\
    \ largest = 1\n        ^\n/tmp/tmpw70hlezg.swift:8:9: note: 'mut' previously declared\
    \ here\n    let mut i = 2\n        ^\n/tmp/tmpw70hlezg.swift:10:11: error: cannot\
    \ find 'i' in scope\n    while i <= n {\n          ^\n/tmp/tmpw70hlezg.swift:11:16:\
    \ error: cannot find 'i' in scope\n        if n % i == 0 {\n               ^\n\
    /tmp/tmpw70hlezg.swift:12:13: error: cannot find 'largest' in scope\n        \
    \    largest = i\n            ^~~~~~~\n/tmp/tmpw70hlezg.swift:12:23: error: cannot\
    \ find 'i' in scope\n            largest = i\n                      ^\n/tmp/tmpw70hlezg.swift:14:9:\
    \ error: cannot find 'i' in scope\n        i += 2\n        ^\n/tmp/tmpw70hlezg.swift:16:12:\
    \ error: cannot find 'largest' in scope\n    return largest\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let max: Int =\
    \ Int(sqrt(Double(n)))\n    var factor: Int = 0\n    var i: Int = 0\n    while\
    \ i < max {\n        if n % i == 0 {\n            factor = i\n            i +=\
    \ 1\n        }\n        i += 1\n    }\n    return factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp4ljw610r.swift:8:24: error: cannot find 'sqrt' in scope\n    let\
    \ max: Int = Int(sqrt(Double(n)))\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpe1nmiydd.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpe1nmiydd.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpe1nmiydd.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var largestPrimeFactor = 1\n    for factor in 2...n {\n        if n %\
    \ factor == 0 {\n            if largest < factor {\n                largest =\
    \ factor\n                largestPrimeFactor = factor\n            }\n       \
    \ } else {\n            if largest == factor {\n                largestPrimeFactor\
    \ = factor\n            }\n        }\n    }\n    return largestPrimeFactor\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpo2pzfqzq/tmpo2pzfqzq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba385facc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba385ca3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba385ca3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba385ca27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo2pzfqzq                        0x0000560adda83335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba386198460 __libc_start_main +
    245

    6    tmpo2pzfqzq                        0x0000560adda82fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            } else {\n                maxFactorFound = true\n      \
    \          maxFactor = factor\n            }\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    } else {\n        return 0\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpre13f2r1/tmpre13f2r1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81c8ca8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81c899fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81c899f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81c899e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpre13f2r1                        0x000056142660a3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b81c8e94460 __libc_start_main +
    245

    6    tmpre13f2r1                        0x0000561426609fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var largestPrimeFactor = 1\n    for i := 2; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            if largest == 1 {\n                largest = i\n \
    \               largestPrimeFactor = i\n            } else {\n               \
    \ if largestPrimeFactor % i == 0 {\n                    largestPrimeFactor = i\n\
    \                } else {\n                    largest = i\n                 \
    \   largestPrimeFactor = i\n                }\n            }\n        }\n    }\n\
    \    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpiwqxmhu_.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpiwqxmhu_.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpiwqxmhu_.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let mut i = 2\n\
    \    let mut largest = 1\n    while i <= n {\n        if n % i == 0 {\n      \
    \      largest = i\n        }\n        i += 2\n    }\n    return largest\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpw70hlezg.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 2\n\
    \            ^\n/tmp/tmpw70hlezg.swift:8:13: note: join the identifiers together\n\
    \    let mut i = 2\n        ~~~~^\n        muti\n/tmp/tmpw70hlezg.swift:8:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 2\n   \
    \     ~~~~^\n        mutI\n/tmp/tmpw70hlezg.swift:9:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut largest = 1\n            ^\n/tmp/tmpw70hlezg.swift:9:13: note: join\
    \ the identifiers together\n    let mut largest = 1\n        ~~~~^~~~~~~\n   \
    \     mutlargest\n/tmp/tmpw70hlezg.swift:9:13: note: join the identifiers together\
    \ with camel-case\n    let mut largest = 1\n        ~~~~^~~~~~~\n        mutLargest\n\
    /tmp/tmpw70hlezg.swift:9:9: error: invalid redeclaration of 'mut'\n    let mut\
    \ largest = 1\n        ^\n/tmp/tmpw70hlezg.swift:8:9: note: 'mut' previously declared\
    \ here\n    let mut i = 2\n        ^\n/tmp/tmpw70hlezg.swift:10:11: error: cannot\
    \ find 'i' in scope\n    while i <= n {\n          ^\n/tmp/tmpw70hlezg.swift:11:16:\
    \ error: cannot find 'i' in scope\n        if n % i == 0 {\n               ^\n\
    /tmp/tmpw70hlezg.swift:12:13: error: cannot find 'largest' in scope\n        \
    \    largest = i\n            ^~~~~~~\n/tmp/tmpw70hlezg.swift:12:23: error: cannot\
    \ find 'i' in scope\n            largest = i\n                      ^\n/tmp/tmpw70hlezg.swift:14:9:\
    \ error: cannot find 'i' in scope\n        i += 2\n        ^\n/tmp/tmpw70hlezg.swift:16:12:\
    \ error: cannot find 'largest' in scope\n    return largest\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    var factor = 2\n    while !maxFactorFound\
    \ {\n        if n % factor == 0 {\n            maxFactorFound = true\n       \
    \     maxFactor = factor\n        }\n        factor += 1\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp637_jo1u/tmp637_jo1u.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82b9bd2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82b98c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82b98c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82b98c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp637_jo1u                        0x0000560cc65fb245 <unavailable> + 4677

    5    libc.so.6                          0x00002b82b9dbe460 __libc_start_main +
    245

    6    tmp637_jo1u                        0x0000560cc65faef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor: Int = 0\n    var maxFactorFound =\
    \ false\n    for factor in 2...n {\n        if n % factor == 0 {\n           \
    \ if !maxFactorFound {\n                maxFactor = factor\n                maxFactorFound\
    \ = true\n            } else {\n                if maxFactor < factor {\n    \
    \                maxFactor = factor\n                }\n            }\n      \
    \  }\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpp3bbbo10/tmpp3bbbo10.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f71081c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f70d78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f70d78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f70d777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3bbbo10                        0x000055e659efa335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7f7126d460 __libc_start_main +
    245

    6    tmpp3bbbo10                        0x000055e659ef9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpe1nmiydd.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpe1nmiydd.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpe1nmiydd.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int(2)\n    var maxFactorFound =\
    \ false\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n\
    \    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp5175csd4.swift:13:20: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n     \
    \              ^~\n                   ...\n/tmp/tmp5175csd4.swift:13:26: error:\
    \ cannot find 'sqrt' in scope\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n\
    \                         ^~~~\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactor = factor\n\
    \            maxFactorFound = true\n        }\n    }\n    if maxFactorFound {\n\
    \        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpxxxa_0ip/tmpxxxa_0ip.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1852bb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18528aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18528ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18528ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxxxa_0ip                        0x000055a8bef103b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b1852da3460 __libc_start_main +
    245

    6    tmpxxxa_0ip                        0x000055a8bef0ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    for factor in 2...n {\n        if n % factor == 0 {\n            largest\
    \ = factor\n            break\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpn52e_0d5/tmpn52e_0d5.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaea7c53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaea794ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaea794a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaea79497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn52e_0d5                        0x00005638f5465335 <unavailable> + 4917

    5    libc.so.6                          0x00002aaea7e3f460 __libc_start_main +
    245

    6    tmpn52e_0d5                        0x00005638f5464fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let maxPrimeFactor\
    \ = primeFactors(n)\n    return maxPrimeFactor.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpm9vhetpz.swift:8:26: error: cannot find 'primeFactors' in scope\n\
    \    let maxPrimeFactor = primeFactors(n)\n                         ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor: Int = 0\n    var maxFactorFound =\
    \ false\n    for factor in 2...n {\n        if n % factor == 0 {\n           \
    \ if maxFactorFound {\n                return factor\n            }\n        \
    \    maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n\
    \    if maxFactorFound {\n        return maxFactor\n    }\n    return n\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpuzvdgnjj/tmpuzvdgnjj.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b562e701c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b562e3f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b562e3f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b562e3f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuzvdgnjj                        0x000056327b68c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b562e8ed460 __libc_start_main +
    245

    6    tmpuzvdgnjj                        0x000056327b68bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    var divisor = 2\n    while !maxFactorFound\
    \ {\n        if n % divisor == 0 {\n            maxFactorFound = true\n      \
    \      maxFactor = divisor\n        }\n        divisor++\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpkb9ptdsg.swift:16:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    for i := 2; i <= n/2; i += 1\
    \ {\n        if n % i == 0 {\n            if max_factor < i {\n              \
    \  max_factor = i\n                max_factor_index = i\n            }\n     \
    \   }\n    }\n    return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmptoy10cfs.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n/2; i += 1 {\n           ^\n            <#type#>\n/tmp/tmptoy10cfs.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n/2; i +=\
    \ 1 {\n           ^\n/tmp/tmptoy10cfs.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n/2; i += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let limit = Int(sqrt(Double(n)))\n\
    \    var factor = 1\n    for _ in 0..<limit {\n        if n % factor == 0 {\n\
    \            factor++\n        } else {\n            break\n        }\n    }\n\
    \    return factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpy550puxf.swift:8:21: error: cannot find 'sqrt' in scope\n    let\
    \ limit = Int(sqrt(Double(n)))\n                    ^~~~\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let mut largest_prime_factor\
    \ = n.pow(2)\n    while largest_prime_factor != 1 {\n        if n % largest_prime_factor\
    \ == 0 {\n            largest_prime_factor = largest_prime_factor.pow(2)\n   \
    \     } else {\n            largest_prime_factor = largest_prime_factor.pow(3)\n\
    \        }\n    }\n    return largest_prime_factor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpcc1kse8s.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut largest_prime_factor\
    \ = n.pow(2)\n            ^\n/tmp/tmpcc1kse8s.swift:8:13: note: join the identifiers\
    \ together\n    let mut largest_prime_factor = n.pow(2)\n        ~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \        mutlargest_prime_factor\n/tmp/tmpcc1kse8s.swift:8:13: note: join the\
    \ identifiers together with camel-case\n    let mut largest_prime_factor = n.pow(2)\n\
    \        ~~~~^~~~~~~~~~~~~~~~~~~~\n        mutLargest_prime_factor\n/tmp/tmpcc1kse8s.swift:8:38:\
    \ error: value of type 'Int' has no member 'pow'\n    let mut largest_prime_factor\
    \ = n.pow(2)\n                                   ~ ^~~\n/tmp/tmpcc1kse8s.swift:9:32:\
    \ error: type '(Int) -> Int' cannot conform to 'BinaryInteger'\n    while largest_prime_factor\
    \ != 1 {\n                               ^\n/tmp/tmpcc1kse8s.swift:9:32: note:\
    \ only concrete types such as structs, enums and classes can conform to protocols\n\
    \    while largest_prime_factor != 1 {\n                               ^\n/tmp/tmpcc1kse8s.swift:9:32:\
    \ note: required by referencing operator function '!=' on 'BinaryInteger' where\
    \ 'Self' = '(Int) -> Int'\n    while largest_prime_factor != 1 {\n           \
    \                    ^\n/tmp/tmpcc1kse8s.swift:10:16: error: cannot convert value\
    \ of type '(Int) -> Int' to expected argument type 'Int'\n        if n % largest_prime_factor\
    \ == 0 {\n               ^\n/tmp/tmpcc1kse8s.swift:11:13: error: cannot assign\
    \ to value: 'largest_prime_factor' is a function\n            largest_prime_factor\
    \ = largest_prime_factor.pow(2)\n            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcc1kse8s.swift:11:57:\
    \ error: value of type '(Int) -> Int' has no member 'pow'\n            largest_prime_factor\
    \ = largest_prime_factor.pow(2)\n                                   ~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n/tmp/tmpcc1kse8s.swift:13:13: error: cannot assign to value: 'largest_prime_factor'\
    \ is a function\n            largest_prime_factor = largest_prime_factor.pow(3)\n\
    \            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcc1kse8s."
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpe1nmiydd.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpe1nmiydd.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpe1nmiydd.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    if n ==\
    \ 3 {\n        return 2\n    }\n    if n % 2 == 0 {\n        return largest_prime_factor(n:\
    \ n / 2)\n    }\n    if n % 3 == 0 {\n        return largest_prime_factor(n: n\
    \ / 3)\n    }\n    var max_factor: Int\n    var max_factor_count: Int\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if max_factor_count\
    \ == 0 {\n                max_factor = factor\n                max_factor_count\
    \ = 1\n            } else {\n                max_factor_count = max_factor_count\
    \ + 1\n                if max_factor_count == 2 {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return max_factor\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpa81j1l_w.swift:38:12: error: variable 'max_factor' used before\
    \ being initialized\n    return max_factor\n           ^\n/tmp/tmpa81j1l_w.swift:23:9:\
    \ note: variable defined here\n    var max_factor: Int\n        ^\n/tmp/tmpa81j1l_w.swift:27:16:\
    \ error: variable 'max_factor_count' used before being initialized\n         \
    \   if max_factor_count == 0 {\n               ^\n/tmp/tmpa81j1l_w.swift:24:9:\
    \ note: variable defined here\n    var max_factor_count: Int\n        ^\n/tmp/tmpa81j1l_w.swift:31:36:\
    \ error: variable 'max_factor_count' used before being initialized\n         \
    \       max_factor_count = max_factor_count + 1\n                            \
    \       ^\n/tmp/tmpa81j1l_w.swift:24:9: note: variable defined here\n    var max_factor_count:\
    \ Int\n        ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpsllmwb63.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpsllmwb63.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpsllmwb63.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpsllmwb63.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    for i : Int in 1...n {\n   \
    \     if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpjiwn5a32/tmpjiwn5a32.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8c264dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8c2344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8c2344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8c23437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjiwn5a32                        0x000055fd5583c335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac8c2839460 __libc_start_main +
    245

    6    tmpjiwn5a32                        0x000055fd5583bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int(1)\n    var maxFactorFound =\
    \ false\n    for factor in 2...n {\n        if n % factor == 0 {\n           \
    \ if !maxFactorFound {\n                maxFactor = factor\n                maxFactorFound\
    \ = true\n            } else {\n                if factor > maxFactor {\n    \
    \                maxFactor = factor\n                }\n            }\n      \
    \  }\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpfhvg64fi/tmpfhvg64fi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9896f07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9896bfeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9896bfe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9896bfd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfhvg64fi                        0x000055d317740335 <unavailable> + 4917

    5    libc.so.6                          0x00002b98970f3460 __libc_start_main +
    245

    6    tmpfhvg64fi                        0x000055d31773ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound =\
    \ false\n    var factor = 2\n\n    while !maxFactorFound {\n        if n % factor\
    \ == 0 {\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n\n        factor++\n    }\n\n    return maxFactor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpiwpkctif.swift:22:15: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        factor++\n              ^~\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            } else {\n                maxFactorFound = true\n      \
    \          maxFactor = factor\n            }\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp474rjfve/tmp474rjfve.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b535534bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5355042b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5355042988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53550417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp474rjfve                        0x000055aff1fce3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5355537460 __libc_start_main +
    245

    6    tmp474rjfve                        0x000055aff1fcdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var largestPrimeFactor = 1\n    for i := 2; i <= n/2; i += 1 {\n    \
    \    if n % i == 0 {\n            largest = i\n            largestPrimeFactor\
    \ = i\n        }\n    }\n    return largestPrimeFactor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpwcxguvki.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n/2; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpwcxguvki.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n/2; i +=\
    \ 1 {\n           ^\n/tmp/tmpwcxguvki.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n/2; i += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    var factor = 2\n    while !maxFactorFound {\n        if n % factor == 0 {\n\
    \            maxFactorFound = true\n            maxFactor = factor\n        }\n\
    \        factor++\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpwss0b7ai.swift:19:15: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        factor++\n              ^~\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpe1nmiydd.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpe1nmiydd.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpe1nmiydd.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let maxPrime =\
    \ Int(sqrt(Double(n)))\n    var factor: Int = 0\n    for prime in 2...maxPrime\
    \ {\n        if n % prime == 0 {\n            factor++\n            if factor\
    \ > maxPrime {\n                factor = 1\n            }\n        }\n    }\n\
    \    return factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpt4ikkyf8.swift:8:24: error: cannot find 'sqrt' in scope\n    let\
    \ maxPrime = Int(sqrt(Double(n)))\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if !maxFactorFound\
    \ {\n                maxFactor = factor\n                maxFactorFound = true\n\
    \            } else {\n                if factor > maxFactor {\n             \
    \       maxFactor = factor\n                }\n            }\n        }\n    }\n\
    \    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmptsw7u3dr/tmptsw7u3dr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7c45d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7c42c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7c42c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7c42c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptsw7u3dr                        0x0000564cca1f9335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad7c47bd460 __libc_start_main +
    245

    6    tmptsw7u3dr                        0x0000564cca1f8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound =\
    \ false\n    var i = 2\n    var isPrime = true\n\n    while i < n && !maxFactorFound\
    \ {\n        if n % i == 0 {\n            isPrime = false\n        }\n\n     \
    \   if isPrime {\n            if maxFactorFound == false {\n                maxFactorFound\
    \ = true\n                maxFactor = i\n            }\n        }\n\n        i\
    \ += 1\n    }\n\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpa82y9e6u/tmpa82y9e6u.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15b5e21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15b5b18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15b5b18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15b5b177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa82y9e6u                        0x000056323e0c0245 <unavailable> + 4677

    5    libc.so.6                          0x00002b15b600d460 __libc_start_main +
    245

    6    tmpa82y9e6u                        0x000056323e0bfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    var factor = 2\n    while !maxFactorFound\
    \ {\n        if n % factor == 0 {\n            maxFactorFound = true\n       \
    \     maxFactor = factor\n        }\n        factor++\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpmrgnbi6z.swift:16:15: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        factor++\n              ^~\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    var i: Int = 0\n    for i = 2; i <= n; i++ {\n        if n % i\
    \ == 0 {\n            if max_factor < i {\n                max_factor = i\n  \
    \              max_factor_index = i\n            }\n        }\n    }\n    return\
    \ max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp1p3qvx25.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpp1xma70o/tmpp1xma70o.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd2e225c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd2df1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd2df1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd2df1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1xma70o                        0x00005564c270e3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002abd2e411460 __libc_start_main +
    245

    6    tmpp1xma70o                        0x00005564c270dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let mut i = 2\n\
    \    let mut largest = i\n    while i <= n {\n        if n % i == 0 {\n      \
    \      largest = i\n        }\n        i += 2\n    }\n    return largest\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpw96l27jr.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 2\n\
    \            ^\n/tmp/tmpw96l27jr.swift:8:13: note: join the identifiers together\n\
    \    let mut i = 2\n        ~~~~^\n        muti\n/tmp/tmpw96l27jr.swift:8:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 2\n   \
    \     ~~~~^\n        mutI\n/tmp/tmpw96l27jr.swift:9:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut largest = i\n            ^\n/tmp/tmpw96l27jr.swift:9:13: note: join\
    \ the identifiers together\n    let mut largest = i\n        ~~~~^~~~~~~\n   \
    \     mutlargest\n/tmp/tmpw96l27jr.swift:9:13: note: join the identifiers together\
    \ with camel-case\n    let mut largest = i\n        ~~~~^~~~~~~\n        mutLargest\n\
    /tmp/tmpw96l27jr.swift:9:23: error: cannot find 'i' in scope\n    let mut largest\
    \ = i\n                      ^\n/tmp/tmpw96l27jr.swift:10:11: error: cannot find\
    \ 'i' in scope\n    while i <= n {\n          ^\n/tmp/tmpw96l27jr.swift:11:16:\
    \ error: cannot find 'i' in scope\n        if n % i == 0 {\n               ^\n\
    /tmp/tmpw96l27jr.swift:12:13: error: cannot find 'largest' in scope\n        \
    \    largest = i\n            ^~~~~~~\n/tmp/tmpw96l27jr.swift:12:23: error: cannot\
    \ find 'i' in scope\n            largest = i\n                      ^\n/tmp/tmpw96l27jr.swift:14:9:\
    \ error: cannot find 'i' in scope\n        i += 2\n        ^\n/tmp/tmpw96l27jr.swift:16:12:\
    \ error: cannot find 'largest' in scope\n    return largest\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    if n == 2 {\n        return 2\n    }\n    if n ==\
    \ 3 {\n        return 3\n    }\n    if n % 2 == 0 {\n        return largest_prime_factor(n\
    \ / 2)\n    }\n    if n % 3 == 0 {\n        return largest_prime_factor(n / 3)\n\
    \    }\n    var max: Int = 2\n    var i: Int = 0\n    while i < n {\n        if\
    \ n % max == 0 {\n            max = max * 3 + 1\n        } else {\n          \
    \  max = max * 3\n        }\n        i += 1\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpmmakjhyk.swift:18:37: error: missing argument label 'n:' in call\n\
    \        return largest_prime_factor(n / 2)\n                                \
    \    ^\n                                    n: \n/tmp/tmpmmakjhyk.swift:21:37:\
    \ error: missing argument label 'n:' in call\n        return largest_prime_factor(n\
    \ / 3)\n                                    ^\n                              \
    \      n: \n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    }\n    var maxFactor = Int(2)\n    var maxFactorFound =\
    \ false\n    for factor in 2...n {\n        if n % factor == 0 {\n           \
    \ if maxFactorFound {\n                return 0\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpvqbxu6uh/tmpvqbxu6uh.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b944af61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b944ac58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b944ac58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b944ac577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvqbxu6uh                        0x000055754bc2a335 <unavailable> + 4917

    5    libc.so.6                          0x00002b944b14d460 __libc_start_main +
    245

    6    tmpvqbxu6uh                        0x000055754bc29fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int\
    \ = 0\n    var i: Int = 0\n    var j: Int = 0\n    var m: Int = 0\n    var p:\
    \ Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var\
    \ t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n   \
    \ var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n\
    \    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int =\
    \ 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int\
    \ = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m:\
    \ Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var\
    \ q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n   \
    \ var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n\
    \    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int =\
    \ 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int\
    \ = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j:\
    \ Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var\
    \ n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n   \
    \ var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n\
    \    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int =\
    \ 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int\
    \ = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g:\
    \ Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var\
    \ k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n   \
    \ var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n\
    \    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int =\
    \ 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int\
    \ = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d:\
    \ Int = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpwdi6p77r.swift:31:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmpwdi6p77r.swift:9:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmpwdi6p77r.swift:32:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmpwdi6p77r.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmpwdi6p77r.swift:35:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpwdi6p77r.swift:11:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpwdi6p77r.swift:38:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmpwdi6p77r.swift:12:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmpwdi6p77r.swift:39:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmpwdi6p77r.swift:13:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmpwdi6p77r.swift:40:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmpwdi6p77r.swift:14:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmpwdi6p77r.swift:41:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmpwdi6p77r.swift:15:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmpwdi6p77r.swift:42:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmpwdi6p77r.swift:16:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmpwdi6p77r.swift:43:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmpwdi6p77r.swift:17:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n        ^\n/tmp/tmpwdi6p77r.swift:44:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int = 0\n        ^\n/tmp/tmpwdi6p77r.swift:18:9:\
    \ note: 'v' previously declared here\n    var v: Int = 0\n        ^\n/tmp/tmpwdi6p77r.swift:45:9:\
    \ error: invalid redeclaration of 'w'\n    var w: Int = 0\n        ^\n/tmp/tmpwdi6p77r.swift:19:9:\
    \ note: 'w' previously declared here\n    var w: Int = 0\n  "
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n / 2; i += 1 {\n        if n % i == 0 {\n   \
    \         if max_factor < i {\n                max_factor = i\n              \
    \  max_factor_index = i\n            }\n        }\n    }\n    return max_factor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmptyqeprwf.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n / 2; i += 1 {\n           ^\n            <#type#>\n/tmp/tmptyqeprwf.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n / 2; i +=\
    \ 1 {\n           ^\n/tmp/tmptyqeprwf.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n / 2; i += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    for factor in 2...n {\n        if n % factor == 0 {\n            largest\
    \ = factor\n            break\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpn52e_0d5/tmpn52e_0d5.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaea7c53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaea794ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaea794a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaea79497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn52e_0d5                        0x00005638f5465335 <unavailable> + 4917

    5    libc.so.6                          0x00002aaea7e3f460 __libc_start_main +
    245

    6    tmpn52e_0d5                        0x00005638f5464fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpe1nmiydd.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpe1nmiydd.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpe1nmiydd.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound == false {\n           \
    \     maxFactor = factor\n                maxFactorFound = true\n            }\
    \ else {\n                if factor > maxFactor {\n                    maxFactor\
    \ = factor\n                }\n            }\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp7uw4rl60/tmp7uw4rl60.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fb21a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fb1e97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fb1e97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fb1e967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7uw4rl60                        0x00005608b7277335 <unavailable> + 4917

    5    libc.so.6                          0x00002b2fb238c460 __libc_start_main +
    245

    6    tmp7uw4rl60                        0x00005608b7276fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound == false {\n           \
    \     maxFactorFound = true\n                maxFactor = factor\n            }\
    \ else {\n                if maxFactor < factor {\n                    maxFactor\
    \ = factor\n                }\n            }\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpno91h4cq/tmpno91h4cq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b226c244c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b226bf3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b226bf3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b226bf3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpno91h4cq                        0x000055cb9ac16335 <unavailable> + 4917

    5    libc.so.6                          0x00002b226c430460 __libc_start_main +
    245

    6    tmpno91h4cq                        0x000055cb9ac15fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor ==\
    \ 0 {\n            if largest < factor {\n                largest = factor\n \
    \           }\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpzuw7cxur.swift:9:20: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n     \
    \              ^~\n                   ...\n/tmp/tmpzuw7cxur.swift:9:26: error:\
    \ cannot find 'sqrt' in scope\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n\
    \                         ^~~~\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    for i := 2; i <= n / 2; i +=\
    \ 1 {\n        if n % i == 0 {\n            if max_factor < i {\n            \
    \    max_factor = i\n                max_factor_index = i\n            }\n   \
    \     }\n    }\n    return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp_zr2mips.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n / 2; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp_zr2mips.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n / 2; i +=\
    \ 1 {\n           ^\n/tmp/tmp_zr2mips.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n / 2; i += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            } else {\n                maxFactorFound = true\n      \
    \          maxFactor = factor\n            }\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    } else {\n        return 0\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpre13f2r1/tmpre13f2r1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81c8ca8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81c899fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81c899f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81c899e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpre13f2r1                        0x000056142660a3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b81c8e94460 __libc_start_main +
    245

    6    tmpre13f2r1                        0x0000561426609fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    let largest = factors.reduce(max) { $0 > $1 ? $1 : $0\
    \ }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpcmzicng1.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpcmzicng1.swift:9:34:\
    \ error: generic parameter 'T' could not be inferred\n    let largest = factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                                 ^\nSwift.max:1:24: note:\
    \ in call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var largestPrimeFactor = 1\n    for i := 2; i <= n / 2; i += 1 {\n  \
    \      if n % i == 0 {\n            largestPrimeFactor = i\n            if largest\
    \ < largestPrimeFactor {\n                largest = largestPrimeFactor\n     \
    \       }\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpzgit_4ji.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n / 2; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpzgit_4ji.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n / 2; i +=\
    \ 1 {\n           ^\n/tmp/tmpzgit_4ji.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n / 2; i += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor = 1\n    var max_factor_index = 0\n\
    \    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpp2182rnd.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpp2182rnd.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpp2182rnd.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    for i := 2; i <= n; i++ {\n\
    \        if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpsdd4y2fp.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpsdd4y2fp.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpsdd4y2fp.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                break\n\
    \            }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpajga2xks/tmpajga2xks.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aacbd505c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacbd1fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aacbd1fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aacbd1fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajga2xks                        0x0000561397216335 <unavailable> + 4917

    5    libc.so.6                          0x00002aacbd6f1460 __libc_start_main +
    245

    6    tmpajga2xks                        0x0000561397215fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound =\
    \ false\n    for factor in 2...n {\n        if n % factor == 0 {\n           \
    \ if maxFactorFound {\n                return factor\n            }\n        \
    \    maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n\
    \n    if maxFactorFound {\n        return maxFactor\n    }\n\n    return n\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpipddpliy/tmpipddpliy.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae720e04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae720afbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae720afb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae720afa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipddpliy                        0x000055d6d0dab3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae720ff0460 __libc_start_main +
    245

    6    tmpipddpliy                        0x000055d6d0daafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    for i : Int in 1...n {\n   \
    \     if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpjiwn5a32/tmpjiwn5a32.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8c264dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8c2344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8c2344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8c23437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjiwn5a32                        0x000055fd5583c335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac8c2839460 __libc_start_main +
    245

    6    tmpjiwn5a32                        0x000055fd5583bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let maxFactor\
    \ = sqrt(Double(n))\n    var factor = 2\n    var isPrime = true\n    while factor\
    \ <= maxFactor {\n        if n % factor == 0 {\n            isPrime = false\n\
    \            break\n        }\n        factor += 1\n    }\n    if isPrime {\n\
    \        return factor\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpc59jsesm.swift:8:21: error: cannot find 'sqrt' in scope\n    let\
    \ maxFactor = sqrt(Double(n))\n                    ^~~~\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n        \
    \    if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpzpe3yme0.swift:15:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpzpe3yme0.swift:15:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpzpe3yme0.swift:15:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpsllmwb63.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpsllmwb63.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpltli3tit/tmpltli3tit.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac41ba58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac41b74fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac41b74f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac41b74e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltli3tit                        0x000055c0b35053b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac41bc44460 __libc_start_main +
    245

    6    tmpltli3tit                        0x000055c0b3504fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int(2)\n    var maxFactorFound =\
    \ false\n    for factor in 2...n {\n        if n % factor == 0 {\n           \
    \ if maxFactorFound {\n                return factor\n            }\n        \
    \    maxFactor = factor\n            maxFactorFound = true\n        }\n    }\n\
    \    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpwuiuwt6e/tmpwuiuwt6e.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68da0d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68d9dc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68d9dc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68d9dc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuiuwt6e                        0x000055c3eb4013b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b68da2be460 __libc_start_main +
    245

    6    tmpwuiuwt6e                        0x000055c3eb400fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    for i : Int in 2..<n {\n   \
    \     if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpxpeylu_z/tmpxpeylu_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adade0cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adadddc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adadddc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adadddc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxpeylu_z                        0x000055b4e85d03b0 <unavailable> + 5040

    5    libc.so.6                          0x00002adade2ba460 __libc_start_main +
    245

    6    tmpxpeylu_z                        0x000055b4e85cffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    // Use Sieve of Eratosthenes for finding prime\
    \ factors\n    // https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n    var\
    \ primes = make([]Int, n)\n    var primeFactors = make([]Int, n)\n    var primeFactorsCount\
    \ = make([]Int, n)\n    var isPrime = make([]Bool, n)\n\n    // Initialize all\
    \ primes to 2\n    for i := 0; i < n; i++ {\n        primes[i] = 2\n        primeFactors[i]\
    \ = 1\n        primeFactorsCount[i] = 0\n        isPrime[i] = true\n    }\n\n\
    \    // Sieve of Eratosthenes\n    for i := 2; i < n; i++ {\n        if isPrime[i]\
    \ {\n            for j := i * i; j < n; j += i {\n                primes[j] =\
    \ false\n            }\n        }\n    }\n\n    // Find largest prime factor\n\
    \    for i := 0; i < n; i++ {\n        if isPrime[i] {\n            if primeFactorsCount[i]\
    \ > 0 {\n                primeFactors[i] = primeFactorsCount[i]\n            }\n\
    \            primeFactorsCount[i] = 0\n        }\n    }\n\n    return primeFactors[len(primeFactors)-1]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpqy9ganoj.swift:14:25: error: expected ',' separator\n    var primes\
    \ = make([]Int, n)\n                        ^\n                        ,\n/tmp/tmpqy9ganoj.swift:15:31:\
    \ error: expected ',' separator\n    var primeFactors = make([]Int, n)\n     \
    \                         ^\n                              ,\n/tmp/tmpqy9ganoj.swift:16:36:\
    \ error: expected ',' separator\n    var primeFactorsCount = make([]Int, n)\n\
    \                                   ^\n                                   ,\n\
    /tmp/tmpqy9ganoj.swift:17:26: error: expected ',' separator\n    var isPrime =\
    \ make([]Bool, n)\n                         ^\n                         ,\n/tmp/tmpqy9ganoj.swift:20:12:\
    \ error: expected type\n    for i := 0; i < n; i++ {\n           ^\n         \
    \   <#type#>\n/tmp/tmpqy9ganoj.swift:20:12: error: expected 'in' after for-each\
    \ pattern\n    for i := 0; i < n; i++ {\n           ^\n/tmp/tmpqy9ganoj.swift:20:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 0; i < n;\
    \ i++ {\n           ^\n/tmp/tmpqy9ganoj.swift:28:12: error: expected type\n  \
    \  for i := 2; i < n; i++ {\n           ^\n            <#type#>\n/tmp/tmpqy9ganoj.swift:28:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i < n; i++ {\n\
    \           ^\n/tmp/tmpqy9ganoj.swift:28:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i < n; i++ {\n           ^\n/tmp/tmpqy9ganoj.swift:30:20:\
    \ error: expected type\n            for j := i * i; j < n; j += i {\n        \
    \           ^\n                    <#type#>\n/tmp/tmpqy9ganoj.swift:30:20: error:\
    \ expected 'in' after for-each pattern\n            for j := i * i; j < n; j +=\
    \ i {\n                   ^\n/tmp/tmpqy9ganoj.swift:30:20: error: expected Sequence\
    \ expression for for-each loop\n            for j := i * i; j < n; j += i {\n\
    \                   ^\n/tmp/tmpqy9ganoj.swift:37:12: error: expected type\n  \
    \  for i := 0; i < n; i++ {\n           ^\n            <#type#>\n/tmp/tmpqy9ganoj.swift:37:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n\
    \           ^\n/tmp/tmpqy9ganoj.swift:37:12: error: expec"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpsllmwb63.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpsllmwb63.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            } else {\n                maxFactorFound = true\n      \
    \          maxFactor = factor\n            }\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp474rjfve/tmp474rjfve.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b535534bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5355042b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5355042988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53550417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp474rjfve                        0x000055aff1fce3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5355537460 __libc_start_main +
    245

    6    tmp474rjfve                        0x000055aff1fcdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = 2 // start at 2 since 2 is the largest\
    \ factor of 2\n    for factor in 2...n {\n        if n % factor == 0 {\n     \
    \       maxFactor = factor\n        }\n    }\n    return maxFactor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpl7vign0o/tmpl7vign0o.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b566222fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5661f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5661f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5661f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl7vign0o                        0x0000561d85f1a335 <unavailable> + 4917

    5    libc.so.6                          0x00002b566241b460 __libc_start_main +
    245

    6    tmpl7vign0o                        0x0000561d85f19fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    var factor = 2\n    for factor <= n {\n        if n % factor == 0 {\n   \
    \         if maxFactorFound == false {\n                maxFactor = factor\n \
    \               maxFactorFound = true\n            } else {\n                if\
    \ maxFactor < factor {\n                    maxFactor = factor\n             \
    \   }\n            }\n        }\n        factor++\n    }\n    if maxFactorFound\
    \ == false {\n        maxFactor = n\n    }\n    return maxFactor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpx84so6me.swift:14:16: error: expected 'in' after for-each pattern\n\
    \    for factor <= n {\n               ^\n/tmp/tmpx84so6me.swift:14:16: error:\
    \ unary operator cannot be separated from its operand\n    for factor <= n {\n\
    \               ^ ~\n                 \n/tmp/tmpx84so6me.swift:14:16: error: '<='\
    \ is not a prefix unary operator\n    for factor <= n {\n               ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var largestPrimeFactor = 1\n    for factor in 2...n {\n        if n %\
    \ factor == 0 {\n            if largest < factor {\n                largest =\
    \ factor\n                largestPrimeFactor = factor\n            }\n       \
    \ } else {\n            if largest == 1 {\n                largest = factor\n\
    \                largestPrimeFactor = factor\n            }\n        }\n    }\n\
    \    return largestPrimeFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpdpbdz4th/tmpdpbdz4th.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08505a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b085029ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b085029a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08502997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdpbdz4th                        0x0000563890c94335 <unavailable> + 4917

    5    libc.so.6                          0x00002b085078f460 __libc_start_main +
    245

    6    tmpdpbdz4th                        0x0000563890c93fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    var factor = 2\n\n    while !maxFactorFound\
    \ {\n        if n % factor == 0 {\n            maxFactorFound = true\n       \
    \     maxFactor = factor\n        }\n        factor++\n    }\n\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp3uynksm_.swift:17:15: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        factor++\n              ^~\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var largestPrimeFactor = 1\n    for factor in 2..<n {\n        if n %\
    \ factor == 0 {\n            if largest < factor {\n                largest =\
    \ factor\n                largestPrimeFactor = factor\n            }\n       \
    \ } else {\n            if largest == 1 {\n                largest = factor\n\
    \                largestPrimeFactor = factor\n            }\n        }\n    }\n\
    \    return largestPrimeFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpg_n31bek/tmpg_n31bek.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb7dad8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb7d7cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb7d7cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb7d7ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_n31bek                        0x00005637be05f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afb7dcc4460 __libc_start_main +
    245

    6    tmpg_n31bek                        0x00005637be05efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let mut i = 2\n\
    \    let mut largest = 1\n    while i <= n {\n        if n % i == 0 {\n      \
    \      largest = i\n        }\n        i += 2\n    }\n    return largest\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpw70hlezg.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 2\n\
    \            ^\n/tmp/tmpw70hlezg.swift:8:13: note: join the identifiers together\n\
    \    let mut i = 2\n        ~~~~^\n        muti\n/tmp/tmpw70hlezg.swift:8:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 2\n   \
    \     ~~~~^\n        mutI\n/tmp/tmpw70hlezg.swift:9:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut largest = 1\n            ^\n/tmp/tmpw70hlezg.swift:9:13: note: join\
    \ the identifiers together\n    let mut largest = 1\n        ~~~~^~~~~~~\n   \
    \     mutlargest\n/tmp/tmpw70hlezg.swift:9:13: note: join the identifiers together\
    \ with camel-case\n    let mut largest = 1\n        ~~~~^~~~~~~\n        mutLargest\n\
    /tmp/tmpw70hlezg.swift:9:9: error: invalid redeclaration of 'mut'\n    let mut\
    \ largest = 1\n        ^\n/tmp/tmpw70hlezg.swift:8:9: note: 'mut' previously declared\
    \ here\n    let mut i = 2\n        ^\n/tmp/tmpw70hlezg.swift:10:11: error: cannot\
    \ find 'i' in scope\n    while i <= n {\n          ^\n/tmp/tmpw70hlezg.swift:11:16:\
    \ error: cannot find 'i' in scope\n        if n % i == 0 {\n               ^\n\
    /tmp/tmpw70hlezg.swift:12:13: error: cannot find 'largest' in scope\n        \
    \    largest = i\n            ^~~~~~~\n/tmp/tmpw70hlezg.swift:12:23: error: cannot\
    \ find 'i' in scope\n            largest = i\n                      ^\n/tmp/tmpw70hlezg.swift:14:9:\
    \ error: cannot find 'i' in scope\n        i += 2\n        ^\n/tmp/tmpw70hlezg.swift:16:12:\
    \ error: cannot find 'largest' in scope\n    return largest\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpsllmwb63.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpsllmwb63.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let maxPrimeFactor\
    \ = Int(sqrt(Double(n)))\n    var primeFactors = [Int]()\n    var isPrime = [Bool]()\n\
    \    var primeFactor = 0\n    var isPrimeIndex = 0\n    var isPrimeIndex2 = 0\n\
    \    var isPrimeIndex3 = 0\n    var isPrimeIndex4 = 0\n    var isPrimeIndex5 =\
    \ 0\n    var isPrimeIndex6 = 0\n    var isPrimeIndex7 = 0\n    var isPrimeIndex8\
    \ = 0\n    var isPrimeIndex9 = 0\n    var isPrimeIndex10 = 0\n    var isPrimeIndex11\
    \ = 0\n    var isPrimeIndex12 = 0\n    var isPrimeIndex13 = 0\n    var isPrimeIndex14\
    \ = 0\n    var isPrimeIndex15 = 0\n    var isPrimeIndex16 = 0\n    var isPrimeIndex17\
    \ = 0\n    var isPrimeIndex18 = 0\n    var isPrimeIndex19 = 0\n    var isPrimeIndex20\
    \ = 0\n    var isPrimeIndex21 = 0\n    var isPrimeIndex22 = 0\n    var isPrimeIndex23\
    \ = 0\n    var isPrimeIndex24 = 0\n    var isPrimeIndex25 = 0\n    var isPrimeIndex26\
    \ = 0\n    var isPrimeIndex27 = 0\n    var isPrimeIndex28 = 0\n    var isPrimeIndex29\
    \ = 0\n    var isPrimeIndex30 = 0\n    var isPrimeIndex31 = 0\n    var isPrimeIndex32\
    \ = 0\n    var isPrimeIndex33 = 0\n    var isPrimeIndex34 = 0\n    var isPrimeIndex35\
    \ = 0\n    var isPrimeIndex36 = 0\n    var isPrimeIndex37 = 0\n    var isPrimeIndex38\
    \ = 0\n    var isPrimeIndex39 = 0\n    var isPrimeIndex40 = 0\n    var isPrimeIndex41\
    \ = 0\n    var isPrimeIndex42 = 0\n    var isPrimeIndex43 = 0\n    var isPrimeIndex44\
    \ = 0\n    var isPrimeIndex45 = 0\n    var isPrimeIndex46 = 0\n    var isPrimeIndex47\
    \ = 0\n    var isPrimeIndex48 = 0\n    var isPrimeIndex49 = 0\n    var isPrimeIndex50\
    \ = 0\n    var isPrimeIndex51 = 0\n    var isPrimeIndex52 = 0\n    var isPrimeIndex53\
    \ = 0\n    var isPrimeIndex54 = 0\n    var isPrimeIndex55 = 0\n    var isPrimeIndex56\
    \ = 0\n    var isPrimeIndex57 = 0\n    var isPrimeIndex58 = 0\n    var isPrimeIndex59\
    \ = 0\n    var isPrimeIndex60 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpwtbaa_ax.swift:8:30: error: cannot find 'sqrt' in scope\n    let\
    \ maxPrimeFactor = Int(sqrt(Double(n)))\n                             ^~~~\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    if maxFactorFound {\n        return maxFactor\n\
    \    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpd1axbmib/tmpd1axbmib.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cd3785c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cd347cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cd347c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cd347b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd1axbmib                        0x000055d937cff3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b6cd3971460 __libc_start_main +
    245

    6    tmpd1axbmib                        0x000055d937cfefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let mut i = 2\n\
    \    let mut largest = 1\n    while i <= n {\n        if n % i == 0 {\n      \
    \      largest = i\n        }\n        i += 2\n    }\n    largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpd3vur5if.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 2\n\
    \            ^\n/tmp/tmpd3vur5if.swift:8:13: note: join the identifiers together\n\
    \    let mut i = 2\n        ~~~~^\n        muti\n/tmp/tmpd3vur5if.swift:8:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 2\n   \
    \     ~~~~^\n        mutI\n/tmp/tmpd3vur5if.swift:9:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut largest = 1\n            ^\n/tmp/tmpd3vur5if.swift:9:13: note: join\
    \ the identifiers together\n    let mut largest = 1\n        ~~~~^~~~~~~\n   \
    \     mutlargest\n/tmp/tmpd3vur5if.swift:9:13: note: join the identifiers together\
    \ with camel-case\n    let mut largest = 1\n        ~~~~^~~~~~~\n        mutLargest\n\
    /tmp/tmpd3vur5if.swift:9:9: error: invalid redeclaration of 'mut'\n    let mut\
    \ largest = 1\n        ^\n/tmp/tmpd3vur5if.swift:8:9: note: 'mut' previously declared\
    \ here\n    let mut i = 2\n        ^\n/tmp/tmpd3vur5if.swift:10:11: error: cannot\
    \ find 'i' in scope\n    while i <= n {\n          ^\n/tmp/tmpd3vur5if.swift:11:16:\
    \ error: cannot find 'i' in scope\n        if n % i == 0 {\n               ^\n\
    /tmp/tmpd3vur5if.swift:12:13: error: cannot find 'largest' in scope\n        \
    \    largest = i\n            ^~~~~~~\n/tmp/tmpd3vur5if.swift:12:23: error: cannot\
    \ find 'i' in scope\n            largest = i\n                      ^\n/tmp/tmpd3vur5if.swift:14:9:\
    \ error: cannot find 'i' in scope\n        i += 2\n        ^\n/tmp/tmpd3vur5if.swift:16:5:\
    \ error: cannot find 'largest' in scope\n    largest\n    ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound =\
    \ false\n    var factor = 2\n    var factorFound = false\n\n    for factor < n\
    \ {\n        if n % factor == 0 {\n            factorFound = true\n        } else\
    \ {\n            if !maxFactorFound {\n                maxFactorFound = true\n\
    \                maxFactor = factor\n            }\n        }\n        factor++\n\
    \    }\n\n    if !maxFactorFound {\n        return n\n    }\n\n    if maxFactor\
    \ == n {\n        return n\n    }\n\n    if maxFactor == 2 {\n        return 2\n\
    \    }\n\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpitsdg54v.swift:17:16: error: expected 'in' after for-each pattern\n\
    \    for factor < n {\n               ^\n/tmp/tmpitsdg54v.swift:17:16: error:\
    \ unary operator cannot be separated from its operand\n    for factor < n {\n\
    \               ^~\n                \n/tmp/tmpitsdg54v.swift:17:16: error: '<'\
    \ is not a prefix unary operator\n    for factor < n {\n               ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let max_prime\
    \ = sqrt(Double(n))\n    var max_factor = 1\n    for i in 2..<max_prime {\n  \
    \      if n % i == 0 {\n            max_factor = i\n            break\n      \
    \  }\n    }\n    return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmppsflamrj.swift:8:21: error: cannot find 'sqrt' in scope\n    let\
    \ max_prime = sqrt(Double(n))\n                    ^~~~\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let maxPrime =\
    \ Int(sqrt(Double(n)))\n    var factor = 1\n    for prime in 2..<maxPrime {\n\
    \        if n % prime == 0 {\n            factor *= prime\n            n /= prime\n\
    \        }\n    }\n    return factor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpih0rwy2u.swift:8:24: error: cannot find 'sqrt' in scope\n    let\
    \ maxPrime = Int(sqrt(Double(n)))\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let mut i = 2\n\
    \    let mut largest = 1\n    while i * i <= n {\n        if n % i == 0 {\n  \
    \          largest = i\n        }\n        i += 2\n    }\n    return largest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpz56xm31q.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 2\n\
    \            ^\n/tmp/tmpz56xm31q.swift:8:13: note: join the identifiers together\n\
    \    let mut i = 2\n        ~~~~^\n        muti\n/tmp/tmpz56xm31q.swift:8:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 2\n   \
    \     ~~~~^\n        mutI\n/tmp/tmpz56xm31q.swift:9:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut largest = 1\n            ^\n/tmp/tmpz56xm31q.swift:9:13: note: join\
    \ the identifiers together\n    let mut largest = 1\n        ~~~~^~~~~~~\n   \
    \     mutlargest\n/tmp/tmpz56xm31q.swift:9:13: note: join the identifiers together\
    \ with camel-case\n    let mut largest = 1\n        ~~~~^~~~~~~\n        mutLargest\n\
    /tmp/tmpz56xm31q.swift:9:9: error: invalid redeclaration of 'mut'\n    let mut\
    \ largest = 1\n        ^\n/tmp/tmpz56xm31q.swift:8:9: note: 'mut' previously declared\
    \ here\n    let mut i = 2\n        ^\n/tmp/tmpz56xm31q.swift:10:11: error: cannot\
    \ find 'i' in scope\n    while i * i <= n {\n          ^\n/tmp/tmpz56xm31q.swift:10:15:\
    \ error: cannot find 'i' in scope\n    while i * i <= n {\n              ^\n/tmp/tmpz56xm31q.swift:10:13:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \    while i * i <= n {\n            ^\n/tmp/tmpz56xm31q.swift:11:16: error: cannot\
    \ find 'i' in scope\n        if n % i == 0 {\n               ^\n/tmp/tmpz56xm31q.swift:12:13:\
    \ error: cannot find 'largest' in scope\n            largest = i\n           \
    \ ^~~~~~~\n/tmp/tmpz56xm31q.swift:12:23: error: cannot find 'i' in scope\n   \
    \         largest = i\n                      ^\n/tmp/tmpz56xm31q.swift:14:9: error:\
    \ cannot find 'i' in scope\n        i += 2\n        ^\n/tmp/tmpz56xm31q.swift:16:12:\
    \ error: cannot find 'largest' in scope\n    return largest\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    if maxFactorFound {\n        return maxFactor\n\
    \    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpo7l72euv/tmpo7l72euv.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c6dff3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c6dceab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c6dcea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c6dce97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7l72euv                        0x0000560c9ab223b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8c6e1df460 __libc_start_main +
    245

    6    tmpo7l72euv                        0x0000560c9ab21fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $0 : $1 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpqugh8xrs.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpqugh8xrs.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var largest = 1\n    var largestPrimeFactor = 1\n\
    \    for i := 2; i <= n / 2; i += 1 {\n        if n % i == 0 {\n            largest\
    \ = i\n            largestPrimeFactor = i\n        }\n    }\n    return largestPrimeFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpyu97cc4t.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n / 2; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpyu97cc4t.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n / 2; i +=\
    \ 1 {\n           ^\n/tmp/tmpyu97cc4t.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n / 2; i += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int(1)\n    var maxFactorFound = false\n    for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if maxFactorFound {\n     \
    \           return Int(factor)\n            }\n            maxFactorFound = true\n\
    \            maxFactor = factor\n        }\n    }\n    if maxFactorFound {\n \
    \       return Int(maxFactor)\n    }\n    return Int(1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpo0ka71sm.swift:10:20: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n     \
    \              ^~\n                   ...\n/tmp/tmpo0ka71sm.swift:10:26: error:\
    \ cannot find 'sqrt' in scope\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n\
    \                         ^~~~\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    if maxFactorFound {\n        return maxFactor\n\
    \    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpd1axbmib/tmpd1axbmib.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cd3785c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cd347cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cd347c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cd347b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd1axbmib                        0x000055d937cff3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b6cd3971460 __libc_start_main +
    245

    6    tmpd1axbmib                        0x000055d937cfefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpsllmwb63.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpsllmwb63.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = 2 // first prime factor\n    var\
    \ maxFactorIndex = 1 // index of maxFactor\n    for i := 2; i <= n; i++ {\n  \
    \      if n % i == 0 {\n            if maxFactor < i {\n                maxFactor\
    \ = i\n                maxFactorIndex = i\n            }\n        }\n    }\n \
    \   return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpkfowibtz.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpkfowibtz.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpkfowibtz.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    var factor = 2\n    var factorFound\
    \ = false\n    for factor <= n {\n        if n % factor == 0 {\n            factorFound\
    \ = true\n            if factor > maxFactor {\n                maxFactor = factor\n\
    \            }\n        }\n        factor++\n    }\n    if !factorFound {\n  \
    \      return maxFactor\n    }\n    if maxFactor == n {\n        return n\n  \
    \  }\n    if maxFactorFound {\n        return maxFactor\n    }\n    return largest_prime_factor(maxFactor)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpw931qdhv.swift:12:16: error: expected 'in' after for-each pattern\n\
    \    for factor <= n {\n               ^\n/tmp/tmpw931qdhv.swift:12:16: error:\
    \ unary operator cannot be separated from its operand\n    for factor <= n {\n\
    \               ^ ~\n                 \n/tmp/tmpw931qdhv.swift:12:16: error: '<='\
    \ is not a prefix unary operator\n    for factor <= n {\n               ^\n/tmp/tmpw931qdhv.swift:30:33:\
    \ error: missing argument label 'n:' in call\n    return largest_prime_factor(maxFactor)\n\
    \                                ^\n                                n: \n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var factor = 2\n    while n > 1 {\n        if n % factor == 0 {\n   \
    \         largest = factor\n        }\n        n /= factor\n        factor +=\
    \ 1\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp1s752fzp.swift:14:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= factor\n        ~ ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var largestPrimeFactor = 1\n    for i : Int in 2...n {\n        if n\
    \ % i == 0 {\n            if largest < i {\n                largest = i\n    \
    \            largestPrimeFactor = 1\n            } else {\n                largestPrimeFactor++\n\
    \            }\n        }\n    }\n    return largestPrimeFactor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpb9nnk39h.swift:16:35: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                largestPrimeFactor++\n               \
    \                   ^~\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpltli3tit/tmpltli3tit.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac41ba58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac41b74fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac41b74f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac41b74e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltli3tit                        0x000055c0b35053b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac41bc44460 __libc_start_main +
    245

    6    tmpltli3tit                        0x000055c0b3504fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                break\n\
    \            } else {\n                maxFactorFound = true\n               \
    \ maxFactor = factor\n            }\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpx3_2ohyq/tmpx3_2ohyq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60218e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60215dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60215da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60215d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx3_2ohyq                        0x0000561df28b5335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6021acf460 __libc_start_main +
    245

    6    tmpx3_2ohyq                        0x0000561df28b4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpltli3tit/tmpltli3tit.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac41ba58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac41b74fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac41b74f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac41b74e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltli3tit                        0x000055c0b35053b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac41bc44460 __libc_start_main +
    245

    6    tmpltli3tit                        0x000055c0b3504fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int\
    \ = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l:\
    \ Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var\
    \ q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n   \
    \ var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n\
    \    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int =\
    \ 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int\
    \ = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j:\
    \ Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var\
    \ n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n   \
    \ var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n\
    \    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int =\
    \ 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int\
    \ = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h:\
    \ Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var\
    \ l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n   \
    \ var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n\
    \    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int =\
    \ 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int\
    \ = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f:\
    \ Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var\
    \ j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n   \
    \ var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n\
    \    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int =\
    \ 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int\
    \ = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d:\
    \ Int = 0\n    var e: \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpswl5hacx.swift:105:11: error: expected type\n    var e: \n    \
    \      ^\n           <#type#>\n/tmp/tmpswl5hacx.swift:34:9: error: invalid redeclaration\
    \ of 'i'\n    var i: Int = 0\n        ^\n/tmp/tmpswl5hacx.swift:9:9: note: 'i'\
    \ previously declared here\n    var i: Int = 0\n        ^\n/tmp/tmpswl5hacx.swift:35:9:\
    \ error: invalid redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmpswl5hacx.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmpswl5hacx.swift:36:9:\
    \ error: invalid redeclaration of 'k'\n    var k: Int = 0\n        ^\n/tmp/tmpswl5hacx.swift:11:9:\
    \ note: 'k' previously declared here\n    var k: Int = 0\n        ^\n/tmp/tmpswl5hacx.swift:37:9:\
    \ error: invalid redeclaration of 'l'\n    var l: Int = 0\n        ^\n/tmp/tmpswl5hacx.swift:12:9:\
    \ note: 'l' previously declared here\n    var l: Int = 0\n        ^\n/tmp/tmpswl5hacx.swift:38:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpswl5hacx.swift:13:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpswl5hacx.swift:39:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmpswl5hacx.swift:14:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmpswl5hacx.swift:40:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmpswl5hacx.swift:15:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmpswl5hacx.swift:41:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmpswl5hacx.swift:16:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmpswl5hacx.swift:42:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmpswl5hacx.swift:17:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmpswl5hacx.swift:43:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmpswl5hacx.swift:18:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmpswl5hacx.swift:44:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var factor = 2\n    while n > 1 {\n        if n % factor == 0 {\n   \
    \         largest = factor\n        }\n        factor++\n    }\n    return largest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpwi1d2feg.swift:14:15: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        factor++\n              ^~\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    if maxFactorFound {\n        return maxFactor\n\
    \    }\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmp066akyjo/tmp066akyjo.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07bc749c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07bc440b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07bc440988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07bc43f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp066akyjo                        0x00005597a621d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b07bc935460 __libc_start_main +
    245

    6    tmp066akyjo                        0x00005597a621cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound =\
    \ false\n\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return factor\n            }\n\n    \
    \        maxFactorFound = true\n            maxFactor = factor\n        }\n  \
    \  }\n\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpgpvfix7s/tmpgpvfix7s.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefb13f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefb10e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefb10e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefb10e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgpvfix7s                        0x000055d15ff543b0 <unavailable> + 5040

    5    libc.so.6                          0x00002aefb15de460 __libc_start_main +
    245

    6    tmpgpvfix7s                        0x000055d15ff53fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound =\
    \ false\n    var maxFactorFoundInPrimes = false\n    var primes = Set<Int>()\n\
    \    var primesFound = Set<Int>()\n    var primesFoundInPrimes = Set<Int>()\n\n\
    \    for prime in 2..<n {\n        if primes.contains(prime) {\n            primesFound.insert(prime)\n\
    \            primesFoundInPrimes.insert(prime)\n        }\n\n        if primesFoundInPrimes.contains(prime)\
    \ {\n            if maxFactorFoundInPrimes {\n                maxFactorFoundInPrimes\
    \ = false\n            }\n            maxFactorFoundInPrimes = true\n        \
    \    maxFactorFound = true\n            maxFactor = prime\n        }\n\n     \
    \   if maxFactorFound {\n            if prime > maxFactor {\n                maxFactor\
    \ = prime\n            }\n        }\n    }\n\n    if maxFactorFound {\n      \
    \  return maxFactor\n    }\n\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp4pho7azn/tmp4pho7azn.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a65e29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a65b20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a65b20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a65b1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4pho7azn                        0x000055ac36f24495 <unavailable> + 5269

    5    libc.so.6                          0x00002b1a66015460 __libc_start_main +
    245

    6    tmp4pho7azn                        0x000055ac36f24149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n        \
    \    if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpzpe3yme0.swift:15:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpzpe3yme0.swift:15:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpzpe3yme0.swift:15:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpp1xma70o/tmpp1xma70o.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd2e225c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd2df1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd2df1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd2df1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1xma70o                        0x00005564c270e3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002abd2e411460 __libc_start_main +
    245

    6    tmpp1xma70o                        0x00005564c270dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    var max_factor_power: Int = 0\n\n    for i := 2; i <= n; i++ {\n\
    \        if n % i == 0 {\n            var new_factor: Int = i\n            var\
    \ new_factor_index: Int = 0\n            var new_factor_power: Int = 0\n\n   \
    \         for j := 0; j < i; j++ {\n                if j == i {\n            \
    \        new_factor_index = 0\n                    new_factor_power = 1\n    \
    \            } else {\n                    new_factor_index += 1\n           \
    \         new_factor_power *= j\n                }\n                if new_factor_index\
    \ > max_factor_index {\n                    max_factor_index = new_factor_index\n\
    \                    max_factor = new_factor\n                    max_factor_power\
    \ = new_factor_power\n                }\n            }\n        }\n    }\n\n \
    \   return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpoic4wlbl.swift:16:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpoic4wlbl.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpoic4wlbl.swift:16:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n/tmp/tmpoic4wlbl.swift:22:20:\
    \ error: expected type\n            for j := 0; j < i; j++ {\n               \
    \    ^\n                    <#type#>\n/tmp/tmpoic4wlbl.swift:22:20: error: expected\
    \ 'in' after for-each pattern\n            for j := 0; j < i; j++ {\n        \
    \           ^\n/tmp/tmpoic4wlbl.swift:22:20: error: expected Sequence expression\
    \ for for-each loop\n            for j := 0; j < i; j++ {\n                  \
    \ ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var result = 1\n\
    \    var factor = 2\n    while n > 1 {\n        if n % factor == 0 {\n       \
    \     n /= factor\n        } else {\n            result += 1\n            factor\
    \ = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp5ud3xk7_.swift:12:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= factor\n            ~ ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpsllmwb63.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpsllmwb63.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpsllmwb63.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpsllmwb63.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound =\
    \ false\n    var maxFactorFoundInt = Int()\n\n    for factor in 2...n {\n    \
    \    if n % factor == 0 {\n            if maxFactorFound == false {\n        \
    \        maxFactorFound = true\n                maxFactorFoundInt = factor\n \
    \           } else {\n                if maxFactorFoundInt > factor {\n      \
    \              maxFactorFoundInt = factor\n                }\n            }\n\
    \        }\n    }\n\n    if maxFactorFound == true {\n        return maxFactorFoundInt\n\
    \    } else {\n        return n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmppn_vpiwe/tmppn_vpiwe.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5237e7ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5237b75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5237b75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5237b747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppn_vpiwe                        0x000055ebc02b3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b523806a460 __libc_start_main +
    245

    6    tmppn_vpiwe                        0x000055ebc02b2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var prime: Int = 0\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            largest = factor\n            prime = 1\n        }\n   \
    \     if largest % factor == 0 {\n            prime *= factor\n        }\n   \
    \ }\n    return prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpe92boh78/tmpe92boh78.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e45697c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e4538eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e4538e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e4538d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe92boh78                        0x000055c6ba77f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b0e45883460 __libc_start_main +
    245

    6    tmpe92boh78                        0x000055c6ba77efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var largestPrimeFactor = 1\n    for number in 2...n {\n        if number\
    \ % 2 == 0 {\n            largestPrimeFactor *= number\n        }\n        if\
    \ number % 3 == 0 {\n            largestPrimeFactor *= number\n        }\n   \
    \     if number % 5 == 0 {\n            largestPrimeFactor *= number\n       \
    \ }\n        if number % 7 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 11 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 13 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 17 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 19 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 23 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 29 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 31 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 37 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 41 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 43 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 47 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 53 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 59 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 61 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 67 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 71 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 73 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 79 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 83 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 89 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 97 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 103 == 0 {\n            largestPrimeFactor *=\
    \ number\n        }\n        if number % 107 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 111 == 0 {\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp3n39oe8a.swift:113:45: error: expected '}' at end of brace statement\n\
    assert(largest_prime_factor(n: 13195) == 29)\n                               \
    \             ^\n/tmp/tmp3n39oe8a.swift:10:25: note: to match this opening '{'\n\
    \    for number in 2...n {\n                        ^\n/tmp/tmp3n39oe8a.swift:113:45:\
    \ error: expected '}' at end of brace statement\nassert(largest_prime_factor(n:\
    \ 13195) == 29)\n                                            ^\n/tmp/tmp3n39oe8a.swift:7:42:\
    \ note: to match this opening '{'\nfunc largest_prime_factor(n: Int) -> Int {\n\
    \                                         ^\n/tmp/tmp3n39oe8a.swift:97:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp3n39oe8a.swift:8:9:\
    \ warning: initialization of variable 'largest' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var largest = 1\n    ~~~~^~~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpltli3tit/tmpltli3tit.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac41ba58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac41b74fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac41b74f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac41b74e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltli3tit                        0x000055c0b35053b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac41bc44460 __libc_start_main +
    245

    6    tmpltli3tit                        0x000055c0b3504fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let max = (2..<n).reduce(max)\
    \ {\n        max($0, $1)\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpstuxtepo.swift:9:9: error: cannot convert value of type 'Int' to\
    \ closure result type '(Int, Int) -> Int'\n        max($0, $1)\n        ^~~~~~~~~~~\n\
    /tmp/tmpstuxtepo.swift:9:13: error: cannot convert value of type '(Int, Int) ->\
    \ Int' to expected argument type 'Int'\n        max($0, $1)\n            ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int(1)\n    var maxFactorFound = false\n    for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if !maxFactorFound {\n    \
    \            maxFactor = factor\n                maxFactorFound = true\n     \
    \       } else {\n                if factor > maxFactor {\n                  \
    \  maxFactor = factor\n                }\n            }\n        }\n    }\n  \
    \  return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp3ihujs30.swift:10:20: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n     \
    \              ^~\n                   ...\n/tmp/tmp3ihujs30.swift:10:26: error:\
    \ cannot find 'sqrt' in scope\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n\
    \                         ^~~~\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    for divisor in 2...n {\n        if n % divisor == 0 {\n            largest\
    \ = divisor\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpoe2l236w/tmpoe2l236w.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4309c87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b430997eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b430997e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b430997d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoe2l236w                        0x0000562f125d3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4309e73460 __libc_start_main +
    245

    6    tmpoe2l236w                        0x0000562f125d2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    var factor = 2\n    while !maxFactorFound\
    \ {\n        if n % factor == 0 {\n            maxFactorFound = true\n       \
    \     maxFactor = factor\n        }\n        factor++\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpmrgnbi6z.swift:16:15: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        factor++\n              ^~\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let primes = prime_factors(n)\n\
    \    return primes.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp_ta67bhz.swift:8:18: error: cannot find 'prime_factors' in scope\n\
    \    let primes = prime_factors(n)\n                 ^~~~~~~~~~~~~\n/tmp/tmp_ta67bhz.swift:9:26:\
    \ error: generic parameter 'T' could not be inferred\n    return primes.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                         ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            } else {\n                maxFactorFound = true\n      \
    \          maxFactor = factor\n            }\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp474rjfve/tmp474rjfve.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b535534bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5355042b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5355042988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53550417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp474rjfve                        0x000055aff1fce3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5355537460 __libc_start_main +
    245

    6    tmp474rjfve                        0x000055aff1fcdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpsllmwb63.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpsllmwb63.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var largest = 1\n    var largestPrimeFactor = 1\n\
    \    for i := 2; i <= n / 2; i += 1 {\n        if n % i == 0 {\n            if\
    \ largest == 1 {\n                largest = i\n                largestPrimeFactor\
    \ = i\n            } else {\n                if largestPrimeFactor == i {\n  \
    \                  largestPrimeFactor = largest\n                } else {\n  \
    \                  largestPrimeFactor = i\n                }\n            }\n\
    \        }\n    }\n    return largestPrimeFactor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp5kjkhhmq.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n / 2; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp5kjkhhmq.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n / 2; i +=\
    \ 1 {\n           ^\n/tmp/tmp5kjkhhmq.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n / 2; i += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largestPrimeFactor\
    \ = Int(1)\n    var largestPrimeFactorIsPrime = true\n    var largestPrimeFactorIsPrime2\
    \ = true\n    var largestPrimeFactorIsPrime3 = true\n    var largestPrimeFactorIsPrime4\
    \ = true\n    var largestPrimeFactorIsPrime5 = true\n    var largestPrimeFactorIsPrime6\
    \ = true\n    var largestPrimeFactorIsPrime7 = true\n    var largestPrimeFactorIsPrime8\
    \ = true\n    var largestPrimeFactorIsPrime9 = true\n    var largestPrimeFactorIsPrime10\
    \ = true\n    var largestPrimeFactorIsPrime11 = true\n    var largestPrimeFactorIsPrime12\
    \ = true\n    var largestPrimeFactorIsPrime13 = true\n    var largestPrimeFactorIsPrime14\
    \ = true\n    var largestPrimeFactorIsPrime15 = true\n    var largestPrimeFactorIsPrime16\
    \ = true\n    var largestPrimeFactorIsPrime17 = true\n    var largestPrimeFactorIsPrime18\
    \ = true\n    var largestPrimeFactorIsPrime19 = true\n    var largestPrimeFactorIsPrime20\
    \ = true\n    var largestPrimeFactorIsPrime21 = true\n    var largestPrimeFactorIsPrime22\
    \ = true\n    var largestPrimeFactorIsPrime23 = true\n    var largestPrimeFactorIsPrime24\
    \ = true\n    var largestPrimeFactorIsPrime25 = true\n    var largestPrimeFactorIsPrime26\
    \ = true\n    var largestPrimeFactorIsPrime27 = true\n    var largestPrimeFactorIsPrime28\
    \ = true\n    var largestPrimeFactorIsPrime29 = true\n    var largestPrimeFactorIsPrime30\
    \ = true\n    var largestPrimeFactorIsPrime31 = true\n    var largestPrimeFactorIsPrime32\
    \ = true\n    var largestPrimeFactorIsPrime33 = true\n    var largestPrimeFactorIsPrime34\
    \ = true\n    var largestPrimeFactorIsPrime35 = true\n    var largestPrimeFactorIsPrime36\
    \ = true\n    var largestPrimeFactorIsPrime37 = true\n    var largestPrimeFactorIsPrime38\
    \ = true\n    var largestPrimeFactorIsPrime39 = true\n    var largestPrimeFactorIsPrime40\
    \ = true\n    var largestPrimeFactorIsPrime41 = true\n    var largestPrimeFactorIsPri\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp0f3wwybx.swift:50:9: error: type annotation missing in pattern\n\
    \    var largestPrimeFactorIsPri\n        ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            } else {\n                maxFactorFound = true\n      \
    \          maxFactor = factor\n            }\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp474rjfve/tmp474rjfve.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b535534bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5355042b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5355042988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53550417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp474rjfve                        0x000055aff1fce3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5355537460 __libc_start_main +
    245

    6    tmp474rjfve                        0x000055aff1fcdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpltli3tit/tmpltli3tit.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac41ba58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac41b74fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac41b74f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac41b74e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltli3tit                        0x000055c0b35053b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac41bc44460 __libc_start_main +
    245

    6    tmpltli3tit                        0x000055c0b3504fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let primes = prime_factors(n)\n\
    \    return primes.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp_ta67bhz.swift:8:18: error: cannot find 'prime_factors' in scope\n\
    \    let primes = prime_factors(n)\n                 ^~~~~~~~~~~~~\n/tmp/tmp_ta67bhz.swift:9:26:\
    \ error: generic parameter 'T' could not be inferred\n    return primes.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                         ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound == false {\n           \
    \     maxFactorFound = true\n                maxFactor = factor\n            }\
    \ else {\n                if factor > maxFactor {\n                    maxFactorFound\
    \ = true\n                    maxFactor = factor\n                }\n        \
    \    }\n        }\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpzeuivto_/tmpzeuivto_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b422e496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b422e18db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b422e18d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b422e18c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzeuivto_                        0x00005593d76c7335 <unavailable> + 4917

    5    libc.so.6                          0x00002b422e682460 __libc_start_main +
    245

    6    tmpzeuivto_                        0x00005593d76c6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $0 : $1 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpqugh8xrs.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpqugh8xrs.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largestPrimeFactor\
    \ = Int(1)\n    var largestPrimeFactorFound = false\n    for factor in 2...n {\n\
    \        if n % factor == 0 {\n            if !largestPrimeFactorFound {\n   \
    \             largestPrimeFactorFound = true\n                largestPrimeFactor\
    \ = factor\n            }\n            else {\n                if factor > largestPrimeFactor\
    \ {\n                    largestPrimeFactorFound = true\n                    largestPrimeFactor\
    \ = factor\n                }\n            }\n        }\n    }\n    return largestPrimeFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpapiutffx/tmpapiutffx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acec7640c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acec7337b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acec7337988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acec73367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpapiutffx                        0x00005631e1472335 <unavailable> + 4917

    5    libc.so.6                          0x00002acec782c460 __libc_start_main +
    245

    6    tmpapiutffx                        0x00005631e1471fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            } else {\n                maxFactorFound = true\n      \
    \          maxFactor = factor\n            }\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    } else {\n        return 0\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpre13f2r1/tmpre13f2r1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81c8ca8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81c899fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81c899f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81c899e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpre13f2r1                        0x000056142660a3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b81c8e94460 __libc_start_main +
    245

    6    tmpre13f2r1                        0x0000561426609fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var largestPrimeFactor = 1\n    for number in 2...n {\n        if number\
    \ % 2 == 0 {\n            continue\n        }\n        for prime in 2...number\
    \ {\n            if number % prime == 0 {\n                break\n           \
    \ }\n        }\n        if prime > largestPrimeFactor {\n            largestPrimeFactor\
    \ = prime\n            largest = number\n        }\n    }\n    return largest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp3n2avj2m.swift:19:12: error: cannot find 'prime' in scope\n   \
    \     if prime > largestPrimeFactor {\n           ^~~~~\n/tmp/tmp3n2avj2m.swift:20:34:\
    \ error: cannot find 'prime' in scope\n            largestPrimeFactor = prime\n\
    \                                 ^~~~~\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $0 : $1 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpqugh8xrs.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpqugh8xrs.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max: Int =\
    \ 0\n    var i: Int = 0\n    for i = 2; i <= n / 2; i += 1 {\n        if n % i\
    \ == 0 {\n            max = i\n            break\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp28wcan4x.swift:10:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= n / 2; i += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if !maxFactorFound\
    \ {\n                maxFactor = factor\n                maxFactorFound = true\n\
    \            } else {\n                if maxFactor != factor {\n            \
    \        return maxFactor\n                }\n            }\n        }\n    }\n\
    \    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpds7jispc/tmpds7jispc.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78653e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78650ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78650dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78650dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpds7jispc                        0x0000564c0b750335 <unavailable> + 4917

    5    libc.so.6                          0x00002b78655d2460 __libc_start_main +
    245

    6    tmpds7jispc                        0x0000564c0b74ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var prime = 1\n    for i := 2; i <= n / prime; i++ {\n        if n %\
    \ i == 0 {\n            largest = i\n            prime = 1\n        } else {\n\
    \            prime *= i\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpl6let0li.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n / prime; i++ {\n           ^\n            <#type#>\n/tmp/tmpl6let0li.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n / prime;\
    \ i++ {\n           ^\n/tmp/tmpl6let0li.swift:10:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 2; i <= n / prime; i++ {\n      \
    \     ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    var maxFactorFoundIndex = -1\n    var i = 2\n    for ; !maxFactorFound &&\
    \ i < n; i++ {\n        if n % i == 0 {\n            if maxFactorFoundIndex ==\
    \ -1 || maxFactorFoundIndex > i {\n                maxFactorFound = true\n   \
    \             maxFactorFoundIndex = i\n            }\n        }\n    }\n    if\
    \ maxFactorFound {\n        return maxFactorFoundIndex\n    } else {\n       \
    \ return n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp2i2mqadz.swift:15:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for ; !maxFactorFound && i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let limit = sqrt(Double(n))\n\
    \    var factor = 2\n    var prime: Int = 0\n    while factor < limit {\n    \
    \    if n % factor == 0 {\n            prime = factor\n            break\n   \
    \     }\n        factor += 1\n    }\n    return prime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmprs10jhji.swift:8:17: error: cannot find 'sqrt' in scope\n    let\
    \ limit = sqrt(Double(n))\n                ^~~~\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largestPrimeFactor:\
    \ Int = 0\n    var largestPrimeFactorCount: Int = 0\n    for number in 1...n {\n\
    \        if number % 2 == 0 {\n            if number % largestPrimeFactor == 0\
    \ {\n                largestPrimeFactor = number\n                largestPrimeFactorCount\
    \ = 1\n            } else {\n                largestPrimeFactorCount = largestPrimeFactorCount\
    \ + 1\n                if largestPrimeFactorCount == 2 {\n                   \
    \ largestPrimeFactor = number\n                }\n            }\n        } else\
    \ {\n            if number % largestPrimeFactor == 0 {\n                largestPrimeFactor\
    \ = number\n                largestPrimeFactorCount = 1\n            } else {\n\
    \                largestPrimeFactorCount = largestPrimeFactorCount + 1\n     \
    \           if largestPrimeFactorCount == 2 {\n                    largestPrimeFactor\
    \ = number\n                }\n            }\n        }\n    }\n    return largestPrimeFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb90a78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb9076f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aeb9076f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aeb9076f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aeb9076ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpd_0qtbwd                        0x000055885d77c93e <unavailable> + 6462

    6    tmpd_0qtbwd                        0x000055885d77c2c8 <unavailable> + 4808

    7    libc.so.6                          0x00002aeb90c64460 __libc_start_main +
    245

    8    tmpd_0qtbwd                        0x000055885d77bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let primes = primes_up_to_n(n:\
    \ n)\n    return primes.reduce(max) { $0 > $1 ? $0 : $1 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpghoceky3.swift:8:18: error: cannot find 'primes_up_to_n' in scope\n\
    \    let primes = primes_up_to_n(n: n)\n                 ^~~~~~~~~~~~~~\n/tmp/tmpghoceky3.swift:9:26:\
    \ error: generic parameter 'T' could not be inferred\n    return primes.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }\n                         ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $0 : $1 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpqugh8xrs.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpqugh8xrs.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = 2 // start at 2 since 2 is the largest\
    \ factor\n    var maxFactorFound = false // start at false since 2 is the largest\
    \ factor\n    for factor in 2...n {\n        if n % factor == 0 {\n          \
    \  if maxFactorFound {\n                // factor has been found before\n    \
    \            return factor\n            }\n            maxFactorFound = true\n\
    \            maxFactor = factor\n        }\n    }\n    return maxFactor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpbena0i72/tmpbena0i72.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b592a5bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b592a2b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b592a2b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b592a2b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbena0i72                        0x000055de99d583b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b592a7a6460 __libc_start_main +
    245

    6    tmpbena0i72                        0x000055de99d57fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var maxFactor: Int = 0\n    var maxFactorFound\
    \ = false\n    var i: Int\n    var j: Int\n\n    for i = 2; i <= n / 2; i += 1\
    \ {\n        if n % i == 0 {\n            if maxFactorFound {\n              \
    \  maxFactorFound = false\n            } else {\n                maxFactor = i\n\
    \                maxFactorFound = true\n            }\n        }\n    }\n\n  \
    \  if maxFactorFound {\n        return maxFactor\n    } else {\n        return\
    \ n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp7v6lmivu.swift:17:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= n / 2; i += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpp1xma70o/tmpp1xma70o.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd2e225c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd2df1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd2df1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd2df1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1xma70o                        0x00005564c270e3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002abd2e411460 __libc_start_main +
    245

    6    tmpp1xma70o                        0x00005564c270dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
